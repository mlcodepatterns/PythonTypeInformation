[{"lineNumber": 31, "col_offset": 0, "nodeName": "typekw", "type": "str"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "PY3", "type": "bool"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "test", "type": "Any"}, {"lineNumber": 186, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "six", "type": "module"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "inp_a", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "inp_b", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "out", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "inp_a", "type": "Tuple[int, int]"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "inp_b", "type": "Tuple[int, int, int]"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "err", "type": "str"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "inp_a", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "inp_b", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "empty_nt", "type": "Type[`namedtuple-empty_nt-`]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "named_tuple", "type": "Type[`namedtuple-A-b-c`]"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "structure", "type": "numpy.ndarray"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 157, "col_offset": 4, "nodeName": "structure", "type": "str"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 163, "col_offset": 4, "nodeName": "structure", "type": "str"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 165, "col_offset": 4, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 187, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 40, "col_offset": 10, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 40, "col_offset": 61, "nodeName": "inp_a", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 40, "col_offset": 68, "nodeName": "inp_b", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 41, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 43, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 47, "col_offset": 9, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 49, "col_offset": 13, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 49, "col_offset": 41, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "assert_same_structure", "type": "Callable[..., Any]"}, {"lineNumber": 52, "col_offset": 31, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 52, "col_offset": 35, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "b", "type": "Any"}, {"lineNumber": 63, "col_offset": 13, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 63, "col_offset": 46, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 63, "col_offset": 53, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "assert_same_structure", "type": "Callable[..., Any]"}, {"lineNumber": 65, "col_offset": 31, "nodeName": "output", "type": "Any"}, {"lineNumber": 65, "col_offset": 39, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "sess", "type": "Any"}, {"lineNumber": 75, "col_offset": 6, "nodeName": "output_np", "type": "Any"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 91, "col_offset": 13, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 91, "col_offset": 42, "nodeName": "inp_a", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 91, "col_offset": 49, "nodeName": "inp_b", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 92, "col_offset": 37, "nodeName": "output", "type": "Any"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "assertNotEqual", "type": "Any"}, {"lineNumber": 112, "col_offset": 18, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 129, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable[..., Any]"}, {"lineNumber": 129, "col_offset": 38, "nodeName": "mess", "type": "List[Union[str, `namedtuple-A-b-c`, Dict[str, Union[int, List[Union[int, collections.OrderedDict[str, int]]]]], int]]"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 130, "col_offset": 21, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 148, "col_offset": 18, "nodeName": "pack_iterable_as", "type": "Callable[..., Any]"}, {"lineNumber": 148, "col_offset": 40, "nodeName": "structure_of_mess", "type": "List[Union[int, `namedtuple-A-b-c`, Dict[str, Union[int, List[Union[int, collections.OrderedDict[str, int]]]]], str]]"}, {"lineNumber": 148, "col_offset": 59, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 149, "col_offset": 21, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 149, "col_offset": 34, "nodeName": "mess", "type": "List[Union[str, `namedtuple-A-b-c`, Dict[str, Union[int, List[Union[int, collections.OrderedDict[str, int]]]]], int]]"}, {"lineNumber": 152, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 153, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable[..., Any]"}, {"lineNumber": 153, "col_offset": 38, "nodeName": "structure", "type": "numpy.ndarray"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 158, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable[..., Any]"}, {"lineNumber": 158, "col_offset": 38, "nodeName": "structure", "type": "str"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 164, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable[..., Any]"}, {"lineNumber": 164, "col_offset": 38, "nodeName": "structure", "type": "str"}, {"lineNumber": 165, "col_offset": 18, "nodeName": "pack_iterable_as", "type": "Callable[..., Any]"}, {"lineNumber": 165, "col_offset": 51, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 166, "col_offset": 21, "nodeName": "structure", "type": "str"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 187, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 40, "col_offset": 10, "nodeName": "nest", "type": "module"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 41, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 42, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 43, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 43, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 49, "col_offset": 13, "nodeName": "nest", "type": "module"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "nest", "type": "module"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 53, "col_offset": 36, "nodeName": "a", "type": "Any"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 54, "col_offset": 36, "nodeName": "a", "type": "Any"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 58, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 58, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 59, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 60, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 60, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 61, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 63, "col_offset": 13, "nodeName": "nest", "type": "module"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "nest", "type": "module"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 66, "col_offset": 26, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 66, "col_offset": 44, "nodeName": "output", "type": "Any"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 67, "col_offset": 44, "nodeName": "output", "type": "Any"}, {"lineNumber": 74, "col_offset": 9, "nodeName": "test_session", "type": "Any"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "run", "type": "Any"}, {"lineNumber": 75, "col_offset": 27, "nodeName": "output", "type": "Any"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 76, "col_offset": 24, "nodeName": "output_np", "type": "Any"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 78, "col_offset": 24, "nodeName": "output_np", "type": "Any"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 85, "col_offset": 45, "nodeName": "err", "type": "str"}, {"lineNumber": 86, "col_offset": 6, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 86, "col_offset": 35, "nodeName": "inp_a", "type": "Tuple[int, int]"}, {"lineNumber": 86, "col_offset": 42, "nodeName": "inp_b", "type": "Tuple[int, int, int]"}, {"lineNumber": 91, "col_offset": 13, "nodeName": "nest", "type": "module"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 95, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 95, "col_offset": 33, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 97, "col_offset": 6, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 100, "col_offset": 18, "nodeName": "x", "type": "Any"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 103, "col_offset": 34, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 105, "col_offset": 21, "nodeName": "empty_nt", "type": "Type[`namedtuple-empty_nt-`]"}, {"lineNumber": 105, "col_offset": 33, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 105, "col_offset": 42, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 108, "col_offset": 28, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 108, "col_offset": 37, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 112, "col_offset": 18, "nodeName": "collections", "type": "module"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "named_tuple", "type": "Type[`namedtuple-A-b-c`]"}, {"lineNumber": 129, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "named_tuple", "type": "Type[`namedtuple-A-b-c`]"}, {"lineNumber": 148, "col_offset": 18, "nodeName": "nest", "type": "module"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 152, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 153, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 154, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 158, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 159, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 159, "col_offset": 25, "nodeName": "flattened", "type": "Any"}, {"lineNumber": 164, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 165, "col_offset": 18, "nodeName": "nest", "type": "module"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 169, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 169, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 171, "col_offset": 6, "nodeName": "pack_iterable_as", "type": "Callable[..., Any]"}, {"lineNumber": 174, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 176, "col_offset": 6, "nodeName": "pack_iterable_as", "type": "Callable[..., Any]"}, {"lineNumber": 179, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 182, "col_offset": 6, "nodeName": "pack_iterable_as", "type": "Callable[..., Any]"}, {"lineNumber": 187, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 40, "col_offset": 43, "nodeName": "string", "type": "Any"}, {"lineNumber": 40, "col_offset": 52, "nodeName": "repeats", "type": "Any"}, {"lineNumber": 42, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 43, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 49, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 53, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 53, "col_offset": 36, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 54, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 54, "col_offset": 36, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 58, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 58, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 59, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 60, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 60, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 61, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 63, "col_offset": 37, "nodeName": "x1", "type": "Any"}, {"lineNumber": 63, "col_offset": 42, "nodeName": "x2", "type": "Any"}, {"lineNumber": 66, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "randn", "type": "Any"}, {"lineNumber": 70, "col_offset": 39, "nodeName": "randn", "type": "Any"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "randn", "type": "Any"}, {"lineNumber": 71, "col_offset": 39, "nodeName": "randn", "type": "Any"}, {"lineNumber": 74, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "sess", "type": "Any"}, {"lineNumber": 75, "col_offset": 45, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 86, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 91, "col_offset": 35, "nodeName": "a", "type": "Any"}, {"lineNumber": 91, "col_offset": 39, "nodeName": "b", "type": "Any"}, {"lineNumber": 95, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 97, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "x", "type": "Any"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "nest", "type": "module"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "nest", "type": "module"}, {"lineNumber": 105, "col_offset": 33, "nodeName": "nest", "type": "module"}, {"lineNumber": 105, "col_offset": 45, "nodeName": "empty_nt", "type": "Type[`namedtuple-empty_nt-`]"}, {"lineNumber": 108, "col_offset": 28, "nodeName": "nest", "type": "module"}, {"lineNumber": 169, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 171, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 174, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 176, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 179, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 182, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 53, "col_offset": 21, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 54, "col_offset": 21, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "random", "type": "Any"}, {"lineNumber": 70, "col_offset": 39, "nodeName": "random", "type": "Any"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "random", "type": "Any"}, {"lineNumber": 71, "col_offset": 39, "nodeName": "random", "type": "Any"}, {"lineNumber": 77, "col_offset": 24, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 77, "col_offset": 46, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 79, "col_offset": 24, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 79, "col_offset": 46, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 86, "col_offset": 28, "nodeName": "a", "type": "Any"}, {"lineNumber": 86, "col_offset": 32, "nodeName": "b", "type": "Any"}, {"lineNumber": 119, "col_offset": 16, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 70, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 34, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 77, "col_offset": 56, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 79, "col_offset": 34, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 79, "col_offset": 56, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 119, "col_offset": 16, "nodeName": "collections", "type": "module"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "collections", "type": "module"}]