[{"lineNumber": 26, "col_offset": 15, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 26, "col_offset": 15, "nodeName": "test", "type": "Any"}, {"lineNumber": 282, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 26, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "input_", "type": "Any"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "_", "type": "Any"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "err", "type": "str"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "input_", "type": "Any"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "saver", "type": "Any"}, {"lineNumber": 120, "col_offset": 4, "nodeName": "input_", "type": "Any"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "saver", "type": "Any"}, {"lineNumber": 142, "col_offset": 4, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 167, "col_offset": 4, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 227, "col_offset": 4, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 256, "col_offset": 4, "nodeName": "linear", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 276, "col_offset": 4, "nodeName": "var_map", "type": "Dict[str, Any]"}, {"lineNumber": 283, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 29, "col_offset": 13, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 35, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "input_", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 43, "col_offset": 40, "nodeName": "s1", "type": "Any"}, {"lineNumber": 44, "col_offset": 6, "nodeName": "v1", "type": "Any"}, {"lineNumber": 45, "col_offset": 56, "nodeName": "s2", "type": "Any"}, {"lineNumber": 46, "col_offset": 6, "nodeName": "v2", "type": "Any"}, {"lineNumber": 47, "col_offset": 6, "nodeName": "v3", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "assertFalse", "type": "Any"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "assertFalse", "type": "Any"}, {"lineNumber": 63, "col_offset": 40, "nodeName": "s1", "type": "Any"}, {"lineNumber": 64, "col_offset": 6, "nodeName": "v1", "type": "Any"}, {"lineNumber": 65, "col_offset": 6, "nodeName": "v2", "type": "Any"}, {"lineNumber": 67, "col_offset": 19, "nodeName": "get_normalized_variable_map", "type": "Callable[..., Any]"}, {"lineNumber": 67, "col_offset": 51, "nodeName": "s1", "type": "Any"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 71, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "assertIs", "type": "Any"}, {"lineNumber": 72, "col_offset": 39, "nodeName": "v1", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "assertIs", "type": "Any"}, {"lineNumber": 73, "col_offset": 39, "nodeName": "v2", "type": "Any"}, {"lineNumber": 76, "col_offset": 41, "nodeName": "s1", "type": "Any"}, {"lineNumber": 81, "col_offset": 40, "nodeName": "s3", "type": "Any"}, {"lineNumber": 82, "col_offset": 6, "nodeName": "_", "type": "Any"}, {"lineNumber": 86, "col_offset": 6, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 88, "col_offset": 19, "nodeName": "get_normalized_variable_map", "type": "Callable[..., Any]"}, {"lineNumber": 88, "col_offset": 51, "nodeName": "s2", "type": "Any"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 91, "col_offset": 33, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 92, "col_offset": 33, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "assertIs", "type": "Any"}, {"lineNumber": 93, "col_offset": 47, "nodeName": "v1", "type": "Any"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "assertIs", "type": "Any"}, {"lineNumber": 94, "col_offset": 47, "nodeName": "v2", "type": "Any"}, {"lineNumber": 97, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 97, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 98, "col_offset": 11, "nodeName": "Conv2D", "type": "Type[sonnet.python.modules.conv.Conv2D]"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 99, "col_offset": 9, "nodeName": "input_", "type": "Any"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "get_normalized_variable_map", "type": "Callable[..., Any]"}, {"lineNumber": 101, "col_offset": 51, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "assertIs", "type": "Any"}, {"lineNumber": 106, "col_offset": 39, "nodeName": "w", "type": "Any"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "assertIs", "type": "Any"}, {"lineNumber": 107, "col_offset": 39, "nodeName": "b", "type": "Any"}, {"lineNumber": 110, "col_offset": 40, "nodeName": "s1", "type": "Any"}, {"lineNumber": 114, "col_offset": 12, "nodeName": "get_saver", "type": "Callable[..., Any]"}, {"lineNumber": 114, "col_offset": 26, "nodeName": "s1", "type": "Any"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "assertIsInstance", "type": "Any"}, {"lineNumber": 115, "col_offset": 26, "nodeName": "saver", "type": "Any"}, {"lineNumber": 115, "col_offset": 33, "nodeName": "Saver", "type": "Any"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 117, "col_offset": 25, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 120, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 120, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 121, "col_offset": 11, "nodeName": "Conv2D", "type": "Type[sonnet.python.modules.conv.Conv2D]"}, {"lineNumber": 122, "col_offset": 4, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 122, "col_offset": 9, "nodeName": "input_", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "get_saver", "type": "Callable[..., Any]"}, {"lineNumber": 123, "col_offset": 26, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "assertIsInstance", "type": "Any"}, {"lineNumber": 124, "col_offset": 26, "nodeName": "saver", "type": "Any"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "Saver", "type": "Any"}, {"lineNumber": 125, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 129, "col_offset": 40, "nodeName": "s1", "type": "Any"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 133, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 134, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 137, "col_offset": 40, "nodeName": "s1", "type": "Any"}, {"lineNumber": 138, "col_offset": 6, "nodeName": "input_", "type": "Any"}, {"lineNumber": 139, "col_offset": 6, "nodeName": "net", "type": "Any"}, {"lineNumber": 140, "col_offset": 6, "nodeName": "net", "type": "Any"}, {"lineNumber": 142, "col_offset": 13, "nodeName": "get_saver", "type": "Callable[..., Any]"}, {"lineNumber": 142, "col_offset": 27, "nodeName": "s1", "type": "Any"}, {"lineNumber": 143, "col_offset": 13, "nodeName": "get_saver", "type": "Callable[..., Any]"}, {"lineNumber": 143, "col_offset": 27, "nodeName": "s1", "type": "Any"}, {"lineNumber": 145, "col_offset": 4, "nodeName": "assertIsInstance", "type": "Any"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 145, "col_offset": 34, "nodeName": "Saver", "type": "Any"}, {"lineNumber": 146, "col_offset": 4, "nodeName": "assertIsInstance", "type": "Any"}, {"lineNumber": 146, "col_offset": 26, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 146, "col_offset": 34, "nodeName": "Saver", "type": "Any"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 149, "col_offset": 32, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 150, "col_offset": 32, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 151, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 151, "col_offset": 39, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 152, "col_offset": 46, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 153, "col_offset": 50, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 155, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 156, "col_offset": 32, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 157, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 157, "col_offset": 32, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 158, "col_offset": 39, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "assertNotIn", "type": "Any"}, {"lineNumber": 159, "col_offset": 49, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "assertNotIn", "type": "Any"}, {"lineNumber": 160, "col_offset": 53, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 168, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 168, "col_offset": 28, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 170, "col_offset": 28, "nodeName": "check_initializers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 176, "col_offset": 28, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 178, "col_offset": 28, "nodeName": "check_initializers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 182, "col_offset": 4, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 183, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 183, "col_offset": 28, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 185, "col_offset": 28, "nodeName": "check_initializers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 193, "col_offset": 4, "nodeName": "check_initializers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 199, "col_offset": 28, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 201, "col_offset": 28, "nodeName": "check_partitioners", "type": "Callable"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 206, "col_offset": 4, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 207, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 207, "col_offset": 28, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 209, "col_offset": 28, "nodeName": "check_partitioners", "type": "Callable"}, {"lineNumber": 213, "col_offset": 4, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 214, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 214, "col_offset": 28, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 216, "col_offset": 28, "nodeName": "check_partitioners", "type": "Callable"}, {"lineNumber": 222, "col_offset": 4, "nodeName": "check_partitioners", "type": "Callable"}, {"lineNumber": 228, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 228, "col_offset": 28, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 230, "col_offset": 28, "nodeName": "check_regularizers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 235, "col_offset": 4, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 236, "col_offset": 28, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 238, "col_offset": 28, "nodeName": "check_regularizers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 242, "col_offset": 4, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 243, "col_offset": 4, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 243, "col_offset": 28, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 245, "col_offset": 28, "nodeName": "check_regularizers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 252, "col_offset": 4, "nodeName": "check_regularizers", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 255, "col_offset": 4, "nodeName": "assertFalse", "type": "Any"}, {"lineNumber": 256, "col_offset": 13, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 257, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 258, "col_offset": 4, "nodeName": "linear", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 259, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 263, "col_offset": 6, "nodeName": "v1", "type": "Any"}, {"lineNumber": 265, "col_offset": 6, "nodeName": "v2", "type": "Any"}, {"lineNumber": 266, "col_offset": 4, "nodeName": "assertEquals", "type": "Any"}, {"lineNumber": 273, "col_offset": 6, "nodeName": "v1", "type": "Any"}, {"lineNumber": 275, "col_offset": 6, "nodeName": "v2", "type": "Any"}, {"lineNumber": 276, "col_offset": 22, "nodeName": "v1", "type": "Any"}, {"lineNumber": 276, "col_offset": 33, "nodeName": "v2", "type": "Any"}, {"lineNumber": 277, "col_offset": 4, "nodeName": "assertEquals", "type": "Any"}, {"lineNumber": 283, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 29, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 31, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 31, "col_offset": 33, "nodeName": "Error", "type": "Type[sonnet.python.modules.base.Error]"}, {"lineNumber": 32, "col_offset": 6, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 35, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 37, "col_offset": 21, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 38, "col_offset": 22, "nodeName": "w", "type": "Any"}, {"lineNumber": 38, "col_offset": 32, "nodeName": "b", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 39, "col_offset": 21, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "w", "type": "Any"}, {"lineNumber": 40, "col_offset": 32, "nodeName": "b", "type": "Any"}, {"lineNumber": 43, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 46, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 51, "col_offset": 21, "nodeName": "get_variables_in_scope", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 51, "col_offset": 48, "nodeName": "s1", "type": "Any"}, {"lineNumber": 51, "col_offset": 54, "nodeName": "v1", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 52, "col_offset": 21, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 52, "col_offset": 59, "nodeName": "v2", "type": "Any"}, {"lineNumber": 52, "col_offset": 63, "nodeName": "v3", "type": "Any"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 55, "col_offset": 20, "nodeName": "_is_scope_prefix", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 56, "col_offset": 20, "nodeName": "_is_scope_prefix", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 57, "col_offset": 20, "nodeName": "_is_scope_prefix", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 58, "col_offset": 20, "nodeName": "_is_scope_prefix", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 59, "col_offset": 21, "nodeName": "_is_scope_prefix", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "_is_scope_prefix", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 64, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 65, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 67, "col_offset": 19, "nodeName": "snt", "type": "module"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 69, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 69, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 72, "col_offset": 18, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 73, "col_offset": 18, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 76, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 77, "col_offset": 43, "nodeName": "s2", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "v1", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "v2", "type": "Any"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 82, "col_offset": 10, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 85, "col_offset": 45, "nodeName": "err", "type": "str"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "get_normalized_variable_map", "type": "Callable[..., Any]"}, {"lineNumber": 86, "col_offset": 53, "nodeName": "s2", "type": "Any"}, {"lineNumber": 88, "col_offset": 19, "nodeName": "snt", "type": "module"}, {"lineNumber": 88, "col_offset": 63, "nodeName": "s1", "type": "Any"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 90, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 90, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 93, "col_offset": 18, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 97, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 97, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 98, "col_offset": 11, "nodeName": "snt", "type": "module"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "snt", "type": "module"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 103, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 106, "col_offset": 18, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 106, "col_offset": 39, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 107, "col_offset": 18, "nodeName": "variable_map", "type": "Any"}, {"lineNumber": 107, "col_offset": 39, "nodeName": "conv", "type": "sonnet.python.modules.conv.Conv2D"}, {"lineNumber": 110, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 111, "col_offset": 6, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 112, "col_offset": 6, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 114, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 115, "col_offset": 33, "nodeName": "train", "type": "Any"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "saver", "type": "Any"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 117, "col_offset": 25, "nodeName": "saver", "type": "Any"}, {"lineNumber": 120, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 120, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 121, "col_offset": 11, "nodeName": "snt", "type": "module"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "train", "type": "Any"}, {"lineNumber": 125, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "saver", "type": "Any"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "saver", "type": "Any"}, {"lineNumber": 129, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 130, "col_offset": 6, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 132, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 133, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 133, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 134, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 134, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 137, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 138, "col_offset": 15, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 138, "col_offset": 30, "nodeName": "float32", "type": "Any"}, {"lineNumber": 139, "col_offset": 27, "nodeName": "input_", "type": "Any"}, {"lineNumber": 140, "col_offset": 28, "nodeName": "net", "type": "Any"}, {"lineNumber": 142, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 143, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 145, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 145, "col_offset": 34, "nodeName": "train", "type": "Any"}, {"lineNumber": 146, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 146, "col_offset": 34, "nodeName": "train", "type": "Any"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 148, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 149, "col_offset": 32, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 150, "col_offset": 32, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 151, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 151, "col_offset": 39, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 152, "col_offset": 46, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 153, "col_offset": 50, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 155, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 155, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "_var_list", "type": "Any"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 156, "col_offset": 32, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 157, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 157, "col_offset": 32, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 158, "col_offset": 39, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 159, "col_offset": 49, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 160, "col_offset": 53, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 163, "col_offset": 29, "nodeName": "truncated_normal_initializer", "type": "Any"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "truncated_normal_initializer", "type": "Any"}, {"lineNumber": 168, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 170, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 171, "col_offset": 41, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 172, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 178, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 179, "col_offset": 41, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 180, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 183, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 185, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 186, "col_offset": 41, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 187, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 189, "col_offset": 38, "nodeName": "truncated_normal_initializer", "type": "Any"}, {"lineNumber": 191, "col_offset": 38, "nodeName": "truncated_normal_initializer", "type": "Any"}, {"lineNumber": 193, "col_offset": 4, "nodeName": "snt", "type": "module"}, {"lineNumber": 193, "col_offset": 40, "nodeName": "initializers", "type": "Dict[str, Any]"}, {"lineNumber": 193, "col_offset": 59, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 196, "col_offset": 29, "nodeName": "variable_axis_size_partitioner", "type": "Any"}, {"lineNumber": 197, "col_offset": 29, "nodeName": "variable_axis_size_partitioner", "type": "Any"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 201, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 202, "col_offset": 41, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 203, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 207, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 209, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 210, "col_offset": 41, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 211, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 214, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 216, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 217, "col_offset": 41, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 218, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 220, "col_offset": 38, "nodeName": "variable_axis_size_partitioner", "type": "Any"}, {"lineNumber": 221, "col_offset": 38, "nodeName": "variable_axis_size_partitioner", "type": "Any"}, {"lineNumber": 222, "col_offset": 4, "nodeName": "snt", "type": "module"}, {"lineNumber": 222, "col_offset": 40, "nodeName": "partitioners", "type": "Dict[str, Any]"}, {"lineNumber": 222, "col_offset": 59, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "l1_regularizer", "type": "Any"}, {"lineNumber": 226, "col_offset": 29, "nodeName": "l2_regularizer", "type": "Any"}, {"lineNumber": 228, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 230, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 231, "col_offset": 41, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 232, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 238, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 239, "col_offset": 41, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 240, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 243, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 245, "col_offset": 28, "nodeName": "snt", "type": "module"}, {"lineNumber": 246, "col_offset": 41, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 247, "col_offset": 33, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "l1_regularizer", "type": "Any"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "l2_regularizer", "type": "Any"}, {"lineNumber": 252, "col_offset": 4, "nodeName": "snt", "type": "module"}, {"lineNumber": 252, "col_offset": 40, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 252, "col_offset": 59, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 255, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 255, "col_offset": 21, "nodeName": "has_variable_scope", "type": "Callable[[Any], bool]"}, {"lineNumber": 256, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 257, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 257, "col_offset": 20, "nodeName": "has_variable_scope", "type": "Callable[[Any], bool]"}, {"lineNumber": 257, "col_offset": 43, "nodeName": "linear", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 258, "col_offset": 11, "nodeName": "ones", "type": "Any"}, {"lineNumber": 259, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 259, "col_offset": 20, "nodeName": "has_variable_scope", "type": "Callable[[Any], bool]"}, {"lineNumber": 259, "col_offset": 43, "nodeName": "linear", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 262, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 263, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 264, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 265, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 266, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 266, "col_offset": 22, "nodeName": "format_variables", "type": "Callable[[Any], Any]"}, {"lineNumber": 272, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 273, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 274, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 275, "col_offset": 11, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 277, "col_offset": 4, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 277, "col_offset": 22, "nodeName": "format_variable_map", "type": "Callable[[Any], Any]"}, {"lineNumber": 277, "col_offset": 46, "nodeName": "var_map", "type": "Dict[str, Any]"}, {"lineNumber": 283, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 31, "col_offset": 9, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 31, "col_offset": 33, "nodeName": "snt", "type": "module"}, {"lineNumber": 32, "col_offset": 6, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 38, "col_offset": 22, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 38, "col_offset": 32, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "get_variables_in_module", "type": "Callable[..., Any]"}, {"lineNumber": 39, "col_offset": 53, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 40, "col_offset": 32, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 43, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 46, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 51, "col_offset": 21, "nodeName": "snt", "type": "module"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "get_variables_in_scope", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 52, "col_offset": 52, "nodeName": "s2", "type": "Any"}, {"lineNumber": 55, "col_offset": 20, "nodeName": "util", "type": "module"}, {"lineNumber": 56, "col_offset": 20, "nodeName": "util", "type": "module"}, {"lineNumber": 57, "col_offset": 20, "nodeName": "util", "type": "module"}, {"lineNumber": 58, "col_offset": 20, "nodeName": "util", "type": "module"}, {"lineNumber": 59, "col_offset": 21, "nodeName": "util", "type": "module"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "util", "type": "module"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 64, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 65, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 76, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 77, "col_offset": 11, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 78, "col_offset": 13, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 79, "col_offset": 13, "nodeName": "get_variable", "type": "Any"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 82, "col_offset": 10, "nodeName": "tf", "type": "Any"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "self", "type": "UtilTest"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "snt", "type": "module"}, {"lineNumber": 86, "col_offset": 65, "nodeName": "s3", "type": "Any"}, {"lineNumber": 110, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 111, "col_offset": 6, "nodeName": "tf", "type": "Any"}, {"lineNumber": 112, "col_offset": 6, "nodeName": "tf", "type": "Any"}, {"lineNumber": 115, "col_offset": 33, "nodeName": "tf", "type": "Any"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "tf", "type": "Any"}, {"lineNumber": 129, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 130, "col_offset": 6, "nodeName": "tf", "type": "Any"}, {"lineNumber": 132, "col_offset": 25, "nodeName": "get_variables_in_scope", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 132, "col_offset": 52, "nodeName": "s1", "type": "Any"}, {"lineNumber": 133, "col_offset": 25, "nodeName": "get_variables_in_scope", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 133, "col_offset": 52, "nodeName": "s1", "type": "Any"}, {"lineNumber": 134, "col_offset": 25, "nodeName": "get_variables_in_scope", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 134, "col_offset": 52, "nodeName": "s1", "type": "Any"}, {"lineNumber": 137, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 138, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 138, "col_offset": 30, "nodeName": "tf", "type": "Any"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "BatchNorm", "type": "Type[sonnet.python.modules.batch_norm.BatchNorm]"}, {"lineNumber": 143, "col_offset": 44, "nodeName": "TRAINABLE_VARIABLES", "type": "Any"}, {"lineNumber": 145, "col_offset": 34, "nodeName": "tf", "type": "Any"}, {"lineNumber": 146, "col_offset": 34, "nodeName": "tf", "type": "Any"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "saver1", "type": "Any"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "saver2", "type": "Any"}, {"lineNumber": 163, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 189, "col_offset": 38, "nodeName": "tf", "type": "Any"}, {"lineNumber": 191, "col_offset": 38, "nodeName": "tf", "type": "Any"}, {"lineNumber": 196, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 197, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 220, "col_offset": 38, "nodeName": "tf", "type": "Any"}, {"lineNumber": 221, "col_offset": 38, "nodeName": "tf", "type": "Any"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "layers", "type": "Any"}, {"lineNumber": 226, "col_offset": 29, "nodeName": "layers", "type": "Any"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "layers", "type": "Any"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "layers", "type": "Any"}, {"lineNumber": 255, "col_offset": 21, "nodeName": "snt", "type": "module"}, {"lineNumber": 257, "col_offset": 20, "nodeName": "snt", "type": "module"}, {"lineNumber": 258, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 259, "col_offset": 20, "nodeName": "snt", "type": "module"}, {"lineNumber": 262, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 263, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 264, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 265, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 266, "col_offset": 22, "nodeName": "snt", "type": "module"}, {"lineNumber": 266, "col_offset": 44, "nodeName": "v2", "type": "Any"}, {"lineNumber": 266, "col_offset": 48, "nodeName": "v1", "type": "Any"}, {"lineNumber": 272, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 273, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 274, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 275, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 277, "col_offset": 22, "nodeName": "snt", "type": "module"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "module", "type": "sonnet.python.modules.basic.Linear"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "snt", "type": "module"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "snt", "type": "module"}, {"lineNumber": 77, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 78, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 79, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 132, "col_offset": 25, "nodeName": "snt", "type": "module"}, {"lineNumber": 133, "col_offset": 25, "nodeName": "snt", "type": "module"}, {"lineNumber": 134, "col_offset": 25, "nodeName": "snt", "type": "module"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 143, "col_offset": 44, "nodeName": "GraphKeys", "type": "Any"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 226, "col_offset": 29, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 143, "col_offset": 44, "nodeName": "tf", "type": "Any"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 226, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 251, "col_offset": 17, "nodeName": "tf", "type": "Any"}]