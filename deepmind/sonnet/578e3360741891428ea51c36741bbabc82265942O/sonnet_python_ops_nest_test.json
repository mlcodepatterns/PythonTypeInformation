[{"lineNumber": 31, "col_offset": 15, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "test", "type": "Any"}, {"lineNumber": 330, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "inp_ab", "type": "List[str]"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "inp_abc", "type": "List[str]"}, {"lineNumber": 43, "col_offset": 4, "nodeName": "inp_ab1", "type": "List[Tuple[int, int]]"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "inp_ab2", "type": "List[List[int]]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "input_tree", "type": "List[List[List[int]]]"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "shallow_tree", "type": "List[List[bool]]"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "input_tree", "type": "List[List[Union[Tuple[str, int], List[Union[Tuple[str, int], List[Union[Tuple[str, int], List[Tuple[str, int]]]]]]]]]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "shallow_tree", "type": "List[List[Union[str, List[Union[str, List[Union[str, List[str]]]]]]]]"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "input_tree_flattened", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "input_tree", "type": "List[str]"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "input_tree", "type": "List[str]"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "input_tree", "type": "List[int]"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "input_tree", "type": "List[int]"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 122, "col_offset": 4, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 125, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 135, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 142, "col_offset": 4, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 146, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 165, "col_offset": 4, "nodeName": "op_tuple", "type": "Type[`namedtuple-op_tuple-add-mul`]"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "inp_val", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 167, "col_offset": 4, "nodeName": "inp_ops", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "data_list", "type": "List[Union[List[int], List[List[int]]]]"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "name_list", "type": "List[Union[str, List[str]]]"}, {"lineNumber": 182, "col_offset": 4, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 183, "col_offset": 4, "nodeName": "inp_a", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 184, "col_offset": 4, "nodeName": "inp_b", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "out", "type": "Any"}, {"lineNumber": 191, "col_offset": 4, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 194, "col_offset": 4, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 208, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 227, "col_offset": 4, "nodeName": "inp_a", "type": "Tuple[int, int]"}, {"lineNumber": 228, "col_offset": 4, "nodeName": "inp_b", "type": "Tuple[int, int, int]"}, {"lineNumber": 229, "col_offset": 4, "nodeName": "err", "type": "str"}, {"lineNumber": 234, "col_offset": 4, "nodeName": "inp_a", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 235, "col_offset": 4, "nodeName": "inp_b", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 244, "col_offset": 4, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 245, "col_offset": 4, "nodeName": "empty_nt", "type": "Type[`namedtuple-empty_nt-`]"}, {"lineNumber": 256, "col_offset": 4, "nodeName": "named_tuple", "type": "Type[`namedtuple-A-b-c`]"}, {"lineNumber": 273, "col_offset": 4, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 292, "col_offset": 4, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 296, "col_offset": 4, "nodeName": "structure", "type": "numpy.ndarray"}, {"lineNumber": 297, "col_offset": 4, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 301, "col_offset": 4, "nodeName": "structure", "type": "str"}, {"lineNumber": 302, "col_offset": 4, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 307, "col_offset": 4, "nodeName": "structure", "type": "str"}, {"lineNumber": 308, "col_offset": 4, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 309, "col_offset": 4, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 331, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "cm", "type": "Any"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "message", "type": "Any"}, {"lineNumber": 45, "col_offset": 41, "nodeName": "cm", "type": "Any"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 47, "col_offset": 21, "nodeName": "message", "type": "Any"}, {"lineNumber": 56, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 56, "col_offset": 46, "nodeName": "shallow_tree", "type": "List[List[bool]]"}, {"lineNumber": 56, "col_offset": 60, "nodeName": "input_tree", "type": "List[List[List[int]]]"}, {"lineNumber": 57, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 57, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[List[bool]]"}, {"lineNumber": 57, "col_offset": 62, "nodeName": "shallow_tree", "type": "List[List[bool]]"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 58, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 59, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 64, "col_offset": 43, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 64, "col_offset": 62, "nodeName": "shallow_tree", "type": "List[List[Union[str, List[Union[str, List[Union[str, List[str]]]]]]]]"}, {"lineNumber": 65, "col_offset": 62, "nodeName": "input_tree", "type": "List[List[Union[Tuple[str, int], List[Union[Tuple[str, int], List[Union[Tuple[str, int], List[Tuple[str, int]]]]]]]]]"}, {"lineNumber": 66, "col_offset": 27, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 66, "col_offset": 40, "nodeName": "input_tree", "type": "List[List[Union[Tuple[str, int], List[Union[Tuple[str, int], List[Union[Tuple[str, int], List[Tuple[str, int]]]]]]]]]"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 67, "col_offset": 21, "nodeName": "input_tree_flattened_as_shallow_tree", "type": "List[Any]"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 69, "col_offset": 21, "nodeName": "input_tree_flattened", "type": "Any"}, {"lineNumber": 75, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 75, "col_offset": 46, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 75, "col_offset": 60, "nodeName": "input_tree", "type": "List[str]"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 76, "col_offset": 48, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 76, "col_offset": 62, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 77, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 78, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 82, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 82, "col_offset": 46, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 82, "col_offset": 60, "nodeName": "input_tree", "type": "List[str]"}, {"lineNumber": 83, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 83, "col_offset": 48, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 83, "col_offset": 62, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 85, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 90, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 90, "col_offset": 46, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 90, "col_offset": 60, "nodeName": "input_tree", "type": "List[int]"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 91, "col_offset": 48, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 91, "col_offset": 62, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 92, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 93, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 97, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 97, "col_offset": 60, "nodeName": "input_tree", "type": "List[int]"}, {"lineNumber": 98, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 98, "col_offset": 48, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 98, "col_offset": 62, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 99, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 100, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 106, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 106, "col_offset": 46, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 106, "col_offset": 60, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 107, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 107, "col_offset": 48, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 107, "col_offset": 62, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 109, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 114, "col_offset": 27, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 114, "col_offset": 46, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 114, "col_offset": 60, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 115, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 115, "col_offset": 48, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 115, "col_offset": 62, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 116, "col_offset": 21, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 117, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 123, "col_offset": 41, "nodeName": "cm", "type": "Any"}, {"lineNumber": 124, "col_offset": 6, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 125, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 125, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 125, "col_offset": 62, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 126, "col_offset": 21, "nodeName": "message", "type": "Any"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 129, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 129, "col_offset": 45, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 133, "col_offset": 41, "nodeName": "cm", "type": "Any"}, {"lineNumber": 134, "col_offset": 6, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 135, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 135, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 135, "col_offset": 62, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 136, "col_offset": 21, "nodeName": "message", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 139, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 139, "col_offset": 45, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 144, "col_offset": 41, "nodeName": "cm", "type": "Any"}, {"lineNumber": 145, "col_offset": 6, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 146, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 146, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 146, "col_offset": 62, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 147, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 147, "col_offset": 21, "nodeName": "message", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 150, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 150, "col_offset": 45, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 154, "col_offset": 41, "nodeName": "cm", "type": "Any"}, {"lineNumber": 155, "col_offset": 6, "nodeName": "flattened_input_tree", "type": "List[Any]"}, {"lineNumber": 156, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 156, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 156, "col_offset": 62, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 157, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 157, "col_offset": 21, "nodeName": "message", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 160, "col_offset": 21, "nodeName": "flattened_shallow_tree", "type": "List[Any]"}, {"lineNumber": 160, "col_offset": 45, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 165, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 166, "col_offset": 14, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 167, "col_offset": 14, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 168, "col_offset": 10, "nodeName": "map_up_to", "type": "Callable[..., Any]"}, {"lineNumber": 168, "col_offset": 25, "nodeName": "inp_val", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 169, "col_offset": 25, "nodeName": "inp_val", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 169, "col_offset": 34, "nodeName": "inp_ops", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 170, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 170, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 171, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 171, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 176, "col_offset": 10, "nodeName": "map_up_to", "type": "Callable[..., Any]"}, {"lineNumber": 176, "col_offset": 25, "nodeName": "name_list", "type": "List[Union[str, List[str]]]"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "name_list", "type": "List[Union[str, List[str]]]"}, {"lineNumber": 178, "col_offset": 36, "nodeName": "data_list", "type": "List[Union[List[int], List[List[int]]]]"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 179, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 183, "col_offset": 12, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 184, "col_offset": 12, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 185, "col_offset": 10, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 185, "col_offset": 61, "nodeName": "inp_a", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 185, "col_offset": 68, "nodeName": "inp_b", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 186, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 186, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 187, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 191, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 192, "col_offset": 9, "nodeName": "ab_tuple", "type": "Type[`namedtuple-ab_tuple-a-b`]"}, {"lineNumber": 194, "col_offset": 13, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 194, "col_offset": 41, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "assert_same_structure", "type": "Any"}, {"lineNumber": 197, "col_offset": 31, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 197, "col_offset": 35, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 200, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 200, "col_offset": 33, "nodeName": "b", "type": "Any"}, {"lineNumber": 208, "col_offset": 13, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 208, "col_offset": 46, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 208, "col_offset": 53, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 210, "col_offset": 4, "nodeName": "assert_same_structure", "type": "Any"}, {"lineNumber": 210, "col_offset": 31, "nodeName": "output", "type": "Any"}, {"lineNumber": 210, "col_offset": 39, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 219, "col_offset": 32, "nodeName": "sess", "type": "Any"}, {"lineNumber": 220, "col_offset": 6, "nodeName": "output_np", "type": "Any"}, {"lineNumber": 221, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 223, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 236, "col_offset": 13, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 236, "col_offset": 42, "nodeName": "inp_a", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 236, "col_offset": 49, "nodeName": "inp_b", "type": "Tuple[int, Tuple[int, int]]"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 237, "col_offset": 37, "nodeName": "output", "type": "Any"}, {"lineNumber": 245, "col_offset": 15, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 247, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 248, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 249, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 252, "col_offset": 4, "nodeName": "assertNotEqual", "type": "Any"}, {"lineNumber": 256, "col_offset": 18, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable"}, {"lineNumber": 273, "col_offset": 38, "nodeName": "mess", "type": "List[Union[str, `namedtuple-A-b-c`, Dict[str, Union[int, List[Union[int, collections.OrderedDict[str, int]]]]], int]]"}, {"lineNumber": 274, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 274, "col_offset": 21, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 292, "col_offset": 18, "nodeName": "pack_iterable_as", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 292, "col_offset": 40, "nodeName": "structure_of_mess", "type": "List[Union[int, `namedtuple-A-b-c`, Dict[str, Union[int, List[Union[int, collections.OrderedDict[str, int]]]]], str]]"}, {"lineNumber": 292, "col_offset": 59, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 293, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 293, "col_offset": 21, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 293, "col_offset": 34, "nodeName": "mess", "type": "List[Union[str, `namedtuple-A-b-c`, Dict[str, Union[int, List[Union[int, collections.OrderedDict[str, int]]]]], int]]"}, {"lineNumber": 296, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 297, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable"}, {"lineNumber": 297, "col_offset": 38, "nodeName": "structure", "type": "numpy.ndarray"}, {"lineNumber": 298, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable"}, {"lineNumber": 302, "col_offset": 38, "nodeName": "structure", "type": "str"}, {"lineNumber": 303, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 308, "col_offset": 16, "nodeName": "flatten_iterable", "type": "Callable"}, {"lineNumber": 308, "col_offset": 38, "nodeName": "structure", "type": "str"}, {"lineNumber": 309, "col_offset": 18, "nodeName": "pack_iterable_as", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 309, "col_offset": 51, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 310, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 310, "col_offset": 21, "nodeName": "structure", "type": "str"}, {"lineNumber": 310, "col_offset": 32, "nodeName": "unflattened", "type": "Any"}, {"lineNumber": 331, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 36, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 36, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 37, "col_offset": 6, "nodeName": "assert_shallow_structure", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 37, "col_offset": 36, "nodeName": "inp_abc", "type": "List[str]"}, {"lineNumber": 37, "col_offset": 45, "nodeName": "inp_ab", "type": "List[str]"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "exception", "type": "Any"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 45, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 46, "col_offset": 6, "nodeName": "assert_shallow_structure", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 46, "col_offset": 36, "nodeName": "inp_ab2", "type": "List[List[int]]"}, {"lineNumber": 46, "col_offset": 45, "nodeName": "inp_ab1", "type": "List[Tuple[int, int]]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 47, "col_offset": 21, "nodeName": "exception", "type": "Any"}, {"lineNumber": 56, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 57, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 64, "col_offset": 43, "nodeName": "nest", "type": "module"}, {"lineNumber": 66, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 75, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 77, "col_offset": 44, "nodeName": "input_tree", "type": "List[str]"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 78, "col_offset": 46, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 82, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 83, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 84, "col_offset": 44, "nodeName": "input_tree", "type": "List[str]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 85, "col_offset": 46, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 90, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 92, "col_offset": 44, "nodeName": "input_tree", "type": "List[int]"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 93, "col_offset": 46, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 97, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 98, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 99, "col_offset": 44, "nodeName": "input_tree", "type": "List[int]"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 100, "col_offset": 46, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 106, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 107, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 108, "col_offset": 44, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 109, "col_offset": 46, "nodeName": "shallow_tree", "type": "str"}, {"lineNumber": 114, "col_offset": 27, "nodeName": "nest", "type": "module"}, {"lineNumber": 115, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 116, "col_offset": 44, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 117, "col_offset": 46, "nodeName": "shallow_tree", "type": "int"}, {"lineNumber": 123, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 123, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 124, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 124, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 124, "col_offset": 62, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 125, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 126, "col_offset": 21, "nodeName": "exception", "type": "Any"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 133, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 133, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 134, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 134, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[str]"}, {"lineNumber": 134, "col_offset": 62, "nodeName": "input_tree", "type": "str"}, {"lineNumber": 135, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 136, "col_offset": 21, "nodeName": "exception", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 144, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 145, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 145, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 145, "col_offset": 62, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 146, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 147, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 147, "col_offset": 21, "nodeName": "exception", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 154, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 154, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 155, "col_offset": 29, "nodeName": "flatten_up_to", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 155, "col_offset": 48, "nodeName": "shallow_tree", "type": "List[int]"}, {"lineNumber": 155, "col_offset": 62, "nodeName": "input_tree", "type": "int"}, {"lineNumber": 156, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 157, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 157, "col_offset": 21, "nodeName": "exception", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 165, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 168, "col_offset": 10, "nodeName": "nest", "type": "module"}, {"lineNumber": 170, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 170, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 171, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 171, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 176, "col_offset": 10, "nodeName": "nest", "type": "module"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 185, "col_offset": 10, "nodeName": "nest", "type": "module"}, {"lineNumber": 186, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 186, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 187, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 187, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 188, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 191, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 194, "col_offset": 13, "nodeName": "nest", "type": "module"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "nest", "type": "module"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 198, "col_offset": 36, "nodeName": "a", "type": "Any"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 199, "col_offset": 36, "nodeName": "a", "type": "Any"}, {"lineNumber": 200, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "b", "type": "Any"}, {"lineNumber": 200, "col_offset": 33, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 203, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 203, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 204, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 204, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 205, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 205, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 206, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 206, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 208, "col_offset": 13, "nodeName": "nest", "type": "module"}, {"lineNumber": 210, "col_offset": 4, "nodeName": "nest", "type": "module"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 211, "col_offset": 26, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 211, "col_offset": 44, "nodeName": "output", "type": "Any"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 212, "col_offset": 26, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 212, "col_offset": 44, "nodeName": "output", "type": "Any"}, {"lineNumber": 219, "col_offset": 9, "nodeName": "test_session", "type": "Any"}, {"lineNumber": 220, "col_offset": 18, "nodeName": "run", "type": "Any"}, {"lineNumber": 220, "col_offset": 27, "nodeName": "output", "type": "Any"}, {"lineNumber": 221, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 221, "col_offset": 24, "nodeName": "output_np", "type": "Any"}, {"lineNumber": 223, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 223, "col_offset": 24, "nodeName": "output_np", "type": "Any"}, {"lineNumber": 230, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 230, "col_offset": 33, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 230, "col_offset": 45, "nodeName": "err", "type": "str"}, {"lineNumber": 231, "col_offset": 6, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 231, "col_offset": 35, "nodeName": "inp_a", "type": "Tuple[int, int]"}, {"lineNumber": 231, "col_offset": 42, "nodeName": "inp_b", "type": "Tuple[int, int, int]"}, {"lineNumber": 236, "col_offset": 13, "nodeName": "nest", "type": "module"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 240, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 240, "col_offset": 33, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 241, "col_offset": 6, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 244, "col_offset": 18, "nodeName": "x", "type": "Any"}, {"lineNumber": 245, "col_offset": 15, "nodeName": "collections", "type": "module"}, {"lineNumber": 247, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 247, "col_offset": 25, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 247, "col_offset": 34, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 248, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 248, "col_offset": 34, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 249, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 249, "col_offset": 21, "nodeName": "empty_nt", "type": "Type[`namedtuple-empty_nt-`]"}, {"lineNumber": 249, "col_offset": 33, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 249, "col_offset": 42, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 252, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 252, "col_offset": 28, "nodeName": "map", "type": "Callable[..., Any]"}, {"lineNumber": 252, "col_offset": 37, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 256, "col_offset": 18, "nodeName": "collections", "type": "module"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "named_tuple", "type": "Type[`namedtuple-A-b-c`]"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 274, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "named_tuple", "type": "Type[`namedtuple-A-b-c`]"}, {"lineNumber": 292, "col_offset": 18, "nodeName": "nest", "type": "module"}, {"lineNumber": 293, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 296, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 297, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 298, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 298, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 298, "col_offset": 25, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 303, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 303, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 303, "col_offset": 25, "nodeName": "flattened", "type": "List[Any]"}, {"lineNumber": 308, "col_offset": 16, "nodeName": "nest", "type": "module"}, {"lineNumber": 309, "col_offset": 18, "nodeName": "nest", "type": "module"}, {"lineNumber": 310, "col_offset": 4, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 313, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 313, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 315, "col_offset": 6, "nodeName": "pack_iterable_as", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 318, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 320, "col_offset": 6, "nodeName": "pack_iterable_as", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 323, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 326, "col_offset": 6, "nodeName": "pack_iterable_as", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 331, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 36, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 37, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "cm", "type": "Any"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 46, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 47, "col_offset": 21, "nodeName": "cm", "type": "Any"}, {"lineNumber": 123, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 124, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 126, "col_offset": 21, "nodeName": "cm", "type": "Any"}, {"lineNumber": 133, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 134, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 136, "col_offset": 21, "nodeName": "cm", "type": "Any"}, {"lineNumber": 144, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 145, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 147, "col_offset": 21, "nodeName": "cm", "type": "Any"}, {"lineNumber": 154, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 155, "col_offset": 29, "nodeName": "nest", "type": "module"}, {"lineNumber": 157, "col_offset": 21, "nodeName": "cm", "type": "Any"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "op_tuple", "type": "Type[`namedtuple-op_tuple-add-mul`]"}, {"lineNumber": 167, "col_offset": 51, "nodeName": "op_tuple", "type": "Type[`namedtuple-op_tuple-add-mul`]"}, {"lineNumber": 168, "col_offset": 69, "nodeName": "mul", "type": "Any"}, {"lineNumber": 177, "col_offset": 43, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 177, "col_offset": 74, "nodeName": "name", "type": "Any"}, {"lineNumber": 185, "col_offset": 43, "nodeName": "string", "type": "Any"}, {"lineNumber": 185, "col_offset": 52, "nodeName": "repeats", "type": "Any"}, {"lineNumber": 187, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 188, "col_offset": 21, "nodeName": "out", "type": "Any"}, {"lineNumber": 194, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 198, "col_offset": 36, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 199, "col_offset": 36, "nodeName": "rev_nt", "type": "Any"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 203, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 203, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 204, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 204, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 205, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 205, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 206, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 206, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 208, "col_offset": 37, "nodeName": "x1", "type": "Any"}, {"lineNumber": 208, "col_offset": 42, "nodeName": "x2", "type": "Any"}, {"lineNumber": 211, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 212, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "randn", "type": "Any"}, {"lineNumber": 215, "col_offset": 39, "nodeName": "randn", "type": "Any"}, {"lineNumber": 216, "col_offset": 16, "nodeName": "randn", "type": "Any"}, {"lineNumber": 216, "col_offset": 39, "nodeName": "randn", "type": "Any"}, {"lineNumber": 219, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 220, "col_offset": 18, "nodeName": "sess", "type": "Any"}, {"lineNumber": 220, "col_offset": 45, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 230, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 231, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 236, "col_offset": 35, "nodeName": "a", "type": "Any"}, {"lineNumber": 236, "col_offset": 39, "nodeName": "b", "type": "Any"}, {"lineNumber": 240, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 241, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 241, "col_offset": 25, "nodeName": "x", "type": "Any"}, {"lineNumber": 247, "col_offset": 25, "nodeName": "nest", "type": "module"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "nest", "type": "module"}, {"lineNumber": 249, "col_offset": 33, "nodeName": "nest", "type": "module"}, {"lineNumber": 249, "col_offset": 45, "nodeName": "empty_nt", "type": "Type[`namedtuple-empty_nt-`]"}, {"lineNumber": 252, "col_offset": 28, "nodeName": "nest", "type": "module"}, {"lineNumber": 313, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 315, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 318, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 320, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 323, "col_offset": 9, "nodeName": "self", "type": "NestTest"}, {"lineNumber": 326, "col_offset": 6, "nodeName": "nest", "type": "module"}, {"lineNumber": 168, "col_offset": 52, "nodeName": "val", "type": "Any"}, {"lineNumber": 168, "col_offset": 58, "nodeName": "add", "type": "Any"}, {"lineNumber": 168, "col_offset": 69, "nodeName": "ops", "type": "Any"}, {"lineNumber": 177, "col_offset": 64, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 177, "col_offset": 68, "nodeName": "sec", "type": "Any"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "nt", "type": "`namedtuple-ab_tuple-a-b`"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "random", "type": "Any"}, {"lineNumber": 215, "col_offset": 39, "nodeName": "random", "type": "Any"}, {"lineNumber": 216, "col_offset": 16, "nodeName": "random", "type": "Any"}, {"lineNumber": 216, "col_offset": 39, "nodeName": "random", "type": "Any"}, {"lineNumber": 222, "col_offset": 24, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 222, "col_offset": 46, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 224, "col_offset": 24, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 224, "col_offset": 46, "nodeName": "feed_dict", "type": "Dict[Tuple[Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 231, "col_offset": 28, "nodeName": "a", "type": "Any"}, {"lineNumber": 231, "col_offset": 32, "nodeName": "b", "type": "Any"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 282, "col_offset": 16, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 168, "col_offset": 58, "nodeName": "ops", "type": "Any"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 215, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 216, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 216, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 222, "col_offset": 34, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 222, "col_offset": 56, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 224, "col_offset": 34, "nodeName": "inp_a", "type": "Tuple[Any, Any]"}, {"lineNumber": 224, "col_offset": 56, "nodeName": "inp_b", "type": "Tuple[Any, Any]"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "collections", "type": "module"}, {"lineNumber": 282, "col_offset": 16, "nodeName": "collections", "type": "module"}]