[{"lineNumber": 36, "col_offset": 21, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 241, "col_offset": 18, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 241, "col_offset": 36, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 681, "col_offset": 19, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 727, "col_offset": 27, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 36, "col_offset": 21, "nodeName": "test", "type": "Any"}, {"lineNumber": 241, "col_offset": 18, "nodeName": "test", "type": "Any"}, {"lineNumber": 241, "col_offset": 36, "nodeName": "parameterized", "type": "Any"}, {"lineNumber": 681, "col_offset": 19, "nodeName": "test", "type": "Any"}, {"lineNumber": 727, "col_offset": 27, "nodeName": "test", "type": "Any"}, {"lineNumber": 729, "col_offset": 2, "nodeName": "toy_out", "type": "Type[`namedtuple-toy_out-out_one-out_two`]"}, {"lineNumber": 731, "col_offset": 15, "nodeName": "RNNCore", "type": "Type[sonnet.python.modules.rnn_core.RNNCore]"}, {"lineNumber": 795, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 36, "col_offset": 21, "nodeName": "tf", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "in_size", "type": "int"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "shape", "type": "numpy.ndarray"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "input_data", "type": "Any"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "prev_state_data", "type": "Any"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "in_to_hid", "type": "Any"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "in_to_hidden_variables", "type": "Any"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "hid_to_hid", "type": "Any"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "hidden_to_hidden_variables", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "real_in_to_hid", "type": "Any"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "real_hid_to_hid", "type": "Any"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "real_output", "type": "Any"}, {"lineNumber": 127, "col_offset": 4, "nodeName": "err", "type": "str"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "init", "type": "Any"}, {"lineNumber": 172, "col_offset": 4, "nodeName": "err", "type": "str"}, {"lineNumber": 216, "col_offset": 4, "nodeName": "err", "type": "str"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "regularizers", "type": "Any"}, {"lineNumber": 241, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 244, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 245, "col_offset": 4, "nodeName": "batch_size_shape", "type": "Any"}, {"lineNumber": 246, "col_offset": 4, "nodeName": "in_size", "type": "int"}, {"lineNumber": 247, "col_offset": 4, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 248, "col_offset": 4, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 250, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 257, "col_offset": 4, "nodeName": "prev_state", "type": "Tuple[Any, Any, Any]"}, {"lineNumber": 266, "col_offset": 4, "nodeName": "output_shape", "type": "Any"}, {"lineNumber": 268, "col_offset": 4, "nodeName": "output_size", "type": "int"}, {"lineNumber": 291, "col_offset": 4, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 301, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 302, "col_offset": 4, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 303, "col_offset": 4, "nodeName": "input_shape", "type": "Tuple[int, int]"}, {"lineNumber": 304, "col_offset": 4, "nodeName": "input_channels", "type": "int"}, {"lineNumber": 305, "col_offset": 4, "nodeName": "output_channels", "type": "int"}, {"lineNumber": 307, "col_offset": 4, "nodeName": "input_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 308, "col_offset": 4, "nodeName": "output_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 310, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 311, "col_offset": 4, "nodeName": "prev_hidden", "type": "Any"}, {"lineNumber": 312, "col_offset": 4, "nodeName": "prev_cell", "type": "Any"}, {"lineNumber": 313, "col_offset": 4, "nodeName": "prev_state", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 322, "col_offset": 4, "nodeName": "expected_output_shape", "type": "List[int]"}, {"lineNumber": 323, "col_offset": 33, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 337, "col_offset": 4, "nodeName": "in_size", "type": "int"}, {"lineNumber": 338, "col_offset": 4, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 339, "col_offset": 4, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 348, "col_offset": 4, "nodeName": "cells", "type": "List[Any]"}, {"lineNumber": 355, "col_offset": 4, "nodeName": "insize", "type": "int"}, {"lineNumber": 356, "col_offset": 4, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 357, "col_offset": 4, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 358, "col_offset": 4, "nodeName": "seq_length", "type": "int"}, {"lineNumber": 359, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 364, "col_offset": 4, "nodeName": "cores1", "type": "List[Any]"}, {"lineNumber": 365, "col_offset": 4, "nodeName": "core1", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 366, "col_offset": 4, "nodeName": "core1_h0", "type": "Tuple[Any, ...]"}, {"lineNumber": 368, "col_offset": 4, "nodeName": "cores2", "type": "List[Any]"}, {"lineNumber": 369, "col_offset": 4, "nodeName": "core2", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 370, "col_offset": 4, "nodeName": "core2_h0", "type": "Tuple[Any, ...]"}, {"lineNumber": 372, "col_offset": 4, "nodeName": "xseq", "type": "Any"}, {"lineNumber": 382, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 383, "col_offset": 4, "nodeName": "in_size", "type": "int"}, {"lineNumber": 384, "col_offset": 4, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 385, "col_offset": 4, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 386, "col_offset": 4, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 387, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 392, "col_offset": 4, "nodeName": "prev_state", "type": "Tuple[Any, Any]"}, {"lineNumber": 396, "col_offset": 4, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 410, "col_offset": 8, "nodeName": "v", "type": "Any"}, {"lineNumber": 410, "col_offset": 13, "nodeName": "deep_rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 417, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 418, "col_offset": 4, "nodeName": "in_size", "type": "int"}, {"lineNumber": 419, "col_offset": 4, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 420, "col_offset": 4, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 421, "col_offset": 4, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 426, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 427, "col_offset": 7, "nodeName": "create_initial_state", "type": "Any"}, {"lineNumber": 443, "col_offset": 4, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 444, "col_offset": 57, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 448, "col_offset": 7, "nodeName": "skip_connections", "type": "Any"}, {"lineNumber": 453, "col_offset": 7, "nodeName": "skip_connections", "type": "Any"}, {"lineNumber": 460, "col_offset": 4, "nodeName": "manual_output_value", "type": "Any"}, {"lineNumber": 461, "col_offset": 4, "nodeName": "manual_next_state1_value", "type": "Any"}, {"lineNumber": 462, "col_offset": 4, "nodeName": "manual_next_state2_value", "type": "Any"}, {"lineNumber": 469, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 470, "col_offset": 4, "nodeName": "in_size", "type": "int"}, {"lineNumber": 471, "col_offset": 4, "nodeName": "output1_size", "type": "int"}, {"lineNumber": 472, "col_offset": 4, "nodeName": "output2_size", "type": "int"}, {"lineNumber": 478, "col_offset": 4, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 479, "col_offset": 4, "nodeName": "input_data", "type": "Any"}, {"lineNumber": 480, "col_offset": 4, "nodeName": "input_", "type": "Any"}, {"lineNumber": 484, "col_offset": 4, "nodeName": "output1", "type": "Any"}, {"lineNumber": 485, "col_offset": 4, "nodeName": "input2", "type": "Any"}, {"lineNumber": 485, "col_offset": 13, "nodeName": "output1", "type": "Any"}, {"lineNumber": 486, "col_offset": 4, "nodeName": "output2", "type": "Any"}, {"lineNumber": 487, "col_offset": 4, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 487, "col_offset": 20, "nodeName": "output2", "type": "Any"}, {"lineNumber": 490, "col_offset": 4, "nodeName": "output_value", "type": "Any"}, {"lineNumber": 491, "col_offset": 4, "nodeName": "manual_out_value", "type": "Any"}, {"lineNumber": 498, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 499, "col_offset": 4, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 500, "col_offset": 4, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 501, "col_offset": 4, "nodeName": "output1_size", "type": "int"}, {"lineNumber": 502, "col_offset": 4, "nodeName": "output2_size", "type": "int"}, {"lineNumber": 504, "col_offset": 4, "nodeName": "initializer", "type": "None"}, {"lineNumber": 505, "col_offset": 7, "nodeName": "use_custom_initial_value", "type": "Any"}, {"lineNumber": 511, "col_offset": 4, "nodeName": "dummy_deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 520, "col_offset": 4, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 524, "col_offset": 4, "nodeName": "expected_initial_state", "type": "List[Any]"}, {"lineNumber": 535, "col_offset": 4, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 536, "col_offset": 4, "nodeName": "expected_initial_state_value", "type": "Any"}, {"lineNumber": 544, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 555, "col_offset": 4, "nodeName": "initial_state_module", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 556, "col_offset": 4, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 559, "col_offset": 4, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 573, "col_offset": 4, "nodeName": "hidden_size_a", "type": "int"}, {"lineNumber": 574, "col_offset": 4, "nodeName": "hidden_size_b", "type": "int"}, {"lineNumber": 575, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 578, "col_offset": 4, "nodeName": "deep_rnn_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 604, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 605, "col_offset": 4, "nodeName": "x_seq_shape", "type": "List[int]"}, {"lineNumber": 606, "col_offset": 4, "nodeName": "num_hidden", "type": "int"}, {"lineNumber": 607, "col_offset": 4, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 608, "col_offset": 4, "nodeName": "final_hidden_size", "type": "int"}, {"lineNumber": 609, "col_offset": 4, "nodeName": "x_seq", "type": "Any"}, {"lineNumber": 610, "col_offset": 4, "nodeName": "cores", "type": "List[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 611, "col_offset": 4, "nodeName": "final_core", "type": "sonnet.python.modules.gated_rnn.LSTM"}, {"lineNumber": 612, "col_offset": 4, "nodeName": "cores", "type": "List[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 616, "col_offset": 4, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 622, "col_offset": 4, "nodeName": "initial_output", "type": "Any"}, {"lineNumber": 624, "col_offset": 4, "nodeName": "initial_output_res", "type": "Any"}, {"lineNumber": 625, "col_offset": 4, "nodeName": "expected_shape", "type": "Tuple[int, int]"}, {"lineNumber": 629, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 630, "col_offset": 4, "nodeName": "sequence_length", "type": "int"}, {"lineNumber": 631, "col_offset": 4, "nodeName": "input_size", "type": "int"}, {"lineNumber": 632, "col_offset": 4, "nodeName": "mlp_last_layer_size", "type": "int"}, {"lineNumber": 637, "col_offset": 4, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 641, "col_offset": 4, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 651, "col_offset": 4, "nodeName": "cores", "type": "List[Any]"}, {"lineNumber": 652, "col_offset": 4, "nodeName": "rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 664, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 665, "col_offset": 4, "nodeName": "cores", "type": "List[Any]"}, {"lineNumber": 666, "col_offset": 4, "nodeName": "rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 681, "col_offset": 19, "nodeName": "tf", "type": "Any"}, {"lineNumber": 684, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 685, "col_offset": 4, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 686, "col_offset": 4, "nodeName": "model", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 687, "col_offset": 4, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 690, "col_offset": 4, "nodeName": "model_rnn", "type": "sonnet.python.modules.basic_rnn.ModelRNN"}, {"lineNumber": 691, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 696, "col_offset": 4, "nodeName": "batch_size_shape", "type": "Any"}, {"lineNumber": 697, "col_offset": 4, "nodeName": "expected_shape", "type": "Any"}, {"lineNumber": 705, "col_offset": 4, "nodeName": "model_rnn", "type": "sonnet.python.modules.basic_rnn.ModelRNN"}, {"lineNumber": 706, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 707, "col_offset": 4, "nodeName": "prev_state_data", "type": "Any"}, {"lineNumber": 708, "col_offset": 4, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 713, "col_offset": 4, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 714, "col_offset": 38, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 727, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 729, "col_offset": 12, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 731, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 760, "col_offset": 4, "nodeName": "seq_len", "type": "int"}, {"lineNumber": 761, "col_offset": 4, "nodeName": "feature_size", "type": "int"}, {"lineNumber": 762, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 763, "col_offset": 4, "nodeName": "hidden_size_forward", "type": "int"}, {"lineNumber": 764, "col_offset": 4, "nodeName": "hidden_size_backward", "type": "int"}, {"lineNumber": 774, "col_offset": 4, "nodeName": "seq", "type": "Any"}, {"lineNumber": 775, "col_offset": 4, "nodeName": "state", "type": "Tuple[Any, Any]"}, {"lineNumber": 776, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 777, "col_offset": 4, "nodeName": "shape_forward", "type": "Tuple[int, int, int]"}, {"lineNumber": 778, "col_offset": 4, "nodeName": "shape_backward", "type": "Tuple[int, int, int]"}, {"lineNumber": 796, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "setUp", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "ones", "type": "Any"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 50, "col_offset": 37, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 50, "col_offset": 45, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 52, "col_offset": 26, "nodeName": "shape", "type": "numpy.ndarray"}, {"lineNumber": 52, "col_offset": 33, "nodeName": "output", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 53, "col_offset": 26, "nodeName": "shape", "type": "numpy.ndarray"}, {"lineNumber": 53, "col_offset": 33, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 57, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "ones", "type": "Any"}, {"lineNumber": 61, "col_offset": 18, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 62, "col_offset": 21, "nodeName": "scope_name", "type": "Any"}, {"lineNumber": 62, "col_offset": 45, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 65, "col_offset": 24, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 67, "col_offset": 20, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 70, "col_offset": 21, "nodeName": "next", "type": "Callable"}, {"lineNumber": 72, "col_offset": 21, "nodeName": "next", "type": "Callable"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "next", "type": "Callable"}, {"lineNumber": 77, "col_offset": 25, "nodeName": "next", "type": "Callable"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 90, "col_offset": 17, "nodeName": "randn", "type": "Any"}, {"lineNumber": 90, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 90, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "randn", "type": "Any"}, {"lineNumber": 91, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 91, "col_offset": 55, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 92, "col_offset": 34, "nodeName": "input_data", "type": "Any"}, {"lineNumber": 93, "col_offset": 17, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 93, "col_offset": 38, "nodeName": "prev_state_data", "type": "Any"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 95, "col_offset": 25, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 95, "col_offset": 37, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 95, "col_offset": 45, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 102, "col_offset": 15, "nodeName": "output", "type": "Any"}, {"lineNumber": 102, "col_offset": 23, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 104, "col_offset": 13, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 104, "col_offset": 27, "nodeName": "fetches", "type": "List[Any]"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "output_v", "type": "Any"}, {"lineNumber": 106, "col_offset": 14, "nodeName": "next_state_v", "type": "Any"}, {"lineNumber": 106, "col_offset": 28, "nodeName": "in_to_hid_w", "type": "Any"}, {"lineNumber": 106, "col_offset": 41, "nodeName": "in_to_hid_b", "type": "Any"}, {"lineNumber": 106, "col_offset": 55, "nodeName": "output", "type": "Any"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "hid_to_hid_w", "type": "Any"}, {"lineNumber": 107, "col_offset": 18, "nodeName": "hid_to_hid_b", "type": "Any"}, {"lineNumber": 107, "col_offset": 33, "nodeName": "output", "type": "Any"}, {"lineNumber": 109, "col_offset": 55, "nodeName": "in_to_hid_b", "type": "Any"}, {"lineNumber": 110, "col_offset": 62, "nodeName": "hid_to_hid_b", "type": "Any"}, {"lineNumber": 111, "col_offset": 18, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 113, "col_offset": 24, "nodeName": "real_output", "type": "Any"}, {"lineNumber": 113, "col_offset": 37, "nodeName": "output_v", "type": "Any"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 114, "col_offset": 24, "nodeName": "real_output", "type": "Any"}, {"lineNumber": 114, "col_offset": 37, "nodeName": "next_state_v", "type": "Any"}, {"lineNumber": 117, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 119, "col_offset": 17, "nodeName": "ones", "type": "Any"}, {"lineNumber": 143, "col_offset": 18, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 147, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 147, "col_offset": 24, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 148, "col_offset": 11, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 150, "col_offset": 18, "nodeName": "init", "type": "Any"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 155, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 155, "col_offset": 24, "nodeName": "w_v", "type": "Any"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 156, "col_offset": 24, "nodeName": "b_v", "type": "Any"}, {"lineNumber": 159, "col_offset": 7, "nodeName": "executing_eagerly", "type": "Any"}, {"lineNumber": 162, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "ones", "type": "Any"}, {"lineNumber": 190, "col_offset": 18, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 194, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 194, "col_offset": 24, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 196, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 197, "col_offset": 21, "nodeName": "PartitionedVariable", "type": "Any"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "PartitionedVariable", "type": "Any"}, {"lineNumber": 200, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "PartitionedVariable", "type": "Any"}, {"lineNumber": 202, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 203, "col_offset": 21, "nodeName": "PartitionedVariable", "type": "Any"}, {"lineNumber": 206, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 208, "col_offset": 17, "nodeName": "ones", "type": "Any"}, {"lineNumber": 232, "col_offset": 18, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 235, "col_offset": 4, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 235, "col_offset": 16, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 235, "col_offset": 24, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 236, "col_offset": 19, "nodeName": "get_collection", "type": "Any"}, {"lineNumber": 236, "col_offset": 37, "nodeName": "REGULARIZATION_LOSSES", "type": "Any"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 245, "col_offset": 23, "nodeName": "TensorShape", "type": "Any"}, {"lineNumber": 245, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 250, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 251, "col_offset": 18, "nodeName": "ones", "type": "Any"}, {"lineNumber": 253, "col_offset": 18, "nodeName": "ones", "type": "Any"}, {"lineNumber": 255, "col_offset": 18, "nodeName": "ones", "type": "Any"}, {"lineNumber": 257, "col_offset": 18, "nodeName": "prev_state0", "type": "Any"}, {"lineNumber": 257, "col_offset": 31, "nodeName": "prev_state1", "type": "Any"}, {"lineNumber": 257, "col_offset": 44, "nodeName": "prev_state2", "type": "Any"}, {"lineNumber": 263, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 263, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 265, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 265, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 265, "col_offset": 25, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 265, "col_offset": 34, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 265, "col_offset": 42, "nodeName": "prev_state", "type": "Tuple[Any, Any, Any]"}, {"lineNumber": 266, "col_offset": 19, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 268, "col_offset": 43, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 270, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 272, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 278, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 280, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 282, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 285, "col_offset": 39, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 285, "col_offset": 43, "nodeName": "next_state_shape", "type": "Tuple[Any, Any, Any]"}, {"lineNumber": 286, "col_offset": 43, "nodeName": "state_size", "type": "Tuple[Any, ...]"}, {"lineNumber": 291, "col_offset": 20, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 291, "col_offset": 43, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 291, "col_offset": 55, "nodeName": "float32", "type": "Any"}, {"lineNumber": 292, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 293, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 297, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 310, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 311, "col_offset": 18, "nodeName": "ones", "type": "Any"}, {"lineNumber": 312, "col_offset": 16, "nodeName": "ones", "type": "Any"}, {"lineNumber": 318, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 320, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 320, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 320, "col_offset": 25, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 320, "col_offset": 34, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 320, "col_offset": 42, "nodeName": "prev_state", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 322, "col_offset": 28, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 322, "col_offset": 33, "nodeName": "output_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 323, "col_offset": 4, "nodeName": "expected_output_shape", "type": "List[int]"}, {"lineNumber": 325, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 325, "col_offset": 54, "nodeName": "expected_output_shape", "type": "List[int]"}, {"lineNumber": 326, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 333, "col_offset": 51, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 334, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 334, "col_offset": 24, "nodeName": "next_state_shape", "type": "List[List[Any]]"}, {"lineNumber": 334, "col_offset": 42, "nodeName": "expected_next_state_shape", "type": "List[List[List[int]]]"}, {"lineNumber": 364, "col_offset": 38, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 365, "col_offset": 12, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 365, "col_offset": 24, "nodeName": "cores1", "type": "List[Any]"}, {"lineNumber": 366, "col_offset": 15, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 368, "col_offset": 64, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 369, "col_offset": 24, "nodeName": "cores2", "type": "List[Any]"}, {"lineNumber": 370, "col_offset": 15, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 372, "col_offset": 11, "nodeName": "random_normal", "type": "Any"}, {"lineNumber": 373, "col_offset": 12, "nodeName": "dynamic_rnn", "type": "Any"}, {"lineNumber": 374, "col_offset": 8, "nodeName": "core1", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 374, "col_offset": 15, "nodeName": "xseq", "type": "Any"}, {"lineNumber": 375, "col_offset": 12, "nodeName": "dynamic_rnn", "type": "Any"}, {"lineNumber": 376, "col_offset": 8, "nodeName": "core2", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 376, "col_offset": 15, "nodeName": "xseq", "type": "Any"}, {"lineNumber": 378, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 379, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 387, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 388, "col_offset": 18, "nodeName": "ones", "type": "Any"}, {"lineNumber": 390, "col_offset": 18, "nodeName": "ones", "type": "Any"}, {"lineNumber": 392, "col_offset": 18, "nodeName": "prev_state1", "type": "Any"}, {"lineNumber": 392, "col_offset": 31, "nodeName": "prev_state2", "type": "Any"}, {"lineNumber": 396, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 396, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 397, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 397, "col_offset": 21, "nodeName": "scope_name", "type": "Any"}, {"lineNumber": 397, "col_offset": 42, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 400, "col_offset": 4, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 400, "col_offset": 13, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 400, "col_offset": 21, "nodeName": "prev_state", "type": "Tuple[Any, Any]"}, {"lineNumber": 403, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 406, "col_offset": 25, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 408, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 424, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 424, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 426, "col_offset": 13, "nodeName": "constant", "type": "Any"}, {"lineNumber": 428, "col_offset": 6, "nodeName": "prev_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 434, "col_offset": 6, "nodeName": "prev_state", "type": "Tuple[Any, Any]"}, {"lineNumber": 436, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 436, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 436, "col_offset": 25, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 436, "col_offset": 34, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 436, "col_offset": 42, "nodeName": "prev_state", "type": "Union[Tuple[Any, Any], Tuple[Any, ...]]"}, {"lineNumber": 441, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 443, "col_offset": 20, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 444, "col_offset": 4, "nodeName": "output_value", "type": "Any"}, {"lineNumber": 444, "col_offset": 18, "nodeName": "next_state1_value", "type": "Any"}, {"lineNumber": 444, "col_offset": 37, "nodeName": "next_state2_value", "type": "Any"}, {"lineNumber": 447, "col_offset": 4, "nodeName": "output1", "type": "Any"}, {"lineNumber": 447, "col_offset": 13, "nodeName": "next_state1", "type": "Any"}, {"lineNumber": 447, "col_offset": 36, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 449, "col_offset": 6, "nodeName": "input2", "type": "Any"}, {"lineNumber": 451, "col_offset": 6, "nodeName": "input2", "type": "Any"}, {"lineNumber": 451, "col_offset": 15, "nodeName": "output1", "type": "Any"}, {"lineNumber": 452, "col_offset": 4, "nodeName": "output2", "type": "Any"}, {"lineNumber": 452, "col_offset": 13, "nodeName": "next_state2", "type": "Any"}, {"lineNumber": 452, "col_offset": 36, "nodeName": "input2", "type": "Any"}, {"lineNumber": 454, "col_offset": 6, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 456, "col_offset": 6, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 456, "col_offset": 22, "nodeName": "output2", "type": "Any"}, {"lineNumber": 457, "col_offset": 27, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 460, "col_offset": 26, "nodeName": "manual_outputs_value", "type": "Any"}, {"lineNumber": 461, "col_offset": 31, "nodeName": "manual_outputs_value", "type": "Any"}, {"lineNumber": 462, "col_offset": 31, "nodeName": "manual_outputs_value", "type": "Any"}, {"lineNumber": 464, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 464, "col_offset": 24, "nodeName": "output_value", "type": "Any"}, {"lineNumber": 464, "col_offset": 38, "nodeName": "manual_output_value", "type": "Any"}, {"lineNumber": 465, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 465, "col_offset": 24, "nodeName": "next_state1_value", "type": "Any"}, {"lineNumber": 465, "col_offset": 43, "nodeName": "manual_next_state1_value", "type": "Any"}, {"lineNumber": 466, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 466, "col_offset": 24, "nodeName": "next_state2_value", "type": "Any"}, {"lineNumber": 466, "col_offset": 43, "nodeName": "manual_next_state2_value", "type": "Any"}, {"lineNumber": 478, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 478, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 479, "col_offset": 17, "nodeName": "randn", "type": "Any"}, {"lineNumber": 479, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 479, "col_offset": 45, "nodeName": "in_size", "type": "int"}, {"lineNumber": 480, "col_offset": 13, "nodeName": "constant", "type": "Any"}, {"lineNumber": 480, "col_offset": 25, "nodeName": "input_data", "type": "Any"}, {"lineNumber": 481, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 481, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 481, "col_offset": 16, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 481, "col_offset": 25, "nodeName": "input_", "type": "Any"}, {"lineNumber": 484, "col_offset": 23, "nodeName": "input_", "type": "Any"}, {"lineNumber": 486, "col_offset": 23, "nodeName": "input2", "type": "Any"}, {"lineNumber": 489, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 490, "col_offset": 19, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 490, "col_offset": 33, "nodeName": "output", "type": "Any"}, {"lineNumber": 491, "col_offset": 23, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 491, "col_offset": 37, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 493, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 493, "col_offset": 24, "nodeName": "output_value", "type": "Any"}, {"lineNumber": 493, "col_offset": 38, "nodeName": "manual_out_value", "type": "Any"}, {"lineNumber": 511, "col_offset": 21, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 511, "col_offset": 33, "nodeName": "non_recurrent_cores", "type": "List[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 512, "col_offset": 26, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 513, "col_offset": 8, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 514, "col_offset": 4, "nodeName": "assertFalse", "type": "Any"}, {"lineNumber": 514, "col_offset": 21, "nodeName": "dummy_initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 520, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 520, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 522, "col_offset": 20, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 522, "col_offset": 43, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 525, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 525, "col_offset": 11, "nodeName": "core", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 525, "col_offset": 19, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 525, "col_offset": 29, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 534, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 535, "col_offset": 26, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 535, "col_offset": 40, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 536, "col_offset": 35, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 536, "col_offset": 49, "nodeName": "expected_initial_state", "type": "List[Any]"}, {"lineNumber": 538, "col_offset": 40, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 538, "col_offset": 44, "nodeName": "expected_initial_state_value", "type": "Any"}, {"lineNumber": 539, "col_offset": 44, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 547, "col_offset": 6, "nodeName": "core", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 555, "col_offset": 27, "nodeName": "Module", "type": "Type[sonnet.python.modules.base.Module]"}, {"lineNumber": 555, "col_offset": 38, "nodeName": "module_build", "type": "Callable[[], Any]"}, {"lineNumber": 556, "col_offset": 20, "nodeName": "initial_state_module", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 558, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 559, "col_offset": 26, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 559, "col_offset": 40, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 560, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 560, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 561, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 561, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 562, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 562, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 563, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 563, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 564, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 564, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 565, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 565, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 566, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 566, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 567, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 567, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 570, "col_offset": 7, "nodeName": "executing_eagerly", "type": "Any"}, {"lineNumber": 576, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 578, "col_offset": 21, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 578, "col_offset": 44, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 579, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 580, "col_offset": 8, "nodeName": "name", "type": "Any"}, {"lineNumber": 582, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 583, "col_offset": 8, "nodeName": "name", "type": "Any"}, {"lineNumber": 585, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 586, "col_offset": 8, "nodeName": "name", "type": "Any"}, {"lineNumber": 588, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 589, "col_offset": 8, "nodeName": "name", "type": "Any"}, {"lineNumber": 592, "col_offset": 24, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 593, "col_offset": 8, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 594, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 594, "col_offset": 21, "nodeName": "name", "type": "Any"}, {"lineNumber": 596, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 596, "col_offset": 21, "nodeName": "name", "type": "Any"}, {"lineNumber": 598, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 598, "col_offset": 21, "nodeName": "name", "type": "Any"}, {"lineNumber": 600, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 600, "col_offset": 21, "nodeName": "name", "type": "Any"}, {"lineNumber": 605, "col_offset": 23, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 609, "col_offset": 12, "nodeName": "constant", "type": "Any"}, {"lineNumber": 611, "col_offset": 17, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 611, "col_offset": 26, "nodeName": "final_hidden_size", "type": "int"}, {"lineNumber": 612, "col_offset": 14, "nodeName": "final_core", "type": "sonnet.python.modules.gated_rnn.LSTM"}, {"lineNumber": 613, "col_offset": 20, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 613, "col_offset": 32, "nodeName": "cores", "type": "List[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 616, "col_offset": 20, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 617, "col_offset": 20, "nodeName": "dynamic_rnn", "type": "Any"}, {"lineNumber": 617, "col_offset": 38, "nodeName": "deep_rnn_core", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 618, "col_offset": 38, "nodeName": "x_seq", "type": "Any"}, {"lineNumber": 622, "col_offset": 21, "nodeName": "output_seq", "type": "Any"}, {"lineNumber": 623, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 624, "col_offset": 25, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 624, "col_offset": 39, "nodeName": "initial_output", "type": "Any"}, {"lineNumber": 625, "col_offset": 22, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 625, "col_offset": 34, "nodeName": "final_hidden_size", "type": "int"}, {"lineNumber": 626, "col_offset": 4, "nodeName": "assertSequenceEqual", "type": "Any"}, {"lineNumber": 626, "col_offset": 29, "nodeName": "shape", "type": "Any"}, {"lineNumber": 626, "col_offset": 55, "nodeName": "expected_shape", "type": "Tuple[int, int]"}, {"lineNumber": 637, "col_offset": 15, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 637, "col_offset": 27, "nodeName": "cores", "type": "List[Any]"}, {"lineNumber": 638, "col_offset": 21, "nodeName": "constant", "type": "Any"}, {"lineNumber": 641, "col_offset": 20, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 642, "col_offset": 33, "nodeName": "dynamic_rnn", "type": "Any"}, {"lineNumber": 643, "col_offset": 8, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 643, "col_offset": 18, "nodeName": "input_sequence", "type": "Any"}, {"lineNumber": 646, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 651, "col_offset": 67, "nodeName": "relu", "type": "Any"}, {"lineNumber": 652, "col_offset": 10, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 652, "col_offset": 22, "nodeName": "cores", "type": "List[Any]"}, {"lineNumber": 654, "col_offset": 53, "nodeName": "mocked_logging_warning", "type": "Any"}, {"lineNumber": 656, "col_offset": 6, "nodeName": "unused_output_size", "type": "Any"}, {"lineNumber": 656, "col_offset": 27, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 658, "col_offset": 6, "nodeName": "first_call_args", "type": "Any"}, {"lineNumber": 665, "col_offset": 67, "nodeName": "relu", "type": "Any"}, {"lineNumber": 666, "col_offset": 10, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 666, "col_offset": 22, "nodeName": "cores", "type": "List[Any]"}, {"lineNumber": 667, "col_offset": 20, "nodeName": "rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 670, "col_offset": 53, "nodeName": "mocked_logging_warning", "type": "Any"}, {"lineNumber": 671, "col_offset": 6, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 671, "col_offset": 20, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 675, "col_offset": 6, "nodeName": "first_call_args", "type": "Any"}, {"lineNumber": 684, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 685, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 686, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 686, "col_offset": 17, "nodeName": "Module", "type": "Type[sonnet.python.modules.base.Module]"}, {"lineNumber": 687, "col_offset": 4, "nodeName": "model", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 687, "col_offset": 29, "nodeName": "TensorShape", "type": "Any"}, {"lineNumber": 687, "col_offset": 44, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 690, "col_offset": 16, "nodeName": "ModelRNN", "type": "Type[sonnet.python.modules.basic_rnn.ModelRNN]"}, {"lineNumber": 690, "col_offset": 29, "nodeName": "model", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 691, "col_offset": 13, "nodeName": "ones", "type": "Any"}, {"lineNumber": 692, "col_offset": 17, "nodeName": "ones", "type": "Any"}, {"lineNumber": 695, "col_offset": 4, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 695, "col_offset": 13, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 695, "col_offset": 26, "nodeName": "model_rnn", "type": "sonnet.python.modules.basic_rnn.ModelRNN"}, {"lineNumber": 695, "col_offset": 36, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 695, "col_offset": 44, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 696, "col_offset": 23, "nodeName": "TensorShape", "type": "Any"}, {"lineNumber": 696, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 697, "col_offset": 21, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 697, "col_offset": 50, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 699, "col_offset": 4, "nodeName": "assertNotEqual", "type": "Any"}, {"lineNumber": 699, "col_offset": 24, "nodeName": "expected_shape", "type": "Any"}, {"lineNumber": 700, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 700, "col_offset": 21, "nodeName": "expected_shape", "type": "Any"}, {"lineNumber": 701, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 701, "col_offset": 21, "nodeName": "expected_shape", "type": "Any"}, {"lineNumber": 702, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 702, "col_offset": 21, "nodeName": "expected_shape", "type": "Any"}, {"lineNumber": 705, "col_offset": 16, "nodeName": "ModelRNN", "type": "Type[sonnet.python.modules.basic_rnn.ModelRNN]"}, {"lineNumber": 705, "col_offset": 29, "nodeName": "model", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 706, "col_offset": 13, "nodeName": "random_normal", "type": "Any"}, {"lineNumber": 707, "col_offset": 22, "nodeName": "randn", "type": "Any"}, {"lineNumber": 707, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 707, "col_offset": 55, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 708, "col_offset": 17, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 708, "col_offset": 38, "nodeName": "prev_state_data", "type": "Any"}, {"lineNumber": 710, "col_offset": 4, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 710, "col_offset": 13, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 710, "col_offset": 26, "nodeName": "model_rnn", "type": "sonnet.python.modules.basic_rnn.ModelRNN"}, {"lineNumber": 710, "col_offset": 36, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 710, "col_offset": 44, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 712, "col_offset": 4, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 713, "col_offset": 20, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 714, "col_offset": 4, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 714, "col_offset": 19, "nodeName": "next_state_value", "type": "Any"}, {"lineNumber": 716, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 716, "col_offset": 24, "nodeName": "prev_state_data", "type": "Any"}, {"lineNumber": 716, "col_offset": 41, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 717, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 717, "col_offset": 24, "nodeName": "outputs_value", "type": "Any"}, {"lineNumber": 717, "col_offset": 39, "nodeName": "next_state_value", "type": "Any"}, {"lineNumber": 729, "col_offset": 12, "nodeName": "collections", "type": "module"}, {"lineNumber": 745, "col_offset": 46, "nodeName": "float32", "type": "Any"}, {"lineNumber": 752, "col_offset": 13, "nodeName": "state_size", "type": "Any"}, {"lineNumber": 760, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 761, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 762, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 763, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 764, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 765, "col_offset": 24, "nodeName": "ToyRNN", "type": "Type[Any]"}, {"lineNumber": 767, "col_offset": 25, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 772, "col_offset": 16, "nodeName": "BidirectionalRNN", "type": "Type[sonnet.python.modules.basic_rnn.BidirectionalRNN]"}, {"lineNumber": 773, "col_offset": 8, "nodeName": "forward_core", "type": "Any"}, {"lineNumber": 773, "col_offset": 27, "nodeName": "backward_core", "type": "sonnet.python.modules.gated_rnn.LSTM"}, {"lineNumber": 774, "col_offset": 10, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 775, "col_offset": 12, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 775, "col_offset": 36, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 776, "col_offset": 13, "nodeName": "bidir_rnn", "type": "sonnet.python.modules.basic_rnn.BidirectionalRNN"}, {"lineNumber": 776, "col_offset": 23, "nodeName": "seq", "type": "Any"}, {"lineNumber": 776, "col_offset": 28, "nodeName": "state", "type": "Tuple[Any, Any]"}, {"lineNumber": 777, "col_offset": 21, "nodeName": "seq_len", "type": "int"}, {"lineNumber": 777, "col_offset": 35, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 777, "col_offset": 52, "nodeName": "hidden_size_forward", "type": "int"}, {"lineNumber": 778, "col_offset": 22, "nodeName": "seq_len", "type": "int"}, {"lineNumber": 778, "col_offset": 36, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 778, "col_offset": 53, "nodeName": "hidden_size_backward", "type": "int"}, {"lineNumber": 779, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 780, "col_offset": 24, "nodeName": "shape_forward", "type": "Tuple[int, int, int]"}, {"lineNumber": 781, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 782, "col_offset": 24, "nodeName": "shape_forward", "type": "Tuple[int, int, int]"}, {"lineNumber": 783, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 784, "col_offset": 24, "nodeName": "shape_backward", "type": "Tuple[int, int, int]"}, {"lineNumber": 785, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 786, "col_offset": 24, "nodeName": "shape_forward", "type": "Tuple[int, int, int]"}, {"lineNumber": 787, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 788, "col_offset": 24, "nodeName": "shape_forward", "type": "Tuple[int, int, int]"}, {"lineNumber": 789, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 790, "col_offset": 24, "nodeName": "shape_backward", "type": "Tuple[int, int, int]"}, {"lineNumber": 791, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 792, "col_offset": 24, "nodeName": "shape_backward", "type": "Tuple[int, int, int]"}, {"lineNumber": 796, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 46, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 48, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "snt", "type": "module"}, {"lineNumber": 49, "col_offset": 57, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 51, "col_offset": 24, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 51, "col_offset": 41, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 57, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 58, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 61, "col_offset": 18, "nodeName": "snt", "type": "module"}, {"lineNumber": 61, "col_offset": 38, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 61, "col_offset": 60, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 62, "col_offset": 21, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 63, "col_offset": 33, "nodeName": "Error", "type": "Type[sonnet.python.modules.base_errors.Error]"}, {"lineNumber": 64, "col_offset": 6, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 67, "col_offset": 20, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 68, "col_offset": 25, "nodeName": "rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "v", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "v", "type": "Any"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 80, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 81, "col_offset": 26, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 81, "col_offset": 47, "nodeName": "in_to_hidden_w", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 82, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 82, "col_offset": 37, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 83, "col_offset": 26, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 83, "col_offset": 47, "nodeName": "in_to_hidden_b", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 84, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 85, "col_offset": 26, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 85, "col_offset": 47, "nodeName": "hidden_to_hidden_w", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 86, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 86, "col_offset": 37, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 87, "col_offset": 26, "nodeName": "convert_to_tensor", "type": "Any"}, {"lineNumber": 87, "col_offset": 47, "nodeName": "hidden_to_hidden_b", "type": "Any"}, {"lineNumber": 90, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 90, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 90, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "random", "type": "Any"}, {"lineNumber": 91, "col_offset": 38, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 91, "col_offset": 55, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 93, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "snt", "type": "module"}, {"lineNumber": 94, "col_offset": 57, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 100, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 102, "col_offset": 35, "nodeName": "in_to_hid", "type": "Any"}, {"lineNumber": 102, "col_offset": 49, "nodeName": "in_to_hid", "type": "Any"}, {"lineNumber": 103, "col_offset": 15, "nodeName": "hid_to_hid", "type": "Any"}, {"lineNumber": 103, "col_offset": 30, "nodeName": "hid_to_hid", "type": "Any"}, {"lineNumber": 104, "col_offset": 13, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 109, "col_offset": 21, "nodeName": "dot", "type": "Any"}, {"lineNumber": 109, "col_offset": 28, "nodeName": "input_data", "type": "Any"}, {"lineNumber": 109, "col_offset": 40, "nodeName": "in_to_hid_w", "type": "Any"}, {"lineNumber": 110, "col_offset": 22, "nodeName": "dot", "type": "Any"}, {"lineNumber": 110, "col_offset": 29, "nodeName": "prev_state_data", "type": "Any"}, {"lineNumber": 110, "col_offset": 46, "nodeName": "hid_to_hid_w", "type": "Any"}, {"lineNumber": 111, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 111, "col_offset": 26, "nodeName": "real_in_to_hid", "type": "Any"}, {"lineNumber": 111, "col_offset": 43, "nodeName": "real_hid_to_hid", "type": "Any"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 117, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 118, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 119, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 120, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 122, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 122, "col_offset": 33, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 123, "col_offset": 6, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 128, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 128, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 128, "col_offset": 44, "nodeName": "err", "type": "str"}, {"lineNumber": 129, "col_offset": 6, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 143, "col_offset": 18, "nodeName": "snt", "type": "module"}, {"lineNumber": 144, "col_offset": 45, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 145, "col_offset": 46, "nodeName": "valid_initializers", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 148, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "w", "type": "Any"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "b", "type": "Any"}, {"lineNumber": 155, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 155, "col_offset": 29, "nodeName": "ones", "type": "Any"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 156, "col_offset": 29, "nodeName": "ones", "type": "Any"}, {"lineNumber": 159, "col_offset": 7, "nodeName": "tf", "type": "Any"}, {"lineNumber": 160, "col_offset": 6, "nodeName": "skipTest", "type": "Any"}, {"lineNumber": 162, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 163, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 165, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 167, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 167, "col_offset": 33, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 168, "col_offset": 6, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 173, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 173, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 173, "col_offset": 44, "nodeName": "err", "type": "str"}, {"lineNumber": 174, "col_offset": 6, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 190, "col_offset": 18, "nodeName": "snt", "type": "module"}, {"lineNumber": 191, "col_offset": 45, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 192, "col_offset": 46, "nodeName": "valid_partitioners", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 196, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 196, "col_offset": 21, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 196, "col_offset": 26, "nodeName": "w", "type": "Any"}, {"lineNumber": 197, "col_offset": 21, "nodeName": "variables", "type": "Any"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 198, "col_offset": 26, "nodeName": "b", "type": "Any"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "variables", "type": "Any"}, {"lineNumber": 200, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "w", "type": "Any"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "variables", "type": "Any"}, {"lineNumber": 202, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 202, "col_offset": 21, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "b", "type": "Any"}, {"lineNumber": 203, "col_offset": 21, "nodeName": "variables", "type": "Any"}, {"lineNumber": 206, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 207, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 208, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 209, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 211, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 211, "col_offset": 33, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 212, "col_offset": 6, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 217, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 217, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 217, "col_offset": 44, "nodeName": "err", "type": "str"}, {"lineNumber": 218, "col_offset": 6, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 225, "col_offset": 17, "nodeName": "l2_loss", "type": "Any"}, {"lineNumber": 228, "col_offset": 17, "nodeName": "l2_loss", "type": "Any"}, {"lineNumber": 232, "col_offset": 18, "nodeName": "snt", "type": "module"}, {"lineNumber": 233, "col_offset": 45, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 234, "col_offset": 46, "nodeName": "valid_regularizers", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 236, "col_offset": 19, "nodeName": "tf", "type": "Any"}, {"lineNumber": 236, "col_offset": 37, "nodeName": "GraphKeys", "type": "Any"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 237, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 237, "col_offset": 25, "nodeName": "regularizers", "type": "Any"}, {"lineNumber": 245, "col_offset": 23, "nodeName": "tf", "type": "Any"}, {"lineNumber": 250, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 250, "col_offset": 27, "nodeName": "float32", "type": "Any"}, {"lineNumber": 251, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 252, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 253, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 254, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 255, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 256, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 260, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 261, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 262, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 263, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 266, "col_offset": 19, "nodeName": "output", "type": "Any"}, {"lineNumber": 268, "col_offset": 18, "nodeName": "in_size", "type": "int"}, {"lineNumber": 268, "col_offset": 28, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 270, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "is_compatible_with", "type": "Any"}, {"lineNumber": 272, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 272, "col_offset": 20, "nodeName": "is_compatible_with", "type": "Any"}, {"lineNumber": 275, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 275, "col_offset": 51, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 276, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 278, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 279, "col_offset": 8, "nodeName": "is_compatible_with", "type": "Any"}, {"lineNumber": 280, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "is_compatible_with", "type": "Any"}, {"lineNumber": 282, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 283, "col_offset": 8, "nodeName": "is_compatible_with", "type": "Any"}, {"lineNumber": 286, "col_offset": 43, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 287, "col_offset": 6, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 291, "col_offset": 20, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 291, "col_offset": 55, "nodeName": "tf", "type": "Any"}, {"lineNumber": 292, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 292, "col_offset": 20, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 292, "col_offset": 24, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 292, "col_offset": 40, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 292, "col_offset": 44, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 293, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 293, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 294, "col_offset": 26, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 295, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 296, "col_offset": 26, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 297, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 297, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 298, "col_offset": 26, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 307, "col_offset": 34, "nodeName": "input_shape", "type": "Tuple[int, int]"}, {"lineNumber": 307, "col_offset": 49, "nodeName": "input_channels", "type": "int"}, {"lineNumber": 308, "col_offset": 19, "nodeName": "input_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 308, "col_offset": 39, "nodeName": "output_channels", "type": "int"}, {"lineNumber": 310, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 310, "col_offset": 27, "nodeName": "float32", "type": "Any"}, {"lineNumber": 310, "col_offset": 45, "nodeName": "input_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 311, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 311, "col_offset": 32, "nodeName": "float32", "type": "Any"}, {"lineNumber": 311, "col_offset": 50, "nodeName": "output_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 312, "col_offset": 16, "nodeName": "tf", "type": "Any"}, {"lineNumber": 312, "col_offset": 30, "nodeName": "float32", "type": "Any"}, {"lineNumber": 312, "col_offset": 48, "nodeName": "output_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 313, "col_offset": 19, "nodeName": "prev_hidden", "type": "Any"}, {"lineNumber": 313, "col_offset": 32, "nodeName": "prev_cell", "type": "Any"}, {"lineNumber": 313, "col_offset": 47, "nodeName": "_", "type": "int"}, {"lineNumber": 315, "col_offset": 13, "nodeName": "Conv2DLSTM", "type": "Type[sonnet.python.modules.gated_rnn.Conv2DLSTM]"}, {"lineNumber": 318, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 325, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 325, "col_offset": 24, "nodeName": "as_list", "type": "Any"}, {"lineNumber": 326, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 326, "col_offset": 24, "nodeName": "as_list", "type": "Any"}, {"lineNumber": 327, "col_offset": 24, "nodeName": "expected_output_shape", "type": "List[int]"}, {"lineNumber": 331, "col_offset": 12, "nodeName": "state", "type": "Any"}, {"lineNumber": 331, "col_offset": 21, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 334, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 340, "col_offset": 13, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 341, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 342, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 343, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 346, "col_offset": 6, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 346, "col_offset": 18, "nodeName": "cores", "type": "List[Union[sonnet.python.modules.basic.Linear, sonnet.python.modules.basic_rnn.VanillaRNN]]"}, {"lineNumber": 348, "col_offset": 13, "nodeName": "BasicLSTMCell", "type": "Any"}, {"lineNumber": 348, "col_offset": 46, "nodeName": "BasicLSTMCell", "type": "Any"}, {"lineNumber": 349, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 352, "col_offset": 6, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 352, "col_offset": 18, "nodeName": "cells", "type": "List[Any]"}, {"lineNumber": 364, "col_offset": 14, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 364, "col_offset": 23, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 364, "col_offset": 38, "nodeName": "tf", "type": "Any"}, {"lineNumber": 364, "col_offset": 47, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 364, "col_offset": 58, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 365, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 366, "col_offset": 15, "nodeName": "core1", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 366, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 368, "col_offset": 14, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 368, "col_offset": 23, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 368, "col_offset": 38, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 368, "col_offset": 49, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 368, "col_offset": 64, "nodeName": "tf", "type": "Any"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 370, "col_offset": 15, "nodeName": "core2", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 370, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 372, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 373, "col_offset": 12, "nodeName": "nn", "type": "Any"}, {"lineNumber": 374, "col_offset": 35, "nodeName": "core1_h0", "type": "Tuple[Any, ...]"}, {"lineNumber": 375, "col_offset": 12, "nodeName": "nn", "type": "Any"}, {"lineNumber": 376, "col_offset": 35, "nodeName": "core2_h0", "type": "Tuple[Any, ...]"}, {"lineNumber": 378, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 378, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 379, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 379, "col_offset": 19, "nodeName": "y1", "type": "Any"}, {"lineNumber": 379, "col_offset": 23, "nodeName": "y2", "type": "Any"}, {"lineNumber": 387, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 387, "col_offset": 27, "nodeName": "float32", "type": "Any"}, {"lineNumber": 388, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 389, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 390, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 391, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 394, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 395, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 396, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 396, "col_offset": 39, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 397, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 397, "col_offset": 21, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 398, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 398, "col_offset": 33, "nodeName": "Error", "type": "Type[sonnet.python.modules.base_errors.Error]"}, {"lineNumber": 399, "col_offset": 6, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 403, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 403, "col_offset": 21, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 406, "col_offset": 31, "nodeName": "from_iterable", "type": "Callable"}, {"lineNumber": 408, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 408, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 408, "col_offset": 25, "nodeName": "deep_rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 411, "col_offset": 6, "nodeName": "assertRegexpMatches", "type": "Any"}, {"lineNumber": 412, "col_offset": 10, "nodeName": "name", "type": "Any"}, {"lineNumber": 422, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 423, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 424, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 424, "col_offset": 39, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 425, "col_offset": 44, "nodeName": "skip_connections", "type": "Any"}, {"lineNumber": 426, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 426, "col_offset": 25, "nodeName": "randn", "type": "Any"}, {"lineNumber": 426, "col_offset": 41, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 426, "col_offset": 53, "nodeName": "in_size", "type": "int"}, {"lineNumber": 426, "col_offset": 69, "nodeName": "float32", "type": "Any"}, {"lineNumber": 428, "col_offset": 19, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 428, "col_offset": 42, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 428, "col_offset": 54, "nodeName": "float32", "type": "Any"}, {"lineNumber": 430, "col_offset": 20, "nodeName": "constant", "type": "Any"}, {"lineNumber": 432, "col_offset": 20, "nodeName": "constant", "type": "Any"}, {"lineNumber": 434, "col_offset": 20, "nodeName": "prev_state1", "type": "Any"}, {"lineNumber": 434, "col_offset": 33, "nodeName": "prev_state2", "type": "Any"}, {"lineNumber": 441, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 441, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 443, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 443, "col_offset": 35, "nodeName": "output", "type": "Any"}, {"lineNumber": 447, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 447, "col_offset": 44, "nodeName": "prev_state", "type": "Union[Tuple[Any, Any], Tuple[Any, ...]]"}, {"lineNumber": 449, "col_offset": 15, "nodeName": "concat", "type": "Any"}, {"lineNumber": 452, "col_offset": 27, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 452, "col_offset": 44, "nodeName": "prev_state", "type": "Union[Tuple[Any, Any], Tuple[Any, ...]]"}, {"lineNumber": 454, "col_offset": 22, "nodeName": "concat", "type": "Any"}, {"lineNumber": 457, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 458, "col_offset": 9, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 458, "col_offset": 24, "nodeName": "next_state1", "type": "Any"}, {"lineNumber": 458, "col_offset": 37, "nodeName": "next_state2", "type": "Any"}, {"lineNumber": 464, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 465, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 466, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 474, "col_offset": 13, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 475, "col_offset": 13, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 478, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 479, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 480, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 480, "col_offset": 43, "nodeName": "float32", "type": "Any"}, {"lineNumber": 484, "col_offset": 14, "nodeName": "cores", "type": "List[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 486, "col_offset": 14, "nodeName": "cores", "type": "List[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 489, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 489, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 490, "col_offset": 19, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 491, "col_offset": 23, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 493, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 509, "col_offset": 27, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 510, "col_offset": 27, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 511, "col_offset": 21, "nodeName": "snt", "type": "module"}, {"lineNumber": 512, "col_offset": 26, "nodeName": "dummy_deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 513, "col_offset": 30, "nodeName": "trainable", "type": "Any"}, {"lineNumber": 514, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 518, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 519, "col_offset": 13, "nodeName": "VanillaRNN", "type": "Type[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 520, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 522, "col_offset": 20, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 522, "col_offset": 65, "nodeName": "trainable", "type": "Any"}, {"lineNumber": 523, "col_offset": 66, "nodeName": "initializer", "type": "Optional[List[Any]]"}, {"lineNumber": 527, "col_offset": 8, "nodeName": "expected_initializer", "type": "None"}, {"lineNumber": 528, "col_offset": 11, "nodeName": "initializer", "type": "Optional[List[Any]]"}, {"lineNumber": 534, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 534, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 535, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 536, "col_offset": 35, "nodeName": "self", "type": "Any"}, {"lineNumber": 540, "col_offset": 6, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 540, "col_offset": 26, "nodeName": "actual_value", "type": "Any"}, {"lineNumber": 540, "col_offset": 40, "nodeName": "expected_value", "type": "Any"}, {"lineNumber": 547, "col_offset": 13, "nodeName": "DeepRNN", "type": "Type[sonnet.python.modules.basic_rnn.DeepRNN]"}, {"lineNumber": 548, "col_offset": 23, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 549, "col_offset": 10, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 550, "col_offset": 23, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 553, "col_offset": 13, "nodeName": "initial_state1", "type": "Tuple[Any, ...]"}, {"lineNumber": 553, "col_offset": 29, "nodeName": "initial_state2", "type": "Tuple[Any, ...]"}, {"lineNumber": 555, "col_offset": 27, "nodeName": "snt", "type": "module"}, {"lineNumber": 558, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 558, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 559, "col_offset": 26, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 560, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 560, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 561, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 562, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 562, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 563, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 564, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 564, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 565, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 566, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 566, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 567, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 570, "col_offset": 7, "nodeName": "tf", "type": "Any"}, {"lineNumber": 571, "col_offset": 13, "nodeName": "skipTest", "type": "Any"}, {"lineNumber": 576, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 578, "col_offset": 21, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 579, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 582, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 585, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 588, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 592, "col_offset": 24, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 594, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 596, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 598, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 600, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 609, "col_offset": 12, "nodeName": "tf", "type": "Any"}, {"lineNumber": 609, "col_offset": 24, "nodeName": "normal", "type": "Any"}, {"lineNumber": 609, "col_offset": 66, "nodeName": "float32", "type": "Any"}, {"lineNumber": 610, "col_offset": 13, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 610, "col_offset": 22, "nodeName": "num_hidden", "type": "int"}, {"lineNumber": 610, "col_offset": 38, "nodeName": "_", "type": "int"}, {"lineNumber": 611, "col_offset": 17, "nodeName": "snt", "type": "module"}, {"lineNumber": 613, "col_offset": 20, "nodeName": "snt", "type": "module"}, {"lineNumber": 616, "col_offset": 20, "nodeName": "deep_rnn_core", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 616, "col_offset": 59, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 617, "col_offset": 20, "nodeName": "nn", "type": "Any"}, {"lineNumber": 620, "col_offset": 52, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 621, "col_offset": 44, "nodeName": "float32", "type": "Any"}, {"lineNumber": 623, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 623, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 624, "col_offset": 25, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 626, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 626, "col_offset": 29, "nodeName": "initial_output_res", "type": "Any"}, {"lineNumber": 634, "col_offset": 8, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 635, "col_offset": 8, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 637, "col_offset": 15, "nodeName": "snt", "type": "module"}, {"lineNumber": 638, "col_offset": 21, "nodeName": "tf", "type": "Any"}, {"lineNumber": 639, "col_offset": 8, "nodeName": "randn", "type": "Any"}, {"lineNumber": 639, "col_offset": 24, "nodeName": "sequence_length", "type": "int"}, {"lineNumber": 639, "col_offset": 41, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 639, "col_offset": 53, "nodeName": "input_size", "type": "int"}, {"lineNumber": 640, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 641, "col_offset": 20, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 641, "col_offset": 54, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 642, "col_offset": 33, "nodeName": "nn", "type": "Any"}, {"lineNumber": 644, "col_offset": 22, "nodeName": "initial_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 646, "col_offset": 4, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 647, "col_offset": 8, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 648, "col_offset": 8, "nodeName": "TensorShape", "type": "Any"}, {"lineNumber": 651, "col_offset": 13, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 651, "col_offset": 39, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 651, "col_offset": 67, "nodeName": "nn", "type": "Any"}, {"lineNumber": 652, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 654, "col_offset": 9, "nodeName": "object", "type": "Callable[..., mock._patch]"}, {"lineNumber": 654, "col_offset": 27, "nodeName": "logging", "type": "Any"}, {"lineNumber": 656, "col_offset": 27, "nodeName": "rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 657, "col_offset": 6, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 657, "col_offset": 22, "nodeName": "called", "type": "Any"}, {"lineNumber": 658, "col_offset": 24, "nodeName": "call_args", "type": "Any"}, {"lineNumber": 659, "col_offset": 6, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 661, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 665, "col_offset": 13, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 665, "col_offset": 39, "nodeName": "Linear", "type": "Type[sonnet.python.modules.basic.Linear]"}, {"lineNumber": 665, "col_offset": 67, "nodeName": "nn", "type": "Any"}, {"lineNumber": 666, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 667, "col_offset": 24, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 668, "col_offset": 24, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 670, "col_offset": 9, "nodeName": "object", "type": "Callable[..., mock._patch]"}, {"lineNumber": 670, "col_offset": 27, "nodeName": "logging", "type": "Any"}, {"lineNumber": 671, "col_offset": 20, "nodeName": "rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 673, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 673, "col_offset": 23, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 674, "col_offset": 6, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 674, "col_offset": 22, "nodeName": "called", "type": "Any"}, {"lineNumber": 675, "col_offset": 24, "nodeName": "call_args", "type": "Any"}, {"lineNumber": 676, "col_offset": 6, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 686, "col_offset": 17, "nodeName": "snt", "type": "module"}, {"lineNumber": 686, "col_offset": 48, "nodeName": "identity", "type": "Any"}, {"lineNumber": 687, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 687, "col_offset": 29, "nodeName": "tf", "type": "Any"}, {"lineNumber": 687, "col_offset": 44, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 690, "col_offset": 16, "nodeName": "snt", "type": "module"}, {"lineNumber": 690, "col_offset": 29, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 691, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 691, "col_offset": 22, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 692, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 693, "col_offset": 14, "nodeName": "float32", "type": "Any"}, {"lineNumber": 696, "col_offset": 23, "nodeName": "tf", "type": "Any"}, {"lineNumber": 696, "col_offset": 38, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 697, "col_offset": 21, "nodeName": "batch_size_shape", "type": "Any"}, {"lineNumber": 697, "col_offset": 50, "nodeName": "model", "type": "sonnet.python.modules.base.Module"}, {"lineNumber": 699, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 699, "col_offset": 40, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 700, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 700, "col_offset": 37, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 701, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 701, "col_offset": 37, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 702, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 702, "col_offset": 37, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 705, "col_offset": 16, "nodeName": "snt", "type": "module"}, {"lineNumber": 705, "col_offset": 29, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 706, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 706, "col_offset": 31, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 707, "col_offset": 22, "nodeName": "random", "type": "Any"}, {"lineNumber": 707, "col_offset": 38, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 707, "col_offset": 55, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 708, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 712, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 712, "col_offset": 18, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 713, "col_offset": 20, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 713, "col_offset": 35, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 713, "col_offset": 44, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 716, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 717, "col_offset": 4, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 720, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 720, "col_offset": 27, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 721, "col_offset": 6, "nodeName": "ModelRNN", "type": "Type[sonnet.python.modules.basic_rnn.ModelRNN]"}, {"lineNumber": 721, "col_offset": 19, "nodeName": "identity", "type": "Any"}, {"lineNumber": 722, "col_offset": 9, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 722, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 723, "col_offset": 6, "nodeName": "ModelRNN", "type": "Type[sonnet.python.modules.basic_rnn.ModelRNN]"}, {"lineNumber": 736, "col_offset": 6, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 738, "col_offset": 8, "nodeName": "_wrapped_lstm", "type": "sonnet.python.modules.gated_rnn.LSTM"}, {"lineNumber": 742, "col_offset": 6, "nodeName": "output", "type": "Any"}, {"lineNumber": 742, "col_offset": 14, "nodeName": "state", "type": "Any"}, {"lineNumber": 742, "col_offset": 22, "nodeName": "_wrapped_lstm", "type": "Any"}, {"lineNumber": 742, "col_offset": 41, "nodeName": "input_", "type": "Any"}, {"lineNumber": 742, "col_offset": 49, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 743, "col_offset": 59, "nodeName": "state", "type": "Any"}, {"lineNumber": 745, "col_offset": 46, "nodeName": "tf", "type": "Any"}, {"lineNumber": 748, "col_offset": 13, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 748, "col_offset": 46, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 752, "col_offset": 13, "nodeName": "_wrapped_lstm", "type": "Any"}, {"lineNumber": 756, "col_offset": 13, "nodeName": "toy_out", "type": "Type[`namedtuple-toy_out-out_one-out_two`]"}, {"lineNumber": 756, "col_offset": 42, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 757, "col_offset": 42, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 765, "col_offset": 24, "nodeName": "BidirectionalRNNTest", "type": "Type[BidirectionalRNNTest]"}, {"lineNumber": 766, "col_offset": 20, "nodeName": "hidden_size_forward", "type": "int"}, {"lineNumber": 767, "col_offset": 25, "nodeName": "snt", "type": "module"}, {"lineNumber": 768, "col_offset": 20, "nodeName": "hidden_size_backward", "type": "int"}, {"lineNumber": 772, "col_offset": 16, "nodeName": "snt", "type": "module"}, {"lineNumber": 773, "col_offset": 8, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 773, "col_offset": 27, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 774, "col_offset": 10, "nodeName": "tf", "type": "Any"}, {"lineNumber": 774, "col_offset": 20, "nodeName": "seq_len", "type": "int"}, {"lineNumber": 774, "col_offset": 34, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 774, "col_offset": 51, "nodeName": "feature_size", "type": "int"}, {"lineNumber": 775, "col_offset": 12, "nodeName": "bidir_rnn", "type": "sonnet.python.modules.basic_rnn.BidirectionalRNN"}, {"lineNumber": 775, "col_offset": 36, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 777, "col_offset": 21, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 777, "col_offset": 35, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 777, "col_offset": 52, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 778, "col_offset": 22, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 778, "col_offset": 36, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 778, "col_offset": 53, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 779, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 779, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 781, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 781, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 783, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 783, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 785, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 785, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 787, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 787, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 789, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 789, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 791, "col_offset": 4, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 791, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 796, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 39, "col_offset": 10, "nodeName": "VanillaRNNTest", "type": "Type[VanillaRNNTest]"}, {"lineNumber": 39, "col_offset": 26, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 46, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 46, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 46, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 48, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 48, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 48, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 49, "col_offset": 57, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 51, "col_offset": 24, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 51, "col_offset": 41, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 58, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 58, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 58, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 60, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 60, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 61, "col_offset": 60, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 63, "col_offset": 33, "nodeName": "snt", "type": "module"}, {"lineNumber": 64, "col_offset": 6, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 71, "col_offset": 14, "nodeName": "v", "type": "Any"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 73, "col_offset": 14, "nodeName": "v", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 75, "col_offset": 14, "nodeName": "v", "type": "Any"}, {"lineNumber": 75, "col_offset": 19, "nodeName": "rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 78, "col_offset": 14, "nodeName": "v", "type": "Any"}, {"lineNumber": 78, "col_offset": 19, "nodeName": "rnn_variables", "type": "Tuple[Any, ...]"}, {"lineNumber": 80, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 80, "col_offset": 38, "nodeName": "in_size", "type": "int"}, {"lineNumber": 80, "col_offset": 52, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 81, "col_offset": 26, "nodeName": "tf", "type": "Any"}, {"lineNumber": 82, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 82, "col_offset": 37, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 83, "col_offset": 26, "nodeName": "tf", "type": "Any"}, {"lineNumber": 84, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 84, "col_offset": 38, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 84, "col_offset": 56, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 85, "col_offset": 26, "nodeName": "tf", "type": "Any"}, {"lineNumber": 86, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 86, "col_offset": 37, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 87, "col_offset": 26, "nodeName": "tf", "type": "Any"}, {"lineNumber": 90, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 94, "col_offset": 57, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 100, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 109, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 110, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 118, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 118, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 118, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 120, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 120, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 120, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 122, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 123, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 128, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 129, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 130, "col_offset": 33, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 136, "col_offset": 17, "nodeName": "ones_initializer", "type": "Any"}, {"lineNumber": 139, "col_offset": 17, "nodeName": "ones_initializer", "type": "Any"}, {"lineNumber": 144, "col_offset": 45, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "in_to_hidden_linear", "type": "Any"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "hidden_to_hidden_linear", "type": "Any"}, {"lineNumber": 155, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 155, "col_offset": 38, "nodeName": "in_size", "type": "int"}, {"lineNumber": 155, "col_offset": 52, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 156, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 156, "col_offset": 38, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 160, "col_offset": 6, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 163, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 163, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 163, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 165, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 165, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 165, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 167, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 168, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 169, "col_offset": 33, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 173, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 174, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 175, "col_offset": 33, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 181, "col_offset": 17, "nodeName": "fixed_size_partitioner", "type": "Any"}, {"lineNumber": 182, "col_offset": 17, "nodeName": "fixed_size_partitioner", "type": "Any"}, {"lineNumber": 185, "col_offset": 17, "nodeName": "fixed_size_partitioner", "type": "Any"}, {"lineNumber": 186, "col_offset": 17, "nodeName": "fixed_size_partitioner", "type": "Any"}, {"lineNumber": 191, "col_offset": 45, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 196, "col_offset": 26, "nodeName": "in_to_hidden_linear", "type": "Any"}, {"lineNumber": 198, "col_offset": 26, "nodeName": "in_to_hidden_linear", "type": "Any"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "hidden_to_hidden_linear", "type": "Any"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "hidden_to_hidden_linear", "type": "Any"}, {"lineNumber": 207, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 207, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 207, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 209, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 209, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 209, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 211, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 212, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 213, "col_offset": 33, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 217, "col_offset": 9, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 218, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 219, "col_offset": 33, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 225, "col_offset": 17, "nodeName": "nn", "type": "Any"}, {"lineNumber": 228, "col_offset": 17, "nodeName": "nn", "type": "Any"}, {"lineNumber": 233, "col_offset": 45, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 236, "col_offset": 37, "nodeName": "tf", "type": "Any"}, {"lineNumber": 250, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 250, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 250, "col_offset": 58, "nodeName": "in_size", "type": "int"}, {"lineNumber": 252, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 252, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 252, "col_offset": 45, "nodeName": "in_size", "type": "int"}, {"lineNumber": 254, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 254, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 254, "col_offset": 45, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 256, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 256, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 256, "col_offset": 45, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 260, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 260, "col_offset": 53, "nodeName": "in_size", "type": "int"}, {"lineNumber": 261, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 261, "col_offset": 53, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 262, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 262, "col_offset": 53, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "output_shape", "type": "Any"}, {"lineNumber": 271, "col_offset": 41, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 271, "col_offset": 53, "nodeName": "output_size", "type": "int"}, {"lineNumber": 272, "col_offset": 20, "nodeName": "output_shape", "type": "Any"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 273, "col_offset": 37, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 279, "col_offset": 48, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 279, "col_offset": 60, "nodeName": "in_size", "type": "int"}, {"lineNumber": 281, "col_offset": 48, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 281, "col_offset": 60, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 283, "col_offset": 48, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 283, "col_offset": 60, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 287, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 287, "col_offset": 22, "nodeName": "is_compatible_with", "type": "nothing"}, {"lineNumber": 293, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 293, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 293, "col_offset": 50, "nodeName": "in_size", "type": "int"}, {"lineNumber": 295, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 295, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 295, "col_offset": 50, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 297, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 297, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 297, "col_offset": 50, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 307, "col_offset": 19, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 310, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 311, "col_offset": 32, "nodeName": "tf", "type": "Any"}, {"lineNumber": 312, "col_offset": 30, "nodeName": "tf", "type": "Any"}, {"lineNumber": 313, "col_offset": 52, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 313, "col_offset": 58, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 315, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 316, "col_offset": 55, "nodeName": "output_channels", "type": "int"}, {"lineNumber": 318, "col_offset": 28, "nodeName": "_create_lstm", "type": "Callable[[], Any]"}, {"lineNumber": 318, "col_offset": 47, "nodeName": "_", "type": "int"}, {"lineNumber": 326, "col_offset": 24, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 340, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 340, "col_offset": 51, "nodeName": "in_size", "type": "int"}, {"lineNumber": 341, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 341, "col_offset": 53, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 342, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 342, "col_offset": 53, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 343, "col_offset": 9, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 346, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 348, "col_offset": 13, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 348, "col_offset": 46, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 349, "col_offset": 9, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 352, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 364, "col_offset": 14, "nodeName": "snt", "type": "module"}, {"lineNumber": 364, "col_offset": 47, "nodeName": "snt", "type": "module"}, {"lineNumber": 368, "col_offset": 14, "nodeName": "snt", "type": "module"}, {"lineNumber": 368, "col_offset": 38, "nodeName": "snt", "type": "module"}, {"lineNumber": 372, "col_offset": 35, "nodeName": "seq_length", "type": "int"}, {"lineNumber": 372, "col_offset": 47, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 372, "col_offset": 59, "nodeName": "insize", "type": "int"}, {"lineNumber": 373, "col_offset": 12, "nodeName": "tf", "type": "Any"}, {"lineNumber": 375, "col_offset": 12, "nodeName": "tf", "type": "Any"}, {"lineNumber": 378, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 387, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 387, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 387, "col_offset": 58, "nodeName": "in_size", "type": "int"}, {"lineNumber": 389, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 389, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 389, "col_offset": 45, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 391, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 391, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 391, "col_offset": 45, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 394, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 394, "col_offset": 53, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 395, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 395, "col_offset": 53, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 398, "col_offset": 9, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 398, "col_offset": 33, "nodeName": "snt", "type": "module"}, {"lineNumber": 399, "col_offset": 6, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 403, "col_offset": 21, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 406, "col_offset": 31, "nodeName": "chain", "type": "Type[itertools.chain[Any]]"}, {"lineNumber": 408, "col_offset": 50, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 408, "col_offset": 54, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 411, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 412, "col_offset": 10, "nodeName": "v", "type": "Any"}, {"lineNumber": 422, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 422, "col_offset": 53, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 423, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 423, "col_offset": 53, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 426, "col_offset": 25, "nodeName": "random", "type": "Any"}, {"lineNumber": 426, "col_offset": 69, "nodeName": "tf", "type": "Any"}, {"lineNumber": 428, "col_offset": 19, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 428, "col_offset": 54, "nodeName": "tf", "type": "Any"}, {"lineNumber": 430, "col_offset": 20, "nodeName": "tf", "type": "Any"}, {"lineNumber": 431, "col_offset": 10, "nodeName": "randn", "type": "Any"}, {"lineNumber": 431, "col_offset": 26, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 431, "col_offset": 38, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 431, "col_offset": 59, "nodeName": "float32", "type": "Any"}, {"lineNumber": 432, "col_offset": 20, "nodeName": "tf", "type": "Any"}, {"lineNumber": 433, "col_offset": 10, "nodeName": "randn", "type": "Any"}, {"lineNumber": 433, "col_offset": 26, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 433, "col_offset": 38, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 433, "col_offset": 59, "nodeName": "float32", "type": "Any"}, {"lineNumber": 441, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 443, "col_offset": 43, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 443, "col_offset": 58, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 449, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 449, "col_offset": 26, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 449, "col_offset": 34, "nodeName": "output1", "type": "Any"}, {"lineNumber": 454, "col_offset": 22, "nodeName": "tf", "type": "Any"}, {"lineNumber": 454, "col_offset": 33, "nodeName": "output1", "type": "Any"}, {"lineNumber": 454, "col_offset": 42, "nodeName": "output2", "type": "Any"}, {"lineNumber": 474, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 474, "col_offset": 52, "nodeName": "output1_size", "type": "int"}, {"lineNumber": 475, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 475, "col_offset": 52, "nodeName": "output2_size", "type": "int"}, {"lineNumber": 479, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 480, "col_offset": 43, "nodeName": "tf", "type": "Any"}, {"lineNumber": 489, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 506, "col_offset": 21, "nodeName": "constant_initializer", "type": "Any"}, {"lineNumber": 507, "col_offset": 21, "nodeName": "constant_initializer", "type": "Any"}, {"lineNumber": 509, "col_offset": 27, "nodeName": "snt", "type": "module"}, {"lineNumber": 509, "col_offset": 50, "nodeName": "output1_size", "type": "int"}, {"lineNumber": 510, "col_offset": 27, "nodeName": "snt", "type": "module"}, {"lineNumber": 510, "col_offset": 50, "nodeName": "output2_size", "type": "int"}, {"lineNumber": 518, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 518, "col_offset": 40, "nodeName": "hidden1_size", "type": "int"}, {"lineNumber": 519, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 519, "col_offset": 40, "nodeName": "hidden2_size", "type": "int"}, {"lineNumber": 526, "col_offset": 11, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 529, "col_offset": 10, "nodeName": "expected_initializer", "type": "Any"}, {"lineNumber": 530, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 534, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 540, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 547, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 548, "col_offset": 23, "nodeName": "core", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 549, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 550, "col_offset": 23, "nodeName": "core", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 551, "col_offset": 10, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 551, "col_offset": 32, "nodeName": "float32", "type": "Any"}, {"lineNumber": 558, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 561, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 563, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 565, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 567, "col_offset": 58, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 571, "col_offset": 13, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 577, "col_offset": 9, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 577, "col_offset": 18, "nodeName": "hidden_size_a", "type": "int"}, {"lineNumber": 577, "col_offset": 44, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 577, "col_offset": 53, "nodeName": "hidden_size_b", "type": "int"}, {"lineNumber": 609, "col_offset": 24, "nodeName": "random", "type": "Any"}, {"lineNumber": 609, "col_offset": 46, "nodeName": "x_seq_shape", "type": "List[int]"}, {"lineNumber": 609, "col_offset": 66, "nodeName": "tf", "type": "Any"}, {"lineNumber": 610, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 610, "col_offset": 43, "nodeName": "xrange", "type": "Type[range]"}, {"lineNumber": 617, "col_offset": 20, "nodeName": "tf", "type": "Any"}, {"lineNumber": 621, "col_offset": 44, "nodeName": "tf", "type": "Any"}, {"lineNumber": 623, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 634, "col_offset": 8, "nodeName": "snt", "type": "module"}, {"lineNumber": 635, "col_offset": 8, "nodeName": "nets", "type": "module"}, {"lineNumber": 639, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 640, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 642, "col_offset": 33, "nodeName": "tf", "type": "Any"}, {"lineNumber": 647, "col_offset": 8, "nodeName": "output", "type": "Any"}, {"lineNumber": 648, "col_offset": 8, "nodeName": "tf", "type": "Any"}, {"lineNumber": 648, "col_offset": 24, "nodeName": "sequence_length", "type": "int"}, {"lineNumber": 648, "col_offset": 41, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 648, "col_offset": 53, "nodeName": "mlp_last_layer_size", "type": "int"}, {"lineNumber": 651, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 651, "col_offset": 39, "nodeName": "snt", "type": "module"}, {"lineNumber": 651, "col_offset": 67, "nodeName": "tf", "type": "Any"}, {"lineNumber": 654, "col_offset": 9, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 654, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 657, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 657, "col_offset": 22, "nodeName": "mocked_logging_warning", "type": "Any"}, {"lineNumber": 658, "col_offset": 24, "nodeName": "mocked_logging_warning", "type": "Any"}, {"lineNumber": 659, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 660, "col_offset": 42, "nodeName": "first_call_args", "type": "Any"}, {"lineNumber": 661, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 661, "col_offset": 23, "nodeName": "first_call_args", "type": "Any"}, {"lineNumber": 665, "col_offset": 13, "nodeName": "snt", "type": "module"}, {"lineNumber": 665, "col_offset": 39, "nodeName": "snt", "type": "module"}, {"lineNumber": 665, "col_offset": 67, "nodeName": "tf", "type": "Any"}, {"lineNumber": 667, "col_offset": 24, "nodeName": "tf", "type": "Any"}, {"lineNumber": 667, "col_offset": 34, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 668, "col_offset": 24, "nodeName": "rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 668, "col_offset": 53, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 670, "col_offset": 9, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 670, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 673, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 673, "col_offset": 36, "nodeName": "TensorShape", "type": "Any"}, {"lineNumber": 674, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 674, "col_offset": 22, "nodeName": "mocked_logging_warning", "type": "Any"}, {"lineNumber": 675, "col_offset": 24, "nodeName": "mocked_logging_warning", "type": "Any"}, {"lineNumber": 676, "col_offset": 6, "nodeName": "self", "type": "DeepRNNTest"}, {"lineNumber": 677, "col_offset": 47, "nodeName": "first_call_args", "type": "Any"}, {"lineNumber": 686, "col_offset": 48, "nodeName": "tf", "type": "Any"}, {"lineNumber": 691, "col_offset": 22, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 693, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 693, "col_offset": 33, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 693, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 697, "col_offset": 50, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 699, "col_offset": 40, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 700, "col_offset": 37, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 701, "col_offset": 37, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 702, "col_offset": 37, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 706, "col_offset": 31, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 707, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 712, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 720, "col_offset": 9, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 721, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 721, "col_offset": 19, "nodeName": "tf", "type": "Any"}, {"lineNumber": 722, "col_offset": 9, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 723, "col_offset": 6, "nodeName": "snt", "type": "module"}, {"lineNumber": 723, "col_offset": 19, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 736, "col_offset": 61, "nodeName": "name", "type": "str"}, {"lineNumber": 737, "col_offset": 11, "nodeName": "_enter_variable_scope", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 738, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 738, "col_offset": 29, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 738, "col_offset": 38, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 742, "col_offset": 22, "nodeName": "self", "type": "Any"}, {"lineNumber": 743, "col_offset": 13, "nodeName": "toy_out", "type": "Type[`namedtuple-toy_out-out_one-out_two`]"}, {"lineNumber": 743, "col_offset": 42, "nodeName": "output", "type": "Any"}, {"lineNumber": 743, "col_offset": 50, "nodeName": "output", "type": "Any"}, {"lineNumber": 748, "col_offset": 13, "nodeName": "_wrapped_lstm", "type": "Any"}, {"lineNumber": 752, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 756, "col_offset": 13, "nodeName": "BidirectionalRNNTest", "type": "Type[BidirectionalRNNTest]"}, {"lineNumber": 756, "col_offset": 42, "nodeName": "_wrapped_lstm", "type": "Any"}, {"lineNumber": 757, "col_offset": 42, "nodeName": "_wrapped_lstm", "type": "Any"}, {"lineNumber": 766, "col_offset": 20, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 768, "col_offset": 20, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 774, "col_offset": 20, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 774, "col_offset": 34, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 774, "col_offset": 51, "nodeName": "self", "type": "BidirectionalRNNTest"}, {"lineNumber": 779, "col_offset": 24, "nodeName": "out_one", "type": "Any"}, {"lineNumber": 781, "col_offset": 24, "nodeName": "out_two", "type": "Any"}, {"lineNumber": 785, "col_offset": 24, "nodeName": "cell", "type": "Any"}, {"lineNumber": 787, "col_offset": 24, "nodeName": "hidden", "type": "Any"}, {"lineNumber": 789, "col_offset": 24, "nodeName": "cell", "type": "Any"}, {"lineNumber": 791, "col_offset": 24, "nodeName": "hidden", "type": "Any"}, {"lineNumber": 46, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 46, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 48, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 48, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 58, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 58, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 60, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 60, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 71, "col_offset": 36, "nodeName": "name", "type": "Any"}, {"lineNumber": 73, "col_offset": 36, "nodeName": "name", "type": "Any"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "name", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "name", "type": "Any"}, {"lineNumber": 80, "col_offset": 38, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 80, "col_offset": 52, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 84, "col_offset": 38, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 84, "col_offset": 56, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 118, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 118, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 120, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 120, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 130, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 136, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 139, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 155, "col_offset": 38, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 155, "col_offset": 52, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 156, "col_offset": 38, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 163, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 163, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 165, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 165, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 169, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 175, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 181, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 182, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 185, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 186, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 196, "col_offset": 26, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 198, "col_offset": 26, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "vanilla_rnn", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 207, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 207, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 209, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 209, "col_offset": 50, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 213, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 219, "col_offset": 33, "nodeName": "self", "type": "VanillaRNNTest"}, {"lineNumber": 225, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 228, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "batch_size_shape", "type": "Any"}, {"lineNumber": 273, "col_offset": 37, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 275, "col_offset": 24, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 275, "col_offset": 51, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 276, "col_offset": 24, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 279, "col_offset": 8, "nodeName": "next_state_shape", "type": "Tuple[Any, Any, Any]"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "next_state_shape", "type": "Tuple[Any, Any, Any]"}, {"lineNumber": 283, "col_offset": 8, "nodeName": "next_state_shape", "type": "Tuple[Any, Any, Any]"}, {"lineNumber": 287, "col_offset": 22, "nodeName": "state_shape", "type": "nothing"}, {"lineNumber": 288, "col_offset": 10, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 288, "col_offset": 39, "nodeName": "expected_shape", "type": "nothing"}, {"lineNumber": 316, "col_offset": 22, "nodeName": "input_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 318, "col_offset": 52, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 318, "col_offset": 58, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 325, "col_offset": 24, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 326, "col_offset": 24, "nodeName": "deep_rnn", "type": "sonnet.python.modules.basic_rnn.DeepRNN"}, {"lineNumber": 333, "col_offset": 10, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "output_shape", "type": "Tuple[int, ...]"}, {"lineNumber": 333, "col_offset": 33, "nodeName": "_", "type": "int"}, {"lineNumber": 348, "col_offset": 13, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 348, "col_offset": 46, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 406, "col_offset": 31, "nodeName": "itertools", "type": "module"}, {"lineNumber": 407, "col_offset": 9, "nodeName": "get_variables", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 407, "col_offset": 31, "nodeName": "c", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 407, "col_offset": 36, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 409, "col_offset": 61, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 409, "col_offset": 65, "nodeName": "cores", "type": "List[sonnet.python.modules.basic_rnn.VanillaRNN]"}, {"lineNumber": 426, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 431, "col_offset": 10, "nodeName": "random", "type": "Any"}, {"lineNumber": 431, "col_offset": 59, "nodeName": "tf", "type": "Any"}, {"lineNumber": 433, "col_offset": 10, "nodeName": "random", "type": "Any"}, {"lineNumber": 433, "col_offset": 59, "nodeName": "tf", "type": "Any"}, {"lineNumber": 506, "col_offset": 21, "nodeName": "tf", "type": "Any"}, {"lineNumber": 507, "col_offset": 21, "nodeName": "tf", "type": "Any"}, {"lineNumber": 526, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 526, "col_offset": 41, "nodeName": "i", "type": "int"}, {"lineNumber": 529, "col_offset": 33, "nodeName": "initializer", "type": "Optional[List[Any]]"}, {"lineNumber": 530, "col_offset": 8, "nodeName": "expected_initial_state", "type": "List[Any]"}, {"lineNumber": 531, "col_offset": 12, "nodeName": "initial_state", "type": "Callable[..., Any]"}, {"lineNumber": 531, "col_offset": 31, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 547, "col_offset": 26, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 547, "col_offset": 39, "nodeName": "LSTM", "type": "Type[sonnet.python.modules.gated_rnn.LSTM]"}, {"lineNumber": 549, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 551, "col_offset": 32, "nodeName": "tf", "type": "Any"}, {"lineNumber": 577, "col_offset": 9, "nodeName": "snt", "type": "module"}, {"lineNumber": 577, "col_offset": 44, "nodeName": "snt", "type": "module"}, {"lineNumber": 580, "col_offset": 8, "nodeName": "deep_rnn_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 583, "col_offset": 8, "nodeName": "deep_rnn_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 586, "col_offset": 8, "nodeName": "deep_rnn_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 589, "col_offset": 8, "nodeName": "deep_rnn_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 594, "col_offset": 21, "nodeName": "other_start_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 596, "col_offset": 21, "nodeName": "other_start_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 598, "col_offset": 21, "nodeName": "other_start_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 600, "col_offset": 21, "nodeName": "other_start_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 609, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 610, "col_offset": 50, "nodeName": "num_layers", "type": "int"}, {"lineNumber": 635, "col_offset": 8, "nodeName": "snt", "type": "module"}, {"lineNumber": 635, "col_offset": 41, "nodeName": "mlp_last_layer_size", "type": "int"}, {"lineNumber": 639, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 654, "col_offset": 9, "nodeName": "mock", "type": "module"}, {"lineNumber": 670, "col_offset": 9, "nodeName": "mock", "type": "module"}, {"lineNumber": 673, "col_offset": 36, "nodeName": "tf", "type": "Any"}, {"lineNumber": 693, "col_offset": 33, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 693, "col_offset": 50, "nodeName": "self", "type": "ModelRNNTest"}, {"lineNumber": 723, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 736, "col_offset": 6, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 736, "col_offset": 12, "nodeName": "ToyRNN", "type": "Type[Any]"}, {"lineNumber": 736, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 737, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 738, "col_offset": 29, "nodeName": "snt", "type": "module"}, {"lineNumber": 743, "col_offset": 13, "nodeName": "BidirectionalRNNTest", "type": "Type[BidirectionalRNNTest]"}, {"lineNumber": 748, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 756, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 757, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 36, "nodeName": "v", "type": "Any"}, {"lineNumber": 71, "col_offset": 70, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 73, "col_offset": 36, "nodeName": "v", "type": "Any"}, {"lineNumber": 73, "col_offset": 70, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "v", "type": "Any"}, {"lineNumber": 76, "col_offset": 49, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "v", "type": "Any"}, {"lineNumber": 79, "col_offset": 49, "nodeName": "mod_name", "type": "str"}, {"lineNumber": 288, "col_offset": 10, "nodeName": "batch_size_shape", "type": "Any"}, {"lineNumber": 325, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 333, "col_offset": 38, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 348, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 348, "col_offset": 46, "nodeName": "tf", "type": "Any"}, {"lineNumber": 407, "col_offset": 9, "nodeName": "c", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 431, "col_offset": 10, "nodeName": "np", "type": "module"}, {"lineNumber": 433, "col_offset": 10, "nodeName": "np", "type": "module"}, {"lineNumber": 529, "col_offset": 45, "nodeName": "i", "type": "int"}, {"lineNumber": 531, "col_offset": 12, "nodeName": "core", "type": "sonnet.python.modules.basic_rnn.VanillaRNN"}, {"lineNumber": 531, "col_offset": 53, "nodeName": "trainable", "type": "Any"}, {"lineNumber": 532, "col_offset": 54, "nodeName": "expected_initializer", "type": "Any"}, {"lineNumber": 547, "col_offset": 26, "nodeName": "snt", "type": "module"}, {"lineNumber": 547, "col_offset": 39, "nodeName": "snt", "type": "module"}, {"lineNumber": 560, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 561, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 562, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 563, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 564, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 565, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 566, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 567, "col_offset": 21, "nodeName": "initial_state_value", "type": "Any"}, {"lineNumber": 736, "col_offset": 12, "nodeName": "BidirectionalRNNTest", "type": "Type[BidirectionalRNNTest]"}, {"lineNumber": 783, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 131, "col_offset": 57, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 176, "col_offset": 57, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 220, "col_offset": 57, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 779, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 781, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 785, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 787, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 789, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 791, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 131, "col_offset": 57, "nodeName": "tf", "type": "Any"}, {"lineNumber": 176, "col_offset": 57, "nodeName": "tf", "type": "Any"}, {"lineNumber": 220, "col_offset": 57, "nodeName": "tf", "type": "Any"}]