[{"lineNumber": 28, "col_offset": 15, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 28, "col_offset": 36, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 48, "col_offset": 22, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 50, "col_offset": 2, "nodeName": "testShape", "type": "Callable[[Any], Any]"}, {"lineNumber": 64, "col_offset": 2, "nodeName": "testValues", "type": "Callable[[Any], Any]"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "test_utils", "type": "module"}, {"lineNumber": 28, "col_offset": 36, "nodeName": "parameterized", "type": "Any"}, {"lineNumber": 48, "col_offset": 22, "nodeName": "test_utils", "type": "module"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "test_utils", "type": "module"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "parameterized", "type": "Any"}, {"lineNumber": 113, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "input_size", "type": "int"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "output_shape", "type": "numpy.ndarray"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "state_shape", "type": "numpy.ndarray"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "input_size", "type": "int"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "expected_output", "type": "Any"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "input_size", "type": "int"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "control_config", "type": "Dict[str, int]"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "prev_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "output_shape", "type": "numpy.ndarray"}, {"lineNumber": 115, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 37, "col_offset": 13, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 38, "col_offset": 10, "nodeName": "constructor", "type": "Any"}, {"lineNumber": 38, "col_offset": 22, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 40, "col_offset": 25, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 40, "col_offset": 29, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 40, "col_offset": 37, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "map_structure", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 44, "col_offset": 20, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 45, "col_offset": 63, "nodeName": "output", "type": "Any"}, {"lineNumber": 53, "col_offset": 13, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 54, "col_offset": 10, "nodeName": "FeedForward", "type": "Type[sonnet.src.nets.dnc.control.FeedForward]"}, {"lineNumber": 54, "col_offset": 30, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "initial_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 56, "col_offset": 25, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 56, "col_offset": 29, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 56, "col_offset": 37, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 58, "col_offset": 19, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 59, "col_offset": 18, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 61, "col_offset": 26, "nodeName": "output_shape", "type": "numpy.ndarray"}, {"lineNumber": 61, "col_offset": 40, "nodeName": "output", "type": "Any"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 62, "col_offset": 26, "nodeName": "state_shape", "type": "numpy.ndarray"}, {"lineNumber": 62, "col_offset": 39, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 68, "col_offset": 13, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 70, "col_offset": 10, "nodeName": "FeedForward", "type": "Type[sonnet.src.nets.dnc.control.FeedForward]"}, {"lineNumber": 70, "col_offset": 30, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 71, "col_offset": 17, "nodeName": "initial_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 72, "col_offset": 29, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 72, "col_offset": 37, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "weight", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "bias", "type": "Any"}, {"lineNumber": 74, "col_offset": 19, "nodeName": "w", "type": "Any"}, {"lineNumber": 74, "col_offset": 33, "nodeName": "b", "type": "Any"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 79, "col_offset": 40, "nodeName": "expected_output", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 95, "col_offset": 37, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 96, "col_offset": 13, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 97, "col_offset": 10, "nodeName": "deep_core", "type": "Callable[..., sonnet.src.recurrent._LegacyDeepRNN]"}, {"lineNumber": 100, "col_offset": 17, "nodeName": "initial_state", "type": "Callable[..., Tuple[Any, ...]]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "next_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 101, "col_offset": 25, "nodeName": "rnn", "type": "sonnet.src.recurrent._LegacyDeepRNN"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 101, "col_offset": 37, "nodeName": "prev_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "assertShapeEqual", "type": "Any"}, {"lineNumber": 105, "col_offset": 26, "nodeName": "output_shape", "type": "numpy.ndarray"}, {"lineNumber": 105, "col_offset": 40, "nodeName": "output", "type": "Any"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "map_structure", "type": "Any"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "prev_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "next_state", "type": "Tuple[Any, ...]"}, {"lineNumber": 115, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 37, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 37, "col_offset": 32, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 37, "col_offset": 44, "nodeName": "input_size", "type": "int"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 39, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "nest", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 53, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 54, "col_offset": 10, "nodeName": "control", "type": "module"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 55, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 58, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 58, "col_offset": 31, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 58, "col_offset": 43, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 59, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 59, "col_offset": 30, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "self", "type": "FeedForwardTest"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "self", "type": "FeedForwardTest"}, {"lineNumber": 68, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 68, "col_offset": 32, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 68, "col_offset": 44, "nodeName": "input_size", "type": "int"}, {"lineNumber": 70, "col_offset": 10, "nodeName": "control", "type": "module"}, {"lineNumber": 70, "col_offset": 54, "nodeName": "identity", "type": "Any"}, {"lineNumber": 71, "col_offset": 17, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 71, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 74, "col_offset": 19, "nodeName": "linear", "type": "Any"}, {"lineNumber": 74, "col_offset": 33, "nodeName": "linear", "type": "Any"}, {"lineNumber": 76, "col_offset": 22, "nodeName": "dot", "type": "Any"}, {"lineNumber": 76, "col_offset": 63, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "self", "type": "FeedForwardTest"}, {"lineNumber": 79, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "self", "type": "FeedForwardTest"}, {"lineNumber": 81, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 81, "col_offset": 44, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 96, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 96, "col_offset": 32, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 96, "col_offset": 44, "nodeName": "input_size", "type": "int"}, {"lineNumber": 97, "col_offset": 10, "nodeName": "control", "type": "module"}, {"lineNumber": 97, "col_offset": 39, "nodeName": "num_layers", "type": "Any"}, {"lineNumber": 98, "col_offset": 41, "nodeName": "control_name", "type": "Any"}, {"lineNumber": 99, "col_offset": 43, "nodeName": "control_config", "type": "Dict[str, int]"}, {"lineNumber": 100, "col_offset": 17, "nodeName": "rnn", "type": "sonnet.src.recurrent._LegacyDeepRNN"}, {"lineNumber": 100, "col_offset": 46, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 104, "col_offset": 31, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "nest", "type": "Any"}, {"lineNumber": 115, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 37, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "tf", "type": "Any"}, {"lineNumber": 43, "col_offset": 23, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 43, "col_offset": 40, "nodeName": "shape", "type": "Any"}, {"lineNumber": 43, "col_offset": 50, "nodeName": "shape", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 45, "col_offset": 36, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 45, "col_offset": 48, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 53, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 53, "col_offset": 38, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 53, "col_offset": 50, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 68, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 70, "col_offset": 54, "nodeName": "tf", "type": "Any"}, {"lineNumber": 74, "col_offset": 19, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 74, "col_offset": 33, "nodeName": "rnn", "type": "sonnet.src.nets.dnc.control.FeedForward"}, {"lineNumber": 76, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 76, "col_offset": 45, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 76, "col_offset": 63, "nodeName": "bias", "type": "Any"}, {"lineNumber": 79, "col_offset": 24, "nodeName": "output", "type": "Any"}, {"lineNumber": 81, "col_offset": 24, "nodeName": "prev_state", "type": "Any"}, {"lineNumber": 81, "col_offset": 44, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 96, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 104, "col_offset": 43, "nodeName": "num_layers", "type": "Any"}, {"lineNumber": 104, "col_offset": 56, "nodeName": "hidden_size", "type": "int"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "tf", "type": "Any"}, {"lineNumber": 108, "col_offset": 23, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "shape", "type": "Any"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "shape", "type": "Any"}, {"lineNumber": 43, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 40, "nodeName": "t1", "type": "Any"}, {"lineNumber": 43, "col_offset": 50, "nodeName": "t2", "type": "Any"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 76, "col_offset": 45, "nodeName": "weight", "type": "Any"}, {"lineNumber": 108, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "t1", "type": "Any"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "t2", "type": "Any"}]