[{"lineNumber": 28, "col_offset": 14, "nodeName": "TestCase", "type": "Type[sonnet.src.test_utils.TestCase]"}, {"lineNumber": 28, "col_offset": 35, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 28, "col_offset": 14, "nodeName": "test_utils", "type": "module"}, {"lineNumber": 28, "col_offset": 35, "nodeName": "parameterized", "type": "Any"}, {"lineNumber": 108, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "a", "type": "Any"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "k", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "padding", "type": "List[Any]"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "a_padded", "type": "Any"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "y2", "type": "Any"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "a", "type": "Any"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "k", "type": "Any"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "padding", "type": "List[Any]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "a_padded", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "y2", "type": "Any"}, {"lineNumber": 110, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 32, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "full", "type": "Callable[[int], List[int]]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 36, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 40, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "valid", "type": "Callable[[int], List[int]]"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 52, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 55, "col_offset": 19, "nodeName": "same", "type": "Callable[[int], List[int]]"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 56, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 59, "col_offset": 19, "nodeName": "full", "type": "Callable[[int], List[int]]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "causal", "type": "Callable[[int], List[int]]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 64, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 67, "col_offset": 19, "nodeName": "reverse_causal", "type": "Callable[[int], List[int]]"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "a", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "normal", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "normal", "type": "Any"}, {"lineNumber": 81, "col_offset": 14, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "same", "type": "Callable[[int], List[int]]"}, {"lineNumber": 81, "col_offset": 35, "nodeName": "kernel_size", "type": "Any"}, {"lineNumber": 81, "col_offset": 48, "nodeName": "rate", "type": "Any"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "pad", "type": "Any"}, {"lineNumber": 82, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "padding", "type": "List[Any]"}, {"lineNumber": 83, "col_offset": 9, "nodeName": "conv1d", "type": "Any"}, {"lineNumber": 83, "col_offset": 22, "nodeName": "a_padded", "type": "Any"}, {"lineNumber": 83, "col_offset": 32, "nodeName": "k", "type": "Any"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "conv1d", "type": "Any"}, {"lineNumber": 85, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "k", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 86, "col_offset": 31, "nodeName": "shape", "type": "Any"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "assertAllClose", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "normal", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "normal", "type": "Any"}, {"lineNumber": 100, "col_offset": 14, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "valid", "type": "Callable[[int], List[int]]"}, {"lineNumber": 100, "col_offset": 36, "nodeName": "kernel_size", "type": "Any"}, {"lineNumber": 100, "col_offset": 49, "nodeName": "rate", "type": "Any"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "pad", "type": "Any"}, {"lineNumber": 101, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 101, "col_offset": 25, "nodeName": "padding", "type": "List[Any]"}, {"lineNumber": 102, "col_offset": 9, "nodeName": "conv1d", "type": "Any"}, {"lineNumber": 102, "col_offset": 22, "nodeName": "a_padded", "type": "Any"}, {"lineNumber": 102, "col_offset": 32, "nodeName": "k", "type": "Any"}, {"lineNumber": 104, "col_offset": 9, "nodeName": "conv1d", "type": "Any"}, {"lineNumber": 104, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "k", "type": "Any"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "assertAllEqual", "type": "Any"}, {"lineNumber": 110, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "causal", "type": "Callable[[int], List[int]]"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "full", "type": "Callable[[int], List[int]]"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "pad", "type": "module"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "causal", "type": "Callable[[int], List[int]]"}, {"lineNumber": 39, "col_offset": 32, "nodeName": "full", "type": "Callable[[int], List[int]]"}, {"lineNumber": 39, "col_offset": 42, "nodeName": "full", "type": "Callable[[int], List[int]]"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 48, "col_offset": 6, "nodeName": "create", "type": "Callable[[Union[Callable[[int], Sequence[int]], Sequence[Callable[[int], Sequence[int]]]], Union[int, Sequence[int]], Union[int, Sequence[int]], int, int], List[Any]]"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "full", "type": "Callable[[int], List[int]]"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "kernel_size", "type": "Any"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "rate", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "pad", "type": "module"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 55, "col_offset": 19, "nodeName": "pad", "type": "module"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 59, "col_offset": 19, "nodeName": "pad", "type": "module"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "pad", "type": "module"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "pad", "type": "module"}, {"lineNumber": 67, "col_offset": 19, "nodeName": "pad", "type": "module"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "self", "type": "PadTest"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 80, "col_offset": 26, "nodeName": "kernel_size", "type": "Any"}, {"lineNumber": 81, "col_offset": 14, "nodeName": "pad", "type": "module"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "pad", "type": "module"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 83, "col_offset": 9, "nodeName": "nn", "type": "Any"}, {"lineNumber": 83, "col_offset": 42, "nodeName": "stride", "type": "Any"}, {"lineNumber": 84, "col_offset": 32, "nodeName": "rate", "type": "Any"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "nn", "type": "Any"}, {"lineNumber": 85, "col_offset": 35, "nodeName": "stride", "type": "Any"}, {"lineNumber": 85, "col_offset": 53, "nodeName": "rate", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "y1", "type": "Any"}, {"lineNumber": 86, "col_offset": 31, "nodeName": "y2", "type": "Any"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 87, "col_offset": 36, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 99, "col_offset": 26, "nodeName": "kernel_size", "type": "Any"}, {"lineNumber": 100, "col_offset": 14, "nodeName": "pad", "type": "module"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "pad", "type": "module"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 102, "col_offset": 9, "nodeName": "nn", "type": "Any"}, {"lineNumber": 102, "col_offset": 42, "nodeName": "stride", "type": "Any"}, {"lineNumber": 103, "col_offset": 32, "nodeName": "rate", "type": "Any"}, {"lineNumber": 104, "col_offset": 9, "nodeName": "nn", "type": "Any"}, {"lineNumber": 104, "col_offset": 35, "nodeName": "stride", "type": "Any"}, {"lineNumber": 104, "col_offset": 53, "nodeName": "rate", "type": "Any"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 105, "col_offset": 36, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 110, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "pad", "type": "module"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "pad", "type": "module"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "pad", "type": "module"}, {"lineNumber": 39, "col_offset": 32, "nodeName": "pad", "type": "module"}, {"lineNumber": 39, "col_offset": 42, "nodeName": "pad", "type": "module"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 48, "col_offset": 6, "nodeName": "pad", "type": "module"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "pad", "type": "module"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "tf", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "tf", "type": "Any"}, {"lineNumber": 83, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 85, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "y1", "type": "Any"}, {"lineNumber": 87, "col_offset": 36, "nodeName": "y2", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "tf", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "tf", "type": "Any"}, {"lineNumber": 102, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 104, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "y1", "type": "Any"}, {"lineNumber": 105, "col_offset": 36, "nodeName": "y2", "type": "Any"}]