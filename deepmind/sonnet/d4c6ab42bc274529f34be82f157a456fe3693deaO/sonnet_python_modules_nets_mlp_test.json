[{"lineNumber": 28, "col_offset": 14, "nodeName": "ParameterizedTestCase", "type": "Type[sonnet.testing.parameterized.parameterized.ParameterizedTestCase]"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 28, "col_offset": 14, "nodeName": "parameterized", "type": "module"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "test", "type": "Any"}, {"lineNumber": 284, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "tf", "type": "Any"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "output_sizes", "type": "List[int]"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "input_size", "type": "int"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "module_name", "type": "str"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "unique_name", "type": "str"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "net", "type": "Any"}, {"lineNumber": 132, "col_offset": 7, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "variables", "type": "Any"}, {"lineNumber": 141, "col_offset": 7, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 163, "col_offset": 7, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "graph_regularizers", "type": "Any"}, {"lineNumber": 177, "col_offset": 7, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "mlp_out", "type": "Any"}, {"lineNumber": 213, "col_offset": 4, "nodeName": "mlp_transposed_output", "type": "Any"}, {"lineNumber": 220, "col_offset": 7, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "i", "type": "int"}, {"lineNumber": 231, "col_offset": 4, "nodeName": "data", "type": "Any"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "init", "type": "Any"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "variables", "type": "Any"}, {"lineNumber": 239, "col_offset": 7, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 245, "col_offset": 4, "nodeName": "mlp_activate_final", "type": "Any"}, {"lineNumber": 246, "col_offset": 4, "nodeName": "mlp_no_activate_final", "type": "Any"}, {"lineNumber": 247, "col_offset": 4, "nodeName": "mlp_inherit_activate_final", "type": "Any"}, {"lineNumber": 256, "col_offset": 4, "nodeName": "use_bias", "type": "bool"}, {"lineNumber": 267, "col_offset": 4, "nodeName": "correct_variable_names", "type": "Set[str]"}, {"lineNumber": 274, "col_offset": 4, "nodeName": "input_shape", "type": "List[int]"}, {"lineNumber": 275, "col_offset": 4, "nodeName": "input_to_net", "type": "Any"}, {"lineNumber": 277, "col_offset": 4, "nodeName": "_", "type": "Any"}, {"lineNumber": 279, "col_offset": 4, "nodeName": "variable_names", "type": "List[Any]"}, {"lineNumber": 285, "col_offset": 2, "nodeName": "main", "type": "Any"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "setUp", "type": "Any"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 51, "col_offset": 6, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 53, "col_offset": 21, "nodeName": "scope_name", "type": "Any"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 54, "col_offset": 21, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 54, "col_offset": 38, "nodeName": "unique_name", "type": "str"}, {"lineNumber": 101, "col_offset": 10, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "initializers", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "initializers", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 109, "col_offset": 21, "nodeName": "regularizers", "type": "Any"}, {"lineNumber": 109, "col_offset": 40, "nodeName": "regularizers", "type": "Any"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 110, "col_offset": 21, "nodeName": "partitioners", "type": "Any"}, {"lineNumber": 110, "col_offset": 40, "nodeName": "partitioners", "type": "Any"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 113, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 123, "col_offset": 10, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 128, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 130, "col_offset": 10, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 130, "col_offset": 14, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 134, "col_offset": 9, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 139, "col_offset": 16, "nodeName": "get_variables", "type": "Any"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 147, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 149, "col_offset": 10, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 150, "col_offset": 13, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 150, "col_offset": 17, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 151, "col_offset": 4, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 153, "col_offset": 57, "nodeName": "input_shape", "type": "Any"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 154, "col_offset": 21, "nodeName": "output_sizes", "type": "List[int]"}, {"lineNumber": 167, "col_offset": 6, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 169, "col_offset": 13, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 169, "col_offset": 28, "nodeName": "float32", "type": "Any"}, {"lineNumber": 171, "col_offset": 10, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 173, "col_offset": 4, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 175, "col_offset": 25, "nodeName": "get_collection", "type": "Any"}, {"lineNumber": 175, "col_offset": 43, "nodeName": "REGULARIZATION_LOSSES", "type": "Any"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "assertRegexpMatches", "type": "Any"}, {"lineNumber": 176, "col_offset": 29, "nodeName": "name", "type": "Any"}, {"lineNumber": 193, "col_offset": 6, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 195, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 195, "col_offset": 51, "nodeName": "scope_name", "type": "Any"}, {"lineNumber": 196, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 196, "col_offset": 21, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 196, "col_offset": 39, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "scope_name", "type": "Any"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 202, "col_offset": 19, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 202, "col_offset": 34, "nodeName": "float32", "type": "Any"}, {"lineNumber": 211, "col_offset": 20, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 212, "col_offset": 14, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 212, "col_offset": 18, "nodeName": "input_to_mlp", "type": "Any"}, {"lineNumber": 213, "col_offset": 28, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 213, "col_offset": 42, "nodeName": "mlp_out", "type": "Any"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 217, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 217, "col_offset": 21, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 217, "col_offset": 45, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 218, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 218, "col_offset": 21, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 218, "col_offset": 51, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 222, "col_offset": 9, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 227, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 231, "col_offset": 11, "nodeName": "rand", "type": "Any"}, {"lineNumber": 231, "col_offset": 26, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 231, "col_offset": 43, "nodeName": "input_size", "type": "Any"}, {"lineNumber": 232, "col_offset": 11, "nodeName": "global_variables_initializer", "type": "Any"}, {"lineNumber": 233, "col_offset": 32, "nodeName": "sess", "type": "Any"}, {"lineNumber": 237, "col_offset": 16, "nodeName": "get_variables", "type": "Any"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 246, "col_offset": 28, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 247, "col_offset": 33, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 248, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 248, "col_offset": 27, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 249, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 249, "col_offset": 28, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 250, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 250, "col_offset": 21, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 251, "col_offset": 21, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 267, "col_offset": 29, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 269, "col_offset": 10, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 275, "col_offset": 19, "nodeName": "placeholder", "type": "Any"}, {"lineNumber": 275, "col_offset": 34, "nodeName": "float32", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 277, "col_offset": 12, "nodeName": "input_to_net", "type": "Any"}, {"lineNumber": 279, "col_offset": 22, "nodeName": "name", "type": "Any"}, {"lineNumber": 281, "col_offset": 4, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 285, "col_offset": 2, "nodeName": "test", "type": "Any"}, {"lineNumber": 39, "col_offset": 13, "nodeName": "truncated_normal_initializer", "type": "Any"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "l1_regularizer", "type": "Any"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "fixed_size_partitioner", "type": "Any"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 53, "col_offset": 21, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 53, "col_offset": 48, "nodeName": "unique_name", "type": "str"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 54, "col_offset": 21, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 63, "col_offset": 33, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 69, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 69, "col_offset": 33, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 77, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 77, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 86, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 86, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 94, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 101, "col_offset": 10, "nodeName": "nets", "type": "module"}, {"lineNumber": 101, "col_offset": 28, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 102, "col_offset": 36, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 103, "col_offset": 36, "nodeName": "initializers", "type": "Any"}, {"lineNumber": 104, "col_offset": 36, "nodeName": "partitioners", "type": "Any"}, {"lineNumber": 105, "col_offset": 36, "nodeName": "regularizers", "type": "Any"}, {"lineNumber": 106, "col_offset": 38, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 107, "col_offset": 32, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 109, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 109, "col_offset": 40, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 110, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 110, "col_offset": 40, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 112, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "layers", "type": "Any"}, {"lineNumber": 112, "col_offset": 38, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 112, "col_offset": 42, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 113, "col_offset": 22, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 113, "col_offset": 26, "nodeName": "layers", "type": "Any"}, {"lineNumber": 114, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 114, "col_offset": 23, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 123, "col_offset": 10, "nodeName": "nets", "type": "module"}, {"lineNumber": 123, "col_offset": 28, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 124, "col_offset": 36, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 125, "col_offset": 38, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 126, "col_offset": 32, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 128, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 133, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 133, "col_offset": 23, "nodeName": "type", "type": "Any"}, {"lineNumber": 139, "col_offset": 16, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 142, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 144, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 147, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 149, "col_offset": 10, "nodeName": "nets", "type": "module"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "module_name", "type": "str"}, {"lineNumber": 149, "col_offset": 59, "nodeName": "output_sizes", "type": "List[int]"}, {"lineNumber": 151, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 151, "col_offset": 20, "nodeName": "is_compatible_with", "type": "Any"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 153, "col_offset": 22, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 153, "col_offset": 39, "nodeName": "input_size", "type": "int"}, {"lineNumber": 153, "col_offset": 57, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 154, "col_offset": 21, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 154, "col_offset": 40, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 154, "col_offset": 45, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 169, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 169, "col_offset": 28, "nodeName": "tf", "type": "Any"}, {"lineNumber": 171, "col_offset": 10, "nodeName": "nets", "type": "module"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 171, "col_offset": 59, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 172, "col_offset": 36, "nodeName": "regularizers", "type": "Dict[str, Any]"}, {"lineNumber": 175, "col_offset": 25, "nodeName": "tf", "type": "Any"}, {"lineNumber": 175, "col_offset": 43, "nodeName": "GraphKeys", "type": "Any"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 178, "col_offset": 6, "nodeName": "assertRegexpMatches", "type": "Any"}, {"lineNumber": 178, "col_offset": 31, "nodeName": "name", "type": "Any"}, {"lineNumber": 187, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "MLP", "type": "Any"}, {"lineNumber": 192, "col_offset": 9, "nodeName": "variable_scope", "type": "Any"}, {"lineNumber": 193, "col_offset": 22, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 195, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 195, "col_offset": 33, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 195, "col_offset": 51, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 196, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 196, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 196, "col_offset": 39, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 202, "col_offset": 19, "nodeName": "tf", "type": "Any"}, {"lineNumber": 202, "col_offset": 34, "nodeName": "tf", "type": "Any"}, {"lineNumber": 205, "col_offset": 9, "nodeName": "assertRaisesRegexp", "type": "Any"}, {"lineNumber": 205, "col_offset": 33, "nodeName": "Error", "type": "Type[sonnet.python.modules.base.Error]"}, {"lineNumber": 209, "col_offset": 6, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 209, "col_offset": 20, "nodeName": "input_to_mlp", "type": "Any"}, {"lineNumber": 211, "col_offset": 20, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 215, "col_offset": 21, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 216, "col_offset": 21, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 217, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 217, "col_offset": 21, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 217, "col_offset": 45, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 218, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 218, "col_offset": 21, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 218, "col_offset": 51, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 221, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 221, "col_offset": 23, "nodeName": "type", "type": "Any"}, {"lineNumber": 227, "col_offset": 22, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 227, "col_offset": 26, "nodeName": "layers", "type": "Any"}, {"lineNumber": 228, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 228, "col_offset": 23, "nodeName": "output_size", "type": "Any"}, {"lineNumber": 231, "col_offset": 11, "nodeName": "random", "type": "Any"}, {"lineNumber": 231, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 231, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 232, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 233, "col_offset": 9, "nodeName": "test_session", "type": "Any"}, {"lineNumber": 234, "col_offset": 6, "nodeName": "run", "type": "Any"}, {"lineNumber": 234, "col_offset": 15, "nodeName": "init", "type": "Any"}, {"lineNumber": 235, "col_offset": 6, "nodeName": "run", "type": "Any"}, {"lineNumber": 235, "col_offset": 15, "nodeName": "mlp_transposed_output", "type": "Any"}, {"lineNumber": 237, "col_offset": 16, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 240, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 242, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 246, "col_offset": 28, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 247, "col_offset": 33, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 248, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 248, "col_offset": 27, "nodeName": "mlp_activate_final", "type": "Any"}, {"lineNumber": 249, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 249, "col_offset": 28, "nodeName": "mlp_no_activate_final", "type": "Any"}, {"lineNumber": 250, "col_offset": 4, "nodeName": "self", "type": "Any"}, {"lineNumber": 250, "col_offset": 21, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 251, "col_offset": 21, "nodeName": "mlp_inherit_activate_final", "type": "Any"}, {"lineNumber": 267, "col_offset": 33, "nodeName": "var_names_w", "type": "List[str]"}, {"lineNumber": 267, "col_offset": 47, "nodeName": "var_names_b", "type": "List[str]"}, {"lineNumber": 269, "col_offset": 10, "nodeName": "nets", "type": "module"}, {"lineNumber": 269, "col_offset": 28, "nodeName": "module_name", "type": "str"}, {"lineNumber": 270, "col_offset": 36, "nodeName": "output_sizes", "type": "List[int]"}, {"lineNumber": 272, "col_offset": 32, "nodeName": "use_bias", "type": "bool"}, {"lineNumber": 275, "col_offset": 19, "nodeName": "tf", "type": "Any"}, {"lineNumber": 275, "col_offset": 34, "nodeName": "tf", "type": "Any"}, {"lineNumber": 275, "col_offset": 52, "nodeName": "input_shape", "type": "List[int]"}, {"lineNumber": 279, "col_offset": 22, "nodeName": "var", "type": "Any"}, {"lineNumber": 279, "col_offset": 35, "nodeName": "var", "type": "Any"}, {"lineNumber": 281, "col_offset": 4, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 281, "col_offset": 21, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 281, "col_offset": 25, "nodeName": "variable_names", "type": "List[Any]"}, {"lineNumber": 281, "col_offset": 42, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 281, "col_offset": 46, "nodeName": "correct_variable_names", "type": "Set[str]"}, {"lineNumber": 285, "col_offset": 2, "nodeName": "tf", "type": "Any"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 32, "col_offset": 10, "nodeName": "MLPTest", "type": "Type[MLPTest]"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 39, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "layers", "type": "Any"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 51, "col_offset": 30, "nodeName": "unique_name", "type": "str"}, {"lineNumber": 51, "col_offset": 56, "nodeName": "output_sizes", "type": "List[int]"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 64, "col_offset": 30, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 66, "col_offset": 40, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 67, "col_offset": 34, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 69, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 75, "col_offset": 19, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 77, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 80, "col_offset": 30, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 81, "col_offset": 38, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 83, "col_offset": 40, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 84, "col_offset": 34, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 86, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 88, "col_offset": 30, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 89, "col_offset": 38, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 91, "col_offset": 40, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 92, "col_offset": 34, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 94, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 96, "col_offset": 30, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 98, "col_offset": 40, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 99, "col_offset": 34, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 101, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 101, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 103, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 104, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 105, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 112, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 113, "col_offset": 26, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 114, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 114, "col_offset": 50, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 123, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 123, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 124, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 35, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 129, "col_offset": 52, "nodeName": "input_size", "type": "Any"}, {"lineNumber": 133, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 133, "col_offset": 23, "nodeName": "op", "type": "Any"}, {"lineNumber": 135, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 135, "col_offset": 23, "nodeName": "type", "type": "Any"}, {"lineNumber": 137, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 137, "col_offset": 23, "nodeName": "type", "type": "Any"}, {"lineNumber": 142, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 142, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 142, "col_offset": 27, "nodeName": "variables", "type": "Any"}, {"lineNumber": 144, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 144, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "variables", "type": "Any"}, {"lineNumber": 144, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 144, "col_offset": 43, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 148, "col_offset": 35, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 148, "col_offset": 52, "nodeName": "input_size", "type": "int"}, {"lineNumber": 149, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 149, "col_offset": 59, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 152, "col_offset": 9, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 153, "col_offset": 22, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 153, "col_offset": 39, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 154, "col_offset": 45, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 164, "col_offset": 27, "nodeName": "l1_regularizer", "type": "Any"}, {"lineNumber": 165, "col_offset": 27, "nodeName": "l2_regularizer", "type": "Any"}, {"lineNumber": 167, "col_offset": 27, "nodeName": "l1_regularizer", "type": "Any"}, {"lineNumber": 170, "col_offset": 35, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 170, "col_offset": 52, "nodeName": "input_size", "type": "Any"}, {"lineNumber": 171, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 171, "col_offset": 59, "nodeName": "self", "type": "Any"}, {"lineNumber": 175, "col_offset": 43, "nodeName": "tf", "type": "Any"}, {"lineNumber": 176, "col_offset": 29, "nodeName": "graph_regularizers", "type": "Any"}, {"lineNumber": 178, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 187, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "nets", "type": "module"}, {"lineNumber": 188, "col_offset": 30, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 189, "col_offset": 38, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 190, "col_offset": 40, "nodeName": "activate_final", "type": "Any"}, {"lineNumber": 191, "col_offset": 34, "nodeName": "use_bias", "type": "Any"}, {"lineNumber": 192, "col_offset": 9, "nodeName": "tf", "type": "Any"}, {"lineNumber": 193, "col_offset": 22, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 195, "col_offset": 33, "nodeName": "self", "type": "Any"}, {"lineNumber": 197, "col_offset": 33, "nodeName": "module_name", "type": "Any"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 203, "col_offset": 41, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 203, "col_offset": 58, "nodeName": "input_size", "type": "Any"}, {"lineNumber": 205, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 205, "col_offset": 33, "nodeName": "snt", "type": "module"}, {"lineNumber": 206, "col_offset": 33, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 208, "col_offset": 41, "nodeName": "scope_name", "type": "Any"}, {"lineNumber": 215, "col_offset": 21, "nodeName": "mlp_transposed_output", "type": "Any"}, {"lineNumber": 216, "col_offset": 21, "nodeName": "input_to_mlp", "type": "Any"}, {"lineNumber": 221, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 221, "col_offset": 23, "nodeName": "op", "type": "Any"}, {"lineNumber": 223, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 223, "col_offset": 23, "nodeName": "type", "type": "Any"}, {"lineNumber": 225, "col_offset": 6, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 225, "col_offset": 23, "nodeName": "type", "type": "Any"}, {"lineNumber": 227, "col_offset": 26, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 228, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 229, "col_offset": 23, "nodeName": "input_shape", "type": "Any"}, {"lineNumber": 231, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 233, "col_offset": 9, "nodeName": "self", "type": "Any"}, {"lineNumber": 234, "col_offset": 6, "nodeName": "sess", "type": "Any"}, {"lineNumber": 235, "col_offset": 6, "nodeName": "sess", "type": "Any"}, {"lineNumber": 240, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 240, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 240, "col_offset": 27, "nodeName": "variables", "type": "Any"}, {"lineNumber": 242, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 242, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 242, "col_offset": 27, "nodeName": "variables", "type": "Any"}, {"lineNumber": 242, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 242, "col_offset": 43, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 269, "col_offset": 10, "nodeName": "snt", "type": "module"}, {"lineNumber": 269, "col_offset": 28, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 270, "col_offset": 36, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 279, "col_offset": 42, "nodeName": "get_variables", "type": "Any"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 51, "col_offset": 56, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 64, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 80, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 88, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 96, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 114, "col_offset": 23, "nodeName": "layers", "type": "Any"}, {"lineNumber": 114, "col_offset": 50, "nodeName": "self", "type": "Any"}, {"lineNumber": 114, "col_offset": 68, "nodeName": "i", "type": "int"}, {"lineNumber": 129, "col_offset": 35, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 52, "nodeName": "self", "type": "Any"}, {"lineNumber": 133, "col_offset": 23, "nodeName": "net", "type": "Any"}, {"lineNumber": 135, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 135, "col_offset": 23, "nodeName": "op", "type": "Any"}, {"lineNumber": 137, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 137, "col_offset": 23, "nodeName": "op", "type": "Any"}, {"lineNumber": 142, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 142, "col_offset": 43, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 144, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 148, "col_offset": 35, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 148, "col_offset": 52, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 151, "col_offset": 20, "nodeName": "get_shape", "type": "Any"}, {"lineNumber": 152, "col_offset": 9, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 152, "col_offset": 26, "nodeName": "output_sizes", "type": "List[int]"}, {"lineNumber": 164, "col_offset": 27, "nodeName": "layers", "type": "Any"}, {"lineNumber": 165, "col_offset": 27, "nodeName": "layers", "type": "Any"}, {"lineNumber": 167, "col_offset": 27, "nodeName": "layers", "type": "Any"}, {"lineNumber": 170, "col_offset": 35, "nodeName": "self", "type": "Any"}, {"lineNumber": 170, "col_offset": 52, "nodeName": "self", "type": "Any"}, {"lineNumber": 178, "col_offset": 31, "nodeName": "graph_regularizers", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "snt", "type": "module"}, {"lineNumber": 188, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 189, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 197, "col_offset": 33, "nodeName": "self", "type": "Any"}, {"lineNumber": 203, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 203, "col_offset": 58, "nodeName": "self", "type": "Any"}, {"lineNumber": 221, "col_offset": 23, "nodeName": "mlp_transposed_output", "type": "Any"}, {"lineNumber": 223, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 223, "col_offset": 23, "nodeName": "op", "type": "Any"}, {"lineNumber": 225, "col_offset": 6, "nodeName": "self", "type": "Any"}, {"lineNumber": 225, "col_offset": 23, "nodeName": "op", "type": "Any"}, {"lineNumber": 228, "col_offset": 23, "nodeName": "layers", "type": "Any"}, {"lineNumber": 235, "col_offset": 49, "nodeName": "input_to_mlp", "type": "Any"}, {"lineNumber": 235, "col_offset": 63, "nodeName": "data", "type": "Any"}, {"lineNumber": 240, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 240, "col_offset": 43, "nodeName": "output_sizes", "type": "Any"}, {"lineNumber": 242, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 279, "col_offset": 42, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 73, "col_offset": 33, "nodeName": "truncated_normal_initializer", "type": "Any"}, {"lineNumber": 82, "col_offset": 44, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 114, "col_offset": 23, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 114, "col_offset": 34, "nodeName": "i", "type": "int"}, {"lineNumber": 135, "col_offset": 23, "nodeName": "net", "type": "Any"}, {"lineNumber": 137, "col_offset": 23, "nodeName": "net", "type": "Any"}, {"lineNumber": 142, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 151, "col_offset": 20, "nodeName": "output", "type": "Any"}, {"lineNumber": 152, "col_offset": 26, "nodeName": "self", "type": "MLPTest"}, {"lineNumber": 164, "col_offset": 27, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 165, "col_offset": 27, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 167, "col_offset": 27, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 208, "col_offset": 41, "nodeName": "layers", "type": "Any"}, {"lineNumber": 223, "col_offset": 23, "nodeName": "mlp_transposed_output", "type": "Any"}, {"lineNumber": 225, "col_offset": 23, "nodeName": "mlp_transposed_output", "type": "Any"}, {"lineNumber": 228, "col_offset": 23, "nodeName": "mlp_transpose", "type": "Any"}, {"lineNumber": 228, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 229, "col_offset": 23, "nodeName": "layers", "type": "Any"}, {"lineNumber": 240, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 33, "nodeName": "tf", "type": "Any"}, {"lineNumber": 82, "col_offset": 44, "nodeName": "tf", "type": "Any"}, {"lineNumber": 164, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 165, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 167, "col_offset": 27, "nodeName": "tf", "type": "Any"}, {"lineNumber": 208, "col_offset": 41, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 229, "col_offset": 23, "nodeName": "mlp", "type": "Any"}, {"lineNumber": 229, "col_offset": 39, "nodeName": "i", "type": "int"}]