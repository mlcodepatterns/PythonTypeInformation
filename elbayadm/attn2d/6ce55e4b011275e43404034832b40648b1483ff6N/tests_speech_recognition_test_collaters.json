[{"lineNumber": 14, "col_offset": 26, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 14, "col_offset": 26, "nodeName": "unittest", "type": "module"}, {"lineNumber": 57, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "pad_idx", "type": "int"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "frames1", "type": "numpy.ndarray"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "frames2", "type": "numpy.ndarray"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "target1", "type": "numpy.ndarray"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "target2", "type": "numpy.ndarray"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "sample1", "type": "Dict[str, Union[List[numpy.ndarray], int]]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "sample2", "type": "Dict[str, Union[List[numpy.ndarray], int]]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 19, "col_offset": 19, "nodeName": "Seq2SeqCollater", "type": "Type[examples.speech_recognition.data.collaters.Seq2SeqCollater]"}, {"lineNumber": 24, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 26, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 27, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 30, "col_offset": 16, "nodeName": "collate", "type": "Callable[[Any], Dict[str, Any]]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "assertTensorEqual", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "assertTensorEqual", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "assertTensorEqual", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "assertTensorEqual", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertTensorEqual", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 20, "col_offset": 54, "nodeName": "pad_idx", "type": "int"}, {"lineNumber": 20, "col_offset": 73, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 24, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 26, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 26, "col_offset": 37, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 27, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 27, "col_offset": 34, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 28, "col_offset": 37, "nodeName": "frames1", "type": "numpy.ndarray"}, {"lineNumber": 28, "col_offset": 46, "nodeName": "target1", "type": "numpy.ndarray"}, {"lineNumber": 29, "col_offset": 37, "nodeName": "frames2", "type": "numpy.ndarray"}, {"lineNumber": 29, "col_offset": 46, "nodeName": "target2", "type": "numpy.ndarray"}, {"lineNumber": 30, "col_offset": 16, "nodeName": "collater", "type": "examples.speech_recognition.data.collaters.Seq2SeqCollater"}, {"lineNumber": 30, "col_offset": 34, "nodeName": "sample1", "type": "Dict[str, Union[List[numpy.ndarray], int]]"}, {"lineNumber": 30, "col_offset": 43, "nodeName": "sample2", "type": "Dict[str, Union[List[numpy.ndarray], int]]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 33, "col_offset": 31, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 33, "col_offset": 44, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 45, "col_offset": 66, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "size", "type": "Any"}, {"lineNumber": 53, "col_offset": 36, "nodeName": "size", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "TestSeq2SeqCollator"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 33, "col_offset": 44, "nodeName": "torch", "type": "Any"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 45, "col_offset": 31, "nodeName": "batch", "type": "Dict[str, Any]"}, {"lineNumber": 45, "col_offset": 66, "nodeName": "torch", "type": "Any"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "t1", "type": "Any"}, {"lineNumber": 53, "col_offset": 36, "nodeName": "t2", "type": "Any"}, {"lineNumber": 43, "col_offset": 27, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 43, "col_offset": 42, "nodeName": "pad_idx", "type": "int"}, {"lineNumber": 43, "col_offset": 53, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 48, "col_offset": 33, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 48, "col_offset": 42, "nodeName": "pad_idx", "type": "int"}, {"lineNumber": 48, "col_offset": 62, "nodeName": "eos_idx", "type": "int"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "long", "type": "Any"}, {"lineNumber": 38, "col_offset": 62, "nodeName": "pad_idx", "type": "int"}, {"lineNumber": 38, "col_offset": 71, "nodeName": "pad_idx", "type": "int"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "ne", "type": "Any"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "t2", "type": "Any"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "t1", "type": "Any"}]