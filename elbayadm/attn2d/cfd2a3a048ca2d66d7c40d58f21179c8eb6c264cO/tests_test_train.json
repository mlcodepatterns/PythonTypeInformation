[{"lineNumber": 20, "col_offset": 0, "nodeName": "mock_trainer", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 33, "col_offset": 0, "nodeName": "mock_dict", "type": "Callable[[], Any]"}, {"lineNumber": 41, "col_offset": 0, "nodeName": "get_trainer_and_epoch_itr", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "return_value", "type": "int"}, {"lineNumber": 29, "col_offset": 43, "nodeName": "num_updates", "type": "int"}, {"lineNumber": 30, "col_offset": 11, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "return_value", "type": "int"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "return_value", "type": "int"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "return_value", "type": "int"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 43, "col_offset": 4, "nodeName": "tokens_ds", "type": "fairseq.data.token_block_dataset.TokenBlockDataset"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "dataset", "type": "fairseq.data.language_pair_dataset.LanguagePairDataset"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "unittest", "type": "module"}, {"lineNumber": 110, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "MagicMock", "type": "Type[unittest.mock.MagicMock]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "get_num_updates", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "MagicMock", "type": "Type[unittest.mock.MagicMock]"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "pad", "type": "Any"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "eos", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "unk", "type": "Any"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "TokenBlockDataset", "type": "Type[fairseq.data.token_block_dataset.TokenBlockDataset]"}, {"lineNumber": 43, "col_offset": 39, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 44, "col_offset": 14, "nodeName": "mock_trainer", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 44, "col_offset": 27, "nodeName": "epoch", "type": "int"}, {"lineNumber": 44, "col_offset": 34, "nodeName": "num_updates", "type": "int"}, {"lineNumber": 44, "col_offset": 47, "nodeName": "iterations_in_epoch", "type": "int"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "LanguagePairDataset", "type": "Type[fairseq.data.language_pair_dataset.LanguagePairDataset]"}, {"lineNumber": 45, "col_offset": 39, "nodeName": "tokens_ds", "type": "fairseq.data.token_block_dataset.TokenBlockDataset"}, {"lineNumber": 45, "col_offset": 50, "nodeName": "sizes", "type": "numpy.ndarray"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "EpochBatchIterator", "type": "Type[fairseq.data.iterators.EpochBatchIterator]"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 51, "col_offset": 20, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "args_mock", "type": "unittest.mock.MagicMock"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "optimizer_overrides", "type": "str"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "applied_patches", "type": "List[unittest.mock._patch]"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 24, "col_offset": 21, "nodeName": "epoch", "type": "int"}, {"lineNumber": 25, "col_offset": 35, "nodeName": "iterations_in_epoch", "type": "int"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "torch", "type": "Any"}, {"lineNumber": 42, "col_offset": 30, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "data", "type": "module"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "data", "type": "module"}, {"lineNumber": 45, "col_offset": 50, "nodeName": "tokens_ds", "type": "fairseq.data.token_block_dataset.TokenBlockDataset"}, {"lineNumber": 45, "col_offset": 67, "nodeName": "mock_dict", "type": "Callable[[], Any]"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "data", "type": "module"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "dataset", "type": "fairseq.data.language_pair_dataset.LanguagePairDataset"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "collater", "type": "Callable[[Any], Any]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 57, "col_offset": 25, "nodeName": "MagicMock", "type": "Type[unittest.mock.MagicMock]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "args_mock", "type": "unittest.mock.MagicMock"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "itr", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "itr", "type": "Any"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "return_value", "type": "bool"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "itr", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "stopall", "type": "Callable[[], None]"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 42, "col_offset": 35, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 42, "col_offset": 41, "nodeName": "epoch_size", "type": "int"}, {"lineNumber": 43, "col_offset": 48, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 43, "col_offset": 52, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "dataset", "type": "fairseq.data.language_pair_dataset.LanguagePairDataset"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 60, "col_offset": 27, "nodeName": "MagicMock", "type": "Type[unittest.mock.MagicMock]"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "MagicMock", "type": "Type[unittest.mock.MagicMock]"}, {"lineNumber": 62, "col_offset": 30, "nodeName": "MagicMock", "type": "Type[unittest.mock.MagicMock]"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "patch", "type": "unittest.mock._patcher"}, {"lineNumber": 64, "col_offset": 38, "nodeName": "p", "type": "str"}, {"lineNumber": 64, "col_offset": 41, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 65, "col_offset": 9, "nodeName": "start", "type": "Callable[[], Any]"}, {"lineNumber": 65, "col_offset": 23, "nodeName": "p", "type": "unittest.mock._patch"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "applied_patches", "type": "List[unittest.mock._patch]"}, {"lineNumber": 69, "col_offset": 13, "nodeName": "redirect_stdout", "type": "Type[contextlib.redirect_stdout]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 70, "col_offset": 21, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 70, "col_offset": 33, "nodeName": "get_trainer_and_epoch_itr", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "load_checkpoint", "type": "Callable[[Any, Any, Any], bool]"}, {"lineNumber": 72, "col_offset": 34, "nodeName": "args_mock", "type": "unittest.mock.MagicMock"}, {"lineNumber": 72, "col_offset": 50, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 72, "col_offset": 59, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "epoch", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "iterations_in_epoch", "type": "Any"}, {"lineNumber": 76, "col_offset": 18, "nodeName": "next_epoch_itr", "type": "Callable[..., Any]"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 77, "col_offset": 29, "nodeName": "epoch", "type": "Any"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "iterations_in_epoch", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 81, "col_offset": 29, "nodeName": "iterations_in_epoch", "type": "Any"}, {"lineNumber": 84, "col_offset": 13, "nodeName": "redirect_stdout", "type": "Type[contextlib.redirect_stdout]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 85, "col_offset": 21, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "get_trainer_and_epoch_itr", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "load_checkpoint", "type": "Callable[[Any, Any, Any], bool]"}, {"lineNumber": 87, "col_offset": 34, "nodeName": "args_mock", "type": "unittest.mock.MagicMock"}, {"lineNumber": 87, "col_offset": 50, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 87, "col_offset": 59, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 88, "col_offset": 18, "nodeName": "next_epoch_itr", "type": "Callable[..., Any]"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 90, "col_offset": 29, "nodeName": "epoch", "type": "Any"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "iterations_in_epoch", "type": "Any"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 95, "col_offset": 13, "nodeName": "redirect_stdout", "type": "Type[contextlib.redirect_stdout]"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 96, "col_offset": 21, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 96, "col_offset": 33, "nodeName": "get_trainer_and_epoch_itr", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "load_checkpoint", "type": "Callable[[Any, Any, Any], bool]"}, {"lineNumber": 99, "col_offset": 34, "nodeName": "args_mock", "type": "unittest.mock.MagicMock"}, {"lineNumber": 99, "col_offset": 50, "nodeName": "trainer", "type": "unittest.mock.MagicMock"}, {"lineNumber": 99, "col_offset": 59, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 100, "col_offset": 18, "nodeName": "next_epoch_itr", "type": "Callable[..., Any]"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 102, "col_offset": 29, "nodeName": "epoch", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 29, "nodeName": "iterations_in_epoch", "type": "Any"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "patch", "type": "unittest.mock._patcher"}, {"lineNumber": 49, "col_offset": 24, "nodeName": "i", "type": "int"}, {"lineNumber": 49, "col_offset": 31, "nodeName": "i", "type": "int"}, {"lineNumber": 64, "col_offset": 48, "nodeName": "p", "type": "str"}, {"lineNumber": 64, "col_offset": 51, "nodeName": "d", "type": "unittest.mock.MagicMock"}, {"lineNumber": 64, "col_offset": 56, "nodeName": "items", "type": "Callable"}, {"lineNumber": 65, "col_offset": 9, "nodeName": "p", "type": "unittest.mock._patch"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 69, "col_offset": 13, "nodeName": "contextlib", "type": "module"}, {"lineNumber": 69, "col_offset": 40, "nodeName": "StringIO", "type": "Type[io.StringIO]"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "train", "type": "module"}, {"lineNumber": 72, "col_offset": 34, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 76, "col_offset": 18, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 77, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 80, "col_offset": 29, "nodeName": "item", "type": "Any"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 81, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 84, "col_offset": 13, "nodeName": "contextlib", "type": "module"}, {"lineNumber": 84, "col_offset": 40, "nodeName": "StringIO", "type": "Type[io.StringIO]"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "train", "type": "module"}, {"lineNumber": 87, "col_offset": 34, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 88, "col_offset": 18, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 90, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 92, "col_offset": 29, "nodeName": "item", "type": "Any"}, {"lineNumber": 95, "col_offset": 13, "nodeName": "contextlib", "type": "module"}, {"lineNumber": 95, "col_offset": 40, "nodeName": "StringIO", "type": "Type[io.StringIO]"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "patches", "type": "Dict[str, unittest.mock.MagicMock]"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "train", "type": "module"}, {"lineNumber": 99, "col_offset": 34, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 100, "col_offset": 18, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 102, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 103, "col_offset": 29, "nodeName": "epoch_itr", "type": "fairseq.data.iterators.EpochBatchIterator"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 104, "col_offset": 29, "nodeName": "item", "type": "Any"}, {"lineNumber": 49, "col_offset": 36, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 49, "col_offset": 42, "nodeName": "epoch_size", "type": "int"}, {"lineNumber": 64, "col_offset": 56, "nodeName": "patches", "type": "Dict[str, unittest.mock.MagicMock]"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 64, "col_offset": 56, "nodeName": "self", "type": "TestLoadCheckpoint"}, {"lineNumber": 80, "col_offset": 29, "nodeName": "next", "type": "Callable"}, {"lineNumber": 80, "col_offset": 34, "nodeName": "itr", "type": "Any"}, {"lineNumber": 92, "col_offset": 29, "nodeName": "next", "type": "Callable"}, {"lineNumber": 92, "col_offset": 34, "nodeName": "itr", "type": "Any"}, {"lineNumber": 104, "col_offset": 29, "nodeName": "next", "type": "Callable"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "itr", "type": "Any"}]