[{"lineNumber": 53, "col_offset": 0, "nodeName": "convert_lang_code", "type": "Callable[[Any], Any]"}, {"lineNumber": 61, "col_offset": 0, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 88, "col_offset": 0, "nodeName": "parse_gloss", "type": "Callable[[Any], Any]"}, {"lineNumber": 96, "col_offset": 0, "nodeName": "handle_file", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 196, "col_offset": 0, "nodeName": "output_edge", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 209, "col_offset": 0, "nodeName": "main", "type": "Callable[[], Any]"}, {"lineNumber": 14, "col_offset": 0, "nodeName": "STRING_TYPE", "type": "Type[str]"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "NOUN_TYPES", "type": "List[str]"}, {"lineNumber": 31, "col_offset": 0, "nodeName": "ADJ_TYPES", "type": "List[str]"}, {"lineNumber": 36, "col_offset": 0, "nodeName": "ADV_TYPES", "type": "List[str]"}, {"lineNumber": 40, "col_offset": 0, "nodeName": "VERB_TYPES", "type": "List[str]"}, {"lineNumber": 80, "col_offset": 0, "nodeName": "GLOSS_RE", "type": "Pattern[str]"}, {"lineNumber": 14, "col_offset": 14, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "compile", "type": "Callable"}, {"lineNumber": 87, "col_offset": 5, "nodeName": "VERBOSE", "type": "int"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "matched", "type": "Match[str]"}, {"lineNumber": 90, "col_offset": 7, "nodeName": "matched", "type": "Match[str]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "file", "type": "codecs.StreamReaderWriter"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "out", "type": "conceptnet5.formats.msgpack_stream.MsgpackStreamWriter"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "data", "type": "str"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "xml", "type": "Any"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "root_node", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "entry", "type": "Any"}, {"lineNumber": 200, "col_offset": 4, "nodeName": "rel", "type": "str"}, {"lineNumber": 201, "col_offset": 4, "nodeName": "edge", "type": "Dict[str, Any]"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 214, "col_offset": 4, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 218, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 58, "col_offset": 11, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 73, "col_offset": 14, "nodeName": "get", "type": "Any"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "tag", "type": "str"}, {"lineNumber": 74, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 74, "col_offset": 18, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 74, "col_offset": 27, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "re", "type": "module"}, {"lineNumber": 87, "col_offset": 5, "nodeName": "re", "type": "module"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "match", "type": "Callable"}, {"lineNumber": 89, "col_offset": 29, "nodeName": "text", "type": "Any"}, {"lineNumber": 112, "col_offset": 11, "nodeName": "open", "type": "Callable[..., codecs.StreamReaderWriter]"}, {"lineNumber": 112, "col_offset": 23, "nodeName": "filename", "type": "Any"}, {"lineNumber": 113, "col_offset": 10, "nodeName": "MsgpackStreamWriter", "type": "Type[conceptnet5.formats.msgpack_stream.MsgpackStreamWriter]"}, {"lineNumber": 113, "col_offset": 30, "nodeName": "output_file", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "read", "type": "Callable[..., str]"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "close", "type": "Callable[[], None]"}, {"lineNumber": 116, "col_offset": 10, "nodeName": "parse", "type": "Any"}, {"lineNumber": 116, "col_offset": 26, "nodeName": "data", "type": "str"}, {"lineNumber": 119, "col_offset": 16, "nodeName": "xml", "type": "Any"}, {"lineNumber": 120, "col_offset": 17, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 120, "col_offset": 26, "nodeName": "root_node", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "headwords", "type": "List[Any]"}, {"lineNumber": 158, "col_offset": 12, "nodeName": "sense", "type": "Any"}, {"lineNumber": 201, "col_offset": 11, "nodeName": "make_edge", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "rel", "type": "str"}, {"lineNumber": 201, "col_offset": 26, "nodeName": "subj_concept", "type": "Any"}, {"lineNumber": 201, "col_offset": 40, "nodeName": "obj_concept", "type": "Any"}, {"lineNumber": 206, "col_offset": 4, "nodeName": "write", "type": "Callable[[Any], None]"}, {"lineNumber": 206, "col_offset": 14, "nodeName": "edge", "type": "Dict[str, Any]"}, {"lineNumber": 211, "col_offset": 13, "nodeName": "ArgumentParser", "type": "Type[argparse.ArgumentParser]"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 213, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 214, "col_offset": 11, "nodeName": "parse_args", "type": "Callable"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "handle_file", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "input", "type": "Any"}, {"lineNumber": 215, "col_offset": 28, "nodeName": "output", "type": "Any"}, {"lineNumber": 219, "col_offset": 4, "nodeName": "main", "type": "Callable[[], Any]"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "get", "type": "Any"}, {"lineNumber": 58, "col_offset": 29, "nodeName": "code", "type": "Any"}, {"lineNumber": 73, "col_offset": 14, "nodeName": "node", "type": "Any"}, {"lineNumber": 77, "col_offset": 16, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "GLOSS_RE", "type": "Pattern[str]"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "strip", "type": "Callable[..., str]"}, {"lineNumber": 112, "col_offset": 11, "nodeName": "codecs", "type": "module"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "file", "type": "codecs.StreamReaderWriter"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "file", "type": "codecs.StreamReaderWriter"}, {"lineNumber": 116, "col_offset": 10, "nodeName": "xmltodict", "type": "Any"}, {"lineNumber": 150, "col_offset": 15, "nodeName": "headwords", "type": "List[Any]"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "headwords", "type": "List[Any]"}, {"lineNumber": 158, "col_offset": 21, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 158, "col_offset": 30, "nodeName": "entry", "type": "Any"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "glosses", "type": "Any"}, {"lineNumber": 165, "col_offset": 16, "nodeName": "gloss", "type": "Any"}, {"lineNumber": 165, "col_offset": 25, "nodeName": "glosses", "type": "Any"}, {"lineNumber": 203, "col_offset": 29, "nodeName": "cc_sharealike", "type": "str"}, {"lineNumber": 206, "col_offset": 4, "nodeName": "out", "type": "conceptnet5.formats.msgpack_stream.MsgpackStreamWriter"}, {"lineNumber": 211, "col_offset": 13, "nodeName": "argparse", "type": "module"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 213, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 214, "col_offset": 11, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 215, "col_offset": 28, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "langcodes", "type": "Any"}, {"lineNumber": 149, "col_offset": 21, "nodeName": "word", "type": "Any"}, {"lineNumber": 149, "col_offset": 37, "nodeName": "word", "type": "Any"}, {"lineNumber": 166, "col_offset": 16, "nodeName": "text", "type": "None"}, {"lineNumber": 166, "col_offset": 23, "nodeName": "lang", "type": "None"}, {"lineNumber": 203, "col_offset": 29, "nodeName": "Licenses", "type": "Type[conceptnet5.uri.Licenses]"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "group", "type": "Callable"}, {"lineNumber": 149, "col_offset": 45, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 149, "col_offset": 54, "nodeName": "entry", "type": "Any"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "word", "type": "Any"}, {"lineNumber": 151, "col_offset": 41, "nodeName": "word", "type": "Any"}, {"lineNumber": 164, "col_offset": 22, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 164, "col_offset": 31, "nodeName": "sense", "type": "Any"}, {"lineNumber": 164, "col_offset": 49, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 164, "col_offset": 58, "nodeName": "sense", "type": "Any"}, {"lineNumber": 167, "col_offset": 30, "nodeName": "gloss", "type": "Any"}, {"lineNumber": 171, "col_offset": 20, "nodeName": "text", "type": "Optional[str]"}, {"lineNumber": 172, "col_offset": 20, "nodeName": "lang", "type": "str"}, {"lineNumber": 190, "col_offset": 24, "nodeName": "head", "type": "Any"}, {"lineNumber": 190, "col_offset": 32, "nodeName": "headwords", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "matched", "type": "Match[str]"}, {"lineNumber": 151, "col_offset": 49, "nodeName": "get_list", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 151, "col_offset": 58, "nodeName": "entry", "type": "Any"}, {"lineNumber": 171, "col_offset": 27, "nodeName": "parse_gloss", "type": "Callable[[Any], Any]"}, {"lineNumber": 172, "col_offset": 27, "nodeName": "convert_lang_code", "type": "Callable[[Any], Any]"}, {"lineNumber": 173, "col_offset": 21, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 173, "col_offset": 32, "nodeName": "gloss", "type": "Any"}, {"lineNumber": 173, "col_offset": 39, "nodeName": "STRING_TYPE", "type": "Type[str]"}, {"lineNumber": 176, "col_offset": 20, "nodeName": "lang", "type": "str"}, {"lineNumber": 177, "col_offset": 20, "nodeName": "text", "type": "Optional[str]"}, {"lineNumber": 187, "col_offset": 20, "nodeName": "text", "type": "Optional[str]"}, {"lineNumber": 187, "col_offset": 52, "nodeName": "text", "type": "Optional[str]"}, {"lineNumber": 188, "col_offset": 24, "nodeName": "valid_concept_name", "type": "Callable[[Any], bool]"}, {"lineNumber": 188, "col_offset": 43, "nodeName": "text", "type": "Optional[str]"}, {"lineNumber": 191, "col_offset": 24, "nodeName": "ja_concept", "type": "Any"}, {"lineNumber": 192, "col_offset": 24, "nodeName": "other_concept", "type": "Any"}, {"lineNumber": 171, "col_offset": 39, "nodeName": "gloss", "type": "Any"}, {"lineNumber": 172, "col_offset": 45, "nodeName": "gloss", "type": "Any"}, {"lineNumber": 177, "col_offset": 27, "nodeName": "parse_gloss", "type": "Callable[[Any], Any]"}, {"lineNumber": 177, "col_offset": 39, "nodeName": "gloss", "type": "Any"}, {"lineNumber": 187, "col_offset": 61, "nodeName": "count", "type": "Callable[..., int]"}, {"lineNumber": 191, "col_offset": 37, "nodeName": "standardized_concept_uri", "type": "Callable[..., Any]"}, {"lineNumber": 191, "col_offset": 68, "nodeName": "head", "type": "Any"}, {"lineNumber": 192, "col_offset": 40, "nodeName": "standardized_concept_uri", "type": "Callable[..., Any]"}, {"lineNumber": 192, "col_offset": 65, "nodeName": "lang", "type": "Optional[str]"}, {"lineNumber": 192, "col_offset": 71, "nodeName": "text", "type": "Optional[str]"}, {"lineNumber": 193, "col_offset": 24, "nodeName": "output_edge", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 193, "col_offset": 36, "nodeName": "out", "type": "conceptnet5.formats.msgpack_stream.MsgpackStreamWriter"}, {"lineNumber": 193, "col_offset": 41, "nodeName": "ja_concept", "type": "Any"}, {"lineNumber": 193, "col_offset": 53, "nodeName": "other_concept", "type": "Any"}, {"lineNumber": 187, "col_offset": 61, "nodeName": "text", "type": "Optional[str]"}]