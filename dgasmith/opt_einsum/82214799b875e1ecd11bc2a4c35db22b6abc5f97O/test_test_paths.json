[{"lineNumber": 15, "col_offset": 0, "nodeName": "check_path", "type": "Callable[..., Any]"}, {"lineNumber": 29, "col_offset": 0, "nodeName": "assert_contract_order", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 35, "col_offset": 0, "nodeName": "test_size_by_dict", "type": "Callable[[], Any]"}, {"lineNumber": 55, "col_offset": 0, "nodeName": "test_path_optimal", "type": "Callable[[], Any]"}, {"lineNumber": 63, "col_offset": 0, "nodeName": "test_path_greedy", "type": "Callable[[], Any]"}, {"lineNumber": 71, "col_offset": 0, "nodeName": "test_memory_paths", "type": "Callable[[], Any]"}, {"lineNumber": 8, "col_offset": 0, "nodeName": "path_tests", "type": "Dict[str, Tuple[List[Set[str]], Set[str], Dict[str, int]]]"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "ret", "type": "bool"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "pos", "type": "int"}, {"lineNumber": 26, "col_offset": 11, "nodeName": "ret", "type": "Union[Any, bool]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "compute_size_by_dict", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "test_func", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "optimal", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "test_data", "type": "Tuple[List[Set[str]], Set[str], Dict[str, int]]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "test_func", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "greedy", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "test_data", "type": "Tuple[List[Set[str]], Set[str], Dict[str, int]]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "expression", "type": "str"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "views", "type": "List[Any]"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "ret", "type": "bool"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "ret", "type": "Any"}, {"lineNumber": 31, "col_offset": 18, "nodeName": "func", "type": "Any"}, {"lineNumber": 31, "col_offset": 65, "nodeName": "max_size", "type": "Any"}, {"lineNumber": 32, "col_offset": 11, "nodeName": "check_path", "type": "Callable[..., Any]"}, {"lineNumber": 32, "col_offset": 22, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 32, "col_offset": 35, "nodeName": "benchmark", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "ind", "type": "str"}, {"lineNumber": 38, "col_offset": 13, "nodeName": "val", "type": "int"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 39, "col_offset": 26, "nodeName": "val", "type": "int"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "paths", "type": "module"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 48, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "paths", "type": "module"}, {"lineNumber": 59, "col_offset": 16, "nodeName": "path_tests", "type": "Dict[str, Tuple[List[Set[str]], Set[str], Dict[str, int]]]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "assert_contract_order", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 60, "col_offset": 26, "nodeName": "test_func", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 60, "col_offset": 37, "nodeName": "test_data", "type": "Tuple[List[Set[str]], Set[str], Dict[str, int]]"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "assert_contract_order", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 61, "col_offset": 26, "nodeName": "test_func", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "test_data", "type": "Tuple[List[Set[str]], Set[str], Dict[str, int]]"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "paths", "type": "module"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "path_tests", "type": "Dict[str, Tuple[List[Set[str]], Set[str], Dict[str, int]]]"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "assert_contract_order", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "test_func", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 68, "col_offset": 37, "nodeName": "test_data", "type": "Tuple[List[Set[str]], Set[str], Dict[str, int]]"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "assert_contract_order", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "test_func", "type": "Callable[[Any, Any, Any, Any], List[Tuple[int, ...]]]"}, {"lineNumber": 69, "col_offset": 37, "nodeName": "test_data", "type": "Tuple[List[Set[str]], Set[str], Dict[str, int]]"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "build_views", "type": "Callable[..., List[Any]]"}, {"lineNumber": 75, "col_offset": 35, "nodeName": "expression", "type": "str"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "contract_path", "type": "Callable[..., Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]]"}, {"lineNumber": 78, "col_offset": 32, "nodeName": "expression", "type": "str"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "check_path", "type": "Callable[..., Any]"}, {"lineNumber": 81, "col_offset": 15, "nodeName": "contract_path", "type": "Callable[..., Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]]"}, {"lineNumber": 81, "col_offset": 32, "nodeName": "expression", "type": "str"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "check_path", "type": "Callable[..., Any]"}, {"lineNumber": 85, "col_offset": 15, "nodeName": "contract_path", "type": "Callable[..., Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]]"}, {"lineNumber": 85, "col_offset": 32, "nodeName": "expression", "type": "str"}, {"lineNumber": 86, "col_offset": 11, "nodeName": "check_path", "type": "Callable[..., Any]"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "contract_path", "type": "Callable[..., Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]]"}, {"lineNumber": 88, "col_offset": 32, "nodeName": "expression", "type": "str"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "check_path", "type": "Callable[..., Any]"}, {"lineNumber": 9, "col_offset": 52, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 11, "col_offset": 54, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 16, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 16, "col_offset": 22, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 16, "col_offset": 35, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 19, "col_offset": 7, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 19, "col_offset": 11, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 19, "col_offset": 27, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 19, "col_offset": 31, "nodeName": "benchmark", "type": "Any"}, {"lineNumber": 23, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 24, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 24, "col_offset": 44, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 31, "col_offset": 23, "nodeName": "test_data", "type": "Any"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "test_data", "type": "Any"}, {"lineNumber": 31, "col_offset": 51, "nodeName": "test_data", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "oe", "type": "module"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 43, "col_offset": 40, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 44, "col_offset": 26, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 44, "col_offset": 41, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 41, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 47, "col_offset": 26, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 47, "col_offset": 41, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 48, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 48, "col_offset": 26, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 48, "col_offset": 42, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 49, "col_offset": 26, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 49, "col_offset": 43, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 51, "col_offset": 28, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 51, "col_offset": 46, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 52, "col_offset": 30, "nodeName": "path_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 52, "col_offset": 49, "nodeName": "sizes_dict", "type": "Dict[str, int]"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "oe", "type": "module"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "oe", "type": "module"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "helpers", "type": "module"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "oe", "type": "module"}, {"lineNumber": 78, "col_offset": 45, "nodeName": "views", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 81, "col_offset": 15, "nodeName": "oe", "type": "module"}, {"lineNumber": 81, "col_offset": 45, "nodeName": "views", "type": "List[Any]"}, {"lineNumber": 82, "col_offset": 22, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 85, "col_offset": 15, "nodeName": "oe", "type": "module"}, {"lineNumber": 85, "col_offset": 45, "nodeName": "views", "type": "List[Any]"}, {"lineNumber": 86, "col_offset": 22, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "oe", "type": "module"}, {"lineNumber": 88, "col_offset": 45, "nodeName": "views", "type": "List[Any]"}, {"lineNumber": 89, "col_offset": 22, "nodeName": "path_ret", "type": "Tuple[Any, Union[str, List[Tuple[Tuple[Any, ...], Set[Any], str, Any, Union[bool, str]]]]]"}, {"lineNumber": 9, "col_offset": 16, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 9, "col_offset": 28, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 9, "col_offset": 39, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 11, "col_offset": 17, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 11, "col_offset": 30, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 11, "col_offset": 42, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 24, "col_offset": 26, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "test_output", "type": "Any"}, {"lineNumber": 25, "col_offset": 35, "nodeName": "benchmark", "type": "Any"}, {"lineNumber": 39, "col_offset": 19, "nodeName": "ind", "type": "str"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "oe", "type": "module"}, {"lineNumber": 24, "col_offset": 38, "nodeName": "pos", "type": "int"}, {"lineNumber": 25, "col_offset": 27, "nodeName": "pos", "type": "int"}, {"lineNumber": 25, "col_offset": 45, "nodeName": "pos", "type": "int"}]