[{"lineNumber": 25, "col_offset": 0, "nodeName": "featurize", "type": "Callable[[], Any]"}, {"lineNumber": 8, "col_offset": 0, "nodeName": "install_aliases", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "process", "type": "subprocess.Popen[str]"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "results_str", "type": "Any"}, {"lineNumber": 105, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "results_str", "type": "Any"}, {"lineNumber": 8, "col_offset": 0, "nodeName": "standard_library", "type": "Any"}, {"lineNumber": 37, "col_offset": 14, "nodeName": "Popen", "type": "Type[subprocess.Popen[Any]]"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "stdout", "type": "str"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "stderr", "type": "str"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "communicate", "type": "Callable[..., Tuple[str, str]]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "status_code", "type": "int"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "process", "type": "subprocess.Popen[str]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "disco_running", "type": "bool"}, {"lineNumber": 63, "col_offset": 79, "nodeName": "f", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 66, "col_offset": 28, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "headerfile_path", "type": "Any"}, {"lineNumber": 77, "col_offset": 25, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "zipfile_path", "type": "Any"}, {"lineNumber": 92, "col_offset": 18, "nodeName": "featurize", "type": "Any"}, {"lineNumber": 106, "col_offset": 18, "nodeName": "featurize", "type": "Callable[[], Any]"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 107, "col_offset": 10, "nodeName": "results_str", "type": "Any"}, {"lineNumber": 37, "col_offset": 48, "nodeName": "PIPE", "type": "int"}, {"lineNumber": 37, "col_offset": 61, "nodeName": "PIPE", "type": "int"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "process", "type": "subprocess.Popen[str]"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "str", "type": "Any"}, {"lineNumber": 39, "col_offset": 24, "nodeName": "stdout", "type": "str"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 22, "nodeName": "call", "type": "Callable[..., int]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 48, "nodeName": "status_code", "type": "int"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "sleep", "type": "Callable[[Union[float, int]], None]"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "Popen", "type": "Type[subprocess.Popen[Any]]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "stdout", "type": "str"}, {"lineNumber": 45, "col_offset": 16, "nodeName": "stderr", "type": "str"}, {"lineNumber": 45, "col_offset": 25, "nodeName": "communicate", "type": "Callable[..., Tuple[str, str]]"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "status_code", "type": "int"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "process", "type": "subprocess.Popen[str]"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "disco_running", "type": "bool"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "open", "type": "Any"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "load", "type": "Callable[[IO[str]], Any]"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "f", "type": "Any"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "str", "type": "Any"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "isfile", "type": "Callable[[Union[str, unicode]], bool]"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "headerfile_path", "type": "Any"}, {"lineNumber": 75, "col_offset": 14, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 78, "col_offset": 23, "nodeName": "str", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "isfile", "type": "Callable[[Union[str, unicode]], bool]"}, {"lineNumber": 79, "col_offset": 26, "nodeName": "zipfile_path", "type": "Any"}, {"lineNumber": 92, "col_offset": 18, "nodeName": "build_rf_model", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 98, "col_offset": 18, "nodeName": "disco_running", "type": "bool"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "time", "type": "module"}, {"lineNumber": 44, "col_offset": 52, "nodeName": "PIPE", "type": "int"}, {"lineNumber": 44, "col_offset": 65, "nodeName": "PIPE", "type": "int"}, {"lineNumber": 45, "col_offset": 25, "nodeName": "process", "type": "subprocess.Popen[str]"}, {"lineNumber": 46, "col_offset": 24, "nodeName": "str", "type": "Any"}, {"lineNumber": 46, "col_offset": 28, "nodeName": "stdout", "type": "str"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 48, "col_offset": 26, "nodeName": "call", "type": "Callable[..., int]"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 49, "col_offset": 52, "nodeName": "status_code", "type": "int"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "sleep", "type": "Callable[[Union[float, int]], None]"}, {"lineNumber": 51, "col_offset": 22, "nodeName": "Popen", "type": "Type[subprocess.Popen[Any]]"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "stdout", "type": "str"}, {"lineNumber": 52, "col_offset": 20, "nodeName": "stderr", "type": "str"}, {"lineNumber": 52, "col_offset": 29, "nodeName": "communicate", "type": "Callable[..., Tuple[str, str]]"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "disco_running", "type": "bool"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "disco_running", "type": "bool"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "pickle", "type": "module"}, {"lineNumber": 67, "col_offset": 30, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "path", "type": "module"}, {"lineNumber": 71, "col_offset": 18, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 78, "col_offset": 27, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "path", "type": "module"}, {"lineNumber": 82, "col_offset": 18, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 85, "col_offset": 34, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 87, "col_offset": 14, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 95, "col_offset": 24, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 96, "col_offset": 22, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 97, "col_offset": 16, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 99, "col_offset": 27, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 100, "col_offset": 27, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "time", "type": "module"}, {"lineNumber": 51, "col_offset": 56, "nodeName": "PIPE", "type": "int"}, {"lineNumber": 51, "col_offset": 69, "nodeName": "PIPE", "type": "int"}, {"lineNumber": 52, "col_offset": 29, "nodeName": "process", "type": "subprocess.Popen[str]"}, {"lineNumber": 53, "col_offset": 28, "nodeName": "str", "type": "Any"}, {"lineNumber": 53, "col_offset": 32, "nodeName": "stdout", "type": "str"}, {"lineNumber": 54, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "os", "type": "module"}, {"lineNumber": 73, "col_offset": 42, "nodeName": "headerfile_path", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "os", "type": "module"}, {"lineNumber": 84, "col_offset": 38, "nodeName": "zipfile_path", "type": "Any"}, {"lineNumber": 86, "col_offset": 10, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 89, "col_offset": 34, "nodeName": "function_args", "type": "Any"}, {"lineNumber": 90, "col_offset": 10, "nodeName": "function_args", "type": "Any"}]