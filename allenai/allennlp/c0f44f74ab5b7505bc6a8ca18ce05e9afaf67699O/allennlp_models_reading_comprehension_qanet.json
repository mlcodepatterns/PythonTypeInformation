[{"lineNumber": 18, "col_offset": 12, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "text_embed_dim", "type": "int"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "encoding_out_dim", "type": "int"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "modeling_in_dim", "type": "int"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "_text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 68, "col_offset": 36, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "_embedding_proj_layer", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "_highway_layer", "type": "allennlp.modules.highway.Highway"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "_encoding_proj_layer", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "_phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "_matrix_attention", "type": "allennlp.modules.matrix_attention.matrix_attention.MatrixAttention"}, {"lineNumber": 76, "col_offset": 33, "nodeName": "matrix_attention_layer", "type": "allennlp.modules.matrix_attention.matrix_attention.MatrixAttention"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "_modeling_proj_layer", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "_modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 79, "col_offset": 31, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "_span_start_predictor", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "_span_end_predictor", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "_span_start_accuracy", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "_span_end_accuracy", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "_span_accuracy", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "_metrics", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "projected_embedded_question", "type": "Any"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "projected_embedded_passage", "type": "Any"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "attention_over_attention", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "passage_passage_vectors", "type": "Any"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 192, "col_offset": 12, "nodeName": "_", "type": "int"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "span_start_input", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "span_end_input", "type": "Any"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 251, "col_offset": 15, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 97, "col_offset": 58, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 253, "col_offset": 50, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 58, "col_offset": 30, "nodeName": "InitializerApplicator", "type": "Type[allennlp.nn.initializers.InitializerApplicator]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 60, "col_offset": 32, "nodeName": "regularizer", "type": "Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 63, "col_offset": 26, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 64, "col_offset": 27, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 65, "col_offset": 26, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 66, "col_offset": 27, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 70, "col_offset": 37, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 70, "col_offset": 53, "nodeName": "text_embed_dim", "type": "int"}, {"lineNumber": 70, "col_offset": 69, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 30, "nodeName": "Highway", "type": "Type[allennlp.modules.highway.Highway]"}, {"lineNumber": 71, "col_offset": 38, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 71, "col_offset": 55, "nodeName": "num_highway_layers", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 36, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 73, "col_offset": 52, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 73, "col_offset": 69, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 78, "col_offset": 36, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 78, "col_offset": 74, "nodeName": "modeling_in_dim", "type": "int"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 82, "col_offset": 35, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "CategoricalAccuracy", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 34, "nodeName": "CategoricalAccuracy", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 30, "nodeName": "BooleanAccuracy", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "SquadEmAndF1", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 90, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 146, "col_offset": 24, "nodeName": "float", "type": "Any"}, {"lineNumber": 147, "col_offset": 23, "nodeName": "float", "type": "Any"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 150, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 151, "col_offset": 28, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 152, "col_offset": 27, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 154, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 156, "col_offset": 38, "nodeName": "_encoding_proj_layer", "type": "Any"}, {"lineNumber": 156, "col_offset": 64, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 157, "col_offset": 37, "nodeName": "_encoding_proj_layer", "type": "Any"}, {"lineNumber": 157, "col_offset": 63, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 159, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 160, "col_offset": 26, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 163, "col_offset": 38, "nodeName": "_matrix_attention", "type": "Any"}, {"lineNumber": 163, "col_offset": 61, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 163, "col_offset": 78, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 165, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 166, "col_offset": 16, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 167, "col_offset": 16, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 170, "col_offset": 35, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 170, "col_offset": 53, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 170, "col_offset": 71, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 173, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 175, "col_offset": 16, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 178, "col_offset": 35, "nodeName": "bmm", "type": "Any"}, {"lineNumber": 178, "col_offset": 45, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 178, "col_offset": 73, "nodeName": "question_passage_attention", "type": "Any"}, {"lineNumber": 180, "col_offset": 34, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 180, "col_offset": 52, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 180, "col_offset": 69, "nodeName": "attention_over_attention", "type": "Any"}, {"lineNumber": 183, "col_offset": 43, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 192, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 193, "col_offset": 12, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 197, "col_offset": 27, "nodeName": "cat", "type": "Any"}, {"lineNumber": 199, "col_offset": 28, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 202, "col_offset": 25, "nodeName": "cat", "type": "Any"}, {"lineNumber": 203, "col_offset": 26, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 204, "col_offset": 28, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 204, "col_offset": 55, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 204, "col_offset": 74, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 205, "col_offset": 26, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 205, "col_offset": 53, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 205, "col_offset": 70, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 208, "col_offset": 27, "nodeName": "softmax", "type": "Any"}, {"lineNumber": 208, "col_offset": 55, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 209, "col_offset": 25, "nodeName": "softmax", "type": "Any"}, {"lineNumber": 209, "col_offset": 53, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 211, "col_offset": 20, "nodeName": "get_best_span", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 211, "col_offset": 34, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 211, "col_offset": 53, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 214, "col_offset": 46, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 215, "col_offset": 37, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 216, "col_offset": 36, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 217, "col_offset": 35, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 218, "col_offset": 34, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 219, "col_offset": 29, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 223, "col_offset": 11, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 224, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 229, "col_offset": 34, "nodeName": "loss", "type": "Any"}, {"lineNumber": 232, "col_offset": 11, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 234, "col_offset": 12, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 235, "col_offset": 12, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 236, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 249, "col_offset": 45, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 250, "col_offset": 44, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 253, "col_offset": 33, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "exact_match", "type": "Any"}, {"lineNumber": 254, "col_offset": 21, "nodeName": "f1_score", "type": "Any"}, {"lineNumber": 254, "col_offset": 32, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 254, "col_offset": 57, "nodeName": "reset", "type": "bool"}, {"lineNumber": 259, "col_offset": 22, "nodeName": "exact_match", "type": "Any"}, {"lineNumber": 260, "col_offset": 22, "nodeName": "f1_score", "type": "Any"}, {"lineNumber": 59, "col_offset": 30, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 63, "col_offset": 26, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 64, "col_offset": 27, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 65, "col_offset": 26, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 66, "col_offset": 27, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 70, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 73, "col_offset": 36, "nodeName": "nn", "type": "Any"}, {"lineNumber": 78, "col_offset": 36, "nodeName": "nn", "type": "Any"}, {"lineNumber": 78, "col_offset": 52, "nodeName": "encoding_out_dim", "type": "int"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 81, "col_offset": 53, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 82, "col_offset": 35, "nodeName": "nn", "type": "Any"}, {"lineNumber": 82, "col_offset": 51, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 88, "col_offset": 60, "nodeName": "dropout_prob", "type": "float"}, {"lineNumber": 88, "col_offset": 24, "nodeName": "Dropout", "type": "Any"}, {"lineNumber": 88, "col_offset": 92, "nodeName": "x", "type": "Any"}, {"lineNumber": 97, "col_offset": 26, "nodeName": "List", "type": "Any"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 149, "col_offset": 42, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 149, "col_offset": 68, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 150, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 150, "col_offset": 41, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 150, "col_offset": 67, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 151, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 151, "col_offset": 48, "nodeName": "_embedding_proj_layer", "type": "Any"}, {"lineNumber": 151, "col_offset": 75, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 152, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 152, "col_offset": 47, "nodeName": "_embedding_proj_layer", "type": "Any"}, {"lineNumber": 152, "col_offset": 74, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 154, "col_offset": 21, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 156, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 157, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 159, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 159, "col_offset": 41, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 159, "col_offset": 60, "nodeName": "projected_embedded_question", "type": "Any"}, {"lineNumber": 159, "col_offset": 89, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 160, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 160, "col_offset": 40, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 160, "col_offset": 59, "nodeName": "projected_embedded_passage", "type": "Any"}, {"lineNumber": 160, "col_offset": 87, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 163, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 170, "col_offset": 35, "nodeName": "util", "type": "module"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 178, "col_offset": 35, "nodeName": "torch", "type": "Any"}, {"lineNumber": 180, "col_offset": 34, "nodeName": "util", "type": "module"}, {"lineNumber": 183, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 184, "col_offset": 16, "nodeName": "cat", "type": "Any"}, {"lineNumber": 190, "col_offset": 32, "nodeName": "_modeling_proj_layer", "type": "Any"}, {"lineNumber": 190, "col_offset": 58, "nodeName": "merged_passage_attention_vectors", "type": "Any"}, {"lineNumber": 193, "col_offset": 30, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 194, "col_offset": 40, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 197, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 202, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 204, "col_offset": 28, "nodeName": "util", "type": "module"}, {"lineNumber": 205, "col_offset": 26, "nodeName": "util", "type": "module"}, {"lineNumber": 208, "col_offset": 27, "nodeName": "functional", "type": "Any"}, {"lineNumber": 209, "col_offset": 25, "nodeName": "functional", "type": "Any"}, {"lineNumber": 224, "col_offset": 19, "nodeName": "nll_loss", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "_span_start_accuracy", "type": "Any"}, {"lineNumber": 225, "col_offset": 38, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 226, "col_offset": 20, "nodeName": "nll_loss", "type": "Any"}, {"lineNumber": 227, "col_offset": 12, "nodeName": "_span_end_accuracy", "type": "Any"}, {"lineNumber": 227, "col_offset": 36, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "_span_accuracy", "type": "Any"}, {"lineNumber": 228, "col_offset": 32, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 236, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 236, "col_offset": 27, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 239, "col_offset": 16, "nodeName": "passage_str", "type": "Any"}, {"lineNumber": 240, "col_offset": 16, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 241, "col_offset": 16, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 242, "col_offset": 16, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 243, "col_offset": 16, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 244, "col_offset": 16, "nodeName": "best_span_string", "type": "Any"}, {"lineNumber": 246, "col_offset": 16, "nodeName": "answer_texts", "type": "Any"}, {"lineNumber": 247, "col_offset": 19, "nodeName": "answer_texts", "type": "Any"}, {"lineNumber": 249, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 250, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 97, "col_offset": 63, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 97, "col_offset": 68, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 254, "col_offset": 32, "nodeName": "_metrics", "type": "Any"}, {"lineNumber": 256, "col_offset": 29, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 256, "col_offset": 66, "nodeName": "reset", "type": "bool"}, {"lineNumber": 257, "col_offset": 27, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 257, "col_offset": 62, "nodeName": "reset", "type": "bool"}, {"lineNumber": 258, "col_offset": 28, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 258, "col_offset": 59, "nodeName": "reset", "type": "bool"}, {"lineNumber": 253, "col_offset": 55, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 253, "col_offset": 60, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 59, "col_offset": 39, "nodeName": "RegularizerApplicator", "type": "Type[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 70, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 73, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 78, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 82, "col_offset": 35, "nodeName": "torch", "type": "Any"}, {"lineNumber": 88, "col_offset": 24, "nodeName": "nn", "type": "Any"}, {"lineNumber": 88, "col_offset": 43, "nodeName": "dropout_prob", "type": "float"}, {"lineNumber": 146, "col_offset": 24, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 146, "col_offset": 49, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 147, "col_offset": 23, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 147, "col_offset": 48, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 149, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 150, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 151, "col_offset": 48, "nodeName": "self", "type": "Any"}, {"lineNumber": 152, "col_offset": 47, "nodeName": "self", "type": "Any"}, {"lineNumber": 159, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 160, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 184, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 184, "col_offset": 27, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 184, "col_offset": 44, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 190, "col_offset": 32, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 44, "nodeName": "_modeling_layer", "type": "Any"}, {"lineNumber": 193, "col_offset": 91, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 197, "col_offset": 38, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 197, "col_offset": 64, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 199, "col_offset": 28, "nodeName": "_span_start_predictor", "type": "Any"}, {"lineNumber": 199, "col_offset": 55, "nodeName": "span_start_input", "type": "Any"}, {"lineNumber": 202, "col_offset": 36, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 202, "col_offset": 62, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 203, "col_offset": 26, "nodeName": "_span_end_predictor", "type": "Any"}, {"lineNumber": 203, "col_offset": 51, "nodeName": "span_end_input", "type": "Any"}, {"lineNumber": 208, "col_offset": 27, "nodeName": "nn", "type": "Any"}, {"lineNumber": 209, "col_offset": 25, "nodeName": "nn", "type": "Any"}, {"lineNumber": 224, "col_offset": 28, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 224, "col_offset": 52, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 224, "col_offset": 71, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 224, "col_offset": 86, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 225, "col_offset": 57, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 226, "col_offset": 29, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 226, "col_offset": 53, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 226, "col_offset": 70, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 226, "col_offset": 85, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 227, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 227, "col_offset": 53, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 228, "col_offset": 43, "nodeName": "stack", "type": "Any"}, {"lineNumber": 237, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 238, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 241, "col_offset": 33, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 244, "col_offset": 35, "nodeName": "passage_str", "type": "Any"}, {"lineNumber": 245, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 245, "col_offset": 52, "nodeName": "best_span_string", "type": "Any"}, {"lineNumber": 246, "col_offset": 31, "nodeName": "get", "type": "Callable"}, {"lineNumber": 97, "col_offset": 68, "nodeName": "torch", "type": "Any"}, {"lineNumber": 254, "col_offset": 32, "nodeName": "self", "type": "Any"}, {"lineNumber": 256, "col_offset": 29, "nodeName": "_span_start_accuracy", "type": "Any"}, {"lineNumber": 257, "col_offset": 27, "nodeName": "_span_end_accuracy", "type": "Any"}, {"lineNumber": 258, "col_offset": 28, "nodeName": "_span_accuracy", "type": "Any"}, {"lineNumber": 88, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 97, "col_offset": 31, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 146, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 147, "col_offset": 23, "nodeName": "util", "type": "module"}, {"lineNumber": 185, "col_offset": 27, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 185, "col_offset": 45, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 186, "col_offset": 27, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 186, "col_offset": 45, "nodeName": "passage_passage_vectors", "type": "Any"}, {"lineNumber": 193, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 65, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 199, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 203, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 208, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 209, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 224, "col_offset": 28, "nodeName": "util", "type": "module"}, {"lineNumber": 224, "col_offset": 86, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 225, "col_offset": 57, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 226, "col_offset": 29, "nodeName": "util", "type": "module"}, {"lineNumber": 226, "col_offset": 85, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 227, "col_offset": 53, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 228, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 228, "col_offset": 56, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 228, "col_offset": 68, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 237, "col_offset": 16, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 238, "col_offset": 16, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 239, "col_offset": 30, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 240, "col_offset": 26, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 241, "col_offset": 39, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 242, "col_offset": 31, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 243, "col_offset": 29, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 244, "col_offset": 47, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 244, "col_offset": 60, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 248, "col_offset": 20, "nodeName": "_metrics", "type": "Any"}, {"lineNumber": 248, "col_offset": 34, "nodeName": "best_span_string", "type": "Any"}, {"lineNumber": 248, "col_offset": 52, "nodeName": "answer_texts", "type": "Any"}, {"lineNumber": 256, "col_offset": 29, "nodeName": "self", "type": "Any"}, {"lineNumber": 257, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 258, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 237, "col_offset": 39, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 238, "col_offset": 38, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 239, "col_offset": 39, "nodeName": "i", "type": "int"}, {"lineNumber": 240, "col_offset": 35, "nodeName": "i", "type": "int"}, {"lineNumber": 245, "col_offset": 16, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 246, "col_offset": 31, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 248, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 97, "col_offset": 36, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 97, "col_offset": 41, "nodeName": "Any", "type": "Any"}, {"lineNumber": 237, "col_offset": 48, "nodeName": "i", "type": "int"}, {"lineNumber": 238, "col_offset": 47, "nodeName": "i", "type": "int"}, {"lineNumber": 241, "col_offset": 39, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 242, "col_offset": 39, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 243, "col_offset": 37, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 246, "col_offset": 40, "nodeName": "i", "type": "int"}, {"lineNumber": 241, "col_offset": 39, "nodeName": "detach", "type": "Any"}, {"lineNumber": 241, "col_offset": 39, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 241, "col_offset": 49, "nodeName": "i", "type": "int"}]