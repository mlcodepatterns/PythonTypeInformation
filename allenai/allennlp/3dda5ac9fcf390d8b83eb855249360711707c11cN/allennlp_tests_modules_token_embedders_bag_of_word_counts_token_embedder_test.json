[{"lineNumber": 11, "col_offset": 39, "nodeName": "AllenNlpTestCase", "type": "Type[allennlp.common.testing.test_case.AllenNlpTestCase]"}, {"lineNumber": 12, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "test_forward_calculates_bow_properly", "type": "Callable[[Any], Any]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "test_zeros_out_unknown_tokens", "type": "Callable[[Any], Any]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "test_ignore_oov_should_fail_on_non_padded_vocab", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "test_projects_properly", "type": "Callable[[Any], Any]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "non_padded_vocab", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "params", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "embedder", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "embedder_output", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "params", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "embedder", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "embedder_output", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "params", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "params", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "embedder", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "embedder_output", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "setUp", "type": "Any"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 14, "col_offset": 21, "nodeName": "Vocabulary", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "add_token_to_namespace", "type": "Any"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "add_token_to_namespace", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "add_token_to_namespace", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "add_token_to_namespace", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 19, "col_offset": 32, "nodeName": "Vocabulary", "type": "Any"}, {"lineNumber": 22, "col_offset": 17, "nodeName": "Params", "type": "Any"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 23, "col_offset": 60, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 24, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 25, "col_offset": 17, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 25, "col_offset": 34, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "embedder", "type": "Any"}, {"lineNumber": 26, "col_offset": 35, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 27, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "float", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 32, "col_offset": 17, "nodeName": "Params", "type": "Any"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 33, "col_offset": 60, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 34, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 35, "col_offset": 17, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 35, "col_offset": 34, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 36, "col_offset": 26, "nodeName": "embedder", "type": "Any"}, {"lineNumber": 36, "col_offset": 35, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 37, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 38, "col_offset": 24, "nodeName": "float", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 42, "col_offset": 17, "nodeName": "Params", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "ConfigurationError", "type": "Any"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "non_padded_vocab", "type": "Any"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "params", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "Params", "type": "Any"}, {"lineNumber": 52, "col_offset": 19, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 52, "col_offset": 60, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 53, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 54, "col_offset": 17, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 54, "col_offset": 34, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 55, "col_offset": 26, "nodeName": "embedder", "type": "Any"}, {"lineNumber": 55, "col_offset": 35, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "BagOfWordCountsTokenEmbedder", "type": "Any"}, {"lineNumber": 23, "col_offset": 60, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 23, "col_offset": 79, "nodeName": "params", "type": "Any"}, {"lineNumber": 24, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 25, "col_offset": 17, "nodeName": "torch", "type": "Any"}, {"lineNumber": 27, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 29, "col_offset": 58, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "BagOfWordCountsTokenEmbedder", "type": "Any"}, {"lineNumber": 33, "col_offset": 60, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 33, "col_offset": 79, "nodeName": "params", "type": "Any"}, {"lineNumber": 34, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 35, "col_offset": 17, "nodeName": "torch", "type": "Any"}, {"lineNumber": 37, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 39, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 39, "col_offset": 58, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "BagOfWordCountsTokenEmbedder", "type": "Any"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 52, "col_offset": 19, "nodeName": "BagOfWordCountsTokenEmbedder", "type": "Any"}, {"lineNumber": 52, "col_offset": 60, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 52, "col_offset": 79, "nodeName": "params", "type": "Any"}, {"lineNumber": 53, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 54, "col_offset": 17, "nodeName": "torch", "type": "Any"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "self", "type": "TestBagOfWordCountsTokenEmbedder"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 28, "col_offset": 41, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 29, "col_offset": 58, "nodeName": "data", "type": "Any"}, {"lineNumber": 38, "col_offset": 24, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 38, "col_offset": 41, "nodeName": "numpy_tensor", "type": "numpy.ndarray"}, {"lineNumber": 39, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 39, "col_offset": 58, "nodeName": "data", "type": "Any"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "embedder_output", "type": "Any"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "embedder_output", "type": "Any"}, {"lineNumber": 29, "col_offset": 58, "nodeName": "manual_output", "type": "Any"}, {"lineNumber": 38, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 39, "col_offset": 28, "nodeName": "embedder_output", "type": "Any"}, {"lineNumber": 39, "col_offset": 58, "nodeName": "manual_output", "type": "Any"}]