[{"lineNumber": 12, "col_offset": 0, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 42, "col_offset": 28, "nodeName": "AllenNlpTestCase", "type": "Type[allennlp.common.testing.test_case.AllenNlpTestCase]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "has_decreasing_segment", "type": "bool"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "k", "type": "int"}, {"lineNumber": 23, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "delta", "type": "float"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 39, "col_offset": 38, "nodeName": "has_decreasing_segment", "type": "bool"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "optimizer_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "scheduler", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "batch_num_total", "type": "int"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "epoch", "type": "int"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 190, "col_offset": 33, "nodeName": "slanted_triangular_cases", "type": "List[Tuple[Dict[str, Any], List[Tuple[int, int, float]]]]"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "gradual_unfreezing", "type": "bool"}, {"lineNumber": 12, "col_offset": 34, "nodeName": "List", "type": "Any"}, {"lineNumber": 23, "col_offset": 22, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "learning_rates", "type": "List[float]"}, {"lineNumber": 25, "col_offset": 11, "nodeName": "delta", "type": "float"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 27, "col_offset": 15, "nodeName": "has_decreasing_segment", "type": "bool"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "Sequential", "type": "Any"}, {"lineNumber": 49, "col_offset": 33, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "optimizer_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "from_params", "type": "Callable[[Any, List[Any], allennlp.common.params.Params], Any]"}, {"lineNumber": 52, "col_offset": 68, "nodeName": "optimizer_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 55, "col_offset": 20, "nodeName": "_get_optimizer", "type": "Callable[..., Any]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "params", "type": "Any"}, {"lineNumber": 57, "col_offset": 20, "nodeName": "from_params", "type": "Callable[[Any, Any, allennlp.common.params.Params], allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 57, "col_offset": 54, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 61, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "_", "type": "int"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 92, "col_offset": 16, "nodeName": "_get_optimizer", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 16, "nodeName": "from_params", "type": "Callable[[Any, Any, allennlp.common.params.Params], allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "optim", "type": "Any"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "num_epochs", "type": "Any"}, {"lineNumber": 108, "col_offset": 15, "nodeName": "num_steps_per_epoch", "type": "Any"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "gradual_unfreezing", "type": "Any"}, {"lineNumber": 110, "col_offset": 15, "nodeName": "freezing_current", "type": "Any"}, {"lineNumber": 190, "col_offset": 12, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 190, "col_offset": 20, "nodeName": "lr_checks", "type": "List[Tuple[int, int, float]]"}, {"lineNumber": 191, "col_offset": 12, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 193, "col_offset": 33, "nodeName": "lr_checks", "type": "List[Tuple[int, int, float]]"}, {"lineNumber": 205, "col_offset": 16, "nodeName": "discriminative_fine_tuning", "type": "bool"}, {"lineNumber": 12, "col_offset": 39, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "learning_rates", "type": "List[float]"}, {"lineNumber": 24, "col_offset": 36, "nodeName": "learning_rates", "type": "List[float]"}, {"lineNumber": 30, "col_offset": 13, "nodeName": "delta", "type": "float"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "nn", "type": "Any"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 50, "col_offset": 56, "nodeName": "lr", "type": "float"}, {"lineNumber": 51, "col_offset": 68, "nodeName": "m", "type": "Any"}, {"lineNumber": 51, "col_offset": 73, "nodeName": "_modules", "type": "Any"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "Optimizer", "type": "Type[allennlp.training.optimizers.Optimizer]"}, {"lineNumber": 52, "col_offset": 37, "nodeName": "named_parameters", "type": "Any"}, {"lineNumber": 55, "col_offset": 20, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 57, "col_offset": 20, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 57, "col_offset": 65, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 57, "col_offset": 72, "nodeName": "params", "type": "Any"}, {"lineNumber": 61, "col_offset": 27, "nodeName": "params", "type": "Any"}, {"lineNumber": 62, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 62, "col_offset": 27, "nodeName": "num_steps_per_epoch", "type": "Any"}, {"lineNumber": 63, "col_offset": 16, "nodeName": "batch_num_total", "type": "int"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "step", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 33, "nodeName": "epoch", "type": "int"}, {"lineNumber": 81, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 82, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 85, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 92, "col_offset": 16, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 93, "col_offset": 16, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "sched", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 108, "col_offset": 15, "nodeName": "sched", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "sched", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 110, "col_offset": 15, "nodeName": "sched", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 112, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 115, "col_offset": 53, "nodeName": "ratio", "type": "Any"}, {"lineNumber": 116, "col_offset": 53, "nodeName": "ratio", "type": "Any"}, {"lineNumber": 118, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 118, "col_offset": 31, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "from_params", "type": "Callable[[Any, Any, allennlp.common.params.Params], allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 121, "col_offset": 16, "nodeName": "optim", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "from_params", "type": "Callable[[Any, Any, allennlp.common.params.Params], allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 124, "col_offset": 16, "nodeName": "optim", "type": "Any"}, {"lineNumber": 191, "col_offset": 18, "nodeName": "_run_scheduler_get_lrs", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 191, "col_offset": 46, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 193, "col_offset": 16, "nodeName": "it", "type": "int"}, {"lineNumber": 193, "col_offset": 20, "nodeName": "layer", "type": "int"}, {"lineNumber": 193, "col_offset": 27, "nodeName": "lr", "type": "float"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "lr_check", "type": "float"}, {"lineNumber": 195, "col_offset": 16, "nodeName": "lr", "type": "float"}, {"lineNumber": 206, "col_offset": 20, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 24, "col_offset": 31, "nodeName": "k", "type": "int"}, {"lineNumber": 31, "col_offset": 19, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 51, "col_offset": 73, "nodeName": "model", "type": "Any"}, {"lineNumber": 52, "col_offset": 37, "nodeName": "model", "type": "Any"}, {"lineNumber": 66, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "step_batch", "type": "Callable[..., None]"}, {"lineNumber": 72, "col_offset": 37, "nodeName": "batch_num_total", "type": "int"}, {"lineNumber": 74, "col_offset": 27, "nodeName": "freezing_current", "type": "Any"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "scheduler", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "optim", "type": "Any"}, {"lineNumber": 114, "col_offset": 19, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 115, "col_offset": 15, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 115, "col_offset": 53, "nodeName": "sched", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 116, "col_offset": 15, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 116, "col_offset": 53, "nodeName": "sched", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 118, "col_offset": 13, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 121, "col_offset": 23, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 124, "col_offset": 23, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 191, "col_offset": 18, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 191, "col_offset": 54, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 194, "col_offset": 27, "nodeName": "round", "type": "Callable"}, {"lineNumber": 194, "col_offset": 33, "nodeName": "lr", "type": "float"}, {"lineNumber": 195, "col_offset": 21, "nodeName": "round", "type": "Callable"}, {"lineNumber": 197, "col_offset": 20, "nodeName": "lr", "type": "float"}, {"lineNumber": 197, "col_offset": 26, "nodeName": "lr_check", "type": "float"}, {"lineNumber": 213, "col_offset": 20, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 214, "col_offset": 20, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 215, "col_offset": 20, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 217, "col_offset": 23, "nodeName": "gradual_unfreezing", "type": "bool"}, {"lineNumber": 24, "col_offset": 51, "nodeName": "k", "type": "int"}, {"lineNumber": 51, "col_offset": 73, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 52, "col_offset": 37, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 66, "col_offset": 16, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "scheduler", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "get", "type": "Any"}, {"lineNumber": 73, "col_offset": 56, "nodeName": "epoch", "type": "int"}, {"lineNumber": 74, "col_offset": 27, "nodeName": "scheduler", "type": "allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler"}, {"lineNumber": 82, "col_offset": 34, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 82, "col_offset": 40, "nodeName": "k", "type": "int"}, {"lineNumber": 82, "col_offset": 47, "nodeName": "k", "type": "int"}, {"lineNumber": 83, "col_offset": 34, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 83, "col_offset": 52, "nodeName": "k", "type": "int"}, {"lineNumber": 84, "col_offset": 30, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "k", "type": "int"}, {"lineNumber": 84, "col_offset": 43, "nodeName": "k", "type": "int"}, {"lineNumber": 84, "col_offset": 62, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 84, "col_offset": 80, "nodeName": "k", "type": "int"}, {"lineNumber": 114, "col_offset": 19, "nodeName": "optim", "type": "Any"}, {"lineNumber": 115, "col_offset": 15, "nodeName": "optim", "type": "Any"}, {"lineNumber": 116, "col_offset": 15, "nodeName": "optim", "type": "Any"}, {"lineNumber": 198, "col_offset": 36, "nodeName": "lr", "type": "float"}, {"lineNumber": 198, "col_offset": 54, "nodeName": "it", "type": "int"}, {"lineNumber": 198, "col_offset": 68, "nodeName": "layer", "type": "int"}, {"lineNumber": 198, "col_offset": 79, "nodeName": "lr_check", "type": "float"}, {"lineNumber": 210, "col_offset": 46, "nodeName": "gradual_unfreezing", "type": "bool"}, {"lineNumber": 211, "col_offset": 54, "nodeName": "discriminative_fine_tuning", "type": "bool"}, {"lineNumber": 213, "col_offset": 26, "nodeName": "_run_scheduler_get_lrs", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 213, "col_offset": 54, "nodeName": "params", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 213, "col_offset": 62, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 46, "col_offset": 34, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 46, "col_offset": 69, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 51, "col_offset": 54, "nodeName": "m", "type": "Any"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "param_group", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "params", "type": "Any"}, {"lineNumber": 82, "col_offset": 52, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 83, "col_offset": 45, "nodeName": "k", "type": "int"}, {"lineNumber": 83, "col_offset": 57, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 84, "col_offset": 48, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 84, "col_offset": 73, "nodeName": "k", "type": "int"}, {"lineNumber": 84, "col_offset": 85, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 88, "col_offset": 21, "nodeName": "k", "type": "int"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "k", "type": "int"}, {"lineNumber": 195, "col_offset": 27, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 195, "col_offset": 35, "nodeName": "layer", "type": "int"}, {"lineNumber": 213, "col_offset": 26, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 214, "col_offset": 39, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 214, "col_offset": 52, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 214, "col_offset": 61, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 215, "col_offset": 40, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 215, "col_offset": 53, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 215, "col_offset": 62, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 220, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 221, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 222, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 224, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 224, "col_offset": 45, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 225, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 225, "col_offset": 45, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 46, "col_offset": 34, "nodeName": "nn", "type": "Any"}, {"lineNumber": 46, "col_offset": 69, "nodeName": "nn", "type": "Any"}, {"lineNumber": 69, "col_offset": 43, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 86, "col_offset": 19, "nodeName": "k", "type": "int"}, {"lineNumber": 86, "col_offset": 26, "nodeName": "k", "type": "int"}, {"lineNumber": 87, "col_offset": 15, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 87, "col_offset": 33, "nodeName": "k", "type": "int"}, {"lineNumber": 88, "col_offset": 33, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 195, "col_offset": 31, "nodeName": "it", "type": "int"}, {"lineNumber": 218, "col_offset": 31, "nodeName": "max", "type": "Callable"}, {"lineNumber": 219, "col_offset": 31, "nodeName": "min", "type": "Callable"}, {"lineNumber": 220, "col_offset": 45, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 221, "col_offset": 45, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 222, "col_offset": 45, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 46, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 46, "col_offset": 69, "nodeName": "torch", "type": "Any"}, {"lineNumber": 69, "col_offset": 43, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 87, "col_offset": 26, "nodeName": "k", "type": "int"}, {"lineNumber": 218, "col_offset": 35, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 219, "col_offset": 35, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 220, "col_offset": 61, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 221, "col_offset": 63, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 222, "col_offset": 62, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 218, "col_offset": 52, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 219, "col_offset": 52, "nodeName": "num_actual_steps_per_epoch", "type": "int"}]