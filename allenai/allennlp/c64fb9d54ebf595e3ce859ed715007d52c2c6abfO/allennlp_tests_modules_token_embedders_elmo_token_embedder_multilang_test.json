[{"lineNumber": 16, "col_offset": 37, "nodeName": "ModelTestCase", "type": "Type[allennlp.common.testing.model_test_case.ModelTestCase]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "embedded_en", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "embedded_fr", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "embedded_en", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "embedded_fr", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "set_up_model", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 25, "col_offset": 50, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 57, "col_offset": 26, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 61, "col_offset": 23, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 97, "col_offset": 26, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 102, "col_offset": 22, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 103, "col_offset": 22, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 25, "col_offset": 50, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 57, "col_offset": 26, "nodeName": "ElmoTokenEmbedderMultiLang", "type": "Any"}, {"lineNumber": 61, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "data", "type": "Any"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "data", "type": "Any"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "count_nonzero", "type": "Any"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "embedded_en", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "count_nonzero", "type": "Any"}, {"lineNumber": 65, "col_offset": 32, "nodeName": "embedded_fr", "type": "Any"}, {"lineNumber": 97, "col_offset": 26, "nodeName": "ElmoTokenEmbedderMultiLang", "type": "Any"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 102, "col_offset": 22, "nodeName": "data", "type": "Any"}, {"lineNumber": 103, "col_offset": 22, "nodeName": "data", "type": "Any"}, {"lineNumber": 104, "col_offset": 15, "nodeName": "count_nonzero", "type": "Any"}, {"lineNumber": 104, "col_offset": 32, "nodeName": "embedded_en", "type": "Any"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "count_nonzero", "type": "Any"}, {"lineNumber": 105, "col_offset": 32, "nodeName": "embedded_fr", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 21, "col_offset": 12, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 58, "col_offset": 31, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 58, "col_offset": 38, "nodeName": "params_dict", "type": "Dict[str, Union[List[Union[float, int]], Dict[str, pathlib.Path]]]"}, {"lineNumber": 61, "col_offset": 42, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 98, "col_offset": 31, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 98, "col_offset": 38, "nodeName": "params_dict", "type": "Dict[str, Union[List[Union[float, int]], Dict[str, pathlib.Path]]]"}, {"lineNumber": 101, "col_offset": 42, "nodeName": "word1", "type": "List[int]"}, {"lineNumber": 101, "col_offset": 49, "nodeName": "word2", "type": "List[int]"}, {"lineNumber": 104, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 20, "col_offset": 12, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 21, "col_offset": 12, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "embedding_layer", "type": "Any"}, {"lineNumber": 62, "col_offset": 38, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "embedding_layer", "type": "Any"}, {"lineNumber": 63, "col_offset": 38, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 102, "col_offset": 22, "nodeName": "embedding_layer", "type": "Any"}, {"lineNumber": 102, "col_offset": 38, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 103, "col_offset": 22, "nodeName": "embedding_layer", "type": "Any"}, {"lineNumber": 103, "col_offset": 38, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 20, "col_offset": 12, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 34, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 35, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 38, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 39, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 42, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 43, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 74, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 78, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 82, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 83, "col_offset": 22, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 34, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 35, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 38, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 39, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 42, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 43, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 74, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 78, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 82, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}, {"lineNumber": 83, "col_offset": 22, "nodeName": "self", "type": "TestElmoTokenEmbedderMultilang"}]