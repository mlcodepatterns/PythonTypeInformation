[{"lineNumber": 10, "col_offset": 38, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "archive", "type": "allennlp.models.archival.Archive"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "predictor", "type": "allennlp.service.predictors.predictor.Predictor"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "class_distribution", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "archive", "type": "allennlp.models.archival.Archive"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "predictor", "type": "allennlp.service.predictors.predictor.Predictor"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "results", "type": "List[Dict[str, Any]]"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "class_distribution", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "class_distribution", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "tree", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "archive", "type": "allennlp.models.archival.Archive"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "predictor", "type": "allennlp.service.predictors.predictor.Predictor"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "hierplane_tree", "type": "Any"}, {"lineNumber": 16, "col_offset": 18, "nodeName": "load_archive", "type": "Callable[..., allennlp.models.archival.Archive]"}, {"lineNumber": 17, "col_offset": 20, "nodeName": "from_archive", "type": "Callable[[Any, allennlp.models.archival.Archive, str], allennlp.service.predictors.predictor.Predictor]"}, {"lineNumber": 17, "col_offset": 43, "nodeName": "archive", "type": "allennlp.models.archival.Archive"}, {"lineNumber": 18, "col_offset": 17, "nodeName": "predict_json", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 18, "col_offset": 40, "nodeName": "inputs", "type": "Dict[str, str]"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 23, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 25, "col_offset": 34, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "load_archive", "type": "Callable[..., allennlp.models.archival.Archive]"}, {"lineNumber": 35, "col_offset": 20, "nodeName": "from_archive", "type": "Callable[[Any, allennlp.models.archival.Archive, str], allennlp.service.predictors.predictor.Predictor]"}, {"lineNumber": 35, "col_offset": 43, "nodeName": "archive", "type": "allennlp.models.archival.Archive"}, {"lineNumber": 36, "col_offset": 18, "nodeName": "predict_batch_json", "type": "Callable[..., List[Dict[str, Any]]]"}, {"lineNumber": 36, "col_offset": 47, "nodeName": "inputs", "type": "List[Dict[str, str]]"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "results", "type": "List[Dict[str, Any]]"}, {"lineNumber": 42, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 42, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 44, "col_offset": 34, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "results", "type": "List[Dict[str, Any]]"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 52, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 54, "col_offset": 34, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "fromstring", "type": "Any"}, {"lineNumber": 59, "col_offset": 18, "nodeName": "load_archive", "type": "Callable[..., allennlp.models.archival.Archive]"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "from_archive", "type": "Callable[[Any, allennlp.models.archival.Archive, str], allennlp.service.predictors.predictor.Predictor]"}, {"lineNumber": 60, "col_offset": 43, "nodeName": "archive", "type": "allennlp.models.archival.Archive"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "_build_hierplane_tree", "type": "Any"}, {"lineNumber": 62, "col_offset": 57, "nodeName": "tree", "type": "Any"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "correct_tree", "type": "Dict[str, Union[Dict[str, Union[List[Union[Dict[str, Union[List[Dict[str, Union[str, List[str]]]], str, List[str]]], Dict[str, Union[List[Union[Dict[str, Union[str, List[str]]], Dict[str, Union[List[Dict[str, Union[str, List[str]]]], str, List[str]]]]], str, List[str]]]]], str, List[str]]], str]]"}, {"lineNumber": 126, "col_offset": 31, "nodeName": "hierplane_tree", "type": "Any"}, {"lineNumber": 17, "col_offset": 20, "nodeName": "Predictor", "type": "Type[allennlp.service.predictors.predictor.Predictor]"}, {"lineNumber": 18, "col_offset": 17, "nodeName": "predictor", "type": "allennlp.service.predictors.predictor.Predictor"}, {"lineNumber": 20, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 21, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 35, "col_offset": 20, "nodeName": "Predictor", "type": "Type[allennlp.service.predictors.predictor.Predictor]"}, {"lineNumber": 36, "col_offset": 18, "nodeName": "predictor", "type": "allennlp.service.predictors.predictor.Predictor"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 40, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 41, "col_offset": 15, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 52, "col_offset": 26, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "Predictor", "type": "Type[allennlp.service.predictors.predictor.Predictor]"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "predictor", "type": "allennlp.service.predictors.predictor.Predictor"}, {"lineNumber": 20, "col_offset": 19, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 21, "col_offset": 19, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "self", "type": "TestConstituencyParserPredictor"}, {"lineNumber": 26, "col_offset": 35, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 26, "col_offset": 39, "nodeName": "class_distribution", "type": "Any"}, {"lineNumber": 39, "col_offset": 19, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 40, "col_offset": 19, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "self", "type": "TestConstituencyParserPredictor"}, {"lineNumber": 45, "col_offset": 35, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 45, "col_offset": 39, "nodeName": "class_distribution", "type": "Any"}, {"lineNumber": 49, "col_offset": 19, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 50, "col_offset": 19, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "self", "type": "TestConstituencyParserPredictor"}, {"lineNumber": 55, "col_offset": 35, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 55, "col_offset": 39, "nodeName": "class_distribution", "type": "Any"}]