[{"lineNumber": 11, "col_offset": 24, "nodeName": "ModelTestCase", "type": "Type[allennlp.common.testing.model_test_case.ModelTestCase]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "num_decoding_steps", "type": "int"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "num_classes", "type": "int"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "sample_logits", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "sample_mask", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "actual_loss", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "decode_output_dict", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "decode_output_dict", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "output_dict_greedy", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "output_dict_greedy", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "output_dict_beam_search", "type": "Dict[str, Any]"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "output_dict_beam_search", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "set_up_model", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 20, "col_offset": 50, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "dumps", "type": "Callable[..., str]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 29, "col_offset": 26, "nodeName": "dumps", "type": "Callable[..., str]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 35, "col_offset": 26, "nodeName": "dumps", "type": "Callable[..., str]"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "dumps", "type": "Callable[..., str]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 53, "col_offset": 24, "nodeName": "randn", "type": "Any"}, {"lineNumber": 53, "col_offset": 36, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 53, "col_offset": 72, "nodeName": "num_classes", "type": "int"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "from_numpy", "type": "Any"}, {"lineNumber": 59, "col_offset": 24, "nodeName": "sequence_cross_entropy_with_logits", "type": "Callable[..., Any]"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "sample_logits", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "_get_loss", "type": "Any"}, {"lineNumber": 62, "col_offset": 43, "nodeName": "sample_logits", "type": "Any"}, {"lineNumber": 62, "col_offset": 58, "nodeName": "sample_targets", "type": "Any"}, {"lineNumber": 62, "col_offset": 74, "nodeName": "sample_mask", "type": "Any"}, {"lineNumber": 63, "col_offset": 15, "nodeName": "equal", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "eval", "type": "Any"}, {"lineNumber": 67, "col_offset": 27, "nodeName": "as_tensor_dict", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 68, "col_offset": 22, "nodeName": "model", "type": "Any"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "decode", "type": "Any"}, {"lineNumber": 69, "col_offset": 47, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "decode_output_dict", "type": "Any"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 77, "col_offset": 22, "nodeName": "model", "type": "Any"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "decode", "type": "Any"}, {"lineNumber": 78, "col_offset": 47, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 79, "col_offset": 37, "nodeName": "decode_output_dict", "type": "Any"}, {"lineNumber": 83, "col_offset": 22, "nodeName": "BeamSearch", "type": "Type[allennlp.nn.beam_search.BeamSearch]"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "_end_index", "type": "Any"}, {"lineNumber": 86, "col_offset": 27, "nodeName": "as_tensor_dict", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 89, "col_offset": 16, "nodeName": "_encode", "type": "Any"}, {"lineNumber": 90, "col_offset": 16, "nodeName": "_init_decoder_state", "type": "Any"}, {"lineNumber": 90, "col_offset": 47, "nodeName": "state", "type": "Any"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "_forward_loop", "type": "Any"}, {"lineNumber": 91, "col_offset": 54, "nodeName": "state", "type": "Any"}, {"lineNumber": 92, "col_offset": 29, "nodeName": "decode", "type": "Any"}, {"lineNumber": 92, "col_offset": 47, "nodeName": "output_dict_greedy", "type": "Any"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "_encode", "type": "Any"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "_init_decoder_state", "type": "Any"}, {"lineNumber": 96, "col_offset": 47, "nodeName": "state", "type": "Any"}, {"lineNumber": 98, "col_offset": 28, "nodeName": "new_full", "type": "Any"}, {"lineNumber": 101, "col_offset": 35, "nodeName": "search", "type": "Callable[[Any, Dict[str, Any], Callable[[Any, Dict[str, Any]], Tuple[Any, Dict[str, Any]]]], Tuple[Any, Any]]"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "start_predictions", "type": "Any"}, {"lineNumber": 102, "col_offset": 31, "nodeName": "state", "type": "Any"}, {"lineNumber": 102, "col_offset": 38, "nodeName": "take_step", "type": "Any"}, {"lineNumber": 104, "col_offset": 50, "nodeName": "all_top_k_predictions", "type": "Any"}, {"lineNumber": 105, "col_offset": 34, "nodeName": "decode", "type": "Any"}, {"lineNumber": 105, "col_offset": 52, "nodeName": "output_dict_beam_search", "type": "Dict[str, Any]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 20, "col_offset": 50, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "json", "type": "module"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 25, "col_offset": 55, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 29, "col_offset": 26, "nodeName": "json", "type": "module"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 31, "col_offset": 55, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 35, "col_offset": 26, "nodeName": "json", "type": "module"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 39, "col_offset": 55, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "json", "type": "module"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 45, "col_offset": 55, "nodeName": "param_overrides", "type": "str"}, {"lineNumber": 53, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 53, "col_offset": 48, "nodeName": "num_decoding_steps", "type": "int"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "randint", "type": "Any"}, {"lineNumber": 55, "col_offset": 36, "nodeName": "num_classes", "type": "int"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "torch", "type": "Any"}, {"lineNumber": 58, "col_offset": 39, "nodeName": "randint", "type": "Any"}, {"lineNumber": 60, "col_offset": 27, "nodeName": "contiguous", "type": "Any"}, {"lineNumber": 60, "col_offset": 63, "nodeName": "contiguous", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "model", "type": "Any"}, {"lineNumber": 63, "col_offset": 15, "nodeName": "numpy", "type": "module"}, {"lineNumber": 63, "col_offset": 27, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 63, "col_offset": 55, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 67, "col_offset": 27, "nodeName": "dataset", "type": "allennlp.data.batch.Batch"}, {"lineNumber": 68, "col_offset": 22, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 68, "col_offset": 35, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 77, "col_offset": 22, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 77, "col_offset": 35, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "model", "type": "Any"}, {"lineNumber": 84, "col_offset": 45, "nodeName": "_max_decoding_steps", "type": "Any"}, {"lineNumber": 86, "col_offset": 27, "nodeName": "dataset", "type": "allennlp.data.batch.Batch"}, {"lineNumber": 89, "col_offset": 16, "nodeName": "model", "type": "Any"}, {"lineNumber": 89, "col_offset": 35, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 90, "col_offset": 16, "nodeName": "model", "type": "Any"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 92, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "model", "type": "Any"}, {"lineNumber": 95, "col_offset": 35, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "model", "type": "Any"}, {"lineNumber": 97, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 99, "col_offset": 13, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 99, "col_offset": 38, "nodeName": "_start_index", "type": "Any"}, {"lineNumber": 101, "col_offset": 35, "nodeName": "beam_search", "type": "allennlp.nn.beam_search.BeamSearch"}, {"lineNumber": 102, "col_offset": 38, "nodeName": "model", "type": "Any"}, {"lineNumber": 105, "col_offset": 34, "nodeName": "model", "type": "Any"}, {"lineNumber": 108, "col_offset": 15, "nodeName": "output_dict_greedy", "type": "Any"}, {"lineNumber": 108, "col_offset": 57, "nodeName": "output_dict_beam_search", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 16, "col_offset": 12, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 55, "col_offset": 50, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 55, "col_offset": 62, "nodeName": "num_decoding_steps", "type": "int"}, {"lineNumber": 58, "col_offset": 39, "nodeName": "random", "type": "Any"}, {"lineNumber": 58, "col_offset": 67, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 58, "col_offset": 79, "nodeName": "num_decoding_steps", "type": "int"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 63, "col_offset": 27, "nodeName": "data", "type": "Any"}, {"lineNumber": 63, "col_offset": 55, "nodeName": "data", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 67, "col_offset": 27, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 84, "col_offset": 45, "nodeName": "model", "type": "Any"}, {"lineNumber": 86, "col_offset": 27, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 89, "col_offset": 16, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 90, "col_offset": 16, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 92, "col_offset": 29, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 98, "col_offset": 28, "nodeName": "state", "type": "Any"}, {"lineNumber": 99, "col_offset": 38, "nodeName": "model", "type": "Any"}, {"lineNumber": 102, "col_offset": 38, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 105, "col_offset": 34, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 15, "col_offset": 12, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 16, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 58, "col_offset": 39, "nodeName": "numpy", "type": "module"}, {"lineNumber": 60, "col_offset": 27, "nodeName": "sample_targets", "type": "Any"}, {"lineNumber": 60, "col_offset": 63, "nodeName": "sample_mask", "type": "Any"}, {"lineNumber": 63, "col_offset": 27, "nodeName": "expected_loss", "type": "Any"}, {"lineNumber": 63, "col_offset": 55, "nodeName": "actual_loss", "type": "Any"}, {"lineNumber": 84, "col_offset": 45, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 97, "col_offset": 21, "nodeName": "state", "type": "Any"}, {"lineNumber": 99, "col_offset": 38, "nodeName": "self", "type": "SimpleSeq2SeqTest"}, {"lineNumber": 15, "col_offset": 12, "nodeName": "self", "type": "SimpleSeq2SeqTest"}]