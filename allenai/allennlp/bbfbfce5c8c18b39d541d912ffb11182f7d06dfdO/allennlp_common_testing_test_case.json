[{"lineNumber": 21, "col_offset": 23, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "TEST_DIR", "type": "str"}, {"lineNumber": 23, "col_offset": 4, "nodeName": "MODEL_FILE", "type": "str"}, {"lineNumber": 23, "col_offset": 17, "nodeName": "TEST_DIR", "type": "str"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 56, "col_offset": 41, "nodeName": "MODEL_FILE", "type": "str"}, {"lineNumber": 59, "col_offset": 11, "nodeName": "additional_arguments", "type": "Any"}, {"lineNumber": 62, "col_offset": 15, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "data_iterator", "type": "allennlp.data.iterators.data_iterator.DataIterator"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "single_batch", "type": "Dict[str, Union[numpy.ndarray, Dict[str, numpy.ndarray]]]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "single_batch", "type": "Dict[str, Any]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "model_loss", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "model_loss", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "loaded_model", "type": "allennlp.models.model.Model"}, {"lineNumber": 79, "col_offset": 23, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "loaded_model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "loaded_model_loss", "type": "Any"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "loaded_model_loss", "type": "Any"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "key", "type": "str"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "basicConfig", "type": "Callable[..., None]"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "log_pytorch_version_info", "type": "Callable[[], None]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "makedirs", "type": "Callable[..., None]"}, {"lineNumber": 29, "col_offset": 20, "nodeName": "TEST_DIR", "type": "str"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "rmtree", "type": "Callable[..., None]"}, {"lineNumber": 32, "col_offset": 22, "nodeName": "TEST_DIR", "type": "str"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "modules", "type": "Dict[str, module]"}, {"lineNumber": 54, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 56, "col_offset": 41, "nodeName": "self", "type": "AllenNlpTestCase"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 67, "col_offset": 55, "nodeName": "DataIterator", "type": "Type[allennlp.data.iterators.data_iterator.DataIterator]"}, {"lineNumber": 68, "col_offset": 24, "nodeName": "iterator", "type": "allennlp.data.iterators.data_iterator.DataIterator"}, {"lineNumber": 69, "col_offset": 23, "nodeName": "next", "type": "Callable"}, {"lineNumber": 70, "col_offset": 23, "nodeName": "arrays_to_variables", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 70, "col_offset": 43, "nodeName": "single_batch", "type": "Dict[str, Union[numpy.ndarray, Dict[str, numpy.ndarray]]]"}, {"lineNumber": 71, "col_offset": 28, "nodeName": "forward", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "save", "type": "Any"}, {"lineNumber": 78, "col_offset": 39, "nodeName": "MODEL_FILE", "type": "str"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "zero_grad", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "load_state_dict", "type": "Any"}, {"lineNumber": 82, "col_offset": 35, "nodeName": "forward", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 85, "col_offset": 28, "nodeName": "loaded_model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 94, "col_offset": 15, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 94, "col_offset": 22, "nodeName": "loaded_model", "type": "allennlp.models.model.Model"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "logging", "type": "module"}, {"lineNumber": 27, "col_offset": 34, "nodeName": "DEBUG", "type": "int"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "os", "type": "module"}, {"lineNumber": 29, "col_offset": 20, "nodeName": "self", "type": "AllenNlpTestCase"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "shutil", "type": "module"}, {"lineNumber": 32, "col_offset": 22, "nodeName": "self", "type": "AllenNlpTestCase"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "sys", "type": "module"}, {"lineNumber": 60, "col_offset": 16, "nodeName": "key", "type": "Any"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "value", "type": "Any"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "items", "type": "Any"}, {"lineNumber": 61, "col_offset": 30, "nodeName": "value", "type": "Any"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "data_iterator", "type": "allennlp.data.iterators.data_iterator.DataIterator"}, {"lineNumber": 69, "col_offset": 42, "nodeName": "dataset", "type": "allennlp.data.dataset.Dataset"}, {"lineNumber": 71, "col_offset": 28, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 71, "col_offset": 44, "nodeName": "single_batch", "type": "Dict[str, Any]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "model_loss", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "torch", "type": "Any"}, {"lineNumber": 78, "col_offset": 19, "nodeName": "state_dict", "type": "Any"}, {"lineNumber": 78, "col_offset": 39, "nodeName": "self", "type": "AllenNlpTestCase"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "loaded_model", "type": "allennlp.models.model.Model"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "loaded_model", "type": "allennlp.models.model.Model"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "load", "type": "Any"}, {"lineNumber": 81, "col_offset": 48, "nodeName": "MODEL_FILE", "type": "str"}, {"lineNumber": 82, "col_offset": 35, "nodeName": "loaded_model", "type": "allennlp.models.model.Model"}, {"lineNumber": 82, "col_offset": 58, "nodeName": "single_batch", "type": "Dict[str, Any]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "loaded_model_loss", "type": "Any"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 27, "col_offset": 34, "nodeName": "logging", "type": "module"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "additional_arguments", "type": "Any"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 78, "col_offset": 19, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 81, "col_offset": 48, "nodeName": "self", "type": "AllenNlpTestCase"}, {"lineNumber": 92, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 92, "col_offset": 65, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 61, "col_offset": 23, "nodeName": "key", "type": "Any"}, {"lineNumber": 92, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 92, "col_offset": 65, "nodeName": "data", "type": "Any"}, {"lineNumber": 92, "col_offset": 28, "nodeName": "model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 92, "col_offset": 65, "nodeName": "loaded_model_predictions", "type": "Dict[str, Any]"}, {"lineNumber": 92, "col_offset": 46, "nodeName": "key", "type": "str"}, {"lineNumber": 92, "col_offset": 90, "nodeName": "key", "type": "str"}]