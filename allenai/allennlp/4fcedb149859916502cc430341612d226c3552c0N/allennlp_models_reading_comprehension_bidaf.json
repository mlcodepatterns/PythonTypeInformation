[{"lineNumber": 17, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 21, "col_offset": 33, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 17, "col_offset": 9, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 17, "col_offset": 27, "nodeName": "__name__", "type": "str"}, {"lineNumber": 340, "col_offset": 9, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 17, "col_offset": 9, "nodeName": "logging", "type": "module"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "_text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "_phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 88, "col_offset": 29, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "_matrix_attention", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "_modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 90, "col_offset": 31, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "_span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 91, "col_offset": 33, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "modeling_dim", "type": "int"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "span_start_input_dim", "type": "int"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "_span_start_predictor", "type": "allennlp.modules.time_distributed.TimeDistributed"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "span_end_encoding_dim", "type": "int"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "span_end_input_dim", "type": "int"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "_span_end_predictor", "type": "allennlp.modules.time_distributed.TimeDistributed"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "_span_start_accuracy", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "_span_end_accuracy", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "_span_accuracy", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "_squad_metrics", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "_mask_lstms", "type": "bool"}, {"lineNumber": 131, "col_offset": 27, "nodeName": "mask_lstms", "type": "bool"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "question_lstm_mask", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "passage_lstm_mask", "type": "Any"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "encoding_dim", "type": "Any"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "question_passage_similarity", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "question_passage_attention", "type": "Any"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "question_passage_vector", "type": "Any"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "modeling_dim", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "span_start_input", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "span_start_representation", "type": "Any"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "span_end_input", "type": "Any"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 325, "col_offset": 15, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 142, "col_offset": 9, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 327, "col_offset": 50, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "device", "type": "Any"}, {"lineNumber": 347, "col_offset": 17, "nodeName": "device", "type": "Any"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "span_log_probs", "type": "Any"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "valid_span_log_probs", "type": "Any"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "best_spans", "type": "Any"}, {"lineNumber": 364, "col_offset": 8, "nodeName": "span_start_indices", "type": "Any"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "span_end_indices", "type": "Any"}, {"lineNumber": 340, "col_offset": 9, "nodeName": "torch", "type": "Any"}, {"lineNumber": 79, "col_offset": 21, "nodeName": "InitializerApplicator", "type": "Type[allennlp.nn.initializers.InitializerApplicator]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 82, "col_offset": 32, "nodeName": "regularizer", "type": "Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 30, "nodeName": "TimeDistributed", "type": "Type[allennlp.modules.time_distributed.TimeDistributed]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 33, "nodeName": "LegacyMatrixAttention", "type": "Any"}, {"lineNumber": 89, "col_offset": 55, "nodeName": "similarity_function", "type": "allennlp.modules.similarity_functions.similarity_function.SimilarityFunction"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 93, "col_offset": 23, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 94, "col_offset": 23, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 95, "col_offset": 50, "nodeName": "modeling_dim", "type": "int"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 37, "nodeName": "TimeDistributed", "type": "Type[allennlp.modules.time_distributed.TimeDistributed]"}, {"lineNumber": 98, "col_offset": 32, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 99, "col_offset": 48, "nodeName": "span_end_encoding_dim", "type": "int"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 100, "col_offset": 35, "nodeName": "TimeDistributed", "type": "Type[allennlp.modules.time_distributed.TimeDistributed]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "check_dimensions_match", "type": "Callable[[int, int, str, str], None]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "check_dimensions_match", "type": "Callable[[int, int, str, str], None]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "check_dimensions_match", "type": "Callable[[int, int, str, str], None]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 123, "col_offset": 36, "nodeName": "CategoricalAccuracy", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 124, "col_offset": 34, "nodeName": "CategoricalAccuracy", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 125, "col_offset": 30, "nodeName": "BooleanAccuracy", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 126, "col_offset": 30, "nodeName": "SquadEmAndF1", "type": "Any"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "dropout", "type": "float"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "_dropout", "type": "Callable[[Any], Any]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 133, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 192, "col_offset": 28, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 193, "col_offset": 27, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 194, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 195, "col_offset": 25, "nodeName": "size", "type": "Any"}, {"lineNumber": 196, "col_offset": 24, "nodeName": "float", "type": "Any"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "float", "type": "Any"}, {"lineNumber": 198, "col_offset": 46, "nodeName": "_mask_lstms", "type": "Any"}, {"lineNumber": 198, "col_offset": 29, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 199, "col_offset": 44, "nodeName": "_mask_lstms", "type": "Any"}, {"lineNumber": 199, "col_offset": 28, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 201, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 203, "col_offset": 23, "nodeName": "size", "type": "Any"}, {"lineNumber": 206, "col_offset": 38, "nodeName": "_matrix_attention", "type": "Any"}, {"lineNumber": 206, "col_offset": 61, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 206, "col_offset": 78, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 208, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 208, "col_offset": 57, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 208, "col_offset": 86, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 210, "col_offset": 35, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 210, "col_offset": 53, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 210, "col_offset": 71, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 214, "col_offset": 28, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 218, "col_offset": 38, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 220, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 220, "col_offset": 57, "nodeName": "question_passage_similarity", "type": "Any"}, {"lineNumber": 220, "col_offset": 86, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 222, "col_offset": 34, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 222, "col_offset": 52, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 222, "col_offset": 69, "nodeName": "question_passage_attention", "type": "Any"}, {"lineNumber": 224, "col_offset": 40, "nodeName": "expand", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 225, "col_offset": 24, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 225, "col_offset": 40, "nodeName": "encoding_dim", "type": "Any"}, {"lineNumber": 229, "col_offset": 31, "nodeName": "cat", "type": "Any"}, {"lineNumber": 239, "col_offset": 26, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 242, "col_offset": 23, "nodeName": "size", "type": "Any"}, {"lineNumber": 245, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 247, "col_offset": 28, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 249, "col_offset": 27, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 249, "col_offset": 47, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 249, "col_offset": 66, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 252, "col_offset": 36, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 252, "col_offset": 54, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 252, "col_offset": 71, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 254, "col_offset": 37, "nodeName": "expand", "type": "Any"}, {"lineNumber": 255, "col_offset": 12, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 255, "col_offset": 24, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 255, "col_offset": 40, "nodeName": "modeling_dim", "type": "Any"}, {"lineNumber": 259, "col_offset": 34, "nodeName": "cat", "type": "Any"}, {"lineNumber": 269, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 273, "col_offset": 25, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 274, "col_offset": 26, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 275, "col_offset": 25, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 275, "col_offset": 45, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 275, "col_offset": 62, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 276, "col_offset": 28, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 276, "col_offset": 55, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 276, "col_offset": 74, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 277, "col_offset": 26, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 277, "col_offset": 53, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 277, "col_offset": 70, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 278, "col_offset": 20, "nodeName": "get_best_span", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 278, "col_offset": 34, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 278, "col_offset": 53, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 281, "col_offset": 42, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 282, "col_offset": 33, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 283, "col_offset": 32, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 284, "col_offset": 31, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 285, "col_offset": 30, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 286, "col_offset": 25, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 290, "col_offset": 11, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 300, "col_offset": 34, "nodeName": "loss", "type": "Any"}, {"lineNumber": 303, "col_offset": 11, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 305, "col_offset": 12, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 306, "col_offset": 12, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 307, "col_offset": 12, "nodeName": "token_offsets", "type": "List[Any]"}, {"lineNumber": 308, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 322, "col_offset": 45, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 323, "col_offset": 44, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 324, "col_offset": 43, "nodeName": "token_offsets", "type": "List[Any]"}, {"lineNumber": 327, "col_offset": 33, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 328, "col_offset": 8, "nodeName": "exact_match", "type": "Any"}, {"lineNumber": 328, "col_offset": 21, "nodeName": "f1_score", "type": "Any"}, {"lineNumber": 328, "col_offset": 32, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 328, "col_offset": 63, "nodeName": "reset", "type": "bool"}, {"lineNumber": 333, "col_offset": 18, "nodeName": "exact_match", "type": "Any"}, {"lineNumber": 334, "col_offset": 18, "nodeName": "f1_score", "type": "Any"}, {"lineNumber": 339, "col_offset": 27, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 339, "col_offset": 58, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 346, "col_offset": 20, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 346, "col_offset": 37, "nodeName": "size", "type": "Any"}, {"lineNumber": 347, "col_offset": 17, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 353, "col_offset": 12, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 357, "col_offset": 31, "nodeName": "span_log_probs", "type": "Any"}, {"lineNumber": 357, "col_offset": 48, "nodeName": "span_log_mask", "type": "Any"}, {"lineNumber": 363, "col_offset": 21, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 364, "col_offset": 29, "nodeName": "best_spans", "type": "Any"}, {"lineNumber": 364, "col_offset": 43, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 365, "col_offset": 27, "nodeName": "best_spans", "type": "Any"}, {"lineNumber": 365, "col_offset": 40, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 366, "col_offset": 15, "nodeName": "stack", "type": "Any"}, {"lineNumber": 80, "col_offset": 21, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "Highway", "type": "Type[allennlp.modules.highway.Highway]"}, {"lineNumber": 86, "col_offset": 58, "nodeName": "num_highway_layers", "type": "int"}, {"lineNumber": 93, "col_offset": 23, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 94, "col_offset": 23, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 95, "col_offset": 31, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 96, "col_offset": 53, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 96, "col_offset": 69, "nodeName": "span_start_input_dim", "type": "int"}, {"lineNumber": 98, "col_offset": 32, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 99, "col_offset": 29, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 100, "col_offset": 51, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 100, "col_offset": 67, "nodeName": "span_end_input_dim", "type": "int"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 106, "col_offset": 16, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "Dropout", "type": "Any"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 130, "col_offset": 38, "nodeName": "x", "type": "Any"}, {"lineNumber": 141, "col_offset": 18, "nodeName": "List", "type": "Any"}, {"lineNumber": 192, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 192, "col_offset": 48, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 192, "col_offset": 74, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 193, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 47, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 193, "col_offset": 73, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 194, "col_offset": 21, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 195, "col_offset": 25, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 198, "col_offset": 46, "nodeName": "self", "type": "Any"}, {"lineNumber": 199, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 201, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 201, "col_offset": 41, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 201, "col_offset": 60, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 201, "col_offset": 79, "nodeName": "question_lstm_mask", "type": "Any"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 202, "col_offset": 40, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 202, "col_offset": 59, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 202, "col_offset": 77, "nodeName": "passage_lstm_mask", "type": "Any"}, {"lineNumber": 203, "col_offset": 23, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 206, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 208, "col_offset": 37, "nodeName": "util", "type": "module"}, {"lineNumber": 210, "col_offset": 35, "nodeName": "util", "type": "module"}, {"lineNumber": 214, "col_offset": 28, "nodeName": "util", "type": "module"}, {"lineNumber": 215, "col_offset": 41, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 220, "col_offset": 37, "nodeName": "util", "type": "module"}, {"lineNumber": 222, "col_offset": 34, "nodeName": "util", "type": "module"}, {"lineNumber": 229, "col_offset": 31, "nodeName": "torch", "type": "Any"}, {"lineNumber": 231, "col_offset": 16, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 232, "col_offset": 16, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 239, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 240, "col_offset": 12, "nodeName": "_modeling_layer", "type": "Any"}, {"lineNumber": 240, "col_offset": 33, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 240, "col_offset": 55, "nodeName": "passage_lstm_mask", "type": "Any"}, {"lineNumber": 242, "col_offset": 23, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 245, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 245, "col_offset": 41, "nodeName": "cat", "type": "Any"}, {"lineNumber": 249, "col_offset": 27, "nodeName": "util", "type": "module"}, {"lineNumber": 252, "col_offset": 36, "nodeName": "util", "type": "module"}, {"lineNumber": 259, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 261, "col_offset": 16, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 262, "col_offset": 16, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "tiled_start_representation", "type": "Any"}, {"lineNumber": 269, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "_span_end_encoder", "type": "Any"}, {"lineNumber": 270, "col_offset": 35, "nodeName": "span_end_representation", "type": "Any"}, {"lineNumber": 270, "col_offset": 60, "nodeName": "passage_lstm_mask", "type": "Any"}, {"lineNumber": 273, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 273, "col_offset": 39, "nodeName": "cat", "type": "Any"}, {"lineNumber": 275, "col_offset": 25, "nodeName": "util", "type": "module"}, {"lineNumber": 276, "col_offset": 28, "nodeName": "util", "type": "module"}, {"lineNumber": 277, "col_offset": 26, "nodeName": "util", "type": "module"}, {"lineNumber": 291, "col_offset": 19, "nodeName": "nll_loss", "type": "Any"}, {"lineNumber": 294, "col_offset": 12, "nodeName": "_span_start_accuracy", "type": "Any"}, {"lineNumber": 294, "col_offset": 38, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 295, "col_offset": 20, "nodeName": "nll_loss", "type": "Any"}, {"lineNumber": 298, "col_offset": 12, "nodeName": "_span_end_accuracy", "type": "Any"}, {"lineNumber": 298, "col_offset": 36, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "_span_accuracy", "type": "Any"}, {"lineNumber": 299, "col_offset": 32, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 300, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 304, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 308, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 308, "col_offset": 27, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 312, "col_offset": 16, "nodeName": "passage_str", "type": "Any"}, {"lineNumber": 313, "col_offset": 16, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 314, "col_offset": 16, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 315, "col_offset": 16, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 316, "col_offset": 16, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 317, "col_offset": 16, "nodeName": "best_span_string", "type": "Any"}, {"lineNumber": 319, "col_offset": 16, "nodeName": "answer_texts", "type": "Any"}, {"lineNumber": 320, "col_offset": 19, "nodeName": "answer_texts", "type": "Any"}, {"lineNumber": 322, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 323, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 324, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 142, "col_offset": 14, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 142, "col_offset": 19, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 328, "col_offset": 32, "nodeName": "_squad_metrics", "type": "Any"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 330, "col_offset": 62, "nodeName": "reset", "type": "bool"}, {"lineNumber": 331, "col_offset": 23, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 331, "col_offset": 58, "nodeName": "reset", "type": "bool"}, {"lineNumber": 332, "col_offset": 24, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 332, "col_offset": 55, "nodeName": "reset", "type": "bool"}, {"lineNumber": 327, "col_offset": 55, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 327, "col_offset": 60, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 339, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 339, "col_offset": 58, "nodeName": "torch", "type": "Any"}, {"lineNumber": 345, "col_offset": 18, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 346, "col_offset": 37, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 349, "col_offset": 25, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 349, "col_offset": 58, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 366, "col_offset": 15, "nodeName": "torch", "type": "Any"}, {"lineNumber": 366, "col_offset": 28, "nodeName": "span_start_indices", "type": "Any"}, {"lineNumber": 366, "col_offset": 48, "nodeName": "span_end_indices", "type": "Any"}, {"lineNumber": 80, "col_offset": 30, "nodeName": "RegularizerApplicator", "type": "Type[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 96, "col_offset": 53, "nodeName": "nn", "type": "Any"}, {"lineNumber": 100, "col_offset": 51, "nodeName": "nn", "type": "Any"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 118, "col_offset": 16, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 118, "col_offset": 35, "nodeName": "modeling_dim", "type": "int"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "nn", "type": "Any"}, {"lineNumber": 128, "col_offset": 47, "nodeName": "dropout", "type": "float"}, {"lineNumber": 192, "col_offset": 48, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 47, "nodeName": "self", "type": "Any"}, {"lineNumber": 196, "col_offset": 24, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 196, "col_offset": 49, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 197, "col_offset": 48, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 201, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 202, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 215, "col_offset": 41, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 224, "col_offset": 40, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 233, "col_offset": 16, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 233, "col_offset": 34, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 234, "col_offset": 16, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 234, "col_offset": 34, "nodeName": "tiled_question_passage_vector", "type": "Any"}, {"lineNumber": 240, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 245, "col_offset": 41, "nodeName": "torch", "type": "Any"}, {"lineNumber": 245, "col_offset": 52, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 245, "col_offset": 74, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 247, "col_offset": 28, "nodeName": "_span_start_predictor", "type": "Any"}, {"lineNumber": 247, "col_offset": 55, "nodeName": "span_start_input", "type": "Any"}, {"lineNumber": 254, "col_offset": 37, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 264, "col_offset": 16, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 264, "col_offset": 34, "nodeName": "tiled_start_representation", "type": "Any"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 273, "col_offset": 39, "nodeName": "torch", "type": "Any"}, {"lineNumber": 273, "col_offset": 50, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 273, "col_offset": 72, "nodeName": "encoded_span_end", "type": "Any"}, {"lineNumber": 274, "col_offset": 26, "nodeName": "_span_end_predictor", "type": "Any"}, {"lineNumber": 274, "col_offset": 51, "nodeName": "span_end_input", "type": "Any"}, {"lineNumber": 292, "col_offset": 16, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 292, "col_offset": 40, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 292, "col_offset": 59, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 292, "col_offset": 74, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 294, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 294, "col_offset": 57, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 296, "col_offset": 16, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 296, "col_offset": 40, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 296, "col_offset": 57, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 296, "col_offset": 72, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 298, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 298, "col_offset": 53, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 299, "col_offset": 43, "nodeName": "cat", "type": "Any"}, {"lineNumber": 309, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 310, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 311, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 314, "col_offset": 33, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 317, "col_offset": 35, "nodeName": "passage_str", "type": "Any"}, {"lineNumber": 318, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 318, "col_offset": 52, "nodeName": "best_span_string", "type": "Any"}, {"lineNumber": 319, "col_offset": 31, "nodeName": "get", "type": "Callable"}, {"lineNumber": 142, "col_offset": 19, "nodeName": "torch", "type": "Any"}, {"lineNumber": 328, "col_offset": 32, "nodeName": "self", "type": "Any"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "_span_start_accuracy", "type": "Any"}, {"lineNumber": 331, "col_offset": 23, "nodeName": "_span_end_accuracy", "type": "Any"}, {"lineNumber": 332, "col_offset": 24, "nodeName": "_span_accuracy", "type": "Any"}, {"lineNumber": 344, "col_offset": 11, "nodeName": "dim", "type": "Any"}, {"lineNumber": 344, "col_offset": 43, "nodeName": "dim", "type": "Any"}, {"lineNumber": 349, "col_offset": 25, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 349, "col_offset": 58, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 353, "col_offset": 12, "nodeName": "log", "type": "Any"}, {"lineNumber": 363, "col_offset": 21, "nodeName": "view", "type": "Any"}, {"lineNumber": 363, "col_offset": 47, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 96, "col_offset": 53, "nodeName": "torch", "type": "Any"}, {"lineNumber": 100, "col_offset": 51, "nodeName": "torch", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "torch", "type": "Any"}, {"lineNumber": 141, "col_offset": 23, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 196, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "util", "type": "module"}, {"lineNumber": 218, "col_offset": 38, "nodeName": "max", "type": "Any"}, {"lineNumber": 224, "col_offset": 40, "nodeName": "question_passage_vector", "type": "Any"}, {"lineNumber": 247, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 254, "col_offset": 37, "nodeName": "span_start_representation", "type": "Any"}, {"lineNumber": 274, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 292, "col_offset": 16, "nodeName": "util", "type": "module"}, {"lineNumber": 292, "col_offset": 74, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 294, "col_offset": 57, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 296, "col_offset": 16, "nodeName": "util", "type": "module"}, {"lineNumber": 296, "col_offset": 72, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 298, "col_offset": 53, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 299, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 299, "col_offset": 54, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 299, "col_offset": 66, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 309, "col_offset": 16, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 310, "col_offset": 16, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 311, "col_offset": 16, "nodeName": "token_offsets", "type": "List[Any]"}, {"lineNumber": 312, "col_offset": 30, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 313, "col_offset": 26, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 314, "col_offset": 39, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 315, "col_offset": 31, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 316, "col_offset": 29, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 317, "col_offset": 47, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 317, "col_offset": 60, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 321, "col_offset": 20, "nodeName": "_squad_metrics", "type": "Any"}, {"lineNumber": 321, "col_offset": 40, "nodeName": "best_span_string", "type": "Any"}, {"lineNumber": 321, "col_offset": 58, "nodeName": "answer_texts", "type": "Any"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 331, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 332, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 344, "col_offset": 11, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 344, "col_offset": 43, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 363, "col_offset": 21, "nodeName": "valid_span_log_probs", "type": "Any"}, {"lineNumber": 218, "col_offset": 38, "nodeName": "masked_similarity", "type": "Any"}, {"lineNumber": 309, "col_offset": 39, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 310, "col_offset": 38, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 311, "col_offset": 37, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 312, "col_offset": 39, "nodeName": "i", "type": "int"}, {"lineNumber": 313, "col_offset": 35, "nodeName": "i", "type": "int"}, {"lineNumber": 318, "col_offset": 16, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 319, "col_offset": 31, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 321, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 353, "col_offset": 12, "nodeName": "triu", "type": "Any"}, {"lineNumber": 141, "col_offset": 28, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 141, "col_offset": 33, "nodeName": "Any", "type": "Any"}, {"lineNumber": 309, "col_offset": 48, "nodeName": "i", "type": "int"}, {"lineNumber": 310, "col_offset": 47, "nodeName": "i", "type": "int"}, {"lineNumber": 311, "col_offset": 46, "nodeName": "i", "type": "int"}, {"lineNumber": 314, "col_offset": 39, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 315, "col_offset": 39, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 316, "col_offset": 37, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 319, "col_offset": 40, "nodeName": "i", "type": "int"}, {"lineNumber": 353, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 353, "col_offset": 23, "nodeName": "ones", "type": "Any"}, {"lineNumber": 353, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 353, "col_offset": 35, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 353, "col_offset": 51, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 353, "col_offset": 75, "nodeName": "device", "type": "Any"}, {"lineNumber": 314, "col_offset": 39, "nodeName": "detach", "type": "Any"}, {"lineNumber": 314, "col_offset": 39, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 314, "col_offset": 49, "nodeName": "i", "type": "int"}]