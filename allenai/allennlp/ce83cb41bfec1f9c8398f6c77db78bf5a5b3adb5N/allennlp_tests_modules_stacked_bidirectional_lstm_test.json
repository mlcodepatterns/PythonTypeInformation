[{"lineNumber": 16, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "lstm", "type": "allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "is_bidirectional", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "output", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "constant_init", "type": "allennlp.nn.initializers.Initializer"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "initial_memory", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "sequence_lengths", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "lstm_input", "type": "Any"}, {"lineNumber": 16, "col_offset": 23, "nodeName": "rand", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 20, "col_offset": 23, "nodeName": "pack_padded_sequence", "type": "Any"}, {"lineNumber": 20, "col_offset": 44, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 21, "col_offset": 15, "nodeName": "StackedBidirectionalLstm", "type": "Type[allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "output", "type": "Any"}, {"lineNumber": 22, "col_offset": 16, "nodeName": "_", "type": "Any"}, {"lineNumber": 22, "col_offset": 20, "nodeName": "lstm", "type": "allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "output_sequence", "type": "Any"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "_", "type": "Any"}, {"lineNumber": 23, "col_offset": 29, "nodeName": "pad_packed_sequence", "type": "Any"}, {"lineNumber": 23, "col_offset": 49, "nodeName": "output", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 29, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 33, "col_offset": 18, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 33, "col_offset": 45, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 40, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 44, "col_offset": 45, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 50, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 54, "col_offset": 18, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 54, "col_offset": 45, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 55, "col_offset": 23, "nodeName": "rand", "type": "Any"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "ones", "type": "Any"}, {"lineNumber": 57, "col_offset": 17, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 57, "col_offset": 25, "nodeName": "input_tensor", "type": "Any"}, {"lineNumber": 57, "col_offset": 39, "nodeName": "mask", "type": "Any"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 63, "col_offset": 89, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "StackedBidirectionalLstm", "type": "Type[allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm]"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "dropout_name", "type": "str"}, {"lineNumber": 78, "col_offset": 24, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "InitializerApplicator", "type": "Type[allennlp.nn.initializers.InitializerApplicator]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 80, "col_offset": 20, "nodeName": "stacked_lstm", "type": "allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 81, "col_offset": 20, "nodeName": "dropped_stacked_lstm", "type": "allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm"}, {"lineNumber": 83, "col_offset": 24, "nodeName": "randn", "type": "Any"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "randn", "type": "Any"}, {"lineNumber": 86, "col_offset": 17, "nodeName": "rand", "type": "Any"}, {"lineNumber": 87, "col_offset": 27, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "sorted_tensor", "type": "Any"}, {"lineNumber": 89, "col_offset": 23, "nodeName": "sorted_sequence", "type": "Any"}, {"lineNumber": 89, "col_offset": 40, "nodeName": "_", "type": "Any"}, {"lineNumber": 89, "col_offset": 43, "nodeName": "_", "type": "Any"}, {"lineNumber": 89, "col_offset": 47, "nodeName": "sort_batch_by_length", "type": "Callable[[Any, Any], Tuple[Any, Any, Any, Any]]"}, {"lineNumber": 89, "col_offset": 68, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 89, "col_offset": 76, "nodeName": "sequence_lengths", "type": "Any"}, {"lineNumber": 90, "col_offset": 21, "nodeName": "pack_padded_sequence", "type": "Any"}, {"lineNumber": 90, "col_offset": 42, "nodeName": "sorted_tensor", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "stacked_output", "type": "Any"}, {"lineNumber": 92, "col_offset": 24, "nodeName": "stacked_state", "type": "Any"}, {"lineNumber": 92, "col_offset": 40, "nodeName": "stacked_lstm", "type": "allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm"}, {"lineNumber": 92, "col_offset": 53, "nodeName": "lstm_input", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "dropped_output", "type": "Any"}, {"lineNumber": 93, "col_offset": 24, "nodeName": "dropped_state", "type": "Any"}, {"lineNumber": 93, "col_offset": 40, "nodeName": "dropped_stacked_lstm", "type": "allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm"}, {"lineNumber": 93, "col_offset": 61, "nodeName": "lstm_input", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "dropped_output_sequence", "type": "Any"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "_", "type": "Any"}, {"lineNumber": 94, "col_offset": 37, "nodeName": "pad_packed_sequence", "type": "Any"}, {"lineNumber": 94, "col_offset": 57, "nodeName": "dropped_output", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "stacked_output_sequence", "type": "Any"}, {"lineNumber": 95, "col_offset": 33, "nodeName": "_", "type": "Any"}, {"lineNumber": 95, "col_offset": 37, "nodeName": "pad_packed_sequence", "type": "Any"}, {"lineNumber": 95, "col_offset": 57, "nodeName": "stacked_output", "type": "Any"}, {"lineNumber": 96, "col_offset": 11, "nodeName": "dropout_name", "type": "str"}, {"lineNumber": 100, "col_offset": 11, "nodeName": "dropout_name", "type": "str"}, {"lineNumber": 16, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 24, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 25, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 26, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 33, "col_offset": 18, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "get_input_dim", "type": "Any"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "get_output_dim", "type": "Any"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "Seq2VecEncoder", "type": "Type[allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder]"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "get_input_dim", "type": "Any"}, {"lineNumber": 47, "col_offset": 15, "nodeName": "get_output_dim", "type": "Any"}, {"lineNumber": 54, "col_offset": 18, "nodeName": "Seq2VecEncoder", "type": "Type[allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder]"}, {"lineNumber": 55, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "torch", "type": "Any"}, {"lineNumber": 67, "col_offset": 35, "nodeName": "StackedBidirectionalLstm", "type": "Type[allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm]"}, {"lineNumber": 70, "col_offset": 13, "nodeName": "dropout_name", "type": "str"}, {"lineNumber": 78, "col_offset": 24, "nodeName": "Initializer", "type": "Type[allennlp.nn.initializers.Initializer]"}, {"lineNumber": 78, "col_offset": 48, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 83, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 86, "col_offset": 17, "nodeName": "torch", "type": "Any"}, {"lineNumber": 87, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 90, "col_offset": 57, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 92, "col_offset": 66, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 92, "col_offset": 81, "nodeName": "initial_memory", "type": "Any"}, {"lineNumber": 93, "col_offset": 74, "nodeName": "initial_state", "type": "Any"}, {"lineNumber": 93, "col_offset": 89, "nodeName": "initial_memory", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 47, "col_offset": 15, "nodeName": "encoder", "type": "Any"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 71, "col_offset": 35, "nodeName": "StackedBidirectionalLstm", "type": "Type[allennlp.modules.stacked_bidirectional_lstm.StackedBidirectionalLstm]"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 79, "col_offset": 52, "nodeName": "constant_init", "type": "allennlp.nn.initializers.Initializer"}, {"lineNumber": 90, "col_offset": 57, "nodeName": "data", "type": "Any"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "raises", "type": "Any"}, {"lineNumber": 97, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 98, "col_offset": 16, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 101, "col_offset": 17, "nodeName": "raises", "type": "Any"}, {"lineNumber": 101, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 102, "col_offset": 16, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 104, "col_offset": 17, "nodeName": "raises", "type": "Any"}, {"lineNumber": 104, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 105, "col_offset": 16, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 24, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 25, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 26, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 90, "col_offset": 57, "nodeName": "sorted_sequence", "type": "Any"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 98, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 98, "col_offset": 56, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 99, "col_offset": 56, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 101, "col_offset": 17, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 102, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 102, "col_offset": 56, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 103, "col_offset": 56, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 104, "col_offset": 17, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 105, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 105, "col_offset": 56, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 106, "col_offset": 56, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 24, "col_offset": 41, "nodeName": "output_sequence", "type": "Any"}, {"lineNumber": 25, "col_offset": 41, "nodeName": "output_sequence", "type": "Any"}, {"lineNumber": 26, "col_offset": 41, "nodeName": "output_sequence", "type": "Any"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "detach", "type": "Any"}, {"lineNumber": 75, "col_offset": 30, "nodeName": "dropout_name", "type": "str"}, {"lineNumber": 98, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 98, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 99, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 102, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 102, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 103, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 105, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 105, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 106, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "output", "type": "Any"}, {"lineNumber": 98, "col_offset": 56, "nodeName": "dropped_output_sequence", "type": "Any"}, {"lineNumber": 99, "col_offset": 56, "nodeName": "stacked_output_sequence", "type": "Any"}, {"lineNumber": 102, "col_offset": 56, "nodeName": "dropped_state", "type": "Any"}, {"lineNumber": 103, "col_offset": 56, "nodeName": "stacked_state", "type": "Any"}, {"lineNumber": 105, "col_offset": 56, "nodeName": "dropped_state", "type": "Any"}, {"lineNumber": 106, "col_offset": 56, "nodeName": "stacked_state", "type": "Any"}]