[{"lineNumber": 17, "col_offset": 37, "nodeName": "ModelTestCase", "type": "Type[allennlp.common.testing.model_test_case.ModelTestCase]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "training_arrays", "type": "Dict[str, Any]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "metrics", "type": "Dict[str, float]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "saved_dataset", "type": "Any"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "saved_model", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "model", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "reader", "type": "allennlp.data.dataset_readers.dataset_reader.DatasetReader"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "_token_indexers", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "dataset", "type": "allennlp.data.dataset.Dataset"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 78, "col_offset": 21, "nodeName": "saved_model", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 79, "col_offset": 23, "nodeName": "saved_dataset", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "set_up_model", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "arrays_to_variables", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 24, "col_offset": 22, "nodeName": "forward", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 26, "col_offset": 18, "nodeName": "get_metrics", "type": "Callable[..., Dict[str, float]]"}, {"lineNumber": 35, "col_offset": 27, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 39, "col_offset": 31, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 40, "col_offset": 15, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 41, "col_offset": 15, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 42, "col_offset": 15, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 43, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 43, "col_offset": 59, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Any"}, {"lineNumber": 47, "col_offset": 50, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "self", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "from_file", "type": "Callable[..., allennlp.common.params.Params]"}, {"lineNumber": 65, "col_offset": 34, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 66, "col_offset": 17, "nodeName": "from_params", "type": "Callable[[Any, allennlp.common.params.Params], allennlp.data.dataset_readers.dataset_reader.DatasetReader]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "reader", "type": "allennlp.data.dataset_readers.dataset_reader.DatasetReader"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 68, "col_offset": 23, "nodeName": "read", "type": "Callable[[str], allennlp.data.dataset.Dataset]"}, {"lineNumber": 69, "col_offset": 16, "nodeName": "from_dataset", "type": "Callable[..., allennlp.data.vocabulary.Vocabulary]"}, {"lineNumber": 69, "col_offset": 40, "nodeName": "dataset", "type": "Union[Any, allennlp.data.dataset.Dataset]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "index_instances", "type": "Union[Any, Callable[[allennlp.data.vocabulary.Vocabulary], None]]"}, {"lineNumber": 70, "col_offset": 37, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "from_params", "type": "Callable[[Any, allennlp.data.vocabulary.Vocabulary, allennlp.common.params.Params], allennlp.models.model.Model]"}, {"lineNumber": 73, "col_offset": 39, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "ensure_batch_predictions_are_consistent", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 86, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 86, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 92, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 94, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 94, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 94, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 98, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 100, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 100, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 103, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 105, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 105, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "from_file", "type": "Callable[..., allennlp.common.params.Params]"}, {"lineNumber": 109, "col_offset": 34, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 116, "col_offset": 17, "nodeName": "from_file", "type": "Callable[..., allennlp.common.params.Params]"}, {"lineNumber": 116, "col_offset": 34, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 123, "col_offset": 17, "nodeName": "from_file", "type": "Callable[..., allennlp.common.params.Params]"}, {"lineNumber": 123, "col_offset": 34, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 23, "col_offset": 46, "nodeName": "as_array_dict", "type": "Callable[..., Dict[str, Union[numpy.ndarray, Dict[str, numpy.ndarray]]]]"}, {"lineNumber": 24, "col_offset": 22, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 24, "col_offset": 43, "nodeName": "training_arrays", "type": "Dict[str, Any]"}, {"lineNumber": 26, "col_offset": 18, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 33, "col_offset": 15, "nodeName": "metrics", "type": "Dict[str, float]"}, {"lineNumber": 35, "col_offset": 27, "nodeName": "data", "type": "Any"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 37, "col_offset": 28, "nodeName": "sum", "type": "Any"}, {"lineNumber": 37, "col_offset": 38, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 38, "col_offset": 28, "nodeName": "sum", "type": "Any"}, {"lineNumber": 38, "col_offset": 38, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 39, "col_offset": 37, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "sequence_length", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 47, "col_offset": 50, "nodeName": "self", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 65, "col_offset": 34, "nodeName": "self", "type": "Any"}, {"lineNumber": 66, "col_offset": 17, "nodeName": "DatasetReader", "type": "Type[allennlp.data.dataset_readers.dataset_reader.DatasetReader]"}, {"lineNumber": 66, "col_offset": 43, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 67, "col_offset": 44, "nodeName": "_token_indexers", "type": "Dict[str, Any]"}, {"lineNumber": 68, "col_offset": 23, "nodeName": "reader", "type": "allennlp.data.dataset_readers.dataset_reader.DatasetReader"}, {"lineNumber": 69, "col_offset": 16, "nodeName": "Vocabulary", "type": "Type[allennlp.data.vocabulary.Vocabulary]"}, {"lineNumber": 69, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "dataset", "type": "Union[Any, allennlp.data.dataset.Dataset]"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 73, "col_offset": 46, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 87, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 94, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 95, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 101, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 106, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 109, "col_offset": 34, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 113, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 113, "col_offset": 27, "nodeName": "ConfigurationError", "type": "Type[allennlp.common.checks.ConfigurationError]"}, {"lineNumber": 114, "col_offset": 12, "nodeName": "from_params", "type": "Callable[[Any, allennlp.data.vocabulary.Vocabulary, allennlp.common.params.Params], allennlp.models.model.Model]"}, {"lineNumber": 114, "col_offset": 30, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 116, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 116, "col_offset": 34, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 120, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 120, "col_offset": 27, "nodeName": "ConfigurationError", "type": "Type[allennlp.common.checks.ConfigurationError]"}, {"lineNumber": 121, "col_offset": 12, "nodeName": "from_params", "type": "Callable[[Any, allennlp.data.vocabulary.Vocabulary, allennlp.common.params.Params], allennlp.models.model.Model]"}, {"lineNumber": 121, "col_offset": 30, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 123, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 123, "col_offset": 34, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 127, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 127, "col_offset": 27, "nodeName": "ConfigurationError", "type": "Type[allennlp.common.checks.ConfigurationError]"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "from_params", "type": "Callable[[Any, allennlp.data.vocabulary.Vocabulary, allennlp.common.params.Params], allennlp.models.model.Model]"}, {"lineNumber": 128, "col_offset": 30, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 19, "col_offset": 14, "nodeName": "BidirectionalAttentionFlowTest", "type": "Type[BidirectionalAttentionFlowTest]"}, {"lineNumber": 19, "col_offset": 46, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 23, "col_offset": 46, "nodeName": "dataset", "type": "allennlp.data.dataset.Dataset"}, {"lineNumber": 24, "col_offset": 22, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 26, "col_offset": 18, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 37, "col_offset": 28, "nodeName": "numpy", "type": "module"}, {"lineNumber": 38, "col_offset": 28, "nodeName": "numpy", "type": "module"}, {"lineNumber": 39, "col_offset": 37, "nodeName": "data", "type": "Any"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 67, "col_offset": 44, "nodeName": "reader", "type": "allennlp.data.dataset_readers.dataset_reader.DatasetReader"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 84, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 87, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 92, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 95, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 98, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 101, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 103, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 106, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 113, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 114, "col_offset": 12, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 114, "col_offset": 30, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 114, "col_offset": 42, "nodeName": "pop", "type": "Any"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 120, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 121, "col_offset": 12, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 121, "col_offset": 30, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 121, "col_offset": 42, "nodeName": "pop", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 127, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 128, "col_offset": 30, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 128, "col_offset": 42, "nodeName": "pop", "type": "Any"}, {"lineNumber": 23, "col_offset": 46, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "fields", "type": "Dict[str, allennlp.data.fields.field.Field[Union[numpy.ndarray, Dict[str, numpy.ndarray]]]]"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 85, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 87, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 92, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 93, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 95, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 98, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 99, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 101, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 103, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 106, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 114, "col_offset": 42, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 121, "col_offset": 42, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 128, "col_offset": 42, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 35, "col_offset": 27, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 84, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 85, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 92, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 93, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 98, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 99, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 103, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 39, "col_offset": 37, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "instances", "type": "List[allennlp.data.instance.Instance]"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "dataset", "type": "allennlp.data.dataset.Dataset"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}]