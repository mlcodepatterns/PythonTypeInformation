[{"lineNumber": 18, "col_offset": 0, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 48, "col_offset": 28, "nodeName": "AllenNlpTestCase", "type": "Type[allennlp.common.testing.test_case.AllenNlpTestCase]"}, {"lineNumber": 27, "col_offset": 4, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "has_decreasing_segment", "type": "bool"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "k", "type": "int"}, {"lineNumber": 29, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "delta", "type": "float"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 45, "col_offset": 38, "nodeName": "has_decreasing_segment", "type": "bool"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "optimizer_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "batch_num_total", "type": "int"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "epoch", "type": "int"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "instances", "type": "allennlp.data.dataset_readers.dataset_reader.AllennlpDataset"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 258, "col_offset": 33, "nodeName": "slanted_triangular_cases", "type": "List[Tuple[Dict[str, Any], List[Tuple[int, int, float]]]]"}, {"lineNumber": 272, "col_offset": 12, "nodeName": "gradual_unfreezing", "type": "bool"}, {"lineNumber": 18, "col_offset": 34, "nodeName": "List", "type": "Any"}, {"lineNumber": 29, "col_offset": 22, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 29, "col_offset": 26, "nodeName": "learning_rates", "type": "List[float]"}, {"lineNumber": 31, "col_offset": 11, "nodeName": "delta", "type": "float"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 33, "col_offset": 15, "nodeName": "has_decreasing_segment", "type": "bool"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "setup_method", "type": "Callable[[], None]"}, {"lineNumber": 51, "col_offset": 21, "nodeName": "Sequential", "type": "Any"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 56, "col_offset": 27, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "optimizer_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 63, "col_offset": 20, "nodeName": "_get_optimizer", "type": "Callable[..., Any]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "params", "type": "Any"}, {"lineNumber": 65, "col_offset": 20, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 71, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "_", "type": "int"}, {"lineNumber": 94, "col_offset": 15, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 104, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 117, "col_offset": 20, "nodeName": "AllennlpDataset", "type": "Type[allennlp.data.dataset_readers.dataset_reader.AllennlpDataset]"}, {"lineNumber": 118, "col_offset": 16, "nodeName": "_get_optimizer", "type": "Callable[..., Any]"}, {"lineNumber": 119, "col_offset": 18, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 126, "col_offset": 26, "nodeName": "_learning_rate_scheduler", "type": "Any"}, {"lineNumber": 126, "col_offset": 60, "nodeName": "SlantedTriangular", "type": "Any"}, {"lineNumber": 131, "col_offset": 15, "nodeName": "num_epochs", "type": "Any"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "num_steps_per_epoch", "type": "Any"}, {"lineNumber": 137, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 149, "col_offset": 18, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 156, "col_offset": 15, "nodeName": "num_epochs", "type": "Any"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "_get_optimizer", "type": "Callable[..., Any]"}, {"lineNumber": 160, "col_offset": 16, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 174, "col_offset": 15, "nodeName": "num_epochs", "type": "Any"}, {"lineNumber": 175, "col_offset": 15, "nodeName": "num_steps_per_epoch", "type": "Any"}, {"lineNumber": 176, "col_offset": 15, "nodeName": "gradual_unfreezing", "type": "Any"}, {"lineNumber": 177, "col_offset": 15, "nodeName": "freezing_current", "type": "Any"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 258, "col_offset": 20, "nodeName": "lr_checks", "type": "List[Tuple[int, int, float]]"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 261, "col_offset": 33, "nodeName": "lr_checks", "type": "List[Tuple[int, int, float]]"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "discriminative_fine_tuning", "type": "bool"}, {"lineNumber": 18, "col_offset": 39, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 30, "col_offset": 16, "nodeName": "learning_rates", "type": "List[float]"}, {"lineNumber": 30, "col_offset": 36, "nodeName": "learning_rates", "type": "List[float]"}, {"lineNumber": 36, "col_offset": 13, "nodeName": "delta", "type": "float"}, {"lineNumber": 51, "col_offset": 21, "nodeName": "nn", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 56, "col_offset": 56, "nodeName": "lr", "type": "float"}, {"lineNumber": 57, "col_offset": 68, "nodeName": "m", "type": "Any"}, {"lineNumber": 57, "col_offset": 73, "nodeName": "_modules", "type": "Any"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "Optimizer", "type": "Type[allennlp.training.optimizers.Optimizer]"}, {"lineNumber": 59, "col_offset": 67, "nodeName": "optimizer_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 63, "col_offset": 20, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 65, "col_offset": 20, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 66, "col_offset": 22, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 71, "col_offset": 27, "nodeName": "params", "type": "Any"}, {"lineNumber": 72, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 72, "col_offset": 27, "nodeName": "num_steps_per_epoch", "type": "Any"}, {"lineNumber": 73, "col_offset": 16, "nodeName": "batch_num_total", "type": "int"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "step", "type": "Any"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 93, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 95, "col_offset": 19, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 118, "col_offset": 16, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 119, "col_offset": 18, "nodeName": "Trainer", "type": "Type[allennlp.training.trainer.Trainer]"}, {"lineNumber": 120, "col_offset": 18, "nodeName": "model", "type": "Any"}, {"lineNumber": 122, "col_offset": 30, "nodeName": "TEST_DIR", "type": "pathlib.Path"}, {"lineNumber": 123, "col_offset": 19, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 126, "col_offset": 26, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 131, "col_offset": 15, "nodeName": "_learning_rate_scheduler", "type": "Any"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "_learning_rate_scheduler", "type": "Any"}, {"lineNumber": 149, "col_offset": 18, "nodeName": "Trainer", "type": "Type[allennlp.training.trainer.Trainer]"}, {"lineNumber": 150, "col_offset": 18, "nodeName": "model", "type": "Any"}, {"lineNumber": 152, "col_offset": 30, "nodeName": "TEST_DIR", "type": "pathlib.Path"}, {"lineNumber": 153, "col_offset": 19, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 156, "col_offset": 15, "nodeName": "_learning_rate_scheduler", "type": "Any"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 160, "col_offset": 16, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 161, "col_offset": 22, "nodeName": "optim", "type": "Any"}, {"lineNumber": 174, "col_offset": 15, "nodeName": "sched", "type": "Any"}, {"lineNumber": 175, "col_offset": 15, "nodeName": "sched", "type": "Any"}, {"lineNumber": 176, "col_offset": 15, "nodeName": "sched", "type": "Any"}, {"lineNumber": 177, "col_offset": 15, "nodeName": "sched", "type": "Any"}, {"lineNumber": 179, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 179, "col_offset": 19, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 182, "col_offset": 53, "nodeName": "ratio", "type": "Any"}, {"lineNumber": 183, "col_offset": 53, "nodeName": "ratio", "type": "Any"}, {"lineNumber": 185, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 185, "col_offset": 27, "nodeName": "ConfigurationError", "type": "Type[allennlp.common.checks.ConfigurationError]"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 190, "col_offset": 12, "nodeName": "from_params", "type": "Callable"}, {"lineNumber": 259, "col_offset": 18, "nodeName": "_run_scheduler_get_lrs", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 259, "col_offset": 46, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 261, "col_offset": 16, "nodeName": "it", "type": "int"}, {"lineNumber": 261, "col_offset": 20, "nodeName": "layer", "type": "int"}, {"lineNumber": 261, "col_offset": 27, "nodeName": "lr", "type": "float"}, {"lineNumber": 262, "col_offset": 16, "nodeName": "lr_check", "type": "float"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "lr", "type": "float"}, {"lineNumber": 274, "col_offset": 20, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 30, "col_offset": 31, "nodeName": "k", "type": "int"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "has_increasing_segment", "type": "bool"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 51, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 57, "col_offset": 73, "nodeName": "model", "type": "Any"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "named_parameters", "type": "Any"}, {"lineNumber": 66, "col_offset": 40, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 76, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 82, "col_offset": 16, "nodeName": "step_batch", "type": "Any"}, {"lineNumber": 82, "col_offset": 37, "nodeName": "batch_num_total", "type": "int"}, {"lineNumber": 84, "col_offset": 27, "nodeName": "freezing_current", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "scheduler", "type": "Any"}, {"lineNumber": 120, "col_offset": 18, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 121, "col_offset": 22, "nodeName": "Lazy", "type": "Type[allennlp.common.lazy.Lazy[Any]]"}, {"lineNumber": 122, "col_offset": 30, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 124, "col_offset": 24, "nodeName": "DataLoader", "type": "Type[allennlp.data.dataloader.DataLoader]"}, {"lineNumber": 124, "col_offset": 35, "nodeName": "instances", "type": "allennlp.data.dataset_readers.dataset_reader.AllennlpDataset"}, {"lineNumber": 131, "col_offset": 15, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 150, "col_offset": 18, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 151, "col_offset": 22, "nodeName": "Lazy", "type": "Type[allennlp.common.lazy.Lazy[Any]]"}, {"lineNumber": 152, "col_offset": 30, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 154, "col_offset": 24, "nodeName": "DataLoader", "type": "Type[allennlp.data.dataloader.DataLoader]"}, {"lineNumber": 154, "col_offset": 35, "nodeName": "instances", "type": "allennlp.data.dataset_readers.dataset_reader.AllennlpDataset"}, {"lineNumber": 156, "col_offset": 15, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 162, "col_offset": 19, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 179, "col_offset": 19, "nodeName": "optim", "type": "Any"}, {"lineNumber": 181, "col_offset": 19, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 182, "col_offset": 53, "nodeName": "sched", "type": "Any"}, {"lineNumber": 183, "col_offset": 15, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 183, "col_offset": 53, "nodeName": "sched", "type": "Any"}, {"lineNumber": 185, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 188, "col_offset": 26, "nodeName": "optim", "type": "Any"}, {"lineNumber": 190, "col_offset": 12, "nodeName": "LearningRateScheduler", "type": "Type[allennlp.training.learning_rate_schedulers.learning_rate_scheduler.LearningRateScheduler]"}, {"lineNumber": 191, "col_offset": 26, "nodeName": "optim", "type": "Any"}, {"lineNumber": 259, "col_offset": 18, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 259, "col_offset": 54, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 262, "col_offset": 27, "nodeName": "round", "type": "Callable"}, {"lineNumber": 262, "col_offset": 33, "nodeName": "lr", "type": "float"}, {"lineNumber": 263, "col_offset": 21, "nodeName": "round", "type": "Callable"}, {"lineNumber": 265, "col_offset": 20, "nodeName": "lr", "type": "float"}, {"lineNumber": 265, "col_offset": 26, "nodeName": "lr_check", "type": "float"}, {"lineNumber": 281, "col_offset": 20, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 282, "col_offset": 20, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 283, "col_offset": 20, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 285, "col_offset": 23, "nodeName": "gradual_unfreezing", "type": "bool"}, {"lineNumber": 30, "col_offset": 51, "nodeName": "k", "type": "int"}, {"lineNumber": 57, "col_offset": 73, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 66, "col_offset": 47, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 66, "col_offset": 56, "nodeName": "params", "type": "Any"}, {"lineNumber": 76, "col_offset": 16, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 82, "col_offset": 16, "nodeName": "scheduler", "type": "Any"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "get", "type": "Any"}, {"lineNumber": 83, "col_offset": 56, "nodeName": "epoch", "type": "int"}, {"lineNumber": 84, "col_offset": 27, "nodeName": "scheduler", "type": "Any"}, {"lineNumber": 92, "col_offset": 34, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 92, "col_offset": 40, "nodeName": "k", "type": "int"}, {"lineNumber": 92, "col_offset": 47, "nodeName": "k", "type": "int"}, {"lineNumber": 93, "col_offset": 34, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 93, "col_offset": 52, "nodeName": "k", "type": "int"}, {"lineNumber": 94, "col_offset": 30, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 94, "col_offset": 36, "nodeName": "k", "type": "int"}, {"lineNumber": 94, "col_offset": 43, "nodeName": "k", "type": "int"}, {"lineNumber": 94, "col_offset": 62, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 94, "col_offset": 80, "nodeName": "k", "type": "int"}, {"lineNumber": 121, "col_offset": 44, "nodeName": "optim", "type": "Any"}, {"lineNumber": 151, "col_offset": 44, "nodeName": "optim", "type": "Any"}, {"lineNumber": 181, "col_offset": 19, "nodeName": "optim", "type": "Any"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "optim", "type": "Any"}, {"lineNumber": 183, "col_offset": 15, "nodeName": "optim", "type": "Any"}, {"lineNumber": 188, "col_offset": 40, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 192, "col_offset": 23, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 266, "col_offset": 36, "nodeName": "lr", "type": "float"}, {"lineNumber": 266, "col_offset": 54, "nodeName": "it", "type": "int"}, {"lineNumber": 266, "col_offset": 68, "nodeName": "layer", "type": "int"}, {"lineNumber": 266, "col_offset": 79, "nodeName": "lr_check", "type": "float"}, {"lineNumber": 278, "col_offset": 46, "nodeName": "gradual_unfreezing", "type": "bool"}, {"lineNumber": 279, "col_offset": 54, "nodeName": "discriminative_fine_tuning", "type": "bool"}, {"lineNumber": 281, "col_offset": 26, "nodeName": "_run_scheduler_get_lrs", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 281, "col_offset": 54, "nodeName": "params", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 281, "col_offset": 62, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 52, "col_offset": 34, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 52, "col_offset": 69, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 57, "col_offset": 54, "nodeName": "m", "type": "Any"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 79, "col_offset": 28, "nodeName": "param_group", "type": "Any"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "params", "type": "Any"}, {"lineNumber": 92, "col_offset": 52, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 93, "col_offset": 45, "nodeName": "k", "type": "int"}, {"lineNumber": 93, "col_offset": 57, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 94, "col_offset": 48, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 94, "col_offset": 73, "nodeName": "k", "type": "int"}, {"lineNumber": 94, "col_offset": 85, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 98, "col_offset": 15, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 98, "col_offset": 21, "nodeName": "k", "type": "int"}, {"lineNumber": 98, "col_offset": 28, "nodeName": "k", "type": "int"}, {"lineNumber": 263, "col_offset": 27, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 263, "col_offset": 35, "nodeName": "layer", "type": "int"}, {"lineNumber": 281, "col_offset": 26, "nodeName": "self", "type": "SlantedTriangularTest"}, {"lineNumber": 282, "col_offset": 39, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 282, "col_offset": 52, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 282, "col_offset": 61, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 283, "col_offset": 40, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 283, "col_offset": 53, "nodeName": "rates", "type": "List[Any]"}, {"lineNumber": 283, "col_offset": 62, "nodeName": "lrs", "type": "List[List[Any]]"}, {"lineNumber": 288, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 289, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 290, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 292, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 292, "col_offset": 45, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 293, "col_offset": 31, "nodeName": "is_hat_shaped", "type": "Callable[[List[float]], Any]"}, {"lineNumber": 293, "col_offset": 45, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 52, "col_offset": 34, "nodeName": "nn", "type": "Any"}, {"lineNumber": 52, "col_offset": 69, "nodeName": "nn", "type": "Any"}, {"lineNumber": 79, "col_offset": 43, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 96, "col_offset": 13, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "k", "type": "int"}, {"lineNumber": 96, "col_offset": 26, "nodeName": "k", "type": "int"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 97, "col_offset": 33, "nodeName": "k", "type": "int"}, {"lineNumber": 98, "col_offset": 33, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 263, "col_offset": 31, "nodeName": "it", "type": "int"}, {"lineNumber": 286, "col_offset": 31, "nodeName": "max", "type": "Callable"}, {"lineNumber": 287, "col_offset": 31, "nodeName": "min", "type": "Callable"}, {"lineNumber": 288, "col_offset": 45, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 289, "col_offset": 45, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 290, "col_offset": 45, "nodeName": "second_layer_lrs", "type": "List[Any]"}, {"lineNumber": 52, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 52, "col_offset": 69, "nodeName": "torch", "type": "Any"}, {"lineNumber": 79, "col_offset": 43, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 97, "col_offset": 26, "nodeName": "k", "type": "int"}, {"lineNumber": 286, "col_offset": 35, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 287, "col_offset": 35, "nodeName": "first_layer_lrs", "type": "List[Any]"}, {"lineNumber": 288, "col_offset": 61, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 289, "col_offset": 63, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 290, "col_offset": 62, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 286, "col_offset": 52, "nodeName": "num_actual_steps_per_epoch", "type": "int"}, {"lineNumber": 287, "col_offset": 52, "nodeName": "num_actual_steps_per_epoch", "type": "int"}]