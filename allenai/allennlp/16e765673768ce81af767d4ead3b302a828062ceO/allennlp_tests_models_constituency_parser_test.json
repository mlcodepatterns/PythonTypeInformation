[{"lineNumber": 9, "col_offset": 33, "nodeName": "ModelTestCase", "type": "Type[allennlp.common.testing.model_test_case.ModelTestCase]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "text", "type": "Dict[str, Any]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "pos_tags", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "spans", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "label", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "decode_output_dict", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "metrics", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "metric_keys", "type": "Set[Any]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "resolved_spans", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "sentence", "type": "List[str]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "tree", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "correct_tree", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "tree_spans", "type": "List[Tuple[Tuple[int, int], str]]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "sentence", "type": "List[str]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "tree", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "correct_tree", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "tree_spans", "type": "List[Tuple[Tuple[int, int], str]]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "sentence", "type": "List[str]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "tree", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "correct_tree", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "compile_evalb", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "set_up_model", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "clean_evalb", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "tearDown", "type": "Callable[[], None]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[Any, Any]]"}, {"lineNumber": 22, "col_offset": 50, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "ensure_batch_predictions_are_consistent", "type": "Callable[..., None]"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 33, "col_offset": 16, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 34, "col_offset": 16, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "text", "type": "Dict[str, Any]"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "spans", "type": "Any"}, {"lineNumber": 35, "col_offset": 57, "nodeName": "pos_tags", "type": "Any"}, {"lineNumber": 35, "col_offset": 67, "nodeName": "label", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "eval", "type": "Any"}, {"lineNumber": 39, "col_offset": 27, "nodeName": "as_tensor_dict", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "model", "type": "Any"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "decode", "type": "Any"}, {"lineNumber": 41, "col_offset": 47, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "get_metrics", "type": "Any"}, {"lineNumber": 45, "col_offset": 22, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 46, "col_offset": 36, "nodeName": "metric_keys", "type": "Set[Any]"}, {"lineNumber": 47, "col_offset": 33, "nodeName": "metric_keys", "type": "Set[Any]"}, {"lineNumber": 48, "col_offset": 37, "nodeName": "metric_keys", "type": "Set[Any]"}, {"lineNumber": 55, "col_offset": 25, "nodeName": "resolve_overlap_conflicts_greedily", "type": "Any"}, {"lineNumber": 55, "col_offset": 71, "nodeName": "spans", "type": "List[allennlp.models.constituency_parser.SpanInformation]"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "resolved_spans", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "construct_tree_from_spans", "type": "Any"}, {"lineNumber": 65, "col_offset": 82, "nodeName": "sentence", "type": "List[str]"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "fromstring", "type": "Any"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "tree", "type": "Any"}, {"lineNumber": 67, "col_offset": 23, "nodeName": "correct_tree", "type": "Any"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "construct_tree_from_spans", "type": "Any"}, {"lineNumber": 73, "col_offset": 82, "nodeName": "sentence", "type": "List[str]"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "fromstring", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "tree", "type": "Any"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "correct_tree", "type": "Any"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "construct_tree_from_spans", "type": "Any"}, {"lineNumber": 83, "col_offset": 82, "nodeName": "sentence", "type": "List[str]"}, {"lineNumber": 84, "col_offset": 23, "nodeName": "fromstring", "type": "Any"}, {"lineNumber": 85, "col_offset": 15, "nodeName": "tree", "type": "Any"}, {"lineNumber": 85, "col_offset": 23, "nodeName": "correct_tree", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "EvalbBracketingScorer", "type": "Any"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "EvalbBracketingScorer", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 22, "col_offset": 50, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 31, "col_offset": 26, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "torch", "type": "Any"}, {"lineNumber": 33, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 34, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 39, "col_offset": 27, "nodeName": "dataset", "type": "allennlp.data.dataset.Batch"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 40, "col_offset": 35, "nodeName": "training_tensors", "type": "Dict[str, Any]"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 42, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "model", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "keys", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "SpanInformation", "type": "Type[allennlp.models.constituency_parser.SpanInformation]"}, {"lineNumber": 53, "col_offset": 17, "nodeName": "SpanInformation", "type": "Type[allennlp.models.constituency_parser.SpanInformation]"}, {"lineNumber": 55, "col_offset": 25, "nodeName": "model", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "model", "type": "Any"}, {"lineNumber": 65, "col_offset": 53, "nodeName": "x", "type": "Tuple[int, int]"}, {"lineNumber": 65, "col_offset": 55, "nodeName": "y", "type": "str"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "model", "type": "Any"}, {"lineNumber": 73, "col_offset": 53, "nodeName": "x", "type": "Tuple[int, int]"}, {"lineNumber": 73, "col_offset": 55, "nodeName": "y", "type": "str"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "model", "type": "Any"}, {"lineNumber": 83, "col_offset": 53, "nodeName": "x", "type": "Tuple[int, int]"}, {"lineNumber": 83, "col_offset": 55, "nodeName": "y", "type": "str"}, {"lineNumber": 84, "col_offset": 23, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 13, "col_offset": 14, "nodeName": "SpanConstituencyParserTest", "type": "Type[SpanConstituencyParserTest]"}, {"lineNumber": 13, "col_offset": 42, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 14, "col_offset": 26, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 15, "col_offset": 26, "nodeName": "FIXTURES_ROOT", "type": "pathlib.Path"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 31, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 39, "col_offset": 27, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "keys", "type": "Any"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "metrics", "type": "Any"}, {"lineNumber": 55, "col_offset": 25, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 56, "col_offset": 34, "nodeName": "SpanInformation", "type": "Type[allennlp.models.constituency_parser.SpanInformation]"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 65, "col_offset": 69, "nodeName": "tree_spans", "type": "List[Tuple[Tuple[int, int], str]]"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 73, "col_offset": 69, "nodeName": "tree_spans", "type": "List[Tuple[Tuple[int, int], str]]"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 83, "col_offset": 69, "nodeName": "tree_spans", "type": "List[Tuple[Tuple[int, int], str]]"}, {"lineNumber": 14, "col_offset": 26, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 15, "col_offset": 26, "nodeName": "self", "type": "SpanConstituencyParserTest"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "decode_output_dict", "type": "Any"}, {"lineNumber": 65, "col_offset": 61, "nodeName": "x", "type": "Tuple[int, int]"}, {"lineNumber": 65, "col_offset": 64, "nodeName": "y", "type": "str"}, {"lineNumber": 73, "col_offset": 61, "nodeName": "x", "type": "Tuple[int, int]"}, {"lineNumber": 73, "col_offset": 64, "nodeName": "y", "type": "str"}, {"lineNumber": 83, "col_offset": 61, "nodeName": "x", "type": "Tuple[int, int]"}, {"lineNumber": 83, "col_offset": 64, "nodeName": "y", "type": "str"}]