[{"lineNumber": 11, "col_offset": 22, "nodeName": "AllenNlpTestCase", "type": "Type[allennlp.common.testing.test_case.AllenNlpTestCase]"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "lstm", "type": "Any"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 22, "col_offset": 22, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 28, "col_offset": 20, "nodeName": "mask", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "num_valid", "type": "int"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "sequence_lengths", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "sorting_indices", "type": "Any"}, {"lineNumber": 34, "col_offset": 31, "nodeName": "sorting_indices", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "restoration_indices", "type": "Any"}, {"lineNumber": 35, "col_offset": 35, "nodeName": "restoration_indices", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 70, "col_offset": 36, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "original_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 98, "col_offset": 36, "nodeName": "original_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 15, "col_offset": 20, "nodeName": "LSTM", "type": "Any"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 16, "col_offset": 19, "nodeName": "RNN", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 17, "col_offset": 28, "nodeName": "_EncoderBase", "type": "Type[allennlp.modules.encoder_base._EncoderBase]"}, {"lineNumber": 19, "col_offset": 17, "nodeName": "rand", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "ones", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 32, "col_offset": 27, "nodeName": "get_lengths_from_binary_sequence_mask", "type": "Callable[[Any], Any]"}, {"lineNumber": 32, "col_offset": 65, "nodeName": "mask", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 33, "col_offset": 11, "nodeName": "_", "type": "Any"}, {"lineNumber": 33, "col_offset": 14, "nodeName": "restoration_indices", "type": "Any"}, {"lineNumber": 33, "col_offset": 35, "nodeName": "sorting_indices", "type": "Any"}, {"lineNumber": 33, "col_offset": 53, "nodeName": "sort_batch_by_length", "type": "Callable[[Any, Any], Tuple[Any, Any, Any, Any]]"}, {"lineNumber": 33, "col_offset": 74, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 33, "col_offset": 82, "nodeName": "sequence_lengths", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 38, "col_offset": 23, "nodeName": "_EncoderBase", "type": "Type[allennlp.modules.encoder_base._EncoderBase]"}, {"lineNumber": 43, "col_offset": 41, "nodeName": "sort_and_run_forward", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 44, "col_offset": 75, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 45, "col_offset": 75, "nodeName": "mask", "type": "Any"}, {"lineNumber": 46, "col_offset": 75, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 51, "col_offset": 16, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "state", "type": "Any"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "original", "type": "Any"}, {"lineNumber": 56, "col_offset": 31, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 56, "col_offset": 35, "nodeName": "states", "type": "Any"}, {"lineNumber": 56, "col_offset": 43, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "state_with_zeros", "type": "Any"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "unsorted_state", "type": "Any"}, {"lineNumber": 60, "col_offset": 16, "nodeName": "index", "type": "int"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "_get_initial_states", "type": "Callable[[int, int, Any], Any]"}, {"lineNumber": 72, "col_offset": 64, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 73, "col_offset": 64, "nodeName": "num_valid", "type": "int"}, {"lineNumber": 74, "col_offset": 64, "nodeName": "sorting_indices", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 100, "col_offset": 26, "nodeName": "_get_initial_states", "type": "Callable[[int, int, Any], Any]"}, {"lineNumber": 100, "col_offset": 64, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 101, "col_offset": 64, "nodeName": "num_valid", "type": "int"}, {"lineNumber": 102, "col_offset": 64, "nodeName": "sorting_indices", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 120, "col_offset": 15, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 193, "col_offset": 23, "nodeName": "_EncoderBase", "type": "Type[allennlp.modules.encoder_base._EncoderBase]"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "sort_and_run_forward", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 202, "col_offset": 42, "nodeName": "lstm", "type": "Any"}, {"lineNumber": 202, "col_offset": 53, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 202, "col_offset": 66, "nodeName": "mask", "type": "Any"}, {"lineNumber": 202, "col_offset": 77, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "sort_and_run_forward", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 203, "col_offset": 42, "nodeName": "rnn", "type": "Any"}, {"lineNumber": 203, "col_offset": 52, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 203, "col_offset": 65, "nodeName": "mask", "type": "Any"}, {"lineNumber": 19, "col_offset": 17, "nodeName": "torch", "type": "Any"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "torch", "type": "Any"}, {"lineNumber": 39, "col_offset": 26, "nodeName": "randn", "type": "Any"}, {"lineNumber": 39, "col_offset": 48, "nodeName": "randn", "type": "Any"}, {"lineNumber": 43, "col_offset": 41, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 43, "col_offset": 86, "nodeName": "x", "type": "Tuple[Any, ...]"}, {"lineNumber": 44, "col_offset": 75, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 45, "col_offset": 75, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 51, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 58, "col_offset": 31, "nodeName": "cat", "type": "Any"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "index_select", "type": "Any"}, {"lineNumber": 59, "col_offset": 62, "nodeName": "restoration_indices", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "_get_initial_states", "type": "Callable[[int, int, Any], Any]"}, {"lineNumber": 66, "col_offset": 53, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 66, "col_offset": 70, "nodeName": "num_valid", "type": "int"}, {"lineNumber": 66, "col_offset": 86, "nodeName": "sorting_indices", "type": "Any"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "randn", "type": "Any"}, {"lineNumber": 69, "col_offset": 50, "nodeName": "randn", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 72, "col_offset": 64, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 73, "col_offset": 64, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 74, "col_offset": 64, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 77, "col_offset": 39, "nodeName": "state", "type": "Any"}, {"lineNumber": 77, "col_offset": 48, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 79, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 80, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 81, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 82, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 89, "col_offset": 39, "nodeName": "state", "type": "Any"}, {"lineNumber": 89, "col_offset": 48, "nodeName": "correct_expanded_states", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 91, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 93, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 94, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 97, "col_offset": 27, "nodeName": "randn", "type": "Any"}, {"lineNumber": 97, "col_offset": 52, "nodeName": "randn", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 100, "col_offset": 26, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 100, "col_offset": 64, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 101, "col_offset": 64, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 102, "col_offset": 64, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 105, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 106, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 107, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 113, "col_offset": 38, "nodeName": "x", "type": "Any"}, {"lineNumber": 113, "col_offset": 43, "nodeName": "original_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 114, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 115, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 116, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 117, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 120, "col_offset": 15, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 194, "col_offset": 26, "nodeName": "permute", "type": "Any"}, {"lineNumber": 195, "col_offset": 26, "nodeName": "permute", "type": "Any"}, {"lineNumber": 197, "col_offset": 15, "nodeName": "size", "type": "Any"}, {"lineNumber": 197, "col_offset": 43, "nodeName": "Size", "type": "Any"}, {"lineNumber": 198, "col_offset": 15, "nodeName": "size", "type": "Any"}, {"lineNumber": 198, "col_offset": 43, "nodeName": "Size", "type": "Any"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 202, "col_offset": 42, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 202, "col_offset": 53, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 202, "col_offset": 66, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 203, "col_offset": 42, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 203, "col_offset": 52, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 203, "col_offset": 65, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 203, "col_offset": 76, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 14, "col_offset": 14, "nodeName": "TestEncoderBase", "type": "Type[TestEncoderBase]"}, {"lineNumber": 14, "col_offset": 31, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 39, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 39, "col_offset": 48, "nodeName": "torch", "type": "Any"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 58, "col_offset": 31, "nodeName": "torch", "type": "Any"}, {"lineNumber": 58, "col_offset": 42, "nodeName": "state", "type": "Any"}, {"lineNumber": 58, "col_offset": 49, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "state_with_zeros", "type": "Any"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 66, "col_offset": 53, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 66, "col_offset": 70, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 66, "col_offset": 86, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 69, "col_offset": 50, "nodeName": "torch", "type": "Any"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 79, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 80, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 81, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 82, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 91, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 93, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 94, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 97, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 97, "col_offset": 52, "nodeName": "torch", "type": "Any"}, {"lineNumber": 100, "col_offset": 26, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 105, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 106, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 107, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 114, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 115, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 116, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 117, "col_offset": 41, "nodeName": "data", "type": "Any"}, {"lineNumber": 120, "col_offset": 15, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 196, "col_offset": 19, "nodeName": "is_contiguous", "type": "Any"}, {"lineNumber": 196, "col_offset": 61, "nodeName": "is_contiguous", "type": "Any"}, {"lineNumber": 197, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 198, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 57, "col_offset": 24, "nodeName": "size", "type": "Any"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 62, "col_offset": 49, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 194, "col_offset": 26, "nodeName": "randn", "type": "Any"}, {"lineNumber": 195, "col_offset": 26, "nodeName": "randn", "type": "Any"}, {"lineNumber": 197, "col_offset": 15, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 198, "col_offset": 15, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 57, "col_offset": 24, "nodeName": "state", "type": "Any"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "data", "type": "Any"}, {"lineNumber": 62, "col_offset": 49, "nodeName": "data", "type": "Any"}, {"lineNumber": 79, "col_offset": 41, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 80, "col_offset": 41, "nodeName": "correct_expanded_states", "type": "List[Any]"}, {"lineNumber": 81, "col_offset": 41, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 82, "col_offset": 41, "nodeName": "correct_expanded_states", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 41, "nodeName": "returned_states", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "correct_returned_states", "type": "List[Any]"}, {"lineNumber": 93, "col_offset": 41, "nodeName": "returned_states", "type": "Any"}, {"lineNumber": 94, "col_offset": 41, "nodeName": "correct_returned_states", "type": "List[Any]"}, {"lineNumber": 105, "col_offset": 41, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 106, "col_offset": 41, "nodeName": "original_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 107, "col_offset": 41, "nodeName": "_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "original_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 114, "col_offset": 41, "nodeName": "returned_states", "type": "Any"}, {"lineNumber": 115, "col_offset": 41, "nodeName": "correct_returned_state", "type": "List[Any]"}, {"lineNumber": 116, "col_offset": 41, "nodeName": "returned_states", "type": "Any"}, {"lineNumber": 117, "col_offset": 41, "nodeName": "correct_returned_state", "type": "List[Any]"}, {"lineNumber": 194, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 195, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 196, "col_offset": 19, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 196, "col_offset": 61, "nodeName": "initial_states", "type": "Tuple[Any, Any]"}, {"lineNumber": 79, "col_offset": 41, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 81, "col_offset": 41, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 105, "col_offset": 41, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 107, "col_offset": 41, "nodeName": "encoder_base", "type": "allennlp.modules.encoder_base._EncoderBase"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "unsorted_state", "type": "Any"}, {"lineNumber": 62, "col_offset": 49, "nodeName": "original", "type": "Any"}, {"lineNumber": 79, "col_offset": 41, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 81, "col_offset": 41, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 105, "col_offset": 41, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 107, "col_offset": 41, "nodeName": "self", "type": "TestEncoderBase"}, {"lineNumber": 61, "col_offset": 67, "nodeName": "index", "type": "int"}, {"lineNumber": 62, "col_offset": 61, "nodeName": "index", "type": "int"}]