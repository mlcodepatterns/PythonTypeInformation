[{"lineNumber": 16, "col_offset": 33, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "_vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "_text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 63, "col_offset": 36, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "_phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 66, "col_offset": 29, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "_matrix_attention", "type": "allennlp.modules.matrix_attention.MatrixAttention"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "_modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 68, "col_offset": 31, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "_span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 69, "col_offset": 33, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "modeling_dim", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "span_start_input_dim", "type": "int"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "_span_start_predictor", "type": "allennlp.modules.time_distributed.TimeDistributed"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "span_end_encoding_dim", "type": "int"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "span_end_input_dim", "type": "int"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "_span_end_predictor", "type": "allennlp.modules.time_distributed.TimeDistributed"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "_loss", "type": "Any"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "encoding_dim", "type": "Any"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "question_passage_similarity", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "question_passage_attention", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "question_passage_vector", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "modeling_dim", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "span_start_input", "type": "Any"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "span_start_representation", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "encoded_span_end", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "span_end_input", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 199, "col_offset": 11, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 209, "col_offset": 15, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 89, "col_offset": 53, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "question_lengths", "type": "Dict[str, int]"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "question_input", "type": "Dict[str, Any]"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "input_array", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "passage_lengths", "type": "Dict[str, int]"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "passage_input", "type": "Dict[str, Any]"}, {"lineNumber": 243, "col_offset": 12, "nodeName": "input_array", "type": "Any"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 211, "col_offset": 71, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "max_span_probability", "type": "int"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "best_word_span", "type": "Tuple[int, int]"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "begin_span_argmax", "type": "int"}, {"lineNumber": 260, "col_offset": 88, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "embedder_params", "type": "Any"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "num_highway_layers", "type": "Any"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "phrase_layer_params", "type": "Any"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "similarity_function_params", "type": "Any"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "similarity_function", "type": "allennlp.modules.similarity_function.SimilarityFunction"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "modeling_layer_params", "type": "Any"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 355, "col_offset": 8, "nodeName": "span_end_encoder_params", "type": "Any"}, {"lineNumber": 356, "col_offset": 8, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 53, "col_offset": 30, "nodeName": "Vocabulary", "type": "Type[allennlp.data.vocabulary.Vocabulary]"}, {"lineNumber": 54, "col_offset": 38, "nodeName": "TextFieldEmbedder", "type": "Type[allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder]"}, {"lineNumber": 55, "col_offset": 37, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 56, "col_offset": 31, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 57, "col_offset": 48, "nodeName": "SimilarityFunction", "type": "Type[allennlp.modules.similarity_function.SimilarityFunction]"}, {"lineNumber": 58, "col_offset": 33, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 59, "col_offset": 35, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 64, "col_offset": 30, "nodeName": "TimeDistributed", "type": "Type[allennlp.modules.time_distributed.TimeDistributed]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 67, "col_offset": 33, "nodeName": "MatrixAttention", "type": "Type[allennlp.modules.matrix_attention.MatrixAttention]"}, {"lineNumber": 67, "col_offset": 49, "nodeName": "attention_similarity_function", "type": "allennlp.modules.similarity_function.SimilarityFunction"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 23, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 73, "col_offset": 50, "nodeName": "modeling_dim", "type": "int"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 74, "col_offset": 37, "nodeName": "TimeDistributed", "type": "Type[allennlp.modules.time_distributed.TimeDistributed]"}, {"lineNumber": 76, "col_offset": 32, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 77, "col_offset": 48, "nodeName": "span_end_encoding_dim", "type": "int"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 78, "col_offset": 35, "nodeName": "TimeDistributed", "type": "Type[allennlp.modules.time_distributed.TimeDistributed]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "CrossEntropyLoss", "type": "Any"}, {"lineNumber": 89, "col_offset": 26, "nodeName": "IntTensor", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 129, "col_offset": 27, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 130, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "size", "type": "Any"}, {"lineNumber": 132, "col_offset": 24, "nodeName": "float", "type": "Any"}, {"lineNumber": 133, "col_offset": 23, "nodeName": "float", "type": "Any"}, {"lineNumber": 135, "col_offset": 27, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 135, "col_offset": 46, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 136, "col_offset": 26, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 136, "col_offset": 45, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 137, "col_offset": 23, "nodeName": "size", "type": "Any"}, {"lineNumber": 140, "col_offset": 38, "nodeName": "_matrix_attention", "type": "Any"}, {"lineNumber": 140, "col_offset": 61, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 140, "col_offset": 78, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 142, "col_offset": 37, "nodeName": "last_dim_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 142, "col_offset": 54, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 142, "col_offset": 83, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 144, "col_offset": 35, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 144, "col_offset": 48, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 144, "col_offset": 66, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 148, "col_offset": 38, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 150, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 150, "col_offset": 52, "nodeName": "question_passage_similarity", "type": "Any"}, {"lineNumber": 150, "col_offset": 81, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 152, "col_offset": 34, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 152, "col_offset": 47, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 152, "col_offset": 64, "nodeName": "question_passage_attention", "type": "Any"}, {"lineNumber": 154, "col_offset": 40, "nodeName": "expand", "type": "Any"}, {"lineNumber": 154, "col_offset": 84, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 155, "col_offset": 84, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 156, "col_offset": 84, "nodeName": "encoding_dim", "type": "Any"}, {"lineNumber": 159, "col_offset": 31, "nodeName": "cat", "type": "Any"}, {"lineNumber": 165, "col_offset": 26, "nodeName": "_modeling_layer", "type": "Any"}, {"lineNumber": 165, "col_offset": 47, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 166, "col_offset": 23, "nodeName": "size", "type": "Any"}, {"lineNumber": 169, "col_offset": 27, "nodeName": "cat", "type": "Any"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 173, "col_offset": 27, "nodeName": "masked_softmax", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 173, "col_offset": 42, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 173, "col_offset": 61, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 176, "col_offset": 36, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 176, "col_offset": 49, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 176, "col_offset": 66, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 178, "col_offset": 37, "nodeName": "expand", "type": "Any"}, {"lineNumber": 178, "col_offset": 83, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 179, "col_offset": 83, "nodeName": "passage_length", "type": "Any"}, {"lineNumber": 180, "col_offset": 83, "nodeName": "modeling_dim", "type": "Any"}, {"lineNumber": 183, "col_offset": 34, "nodeName": "cat", "type": "Any"}, {"lineNumber": 189, "col_offset": 27, "nodeName": "_span_end_encoder", "type": "Any"}, {"lineNumber": 189, "col_offset": 50, "nodeName": "span_end_representation", "type": "Any"}, {"lineNumber": 191, "col_offset": 25, "nodeName": "cat", "type": "Any"}, {"lineNumber": 192, "col_offset": 26, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 193, "col_offset": 25, "nodeName": "masked_softmax", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 193, "col_offset": 40, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 193, "col_offset": 57, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 195, "col_offset": 44, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 196, "col_offset": 43, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 197, "col_offset": 42, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 198, "col_offset": 41, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 203, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 206, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 207, "col_offset": 34, "nodeName": "loss", "type": "Any"}, {"lineNumber": 211, "col_offset": 37, "nodeName": "TextField", "type": "Type[allennlp.data.fields.text_field.TextField]"}, {"lineNumber": 211, "col_offset": 57, "nodeName": "TextField", "type": "Type[allennlp.data.fields.text_field.TextField]"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "index", "type": "Callable[[allennlp.data.vocabulary.Vocabulary], None]"}, {"lineNumber": 231, "col_offset": 23, "nodeName": "_vocab", "type": "Any"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "index", "type": "Callable[[allennlp.data.vocabulary.Vocabulary], None]"}, {"lineNumber": 232, "col_offset": 22, "nodeName": "_vocab", "type": "Any"}, {"lineNumber": 234, "col_offset": 27, "nodeName": "get_padding_lengths", "type": "Callable[[], Dict[str, int]]"}, {"lineNumber": 235, "col_offset": 25, "nodeName": "arrays_to_variables", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 238, "col_offset": 27, "nodeName": "values", "type": "Callable"}, {"lineNumber": 241, "col_offset": 26, "nodeName": "get_padding_lengths", "type": "Callable[[], Dict[str, int]]"}, {"lineNumber": 242, "col_offset": 24, "nodeName": "arrays_to_variables", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 243, "col_offset": 27, "nodeName": "values", "type": "Callable"}, {"lineNumber": 246, "col_offset": 22, "nodeName": "forward", "type": "Any"}, {"lineNumber": 249, "col_offset": 27, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 250, "col_offset": 25, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 251, "col_offset": 20, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 251, "col_offset": 40, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 251, "col_offset": 58, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 256, "col_offset": 29, "nodeName": "best_span", "type": "Any"}, {"lineNumber": 260, "col_offset": 41, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 260, "col_offset": 71, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 265, "col_offset": 12, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 268, "col_offset": 12, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 272, "col_offset": 12, "nodeName": "j", "type": "int"}, {"lineNumber": 272, "col_offset": 15, "nodeName": "_", "type": "Any"}, {"lineNumber": 272, "col_offset": 20, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 272, "col_offset": 30, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "val1", "type": "Any"}, {"lineNumber": 274, "col_offset": 12, "nodeName": "val2", "type": "Any"}, {"lineNumber": 290, "col_offset": 32, "nodeName": "Vocabulary", "type": "Type[allennlp.data.vocabulary.Vocabulary]"}, {"lineNumber": 290, "col_offset": 52, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 319, "col_offset": 26, "nodeName": "pop", "type": "Any"}, {"lineNumber": 319, "col_offset": 60, "nodeName": "default_embedder_params", "type": "Dict[str, Union[Dict[str, Union[Dict[str, Union[List[int], int, str]], Dict[str, int], str]], Dict[str, Union[bool, str]]]]"}, {"lineNumber": 320, "col_offset": 30, "nodeName": "from_params", "type": "Callable[[Any, allennlp.data.vocabulary.Vocabulary, allennlp.common.params.Params], allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder]"}, {"lineNumber": 320, "col_offset": 60, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 320, "col_offset": 67, "nodeName": "embedder_params", "type": "Any"}, {"lineNumber": 321, "col_offset": 29, "nodeName": "pop", "type": "Any"}, {"lineNumber": 329, "col_offset": 30, "nodeName": "pop", "type": "Any"}, {"lineNumber": 329, "col_offset": 57, "nodeName": "default_phrase_layer_params", "type": "Dict[str, Union[int, bool, str]]"}, {"lineNumber": 330, "col_offset": 23, "nodeName": "from_params", "type": "Callable[[Any, allennlp.common.params.Params], allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 330, "col_offset": 50, "nodeName": "phrase_layer_params", "type": "Any"}, {"lineNumber": 337, "col_offset": 37, "nodeName": "pop", "type": "Any"}, {"lineNumber": 337, "col_offset": 71, "nodeName": "default_similarity_function_params", "type": "Dict[str, Union[int, str]]"}, {"lineNumber": 338, "col_offset": 30, "nodeName": "from_params", "type": "Callable[[Any, allennlp.common.params.Params], allennlp.modules.similarity_function.SimilarityFunction]"}, {"lineNumber": 338, "col_offset": 61, "nodeName": "similarity_function_params", "type": "Any"}, {"lineNumber": 346, "col_offset": 32, "nodeName": "pop", "type": "Any"}, {"lineNumber": 346, "col_offset": 61, "nodeName": "default_modeling_layer_params", "type": "Dict[str, Union[int, bool, str]]"}, {"lineNumber": 347, "col_offset": 25, "nodeName": "from_params", "type": "Callable[[Any, allennlp.common.params.Params], allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 347, "col_offset": 52, "nodeName": "modeling_layer_params", "type": "Any"}, {"lineNumber": 355, "col_offset": 34, "nodeName": "pop", "type": "Any"}, {"lineNumber": 355, "col_offset": 65, "nodeName": "default_span_end_encoder_params", "type": "Dict[str, Union[int, bool, str]]"}, {"lineNumber": 356, "col_offset": 27, "nodeName": "from_params", "type": "Callable[[Any, allennlp.common.params.Params], allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 356, "col_offset": 54, "nodeName": "span_end_encoder_params", "type": "Any"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "assert_empty", "type": "Callable[[str], None]"}, {"lineNumber": 357, "col_offset": 28, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 358, "col_offset": 15, "nodeName": "cls", "type": "Any"}, {"lineNumber": 64, "col_offset": 46, "nodeName": "Highway", "type": "Type[allennlp.modules.highway.Highway]"}, {"lineNumber": 65, "col_offset": 54, "nodeName": "num_highway_layers", "type": "int"}, {"lineNumber": 71, "col_offset": 23, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 73, "col_offset": 31, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 74, "col_offset": 53, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 74, "col_offset": 69, "nodeName": "span_start_input_dim", "type": "int"}, {"lineNumber": 76, "col_offset": 32, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 77, "col_offset": 29, "nodeName": "encoding_dim", "type": "int"}, {"lineNumber": 78, "col_offset": 51, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 78, "col_offset": 67, "nodeName": "span_end_input_dim", "type": "int"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "nn", "type": "Any"}, {"lineNumber": 89, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 128, "col_offset": 48, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 128, "col_offset": 74, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 129, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 47, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 129, "col_offset": 73, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 130, "col_offset": 21, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 135, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 136, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 137, "col_offset": 23, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 140, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 159, "col_offset": 31, "nodeName": "torch", "type": "Any"}, {"lineNumber": 159, "col_offset": 42, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 160, "col_offset": 42, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 165, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 166, "col_offset": 23, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 169, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 169, "col_offset": 38, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 169, "col_offset": 60, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 183, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 183, "col_offset": 45, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 184, "col_offset": 45, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 185, "col_offset": 45, "nodeName": "tiled_start_representation", "type": "Any"}, {"lineNumber": 189, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 191, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 191, "col_offset": 36, "nodeName": "final_merged_passage", "type": "Any"}, {"lineNumber": 191, "col_offset": 58, "nodeName": "encoded_span_end", "type": "Any"}, {"lineNumber": 203, "col_offset": 19, "nodeName": "_loss", "type": "Any"}, {"lineNumber": 203, "col_offset": 30, "nodeName": "span_start_logits", "type": "Any"}, {"lineNumber": 206, "col_offset": 20, "nodeName": "_loss", "type": "Any"}, {"lineNumber": 206, "col_offset": 31, "nodeName": "span_end_logits", "type": "Any"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 89, "col_offset": 58, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 89, "col_offset": 63, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "question", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 231, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "passage", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 232, "col_offset": 22, "nodeName": "self", "type": "Any"}, {"lineNumber": 234, "col_offset": 27, "nodeName": "question", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 235, "col_offset": 45, "nodeName": "as_array", "type": "Callable[[Dict[str, int]], Dict[str, numpy.ndarray]]"}, {"lineNumber": 235, "col_offset": 63, "nodeName": "question_lengths", "type": "Dict[str, int]"}, {"lineNumber": 238, "col_offset": 27, "nodeName": "question_input", "type": "Dict[str, Any]"}, {"lineNumber": 239, "col_offset": 12, "nodeName": "unsqueeze_", "type": "Any"}, {"lineNumber": 241, "col_offset": 26, "nodeName": "passage", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 242, "col_offset": 44, "nodeName": "as_array", "type": "Callable[[Dict[str, int]], Dict[str, numpy.ndarray]]"}, {"lineNumber": 242, "col_offset": 61, "nodeName": "passage_lengths", "type": "Dict[str, int]"}, {"lineNumber": 243, "col_offset": 27, "nodeName": "passage_input", "type": "Dict[str, Any]"}, {"lineNumber": 244, "col_offset": 12, "nodeName": "unsqueeze_", "type": "Any"}, {"lineNumber": 246, "col_offset": 22, "nodeName": "self", "type": "Any"}, {"lineNumber": 246, "col_offset": 44, "nodeName": "question_input", "type": "Dict[str, Any]"}, {"lineNumber": 246, "col_offset": 68, "nodeName": "passage_input", "type": "Dict[str, Any]"}, {"lineNumber": 249, "col_offset": 27, "nodeName": "data", "type": "Any"}, {"lineNumber": 250, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 251, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 254, "col_offset": 36, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 255, "col_offset": 34, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 211, "col_offset": 76, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 211, "col_offset": 81, "nodeName": "Any", "type": "Any"}, {"lineNumber": 260, "col_offset": 41, "nodeName": "torch", "type": "Any"}, {"lineNumber": 260, "col_offset": 71, "nodeName": "torch", "type": "Any"}, {"lineNumber": 262, "col_offset": 18, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 263, "col_offset": 11, "nodeName": "dim", "type": "Any"}, {"lineNumber": 265, "col_offset": 31, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 266, "col_offset": 11, "nodeName": "dim", "type": "Any"}, {"lineNumber": 268, "col_offset": 29, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 273, "col_offset": 19, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 274, "col_offset": 19, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "max_span_probability", "type": "int"}, {"lineNumber": 277, "col_offset": 16, "nodeName": "best_word_span", "type": "Tuple[int, int]"}, {"lineNumber": 278, "col_offset": 16, "nodeName": "max_span_probability", "type": "Any"}, {"lineNumber": 284, "col_offset": 15, "nodeName": "val1", "type": "Any"}, {"lineNumber": 285, "col_offset": 16, "nodeName": "val1", "type": "Any"}, {"lineNumber": 286, "col_offset": 16, "nodeName": "begin_span_argmax", "type": "int"}, {"lineNumber": 286, "col_offset": 36, "nodeName": "j", "type": "int"}, {"lineNumber": 287, "col_offset": 16, "nodeName": "best_word_span", "type": "Tuple[int, int]"}, {"lineNumber": 287, "col_offset": 35, "nodeName": "best_word_span", "type": "Tuple[int, int]"}, {"lineNumber": 260, "col_offset": 94, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 260, "col_offset": 99, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 303, "col_offset": 43, "nodeName": "GLOVE_PATH", "type": "str"}, {"lineNumber": 319, "col_offset": 26, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 320, "col_offset": 30, "nodeName": "TextFieldEmbedder", "type": "Type[allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder]"}, {"lineNumber": 321, "col_offset": 29, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 329, "col_offset": 30, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 330, "col_offset": 23, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 337, "col_offset": 37, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 338, "col_offset": 30, "nodeName": "SimilarityFunction", "type": "Type[allennlp.modules.similarity_function.SimilarityFunction]"}, {"lineNumber": 346, "col_offset": 32, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 347, "col_offset": 25, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 355, "col_offset": 34, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 356, "col_offset": 27, "nodeName": "Seq2SeqEncoder", "type": "Type[allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder]"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 357, "col_offset": 28, "nodeName": "cls", "type": "Any"}, {"lineNumber": 358, "col_offset": 25, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 359, "col_offset": 39, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 360, "col_offset": 38, "nodeName": "num_highway_layers", "type": "Any"}, {"lineNumber": 361, "col_offset": 32, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 362, "col_offset": 49, "nodeName": "similarity_function", "type": "allennlp.modules.similarity_function.SimilarityFunction"}, {"lineNumber": 363, "col_offset": 34, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 364, "col_offset": 36, "nodeName": "span_end_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 60, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 64, "col_offset": 54, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 74, "col_offset": 53, "nodeName": "nn", "type": "Any"}, {"lineNumber": 78, "col_offset": 51, "nodeName": "nn", "type": "Any"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 128, "col_offset": 48, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 47, "nodeName": "self", "type": "Any"}, {"lineNumber": 132, "col_offset": 24, "nodeName": "get_text_field_mask", "type": "Callable[[Dict[str, Any]], Any]"}, {"lineNumber": 132, "col_offset": 44, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 133, "col_offset": 23, "nodeName": "get_text_field_mask", "type": "Callable[[Dict[str, Any]], Any]"}, {"lineNumber": 133, "col_offset": 43, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 154, "col_offset": 40, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 161, "col_offset": 42, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 161, "col_offset": 60, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 162, "col_offset": 42, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 162, "col_offset": 60, "nodeName": "tiled_question_passage_vector", "type": "Any"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "_span_start_predictor", "type": "Any"}, {"lineNumber": 171, "col_offset": 55, "nodeName": "span_start_input", "type": "Any"}, {"lineNumber": 178, "col_offset": 37, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 186, "col_offset": 45, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 186, "col_offset": 63, "nodeName": "tiled_start_representation", "type": "Any"}, {"lineNumber": 192, "col_offset": 26, "nodeName": "_span_end_predictor", "type": "Any"}, {"lineNumber": 192, "col_offset": 51, "nodeName": "span_end_input", "type": "Any"}, {"lineNumber": 201, "col_offset": 15, "nodeName": "dim", "type": "Any"}, {"lineNumber": 202, "col_offset": 16, "nodeName": "_", "type": "Any"}, {"lineNumber": 202, "col_offset": 19, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 202, "col_offset": 32, "nodeName": "max", "type": "Any"}, {"lineNumber": 203, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 203, "col_offset": 49, "nodeName": "view", "type": "Any"}, {"lineNumber": 204, "col_offset": 15, "nodeName": "dim", "type": "Any"}, {"lineNumber": 205, "col_offset": 16, "nodeName": "_", "type": "Any"}, {"lineNumber": 205, "col_offset": 19, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 205, "col_offset": 30, "nodeName": "max", "type": "Any"}, {"lineNumber": 206, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 206, "col_offset": 48, "nodeName": "view", "type": "Any"}, {"lineNumber": 89, "col_offset": 63, "nodeName": "torch", "type": "Any"}, {"lineNumber": 235, "col_offset": 45, "nodeName": "question", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 239, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 242, "col_offset": 44, "nodeName": "passage", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 244, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 254, "col_offset": 36, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 255, "col_offset": 34, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 261, "col_offset": 11, "nodeName": "dim", "type": "Any"}, {"lineNumber": 261, "col_offset": 41, "nodeName": "dim", "type": "Any"}, {"lineNumber": 263, "col_offset": 11, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 264, "col_offset": 19, "nodeName": "size", "type": "Any"}, {"lineNumber": 265, "col_offset": 31, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 266, "col_offset": 11, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 267, "col_offset": 19, "nodeName": "size", "type": "Any"}, {"lineNumber": 268, "col_offset": 29, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 273, "col_offset": 36, "nodeName": "begin_span_argmax", "type": "int"}, {"lineNumber": 274, "col_offset": 34, "nodeName": "j", "type": "int"}, {"lineNumber": 276, "col_offset": 15, "nodeName": "val1", "type": "Any"}, {"lineNumber": 276, "col_offset": 22, "nodeName": "val2", "type": "Any"}, {"lineNumber": 277, "col_offset": 34, "nodeName": "begin_span_argmax", "type": "int"}, {"lineNumber": 277, "col_offset": 53, "nodeName": "j", "type": "int"}, {"lineNumber": 278, "col_offset": 39, "nodeName": "val1", "type": "Any"}, {"lineNumber": 278, "col_offset": 46, "nodeName": "val2", "type": "Any"}, {"lineNumber": 284, "col_offset": 22, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 285, "col_offset": 23, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 303, "col_offset": 43, "nodeName": "constants", "type": "module"}, {"lineNumber": 64, "col_offset": 54, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 74, "col_offset": 53, "nodeName": "torch", "type": "Any"}, {"lineNumber": 78, "col_offset": 51, "nodeName": "torch", "type": "Any"}, {"lineNumber": 148, "col_offset": 38, "nodeName": "max", "type": "Any"}, {"lineNumber": 154, "col_offset": 40, "nodeName": "question_passage_vector", "type": "Any"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 178, "col_offset": 37, "nodeName": "span_start_representation", "type": "Any"}, {"lineNumber": 192, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 201, "col_offset": 15, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 202, "col_offset": 32, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 203, "col_offset": 49, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 204, "col_offset": 15, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 205, "col_offset": 30, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 206, "col_offset": 48, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 239, "col_offset": 12, "nodeName": "input_array", "type": "Any"}, {"lineNumber": 244, "col_offset": 12, "nodeName": "input_array", "type": "Any"}, {"lineNumber": 249, "col_offset": 27, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 250, "col_offset": 25, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 261, "col_offset": 11, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 261, "col_offset": 41, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 264, "col_offset": 19, "nodeName": "span_start_probs", "type": "Any"}, {"lineNumber": 267, "col_offset": 19, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 284, "col_offset": 39, "nodeName": "j", "type": "int"}, {"lineNumber": 285, "col_offset": 40, "nodeName": "j", "type": "int"}, {"lineNumber": 148, "col_offset": 38, "nodeName": "passage_question_similarity", "type": "Any"}]