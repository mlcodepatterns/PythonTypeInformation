[{"lineNumber": 9, "col_offset": 16, "nodeName": "ModelTestCase", "type": "Type[allennlp.common.testing.model_test_case.ModelTestCase]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "spans", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "antecedent_indices", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "predicted_antecedents", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "predicted_antecedents", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "output", "type": "Dict[str, Any]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "clusters", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "gold1", "type": "List[Tuple[int, int]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "gold2", "type": "List[Tuple[int, int]]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "set_up_model", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[allennlp.models.model.Model, allennlp.models.model.Model]]"}, {"lineNumber": 16, "col_offset": 50, "nodeName": "param_file", "type": "Any"}, {"lineNumber": 20, "col_offset": 16, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 27, "col_offset": 29, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 34, "col_offset": 16, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 35, "col_offset": 29, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 35, "col_offset": 38, "nodeName": "antecedent_indices", "type": "Any"}, {"lineNumber": 38, "col_offset": 32, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 39, "col_offset": 32, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 41, "col_offset": 37, "nodeName": "spans", "type": "Any"}, {"lineNumber": 42, "col_offset": 46, "nodeName": "antecedent_indices", "type": "Any"}, {"lineNumber": 43, "col_offset": 49, "nodeName": "predicted_antecedents", "type": "Any"}, {"lineNumber": 45, "col_offset": 17, "nodeName": "decode", "type": "Callable[[Dict[str, Any]], Dict[str, Any]]"}, {"lineNumber": 45, "col_offset": 35, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "gold1", "type": "List[Tuple[int, int]]"}, {"lineNumber": 52, "col_offset": 24, "nodeName": "clusters", "type": "Any"}, {"lineNumber": 53, "col_offset": 15, "nodeName": "gold2", "type": "List[Tuple[int, int]]"}, {"lineNumber": 53, "col_offset": 24, "nodeName": "clusters", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "self", "type": "CorefTest"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "self", "type": "CorefTest"}, {"lineNumber": 16, "col_offset": 50, "nodeName": "self", "type": "CorefTest"}, {"lineNumber": 20, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 27, "col_offset": 29, "nodeName": "torch", "type": "Any"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 38, "col_offset": 32, "nodeName": "torch", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 45, "col_offset": 17, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 47, "col_offset": 19, "nodeName": "output", "type": "Dict[str, Any]"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "clusters", "type": "Any"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 11, "col_offset": 14, "nodeName": "CorefTest", "type": "Type[CorefTest]"}, {"lineNumber": 11, "col_offset": 25, "nodeName": "self", "type": "CorefTest"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "spans", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "predicted_antecedents", "type": "Any"}, {"lineNumber": 45, "col_offset": 17, "nodeName": "self", "type": "CorefTest"}]