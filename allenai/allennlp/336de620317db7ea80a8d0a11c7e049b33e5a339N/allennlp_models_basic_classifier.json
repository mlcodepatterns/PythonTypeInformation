[{"lineNumber": 15, "col_offset": 22, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "_text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 65, "col_offset": 36, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "seq2seq_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "_seq2vec_encoder", "type": "allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder"}, {"lineNumber": 72, "col_offset": 32, "nodeName": "seq2vec_encoder", "type": "allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "_feedforward", "type": "Optional[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 73, "col_offset": 28, "nodeName": "feedforward", "type": "Optional[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "dropout", "type": "float"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "_label_namespace", "type": "str"}, {"lineNumber": 83, "col_offset": 32, "nodeName": "label_namespace", "type": "str"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "num_labels", "type": "int"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "_classification_layer", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "_accuracy", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "_loss", "type": "Any"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 122, "col_offset": 11, "nodeName": "_seq2seq_encoder", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "logits", "type": "Any"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "probs", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 143, "col_offset": 15, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 9, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "predictions", "type": "Any"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 157, "col_offset": 26, "nodeName": "predictions_list", "type": "List[Any]"}, {"lineNumber": 163, "col_offset": 31, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 146, "col_offset": 62, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "metrics", "type": "Dict[str, Any]"}, {"lineNumber": 168, "col_offset": 15, "nodeName": "metrics", "type": "Dict[str, Any]"}, {"lineNumber": 166, "col_offset": 50, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "InitializerApplicator", "type": "Type[allennlp.nn.initializers.InitializerApplicator]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "regularizer", "type": "Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "_seq2seq_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 68, "col_offset": 36, "nodeName": "seq2seq_encoder", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "feedforward", "type": "Optional[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "_classifier_input_dim", "type": "int"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "_classifier_input_dim", "type": "int"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "_dropout", "type": "None"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "_num_labels", "type": "int"}, {"lineNumber": 86, "col_offset": 31, "nodeName": "num_labels", "type": "int"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "_num_labels", "type": "int"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 37, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 89, "col_offset": 53, "nodeName": "_classifier_input_dim", "type": "int"}, {"lineNumber": 89, "col_offset": 81, "nodeName": "_num_labels", "type": "int"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 90, "col_offset": 25, "nodeName": "CategoricalAccuracy", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 91, "col_offset": 21, "nodeName": "CrossEntropyLoss", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 92, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 95, "col_offset": 22, "nodeName": "TextFieldTensors", "type": "Type[Dict[str, Dict[str, Any]]]"}, {"lineNumber": 95, "col_offset": 47, "nodeName": "IntTensor", "type": "Any"}, {"lineNumber": 119, "col_offset": 24, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 119, "col_offset": 50, "nodeName": "tokens", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 120, "col_offset": 15, "nodeName": "float", "type": "Any"}, {"lineNumber": 122, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 125, "col_offset": 24, "nodeName": "_seq2vec_encoder", "type": "Any"}, {"lineNumber": 125, "col_offset": 46, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 130, "col_offset": 11, "nodeName": "_feedforward", "type": "Any"}, {"lineNumber": 131, "col_offset": 12, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 133, "col_offset": 17, "nodeName": "_classification_layer", "type": "Any"}, {"lineNumber": 133, "col_offset": 44, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "softmax", "type": "Any"}, {"lineNumber": 134, "col_offset": 44, "nodeName": "logits", "type": "Any"}, {"lineNumber": 136, "col_offset": 33, "nodeName": "logits", "type": "Any"}, {"lineNumber": 136, "col_offset": 50, "nodeName": "probs", "type": "Any"}, {"lineNumber": 138, "col_offset": 11, "nodeName": "label", "type": "Any"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 140, "col_offset": 34, "nodeName": "loss", "type": "Any"}, {"lineNumber": 151, "col_offset": 22, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "predictions_list", "type": "List[Any]"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "predictions_list", "type": "List[Any]"}, {"lineNumber": 158, "col_offset": 12, "nodeName": "label_idx", "type": "Any"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 166, "col_offset": 33, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 61, "col_offset": 21, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 75, "col_offset": 41, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 77, "col_offset": 41, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 28, "nodeName": "Dropout", "type": "Any"}, {"lineNumber": 80, "col_offset": 45, "nodeName": "dropout", "type": "float"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 31, "nodeName": "get_vocab_size", "type": "Callable[..., int]"}, {"lineNumber": 89, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 89, "col_offset": 53, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 81, "nodeName": "self", "type": "Any"}, {"lineNumber": 91, "col_offset": 21, "nodeName": "nn", "type": "Any"}, {"lineNumber": 95, "col_offset": 47, "nodeName": "torch", "type": "Any"}, {"lineNumber": 119, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 123, "col_offset": 28, "nodeName": "_seq2seq_encoder", "type": "Any"}, {"lineNumber": 123, "col_offset": 50, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 125, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 125, "col_offset": 66, "nodeName": "mask", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 128, "col_offset": 42, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 130, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 131, "col_offset": 28, "nodeName": "_feedforward", "type": "Any"}, {"lineNumber": 131, "col_offset": 46, "nodeName": "embedded_text", "type": "Any"}, {"lineNumber": 133, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "functional", "type": "Any"}, {"lineNumber": 139, "col_offset": 19, "nodeName": "_loss", "type": "Any"}, {"lineNumber": 139, "col_offset": 30, "nodeName": "logits", "type": "Any"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "_accuracy", "type": "Any"}, {"lineNumber": 141, "col_offset": 27, "nodeName": "logits", "type": "Any"}, {"lineNumber": 141, "col_offset": 35, "nodeName": "label", "type": "Any"}, {"lineNumber": 96, "col_offset": 14, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 146, "col_offset": 34, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 152, "col_offset": 11, "nodeName": "dim", "type": "Any"}, {"lineNumber": 155, "col_offset": 32, "nodeName": "predictions", "type": "Any"}, {"lineNumber": 158, "col_offset": 24, "nodeName": "item", "type": "Any"}, {"lineNumber": 159, "col_offset": 24, "nodeName": "get", "type": "Any"}, {"lineNumber": 160, "col_offset": 16, "nodeName": "label_idx", "type": "Any"}, {"lineNumber": 162, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 162, "col_offset": 27, "nodeName": "label_str", "type": "Any"}, {"lineNumber": 146, "col_offset": 67, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 146, "col_offset": 72, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 167, "col_offset": 31, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 167, "col_offset": 57, "nodeName": "reset", "type": "bool"}, {"lineNumber": 166, "col_offset": 55, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 166, "col_offset": 60, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 61, "col_offset": 30, "nodeName": "RegularizerApplicator", "type": "Type[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 75, "col_offset": 41, "nodeName": "_feedforward", "type": "Optional[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 77, "col_offset": 41, "nodeName": "_seq2vec_encoder", "type": "allennlp.modules.seq2vec_encoders.seq2vec_encoder.Seq2VecEncoder"}, {"lineNumber": 80, "col_offset": 28, "nodeName": "nn", "type": "Any"}, {"lineNumber": 88, "col_offset": 31, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 88, "col_offset": 62, "nodeName": "_label_namespace", "type": "str"}, {"lineNumber": 89, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 91, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 120, "col_offset": 15, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 120, "col_offset": 35, "nodeName": "tokens", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 123, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 123, "col_offset": 70, "nodeName": "mask", "type": "Any"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 131, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "nn", "type": "Any"}, {"lineNumber": 139, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 139, "col_offset": 38, "nodeName": "view", "type": "Any"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "torch", "type": "Any"}, {"lineNumber": 152, "col_offset": 11, "nodeName": "predictions", "type": "Any"}, {"lineNumber": 153, "col_offset": 32, "nodeName": "predictions", "type": "Any"}, {"lineNumber": 153, "col_offset": 51, "nodeName": "i", "type": "int"}, {"lineNumber": 160, "col_offset": 27, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 160, "col_offset": 31, "nodeName": "label_idx", "type": "Any"}, {"lineNumber": 162, "col_offset": 12, "nodeName": "classes", "type": "List[Any]"}, {"lineNumber": 146, "col_offset": 72, "nodeName": "torch", "type": "Any"}, {"lineNumber": 167, "col_offset": 31, "nodeName": "_accuracy", "type": "Any"}, {"lineNumber": 75, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 77, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 28, "nodeName": "torch", "type": "Any"}, {"lineNumber": 88, "col_offset": 62, "nodeName": "self", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 146, "col_offset": 39, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 146, "col_offset": 44, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 153, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 153, "col_offset": 56, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 158, "col_offset": 24, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 159, "col_offset": 24, "nodeName": "get_index_to_token_vocabulary", "type": "Any"}, {"lineNumber": 159, "col_offset": 65, "nodeName": "_label_namespace", "type": "Any"}, {"lineNumber": 167, "col_offset": 31, "nodeName": "self", "type": "Any"}, {"lineNumber": 139, "col_offset": 38, "nodeName": "long", "type": "Any"}, {"lineNumber": 146, "col_offset": 44, "nodeName": "torch", "type": "Any"}, {"lineNumber": 153, "col_offset": 62, "nodeName": "shape", "type": "Any"}, {"lineNumber": 158, "col_offset": 24, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 159, "col_offset": 24, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 159, "col_offset": 65, "nodeName": "self", "type": "Any"}, {"lineNumber": 139, "col_offset": 38, "nodeName": "label", "type": "Any"}, {"lineNumber": 153, "col_offset": 62, "nodeName": "predictions", "type": "Any"}, {"lineNumber": 159, "col_offset": 24, "nodeName": "self", "type": "Any"}]