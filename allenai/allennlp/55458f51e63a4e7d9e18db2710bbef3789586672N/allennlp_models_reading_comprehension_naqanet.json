[{"lineNumber": 18, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 22, "col_offset": 32, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 18, "col_offset": 9, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 18, "col_offset": 27, "nodeName": "__name__", "type": "str"}, {"lineNumber": 18, "col_offset": 9, "nodeName": "logging", "type": "module"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "text_embed_dim", "type": "int"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "encoding_out_dim", "type": "int"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "modeling_in_dim", "type": "int"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "_text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 59, "col_offset": 36, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "_embedding_proj_layer", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "_highway_layer", "type": "allennlp.modules.highway.Highway"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "_encoding_proj_layer", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "_phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 65, "col_offset": 29, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "_matrix_attention", "type": "allennlp.modules.matrix_attention.matrix_attention.MatrixAttention"}, {"lineNumber": 67, "col_offset": 33, "nodeName": "matrix_attention_layer", "type": "allennlp.modules.matrix_attention.matrix_attention.MatrixAttention"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "_modeling_proj_layer", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "_modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 70, "col_offset": 31, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "_passage_weights_predictor", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "_question_weights_predictor", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "_drop_metrics", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "projected_embedded_question", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "projected_embedded_passage", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "passsage_attention_over_attention", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "passage_passage_vectors", "type": "Any"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 186, "col_offset": 12, "nodeName": "_", "type": "int"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "passage_weights", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "passage_weights", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "passage_vector", "type": "Any"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "question_weights", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "question_weights", "type": "Any"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "question_vector", "type": "Any"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 501, "col_offset": 15, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 139, "col_offset": 58, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 503, "col_offset": 50, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 41, "col_offset": 30, "nodeName": "InitializerApplicator", "type": "Type[allennlp.nn.initializers.InitializerApplicator]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 44, "col_offset": 25, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 44, "col_offset": 32, "nodeName": "regularizer", "type": "Optional[allennlp.nn.regularizers.regularizer_applicator.RegularizerApplicator]"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 51, "col_offset": 39, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 54, "col_offset": 26, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 55, "col_offset": 27, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 56, "col_offset": 26, "nodeName": "get_input_dim", "type": "Callable[[], int]"}, {"lineNumber": 57, "col_offset": 27, "nodeName": "get_output_dim", "type": "Callable[[], int]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 61, "col_offset": 53, "nodeName": "text_embed_dim", "type": "int"}, {"lineNumber": 61, "col_offset": 69, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 62, "col_offset": 30, "nodeName": "Highway", "type": "Type[allennlp.modules.highway.Highway]"}, {"lineNumber": 62, "col_offset": 38, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 62, "col_offset": 55, "nodeName": "num_highway_layers", "type": "int"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 64, "col_offset": 52, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 64, "col_offset": 69, "nodeName": "encoding_in_dim", "type": "int"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 69, "col_offset": 36, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 69, "col_offset": 74, "nodeName": "modeling_in_dim", "type": "int"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 72, "col_offset": 42, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 72, "col_offset": 58, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 43, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 73, "col_offset": 59, "nodeName": "encoding_out_dim", "type": "int"}, {"lineNumber": 84, "col_offset": 40, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "_passage_span_extraction_index", "type": "int"}, {"lineNumber": 97, "col_offset": 41, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "_question_span_extraction_index", "type": "int"}, {"lineNumber": 110, "col_offset": 37, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "_addition_subtraction_index", "type": "int"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "_counting_index", "type": "int"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "DropEmAndF1", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "Dropout", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "initializer", "type": "allennlp.nn.initializers.InitializerApplicator"}, {"lineNumber": 129, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 142, "col_offset": 24, "nodeName": "float", "type": "Any"}, {"lineNumber": 143, "col_offset": 23, "nodeName": "float", "type": "Any"}, {"lineNumber": 144, "col_offset": 28, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 145, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 146, "col_offset": 28, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 147, "col_offset": 27, "nodeName": "_highway_layer", "type": "Any"}, {"lineNumber": 149, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 151, "col_offset": 38, "nodeName": "_encoding_proj_layer", "type": "Any"}, {"lineNumber": 151, "col_offset": 64, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 152, "col_offset": 37, "nodeName": "_encoding_proj_layer", "type": "Any"}, {"lineNumber": 152, "col_offset": 63, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 154, "col_offset": 27, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 155, "col_offset": 26, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 158, "col_offset": 38, "nodeName": "_matrix_attention", "type": "Any"}, {"lineNumber": 158, "col_offset": 61, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 158, "col_offset": 78, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 160, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 160, "col_offset": 52, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 161, "col_offset": 52, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 164, "col_offset": 35, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 164, "col_offset": 53, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 164, "col_offset": 71, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 167, "col_offset": 37, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 168, "col_offset": 52, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 172, "col_offset": 44, "nodeName": "bmm", "type": "Any"}, {"lineNumber": 172, "col_offset": 54, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 172, "col_offset": 82, "nodeName": "question_passage_attention", "type": "Any"}, {"lineNumber": 174, "col_offset": 34, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 174, "col_offset": 52, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 174, "col_offset": 69, "nodeName": "passsage_attention_over_attention", "type": "Any"}, {"lineNumber": 177, "col_offset": 43, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 186, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 193, "col_offset": 26, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 194, "col_offset": 26, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 194, "col_offset": 41, "nodeName": "passage_weights", "type": "Any"}, {"lineNumber": 194, "col_offset": 58, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 195, "col_offset": 25, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 195, "col_offset": 68, "nodeName": "passage_weights", "type": "Any"}, {"lineNumber": 198, "col_offset": 27, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 199, "col_offset": 27, "nodeName": "masked_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 199, "col_offset": 42, "nodeName": "question_weights", "type": "Any"}, {"lineNumber": 199, "col_offset": 60, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "weighted_sum", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 200, "col_offset": 44, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 200, "col_offset": 62, "nodeName": "question_weights", "type": "Any"}, {"lineNumber": 206, "col_offset": 12, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "best_answer_ability", "type": "Any"}, {"lineNumber": 209, "col_offset": 25, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 211, "col_offset": 12, "nodeName": "count_number_logits", "type": "Any"}, {"lineNumber": 212, "col_offset": 12, "nodeName": "count_number_log_probs", "type": "Any"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "best_count_number", "type": "Any"}, {"lineNumber": 221, "col_offset": 40, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 223, "col_offset": 12, "nodeName": "passage_for_span_start", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "passage_span_start_logits", "type": "Any"}, {"lineNumber": 227, "col_offset": 12, "nodeName": "passage_for_span_end", "type": "Any"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "passage_span_end_logits", "type": "Any"}, {"lineNumber": 231, "col_offset": 12, "nodeName": "passage_span_start_log_probs", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "passage_span_end_log_probs", "type": "Any"}, {"lineNumber": 235, "col_offset": 12, "nodeName": "passage_span_start_logits", "type": "Any"}, {"lineNumber": 236, "col_offset": 12, "nodeName": "passage_span_end_logits", "type": "Any"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "best_passage_span", "type": "Any"}, {"lineNumber": 245, "col_offset": 12, "nodeName": "best_passage_span_log_prob", "type": "Any"}, {"lineNumber": 249, "col_offset": 41, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "question_span_start_log_probs", "type": "Any"}, {"lineNumber": 260, "col_offset": 12, "nodeName": "question_span_end_log_probs", "type": "Any"}, {"lineNumber": 268, "col_offset": 12, "nodeName": "best_question_span", "type": "Any"}, {"lineNumber": 275, "col_offset": 12, "nodeName": "best_question_span_log_prob", "type": "Any"}, {"lineNumber": 279, "col_offset": 37, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 281, "col_offset": 12, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 282, "col_offset": 12, "nodeName": "number_mask", "type": "Any"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "clamped_number_indices", "type": "Any"}, {"lineNumber": 284, "col_offset": 12, "nodeName": "encoded_passage_for_numbers", "type": "Any"}, {"lineNumber": 295, "col_offset": 12, "nodeName": "number_sign_logits", "type": "Any"}, {"lineNumber": 296, "col_offset": 12, "nodeName": "number_sign_log_probs", "type": "Any"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "best_signs_for_numbers", "type": "Any"}, {"lineNumber": 301, "col_offset": 12, "nodeName": "best_signs_for_numbers", "type": "Any"}, {"lineNumber": 308, "col_offset": 12, "nodeName": "best_signs_log_probs", "type": "Any"}, {"lineNumber": 310, "col_offset": 12, "nodeName": "best_combination_log_prob", "type": "Any"}, {"lineNumber": 320, "col_offset": 12, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 322, "col_offset": 16, "nodeName": "answering_ability", "type": "Any"}, {"lineNumber": 322, "col_offset": 37, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 429, "col_offset": 11, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 432, "col_offset": 12, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 433, "col_offset": 12, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 434, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 498, "col_offset": 56, "nodeName": "passage_question_attention", "type": "Any"}, {"lineNumber": 499, "col_offset": 45, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 500, "col_offset": 44, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 503, "col_offset": 33, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 504, "col_offset": 8, "nodeName": "exact_match", "type": "Any"}, {"lineNumber": 504, "col_offset": 21, "nodeName": "f1_score", "type": "Any"}, {"lineNumber": 504, "col_offset": 32, "nodeName": "get_metric", "type": "Any"}, {"lineNumber": 504, "col_offset": 62, "nodeName": "reset", "type": "bool"}, {"lineNumber": 505, "col_offset": 22, "nodeName": "exact_match", "type": "Any"}, {"lineNumber": 505, "col_offset": 41, "nodeName": "f1_score", "type": "Any"}, {"lineNumber": 43, "col_offset": 38, "nodeName": "List", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "text_field_embedder", "type": "allennlp.modules.text_field_embedders.text_field_embedder.TextFieldEmbedder"}, {"lineNumber": 54, "col_offset": 26, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 55, "col_offset": 27, "nodeName": "phrase_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 56, "col_offset": 26, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 57, "col_offset": 27, "nodeName": "modeling_layer", "type": "allennlp.modules.seq2seq_encoders.seq2seq_encoder.Seq2SeqEncoder"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "nn", "type": "Any"}, {"lineNumber": 69, "col_offset": 36, "nodeName": "nn", "type": "Any"}, {"lineNumber": 69, "col_offset": 52, "nodeName": "encoding_out_dim", "type": "int"}, {"lineNumber": 72, "col_offset": 42, "nodeName": "nn", "type": "Any"}, {"lineNumber": 73, "col_offset": 43, "nodeName": "nn", "type": "Any"}, {"lineNumber": 75, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 76, "col_offset": 45, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 84, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 50, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 86, "col_offset": 49, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 91, "col_offset": 47, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 97, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 98, "col_offset": 51, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 99, "col_offset": 50, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 104, "col_offset": 48, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 110, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 111, "col_offset": 47, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 112, "col_offset": 42, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 119, "col_offset": 35, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 120, "col_offset": 43, "nodeName": "FeedForward", "type": "Type[allennlp.modules.feedforward.FeedForward]"}, {"lineNumber": 120, "col_offset": 55, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "nn", "type": "Any"}, {"lineNumber": 127, "col_offset": 43, "nodeName": "dropout_prob", "type": "float"}, {"lineNumber": 139, "col_offset": 26, "nodeName": "List", "type": "Any"}, {"lineNumber": 144, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 144, "col_offset": 42, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 144, "col_offset": 68, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 145, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 145, "col_offset": 41, "nodeName": "_text_field_embedder", "type": "Any"}, {"lineNumber": 145, "col_offset": 67, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 146, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 146, "col_offset": 48, "nodeName": "_embedding_proj_layer", "type": "Any"}, {"lineNumber": 146, "col_offset": 75, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 147, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 147, "col_offset": 47, "nodeName": "_embedding_proj_layer", "type": "Any"}, {"lineNumber": 147, "col_offset": 74, "nodeName": "embedded_passage", "type": "Any"}, {"lineNumber": 149, "col_offset": 21, "nodeName": "embedded_question", "type": "Any"}, {"lineNumber": 151, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 152, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 154, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 154, "col_offset": 41, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 154, "col_offset": 60, "nodeName": "projected_embedded_question", "type": "Any"}, {"lineNumber": 154, "col_offset": 89, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 155, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 155, "col_offset": 40, "nodeName": "_phrase_layer", "type": "Any"}, {"lineNumber": 155, "col_offset": 59, "nodeName": "projected_embedded_passage", "type": "Any"}, {"lineNumber": 155, "col_offset": 87, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 158, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 164, "col_offset": 35, "nodeName": "util", "type": "module"}, {"lineNumber": 167, "col_offset": 52, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 172, "col_offset": 44, "nodeName": "torch", "type": "Any"}, {"lineNumber": 174, "col_offset": 34, "nodeName": "util", "type": "module"}, {"lineNumber": 177, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 178, "col_offset": 16, "nodeName": "cat", "type": "Any"}, {"lineNumber": 185, "col_offset": 32, "nodeName": "_modeling_proj_layer", "type": "Any"}, {"lineNumber": 185, "col_offset": 58, "nodeName": "merged_passage_attention_vectors", "type": "Any"}, {"lineNumber": 187, "col_offset": 30, "nodeName": "_dropout", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 188, "col_offset": 40, "nodeName": "modeled_passage", "type": "Any"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 195, "col_offset": 25, "nodeName": "util", "type": "module"}, {"lineNumber": 195, "col_offset": 43, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "util", "type": "module"}, {"lineNumber": 202, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 202, "col_offset": 15, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 205, "col_offset": 16, "nodeName": "_answer_ability_predictor", "type": "Any"}, {"lineNumber": 206, "col_offset": 39, "nodeName": "log_softmax", "type": "Any"}, {"lineNumber": 206, "col_offset": 71, "nodeName": "answer_ability_logits", "type": "Any"}, {"lineNumber": 207, "col_offset": 34, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 207, "col_offset": 47, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 209, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 211, "col_offset": 34, "nodeName": "_count_number_predictor", "type": "Any"}, {"lineNumber": 211, "col_offset": 63, "nodeName": "passage_vector", "type": "Any"}, {"lineNumber": 212, "col_offset": 37, "nodeName": "log_softmax", "type": "Any"}, {"lineNumber": 212, "col_offset": 69, "nodeName": "count_number_logits", "type": "Any"}, {"lineNumber": 215, "col_offset": 32, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 215, "col_offset": 45, "nodeName": "count_number_log_probs", "type": "Any"}, {"lineNumber": 217, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 219, "col_offset": 16, "nodeName": "best_count_log_prob", "type": "Any"}, {"lineNumber": 221, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 223, "col_offset": 37, "nodeName": "cat", "type": "Any"}, {"lineNumber": 225, "col_offset": 40, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 227, "col_offset": 35, "nodeName": "cat", "type": "Any"}, {"lineNumber": 229, "col_offset": 38, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 231, "col_offset": 43, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 231, "col_offset": 67, "nodeName": "passage_span_start_logits", "type": "Any"}, {"lineNumber": 231, "col_offset": 94, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 232, "col_offset": 41, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 232, "col_offset": 65, "nodeName": "passage_span_end_logits", "type": "Any"}, {"lineNumber": 232, "col_offset": 90, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 235, "col_offset": 40, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 235, "col_offset": 67, "nodeName": "passage_span_start_logits", "type": "Any"}, {"lineNumber": 235, "col_offset": 94, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 236, "col_offset": 38, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 236, "col_offset": 65, "nodeName": "passage_span_end_logits", "type": "Any"}, {"lineNumber": 236, "col_offset": 90, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 238, "col_offset": 32, "nodeName": "get_best_span", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 238, "col_offset": 46, "nodeName": "passage_span_start_logits", "type": "Any"}, {"lineNumber": 238, "col_offset": 73, "nodeName": "passage_span_end_logits", "type": "Any"}, {"lineNumber": 241, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 243, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 245, "col_offset": 41, "nodeName": "best_passage_start_log_probs", "type": "Any"}, {"lineNumber": 245, "col_offset": 72, "nodeName": "best_passage_end_log_probs", "type": "Any"}, {"lineNumber": 247, "col_offset": 16, "nodeName": "best_passage_span_log_prob", "type": "Any"}, {"lineNumber": 249, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 252, "col_offset": 16, "nodeName": "cat", "type": "Any"}, {"lineNumber": 255, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 258, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 259, "col_offset": 44, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 259, "col_offset": 68, "nodeName": "question_span_start_logits", "type": "Any"}, {"lineNumber": 259, "col_offset": 96, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 260, "col_offset": 42, "nodeName": "masked_log_softmax", "type": "Callable[..., Any]"}, {"lineNumber": 260, "col_offset": 66, "nodeName": "question_span_end_logits", "type": "Any"}, {"lineNumber": 260, "col_offset": 92, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 264, "col_offset": 16, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 264, "col_offset": 43, "nodeName": "question_span_start_logits", "type": "Any"}, {"lineNumber": 264, "col_offset": 71, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 266, "col_offset": 16, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 266, "col_offset": 43, "nodeName": "question_span_end_logits", "type": "Any"}, {"lineNumber": 266, "col_offset": 69, "nodeName": "question_mask", "type": "Any"}, {"lineNumber": 268, "col_offset": 33, "nodeName": "get_best_span", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 268, "col_offset": 47, "nodeName": "question_span_start_logits", "type": "Any"}, {"lineNumber": 268, "col_offset": 75, "nodeName": "question_span_end_logits", "type": "Any"}, {"lineNumber": 271, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 275, "col_offset": 42, "nodeName": "best_question_start_log_probs", "type": "Any"}, {"lineNumber": 275, "col_offset": 74, "nodeName": "best_question_end_log_probs", "type": "Any"}, {"lineNumber": 277, "col_offset": 16, "nodeName": "best_question_span_log_prob", "type": "Any"}, {"lineNumber": 279, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 281, "col_offset": 29, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 282, "col_offset": 27, "nodeName": "long", "type": "Any"}, {"lineNumber": 283, "col_offset": 37, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 283, "col_offset": 64, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 283, "col_offset": 80, "nodeName": "number_mask", "type": "Any"}, {"lineNumber": 284, "col_offset": 42, "nodeName": "cat", "type": "Any"}, {"lineNumber": 286, "col_offset": 30, "nodeName": "gather", "type": "Any"}, {"lineNumber": 287, "col_offset": 20, "nodeName": "encoded_passage_for_numbers", "type": "Any"}, {"lineNumber": 291, "col_offset": 30, "nodeName": "cat", "type": "Any"}, {"lineNumber": 295, "col_offset": 33, "nodeName": "_number_sign_predictor", "type": "Any"}, {"lineNumber": 295, "col_offset": 61, "nodeName": "encoded_numbers", "type": "Any"}, {"lineNumber": 296, "col_offset": 36, "nodeName": "log_softmax", "type": "Any"}, {"lineNumber": 296, "col_offset": 68, "nodeName": "number_sign_logits", "type": "Any"}, {"lineNumber": 299, "col_offset": 37, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 299, "col_offset": 50, "nodeName": "number_sign_log_probs", "type": "Any"}, {"lineNumber": 301, "col_offset": 37, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 301, "col_offset": 64, "nodeName": "best_signs_for_numbers", "type": "Any"}, {"lineNumber": 301, "col_offset": 88, "nodeName": "number_mask", "type": "Any"}, {"lineNumber": 308, "col_offset": 35, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 308, "col_offset": 62, "nodeName": "best_signs_log_probs", "type": "Any"}, {"lineNumber": 308, "col_offset": 84, "nodeName": "number_mask", "type": "Any"}, {"lineNumber": 310, "col_offset": 40, "nodeName": "sum", "type": "Any"}, {"lineNumber": 312, "col_offset": 16, "nodeName": "best_combination_log_prob", "type": "Any"}, {"lineNumber": 317, "col_offset": 11, "nodeName": "answer_as_passage_spans", "type": "Any"}, {"lineNumber": 317, "col_offset": 50, "nodeName": "answer_as_question_spans", "type": "Any"}, {"lineNumber": 318, "col_offset": 19, "nodeName": "answer_as_add_sub_expressions", "type": "Any"}, {"lineNumber": 318, "col_offset": 64, "nodeName": "answer_as_counts", "type": "Any"}, {"lineNumber": 322, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 420, "col_offset": 16, "nodeName": "all_log_marginal_likelihoods", "type": "Any"}, {"lineNumber": 421, "col_offset": 16, "nodeName": "all_log_marginal_likelihoods", "type": "Any"}, {"lineNumber": 422, "col_offset": 16, "nodeName": "marginal_log_likelihood", "type": "Any"}, {"lineNumber": 424, "col_offset": 16, "nodeName": "marginal_log_likelihood", "type": "Any"}, {"lineNumber": 426, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 430, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 431, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 434, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 434, "col_offset": 27, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 443, "col_offset": 16, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 494, "col_offset": 16, "nodeName": "answer_annotations", "type": "Any"}, {"lineNumber": 495, "col_offset": 19, "nodeName": "answer_annotations", "type": "Any"}, {"lineNumber": 498, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 499, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 500, "col_offset": 12, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 139, "col_offset": 63, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 139, "col_offset": 68, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 504, "col_offset": 32, "nodeName": "_drop_metrics", "type": "Any"}, {"lineNumber": 503, "col_offset": 55, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 503, "col_offset": 60, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 69, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 72, "col_offset": 42, "nodeName": "torch", "type": "Any"}, {"lineNumber": 73, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 76, "col_offset": 57, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 76, "col_offset": 76, "nodeName": "encoding_out_dim", "type": "int"}, {"lineNumber": 82, "col_offset": 65, "nodeName": "dropout_prob", "type": "float"}, {"lineNumber": 85, "col_offset": 50, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 86, "col_offset": 61, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 91, "col_offset": 59, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 98, "col_offset": 51, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 99, "col_offset": 62, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 104, "col_offset": 60, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 111, "col_offset": 47, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 112, "col_offset": 54, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 119, "col_offset": 35, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 142, "col_offset": 24, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 142, "col_offset": 49, "nodeName": "question", "type": "Dict[str, Any]"}, {"lineNumber": 143, "col_offset": 23, "nodeName": "get_text_field_mask", "type": "Callable[..., Any]"}, {"lineNumber": 143, "col_offset": 48, "nodeName": "passage", "type": "Dict[str, Any]"}, {"lineNumber": 144, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 145, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 146, "col_offset": 48, "nodeName": "self", "type": "Any"}, {"lineNumber": 147, "col_offset": 47, "nodeName": "self", "type": "Any"}, {"lineNumber": 154, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 155, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 167, "col_offset": 52, "nodeName": "passage_question_similarity", "type": "Any"}, {"lineNumber": 178, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 178, "col_offset": 27, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 178, "col_offset": 44, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 185, "col_offset": 32, "nodeName": "self", "type": "Any"}, {"lineNumber": 187, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 187, "col_offset": 44, "nodeName": "_modeling_layer", "type": "Any"}, {"lineNumber": 187, "col_offset": 91, "nodeName": "passage_mask", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 193, "col_offset": 26, "nodeName": "_passage_weights_predictor", "type": "Any"}, {"lineNumber": 198, "col_offset": 27, "nodeName": "_question_weights_predictor", "type": "Any"}, {"lineNumber": 198, "col_offset": 60, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 202, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 205, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 205, "col_offset": 47, "nodeName": "cat", "type": "Any"}, {"lineNumber": 206, "col_offset": 39, "nodeName": "functional", "type": "Any"}, {"lineNumber": 207, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 211, "col_offset": 34, "nodeName": "self", "type": "Any"}, {"lineNumber": 212, "col_offset": 37, "nodeName": "functional", "type": "Any"}, {"lineNumber": 215, "col_offset": 32, "nodeName": "torch", "type": "Any"}, {"lineNumber": 218, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 218, "col_offset": 19, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 219, "col_offset": 39, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 223, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 227, "col_offset": 35, "nodeName": "torch", "type": "Any"}, {"lineNumber": 231, "col_offset": 43, "nodeName": "util", "type": "module"}, {"lineNumber": 232, "col_offset": 41, "nodeName": "util", "type": "module"}, {"lineNumber": 235, "col_offset": 40, "nodeName": "util", "type": "module"}, {"lineNumber": 236, "col_offset": 38, "nodeName": "util", "type": "module"}, {"lineNumber": 246, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 246, "col_offset": 19, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 247, "col_offset": 46, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 252, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 252, "col_offset": 27, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 259, "col_offset": 44, "nodeName": "util", "type": "module"}, {"lineNumber": 260, "col_offset": 42, "nodeName": "util", "type": "module"}, {"lineNumber": 264, "col_offset": 16, "nodeName": "util", "type": "module"}, {"lineNumber": 266, "col_offset": 16, "nodeName": "util", "type": "module"}, {"lineNumber": 276, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 276, "col_offset": 19, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 277, "col_offset": 47, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 281, "col_offset": 29, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 283, "col_offset": 37, "nodeName": "util", "type": "module"}, {"lineNumber": 284, "col_offset": 42, "nodeName": "torch", "type": "Any"}, {"lineNumber": 286, "col_offset": 30, "nodeName": "torch", "type": "Any"}, {"lineNumber": 289, "col_offset": 20, "nodeName": "expand", "type": "Any"}, {"lineNumber": 291, "col_offset": 30, "nodeName": "torch", "type": "Any"}, {"lineNumber": 292, "col_offset": 21, "nodeName": "encoded_numbers", "type": "Any"}, {"lineNumber": 295, "col_offset": 33, "nodeName": "self", "type": "Any"}, {"lineNumber": 296, "col_offset": 36, "nodeName": "functional", "type": "Any"}, {"lineNumber": 299, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 301, "col_offset": 37, "nodeName": "util", "type": "module"}, {"lineNumber": 308, "col_offset": 35, "nodeName": "util", "type": "module"}, {"lineNumber": 310, "col_offset": 40, "nodeName": "best_signs_log_probs", "type": "Any"}, {"lineNumber": 311, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 311, "col_offset": 19, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 312, "col_offset": 45, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 323, "col_offset": 19, "nodeName": "answering_ability", "type": "Any"}, {"lineNumber": 325, "col_offset": 20, "nodeName": "gold_passage_span_starts", "type": "Any"}, {"lineNumber": 326, "col_offset": 20, "nodeName": "gold_passage_span_ends", "type": "Any"}, {"lineNumber": 329, "col_offset": 20, "nodeName": "gold_passage_span_mask", "type": "Any"}, {"lineNumber": 346, "col_offset": 20, "nodeName": "log_marginal_likelihood_for_passage_span", "type": "Any"}, {"lineNumber": 418, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 418, "col_offset": 19, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 420, "col_offset": 47, "nodeName": "stack", "type": "Any"}, {"lineNumber": 420, "col_offset": 59, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 421, "col_offset": 47, "nodeName": "all_log_marginal_likelihoods", "type": "Any"}, {"lineNumber": 421, "col_offset": 78, "nodeName": "answer_ability_log_probs", "type": "Any"}, {"lineNumber": 422, "col_offset": 42, "nodeName": "logsumexp", "type": "Callable[..., Any]"}, {"lineNumber": 422, "col_offset": 57, "nodeName": "all_log_marginal_likelihoods", "type": "Any"}, {"lineNumber": 424, "col_offset": 42, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 426, "col_offset": 36, "nodeName": "mean", "type": "Any"}, {"lineNumber": 435, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 436, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 439, "col_offset": 20, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 441, "col_offset": 20, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 446, "col_offset": 19, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 448, "col_offset": 20, "nodeName": "passage_str", "type": "Any"}, {"lineNumber": 449, "col_offset": 20, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 450, "col_offset": 20, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 451, "col_offset": 20, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 452, "col_offset": 20, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 453, "col_offset": 20, "nodeName": "predicted_answer", "type": "Any"}, {"lineNumber": 454, "col_offset": 43, "nodeName": "predicted_answer", "type": "Any"}, {"lineNumber": 492, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 493, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 493, "col_offset": 45, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 494, "col_offset": 37, "nodeName": "get", "type": "Callable"}, {"lineNumber": 139, "col_offset": 68, "nodeName": "torch", "type": "Any"}, {"lineNumber": 504, "col_offset": 32, "nodeName": "self", "type": "Any"}, {"lineNumber": 79, "col_offset": 70, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 85, "col_offset": 50, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 74, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 94, "col_offset": 72, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 98, "col_offset": 51, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 75, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 107, "col_offset": 73, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 111, "col_offset": 47, "nodeName": "self", "type": "Any"}, {"lineNumber": 115, "col_offset": 67, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 119, "col_offset": 35, "nodeName": "self", "type": "Any"}, {"lineNumber": 123, "col_offset": 68, "nodeName": "modeling_out_dim", "type": "int"}, {"lineNumber": 139, "col_offset": 31, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 142, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 143, "col_offset": 23, "nodeName": "util", "type": "module"}, {"lineNumber": 179, "col_offset": 27, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 179, "col_offset": 45, "nodeName": "passage_question_vectors", "type": "Any"}, {"lineNumber": 180, "col_offset": 27, "nodeName": "encoded_passage", "type": "Any"}, {"lineNumber": 180, "col_offset": 45, "nodeName": "passage_passage_vectors", "type": "Any"}, {"lineNumber": 187, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 187, "col_offset": 65, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 193, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 58, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 198, "col_offset": 27, "nodeName": "self", "type": "Any"}, {"lineNumber": 205, "col_offset": 47, "nodeName": "torch", "type": "Any"}, {"lineNumber": 205, "col_offset": 58, "nodeName": "passage_vector", "type": "Any"}, {"lineNumber": 205, "col_offset": 74, "nodeName": "question_vector", "type": "Any"}, {"lineNumber": 206, "col_offset": 39, "nodeName": "nn", "type": "Any"}, {"lineNumber": 212, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 217, "col_offset": 16, "nodeName": "gather", "type": "Any"}, {"lineNumber": 217, "col_offset": 29, "nodeName": "count_number_log_probs", "type": "Any"}, {"lineNumber": 218, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 223, "col_offset": 48, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 223, "col_offset": 73, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 225, "col_offset": 40, "nodeName": "_passage_span_start_predictor", "type": "Any"}, {"lineNumber": 225, "col_offset": 75, "nodeName": "passage_for_span_start", "type": "Any"}, {"lineNumber": 227, "col_offset": 46, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 227, "col_offset": 71, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 229, "col_offset": 38, "nodeName": "_passage_span_end_predictor", "type": "Any"}, {"lineNumber": 229, "col_offset": 71, "nodeName": "passage_for_span_end", "type": "Any"}, {"lineNumber": 241, "col_offset": 16, "nodeName": "gather", "type": "Any"}, {"lineNumber": 241, "col_offset": 29, "nodeName": "passage_span_start_log_probs", "type": "Any"}, {"lineNumber": 243, "col_offset": 16, "nodeName": "gather", "type": "Any"}, {"lineNumber": 243, "col_offset": 29, "nodeName": "passage_span_end_log_probs", "type": "Any"}, {"lineNumber": 246, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 253, "col_offset": 27, "nodeName": "repeat", "type": "Any"}, {"lineNumber": 255, "col_offset": 16, "nodeName": "_question_span_start_predictor", "type": "Any"}, {"lineNumber": 255, "col_offset": 52, "nodeName": "encoded_question_for_span_prediction", "type": "Any"}, {"lineNumber": 258, "col_offset": 16, "nodeName": "_question_span_end_predictor", "type": "Any"}, {"lineNumber": 258, "col_offset": 50, "nodeName": "encoded_question_for_span_prediction", "type": "Any"}, {"lineNumber": 271, "col_offset": 16, "nodeName": "gather", "type": "Any"}, {"lineNumber": 271, "col_offset": 29, "nodeName": "question_span_start_log_probs", "type": "Any"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "gather", "type": "Any"}, {"lineNumber": 273, "col_offset": 29, "nodeName": "question_span_end_log_probs", "type": "Any"}, {"lineNumber": 276, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 282, "col_offset": 27, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 284, "col_offset": 53, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 284, "col_offset": 78, "nodeName": "modeled_passage_list", "type": "List[Any]"}, {"lineNumber": 289, "col_offset": 72, "nodeName": "size", "type": "Any"}, {"lineNumber": 292, "col_offset": 38, "nodeName": "repeat", "type": "Any"}, {"lineNumber": 296, "col_offset": 36, "nodeName": "nn", "type": "Any"}, {"lineNumber": 303, "col_offset": 35, "nodeName": "gather", "type": "Any"}, {"lineNumber": 304, "col_offset": 20, "nodeName": "number_sign_log_probs", "type": "Any"}, {"lineNumber": 311, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 325, "col_offset": 47, "nodeName": "answer_as_passage_spans", "type": "Any"}, {"lineNumber": 326, "col_offset": 45, "nodeName": "answer_as_passage_spans", "type": "Any"}, {"lineNumber": 329, "col_offset": 46, "nodeName": "long", "type": "Any"}, {"lineNumber": 331, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 331, "col_offset": 51, "nodeName": "gold_passage_span_starts", "type": "Any"}, {"lineNumber": 331, "col_offset": 77, "nodeName": "gold_passage_span_mask", "type": "Any"}, {"lineNumber": 333, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 333, "col_offset": 51, "nodeName": "gold_passage_span_ends", "type": "Any"}, {"lineNumber": 333, "col_offset": 75, "nodeName": "gold_passage_span_mask", "type": "Any"}, {"lineNumber": 336, "col_offset": 24, "nodeName": "gather", "type": "Any"}, {"lineNumber": 336, "col_offset": 37, "nodeName": "passage_span_start_log_probs", "type": "Any"}, {"lineNumber": 336, "col_offset": 70, "nodeName": "clamped_gold_passage_span_starts", "type": "Any"}, {"lineNumber": 338, "col_offset": 24, "nodeName": "gather", "type": "Any"}, {"lineNumber": 338, "col_offset": 37, "nodeName": "passage_span_end_log_probs", "type": "Any"}, {"lineNumber": 338, "col_offset": 68, "nodeName": "clamped_gold_passage_span_ends", "type": "Any"}, {"lineNumber": 341, "col_offset": 24, "nodeName": "log_likelihood_for_passage_span_starts", "type": "Any"}, {"lineNumber": 341, "col_offset": 65, "nodeName": "log_likelihood_for_passage_span_ends", "type": "Any"}, {"lineNumber": 344, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 344, "col_offset": 51, "nodeName": "log_likelihood_for_passage_spans", "type": "Any"}, {"lineNumber": 344, "col_offset": 85, "nodeName": "gold_passage_span_mask", "type": "Any"}, {"lineNumber": 346, "col_offset": 63, "nodeName": "logsumexp", "type": "Callable[..., Any]"}, {"lineNumber": 346, "col_offset": 78, "nodeName": "log_likelihood_for_passage_spans", "type": "Any"}, {"lineNumber": 347, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 347, "col_offset": 56, "nodeName": "log_marginal_likelihood_for_passage_span", "type": "Any"}, {"lineNumber": 349, "col_offset": 21, "nodeName": "answering_ability", "type": "Any"}, {"lineNumber": 351, "col_offset": 20, "nodeName": "gold_question_span_starts", "type": "Any"}, {"lineNumber": 352, "col_offset": 20, "nodeName": "gold_question_span_ends", "type": "Any"}, {"lineNumber": 355, "col_offset": 20, "nodeName": "gold_question_span_mask", "type": "Any"}, {"lineNumber": 418, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 420, "col_offset": 47, "nodeName": "torch", "type": "Any"}, {"lineNumber": 422, "col_offset": 42, "nodeName": "util", "type": "module"}, {"lineNumber": 426, "col_offset": 36, "nodeName": "marginal_log_likelihood", "type": "Any"}, {"lineNumber": 435, "col_offset": 16, "nodeName": "question_tokens", "type": "List[Any]"}, {"lineNumber": 436, "col_offset": 16, "nodeName": "passage_tokens", "type": "List[Any]"}, {"lineNumber": 438, "col_offset": 19, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 438, "col_offset": 23, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 439, "col_offset": 44, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 441, "col_offset": 44, "nodeName": "answering_abilities", "type": "Any"}, {"lineNumber": 447, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 450, "col_offset": 37, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 453, "col_offset": 39, "nodeName": "passage_str", "type": "Any"}, {"lineNumber": 454, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 455, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 456, "col_offset": 21, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 458, "col_offset": 20, "nodeName": "question_str", "type": "Any"}, {"lineNumber": 459, "col_offset": 20, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 460, "col_offset": 20, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 461, "col_offset": 20, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 462, "col_offset": 20, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 463, "col_offset": 20, "nodeName": "predicted_answer", "type": "Any"}, {"lineNumber": 464, "col_offset": 43, "nodeName": "predicted_answer", "type": "Any"}, {"lineNumber": 496, "col_offset": 20, "nodeName": "_drop_metrics", "type": "Any"}, {"lineNumber": 496, "col_offset": 39, "nodeName": "predicted_answer", "type": "Any"}, {"lineNumber": 496, "col_offset": 57, "nodeName": "answer_annotations", "type": "Any"}, {"lineNumber": 80, "col_offset": 70, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 80, "col_offset": 74, "nodeName": "answering_abilities", "type": "List[str]"}, {"lineNumber": 206, "col_offset": 39, "nodeName": "torch", "type": "Any"}, {"lineNumber": 212, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 217, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 217, "col_offset": 56, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 219, "col_offset": 67, "nodeName": "_counting_index", "type": "Any"}, {"lineNumber": 225, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 229, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 241, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 241, "col_offset": 62, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 243, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 243, "col_offset": 60, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 247, "col_offset": 74, "nodeName": "_passage_span_extraction_index", "type": "Any"}, {"lineNumber": 253, "col_offset": 65, "nodeName": "size", "type": "Any"}, {"lineNumber": 255, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 258, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 271, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 271, "col_offset": 63, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 273, "col_offset": 61, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 277, "col_offset": 75, "nodeName": "_question_span_extraction_index", "type": "Any"}, {"lineNumber": 289, "col_offset": 20, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 289, "col_offset": 72, "nodeName": "encoded_passage_for_numbers", "type": "Any"}, {"lineNumber": 292, "col_offset": 76, "nodeName": "size", "type": "Any"}, {"lineNumber": 296, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 303, "col_offset": 35, "nodeName": "torch", "type": "Any"}, {"lineNumber": 304, "col_offset": 46, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 312, "col_offset": 73, "nodeName": "_addition_subtraction_index", "type": "Any"}, {"lineNumber": 331, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 333, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 336, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 338, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 344, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 346, "col_offset": 63, "nodeName": "util", "type": "module"}, {"lineNumber": 347, "col_offset": 20, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 351, "col_offset": 48, "nodeName": "answer_as_question_spans", "type": "Any"}, {"lineNumber": 352, "col_offset": 46, "nodeName": "answer_as_question_spans", "type": "Any"}, {"lineNumber": 355, "col_offset": 47, "nodeName": "long", "type": "Any"}, {"lineNumber": 357, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 357, "col_offset": 51, "nodeName": "gold_question_span_starts", "type": "Any"}, {"lineNumber": 357, "col_offset": 78, "nodeName": "gold_question_span_mask", "type": "Any"}, {"lineNumber": 359, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 359, "col_offset": 51, "nodeName": "gold_question_span_ends", "type": "Any"}, {"lineNumber": 359, "col_offset": 76, "nodeName": "gold_question_span_mask", "type": "Any"}, {"lineNumber": 362, "col_offset": 24, "nodeName": "gather", "type": "Any"}, {"lineNumber": 362, "col_offset": 37, "nodeName": "question_span_start_log_probs", "type": "Any"}, {"lineNumber": 362, "col_offset": 71, "nodeName": "clamped_gold_question_span_starts", "type": "Any"}, {"lineNumber": 364, "col_offset": 24, "nodeName": "gather", "type": "Any"}, {"lineNumber": 364, "col_offset": 37, "nodeName": "question_span_end_log_probs", "type": "Any"}, {"lineNumber": 364, "col_offset": 69, "nodeName": "clamped_gold_question_span_ends", "type": "Any"}, {"lineNumber": 367, "col_offset": 24, "nodeName": "log_likelihood_for_question_span_starts", "type": "Any"}, {"lineNumber": 367, "col_offset": 66, "nodeName": "log_likelihood_for_question_span_ends", "type": "Any"}, {"lineNumber": 370, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 370, "col_offset": 51, "nodeName": "log_likelihood_for_question_spans", "type": "Any"}, {"lineNumber": 371, "col_offset": 51, "nodeName": "gold_question_span_mask", "type": "Any"}, {"lineNumber": 376, "col_offset": 24, "nodeName": "logsumexp", "type": "Callable[..., Any]"}, {"lineNumber": 376, "col_offset": 39, "nodeName": "log_likelihood_for_question_spans", "type": "Any"}, {"lineNumber": 377, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 377, "col_offset": 56, "nodeName": "log_marginal_likelihood_for_question_span", "type": "Any"}, {"lineNumber": 379, "col_offset": 21, "nodeName": "answering_ability", "type": "Any"}, {"lineNumber": 382, "col_offset": 20, "nodeName": "gold_add_sub_mask", "type": "Any"}, {"lineNumber": 384, "col_offset": 20, "nodeName": "gold_add_sub_signs", "type": "Any"}, {"lineNumber": 386, "col_offset": 20, "nodeName": "log_likelihood_for_number_signs", "type": "Any"}, {"lineNumber": 392, "col_offset": 20, "nodeName": "log_likelihood_for_add_subs", "type": "Any"}, {"lineNumber": 397, "col_offset": 20, "nodeName": "log_marginal_likelihood_for_add_sub", "type": "Any"}, {"lineNumber": 435, "col_offset": 39, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 436, "col_offset": 38, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 438, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 439, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 441, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 448, "col_offset": 34, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 449, "col_offset": 30, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 450, "col_offset": 43, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 451, "col_offset": 35, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 452, "col_offset": 33, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 453, "col_offset": 51, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 453, "col_offset": 64, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 455, "col_offset": 45, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 455, "col_offset": 59, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 457, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 460, "col_offset": 37, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 463, "col_offset": 39, "nodeName": "question_str", "type": "Any"}, {"lineNumber": 464, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 465, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 466, "col_offset": 21, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 468, "col_offset": 20, "nodeName": "original_numbers", "type": "Any"}, {"lineNumber": 469, "col_offset": 20, "nodeName": "sign_remap", "type": "Dict[int, int]"}, {"lineNumber": 470, "col_offset": 20, "nodeName": "predicted_signs", "type": "List[int]"}, {"lineNumber": 471, "col_offset": 20, "nodeName": "result", "type": "Any"}, {"lineNumber": 472, "col_offset": 20, "nodeName": "predicted_answer", "type": "str"}, {"lineNumber": 473, "col_offset": 20, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 474, "col_offset": 20, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 475, "col_offset": 20, "nodeName": "number_positions", "type": "List[Any]"}, {"lineNumber": 483, "col_offset": 43, "nodeName": "result", "type": "Any"}, {"lineNumber": 492, "col_offset": 16, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 492, "col_offset": 50, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 493, "col_offset": 16, "nodeName": "output_dict", "type": "Dict[str, Any]"}, {"lineNumber": 494, "col_offset": 37, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 496, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 77, "col_offset": 70, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 78, "col_offset": 70, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 80, "col_offset": 74, "nodeName": "self", "type": "Any"}, {"lineNumber": 87, "col_offset": 74, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 88, "col_offset": 74, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 92, "col_offset": 72, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 93, "col_offset": 72, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 100, "col_offset": 75, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 101, "col_offset": 75, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 105, "col_offset": 73, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 106, "col_offset": 73, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 113, "col_offset": 67, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 114, "col_offset": 67, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 121, "col_offset": 68, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 122, "col_offset": 68, "nodeName": "by_name", "type": "Callable"}, {"lineNumber": 139, "col_offset": 36, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 139, "col_offset": 41, "nodeName": "Any", "type": "Any"}, {"lineNumber": 217, "col_offset": 56, "nodeName": "best_count_number", "type": "Any"}, {"lineNumber": 219, "col_offset": 67, "nodeName": "self", "type": "Any"}, {"lineNumber": 247, "col_offset": 74, "nodeName": "self", "type": "Any"}, {"lineNumber": 253, "col_offset": 27, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 253, "col_offset": 65, "nodeName": "encoded_question", "type": "Any"}, {"lineNumber": 277, "col_offset": 75, "nodeName": "self", "type": "Any"}, {"lineNumber": 289, "col_offset": 20, "nodeName": "clamped_number_indices", "type": "Any"}, {"lineNumber": 292, "col_offset": 38, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 292, "col_offset": 76, "nodeName": "encoded_numbers", "type": "Any"}, {"lineNumber": 304, "col_offset": 46, "nodeName": "best_signs_for_numbers", "type": "Any"}, {"lineNumber": 312, "col_offset": 73, "nodeName": "self", "type": "Any"}, {"lineNumber": 329, "col_offset": 46, "nodeName": "gold_passage_span_starts", "type": "Any"}, {"lineNumber": 357, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 359, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 362, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 364, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 370, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 376, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 377, "col_offset": 20, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 382, "col_offset": 41, "nodeName": "float", "type": "Any"}, {"lineNumber": 384, "col_offset": 41, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 386, "col_offset": 54, "nodeName": "gather", "type": "Any"}, {"lineNumber": 386, "col_offset": 67, "nodeName": "number_sign_log_probs", "type": "Any"}, {"lineNumber": 386, "col_offset": 93, "nodeName": "gold_add_sub_signs", "type": "Any"}, {"lineNumber": 390, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 390, "col_offset": 51, "nodeName": "log_likelihood_for_number_signs", "type": "Any"}, {"lineNumber": 392, "col_offset": 50, "nodeName": "sum", "type": "Any"}, {"lineNumber": 395, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 395, "col_offset": 51, "nodeName": "log_likelihood_for_add_subs", "type": "Any"}, {"lineNumber": 395, "col_offset": 80, "nodeName": "gold_add_sub_mask", "type": "Any"}, {"lineNumber": 397, "col_offset": 58, "nodeName": "logsumexp", "type": "Callable[..., Any]"}, {"lineNumber": 397, "col_offset": 73, "nodeName": "log_likelihood_for_add_subs", "type": "Any"}, {"lineNumber": 398, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 398, "col_offset": 56, "nodeName": "log_marginal_likelihood_for_add_sub", "type": "Any"}, {"lineNumber": 400, "col_offset": 21, "nodeName": "answering_ability", "type": "Any"}, {"lineNumber": 404, "col_offset": 20, "nodeName": "gold_count_mask", "type": "Any"}, {"lineNumber": 406, "col_offset": 20, "nodeName": "clamped_gold_counts", "type": "Any"}, {"lineNumber": 407, "col_offset": 20, "nodeName": "log_likelihood_for_counts", "type": "Any"}, {"lineNumber": 412, "col_offset": 20, "nodeName": "log_marginal_likelihood_for_count", "type": "Any"}, {"lineNumber": 435, "col_offset": 48, "nodeName": "i", "type": "int"}, {"lineNumber": 436, "col_offset": 47, "nodeName": "i", "type": "int"}, {"lineNumber": 439, "col_offset": 69, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 448, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 449, "col_offset": 39, "nodeName": "i", "type": "int"}, {"lineNumber": 458, "col_offset": 35, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 459, "col_offset": 30, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 460, "col_offset": 43, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 461, "col_offset": 35, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 462, "col_offset": 33, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 463, "col_offset": 52, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 463, "col_offset": 65, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 465, "col_offset": 45, "nodeName": "start_offset", "type": "Any"}, {"lineNumber": 465, "col_offset": 59, "nodeName": "end_offset", "type": "Any"}, {"lineNumber": 467, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 471, "col_offset": 29, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 472, "col_offset": 39, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 472, "col_offset": 43, "nodeName": "result", "type": "Any"}, {"lineNumber": 476, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 477, "col_offset": 24, "nodeName": "offset", "type": "Any"}, {"lineNumber": 477, "col_offset": 32, "nodeName": "value", "type": "Any"}, {"lineNumber": 477, "col_offset": 39, "nodeName": "sign", "type": "Any"}, {"lineNumber": 477, "col_offset": 47, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 477, "col_offset": 51, "nodeName": "number_positions", "type": "List[Any]"}, {"lineNumber": 477, "col_offset": 69, "nodeName": "original_numbers", "type": "Any"}, {"lineNumber": 477, "col_offset": 87, "nodeName": "predicted_signs", "type": "List[int]"}, {"lineNumber": 483, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 484, "col_offset": 21, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 486, "col_offset": 20, "nodeName": "predicted_count", "type": "Any"}, {"lineNumber": 487, "col_offset": 20, "nodeName": "predicted_answer", "type": "str"}, {"lineNumber": 488, "col_offset": 43, "nodeName": "predicted_count", "type": "Any"}, {"lineNumber": 492, "col_offset": 59, "nodeName": "i", "type": "int"}, {"lineNumber": 494, "col_offset": 46, "nodeName": "i", "type": "int"}, {"lineNumber": 77, "col_offset": 70, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 78, "col_offset": 70, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 87, "col_offset": 74, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 88, "col_offset": 74, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 92, "col_offset": 72, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 93, "col_offset": 72, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 100, "col_offset": 75, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 101, "col_offset": 75, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 105, "col_offset": 73, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 106, "col_offset": 73, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 113, "col_offset": 67, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 114, "col_offset": 67, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 121, "col_offset": 68, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 122, "col_offset": 68, "nodeName": "Activation", "type": "Type[allennlp.nn.activations.Activation]"}, {"lineNumber": 241, "col_offset": 62, "nodeName": "best_passage_span", "type": "Any"}, {"lineNumber": 243, "col_offset": 60, "nodeName": "best_passage_span", "type": "Any"}, {"lineNumber": 253, "col_offset": 27, "nodeName": "passage_vector", "type": "Any"}, {"lineNumber": 271, "col_offset": 63, "nodeName": "best_question_span", "type": "Any"}, {"lineNumber": 273, "col_offset": 61, "nodeName": "best_question_span", "type": "Any"}, {"lineNumber": 292, "col_offset": 38, "nodeName": "passage_vector", "type": "Any"}, {"lineNumber": 355, "col_offset": 47, "nodeName": "gold_question_span_starts", "type": "Any"}, {"lineNumber": 384, "col_offset": 41, "nodeName": "answer_as_add_sub_expressions", "type": "Any"}, {"lineNumber": 386, "col_offset": 54, "nodeName": "torch", "type": "Any"}, {"lineNumber": 390, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 390, "col_offset": 84, "nodeName": "unsqueeze", "type": "Any"}, {"lineNumber": 392, "col_offset": 50, "nodeName": "log_likelihood_for_number_signs", "type": "Any"}, {"lineNumber": 395, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 397, "col_offset": 58, "nodeName": "util", "type": "module"}, {"lineNumber": 398, "col_offset": 20, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 404, "col_offset": 39, "nodeName": "long", "type": "Any"}, {"lineNumber": 406, "col_offset": 42, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 406, "col_offset": 69, "nodeName": "answer_as_counts", "type": "Any"}, {"lineNumber": 406, "col_offset": 87, "nodeName": "gold_count_mask", "type": "Any"}, {"lineNumber": 407, "col_offset": 48, "nodeName": "gather", "type": "Any"}, {"lineNumber": 407, "col_offset": 61, "nodeName": "count_number_log_probs", "type": "Any"}, {"lineNumber": 407, "col_offset": 88, "nodeName": "clamped_gold_counts", "type": "Any"}, {"lineNumber": 410, "col_offset": 24, "nodeName": "replace_masked_values", "type": "Callable[[Any, Any, Union[float, int]], Any]"}, {"lineNumber": 410, "col_offset": 51, "nodeName": "log_likelihood_for_counts", "type": "Any"}, {"lineNumber": 410, "col_offset": 78, "nodeName": "gold_count_mask", "type": "Any"}, {"lineNumber": 412, "col_offset": 56, "nodeName": "logsumexp", "type": "Callable[..., Any]"}, {"lineNumber": 412, "col_offset": 71, "nodeName": "log_likelihood_for_counts", "type": "Any"}, {"lineNumber": 413, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 413, "col_offset": 56, "nodeName": "log_marginal_likelihood_for_count", "type": "Any"}, {"lineNumber": 416, "col_offset": 26, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 450, "col_offset": 43, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 451, "col_offset": 43, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 452, "col_offset": 41, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 458, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 459, "col_offset": 39, "nodeName": "i", "type": "int"}, {"lineNumber": 468, "col_offset": 39, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 470, "col_offset": 39, "nodeName": "sign_remap", "type": "Dict[int, int]"}, {"lineNumber": 470, "col_offset": 58, "nodeName": "it", "type": "Any"}, {"lineNumber": 473, "col_offset": 30, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 474, "col_offset": 37, "nodeName": "metadata", "type": "List[Dict[str, Any]]"}, {"lineNumber": 475, "col_offset": 40, "nodeName": "offsets", "type": "Any"}, {"lineNumber": 475, "col_offset": 59, "nodeName": "index", "type": "Any"}, {"lineNumber": 475, "col_offset": 68, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 478, "col_offset": 24, "nodeName": "append", "type": "Any"}, {"lineNumber": 479, "col_offset": 23, "nodeName": "number_indices", "type": "Any"}, {"lineNumber": 482, "col_offset": 24, "nodeName": "pop", "type": "Any"}, {"lineNumber": 485, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 486, "col_offset": 38, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 487, "col_offset": 39, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 487, "col_offset": 43, "nodeName": "predicted_count", "type": "Any"}, {"lineNumber": 488, "col_offset": 20, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 490, "col_offset": 26, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 390, "col_offset": 84, "nodeName": "number_mask", "type": "Any"}, {"lineNumber": 406, "col_offset": 42, "nodeName": "util", "type": "module"}, {"lineNumber": 407, "col_offset": 48, "nodeName": "torch", "type": "Any"}, {"lineNumber": 410, "col_offset": 24, "nodeName": "util", "type": "module"}, {"lineNumber": 412, "col_offset": 56, "nodeName": "util", "type": "module"}, {"lineNumber": 413, "col_offset": 20, "nodeName": "log_marginal_likelihood_list", "type": "List[Any]"}, {"lineNumber": 439, "col_offset": 69, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 460, "col_offset": 43, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 461, "col_offset": 43, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 462, "col_offset": 41, "nodeName": "predicted_span", "type": "Tuple[Any, ...]"}, {"lineNumber": 468, "col_offset": 48, "nodeName": "i", "type": "int"}, {"lineNumber": 470, "col_offset": 50, "nodeName": "it", "type": "Any"}, {"lineNumber": 470, "col_offset": 64, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 471, "col_offset": 34, "nodeName": "sign", "type": "Any"}, {"lineNumber": 471, "col_offset": 41, "nodeName": "number", "type": "Any"}, {"lineNumber": 473, "col_offset": 39, "nodeName": "i", "type": "int"}, {"lineNumber": 474, "col_offset": 46, "nodeName": "i", "type": "int"}, {"lineNumber": 475, "col_offset": 48, "nodeName": "index", "type": "Any"}, {"lineNumber": 478, "col_offset": 63, "nodeName": "offset", "type": "Any"}, {"lineNumber": 478, "col_offset": 80, "nodeName": "value", "type": "Any"}, {"lineNumber": 478, "col_offset": 95, "nodeName": "sign", "type": "Any"}, {"lineNumber": 382, "col_offset": 41, "nodeName": "sum", "type": "Any"}, {"lineNumber": 404, "col_offset": 39, "nodeName": "answer_as_counts", "type": "Any"}, {"lineNumber": 416, "col_offset": 71, "nodeName": "answering_ability", "type": "Any"}, {"lineNumber": 450, "col_offset": 43, "nodeName": "detach", "type": "Any"}, {"lineNumber": 471, "col_offset": 52, "nodeName": "sign", "type": "Any"}, {"lineNumber": 471, "col_offset": 58, "nodeName": "number", "type": "Any"}, {"lineNumber": 471, "col_offset": 68, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 471, "col_offset": 72, "nodeName": "predicted_signs", "type": "List[int]"}, {"lineNumber": 471, "col_offset": 89, "nodeName": "original_numbers", "type": "Any"}, {"lineNumber": 478, "col_offset": 24, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 482, "col_offset": 24, "nodeName": "answer_json", "type": "Dict[str, Any]"}, {"lineNumber": 486, "col_offset": 38, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 490, "col_offset": 68, "nodeName": "predicted_ability_str", "type": "Any"}, {"lineNumber": 382, "col_offset": 41, "nodeName": "answer_as_add_sub_expressions", "type": "Any"}, {"lineNumber": 439, "col_offset": 69, "nodeName": "detach", "type": "Any"}, {"lineNumber": 460, "col_offset": 43, "nodeName": "detach", "type": "Any"}, {"lineNumber": 470, "col_offset": 64, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 450, "col_offset": 43, "nodeName": "best_passage_span", "type": "Any"}, {"lineNumber": 486, "col_offset": 38, "nodeName": "detach", "type": "Any"}, {"lineNumber": 439, "col_offset": 69, "nodeName": "best_answer_ability", "type": "Any"}, {"lineNumber": 450, "col_offset": 61, "nodeName": "i", "type": "int"}, {"lineNumber": 460, "col_offset": 43, "nodeName": "best_question_span", "type": "Any"}, {"lineNumber": 470, "col_offset": 64, "nodeName": "detach", "type": "Any"}, {"lineNumber": 439, "col_offset": 89, "nodeName": "i", "type": "int"}, {"lineNumber": 460, "col_offset": 62, "nodeName": "i", "type": "int"}, {"lineNumber": 486, "col_offset": 38, "nodeName": "best_count_number", "type": "Any"}, {"lineNumber": 470, "col_offset": 64, "nodeName": "best_signs_for_numbers", "type": "Any"}, {"lineNumber": 486, "col_offset": 56, "nodeName": "i", "type": "int"}, {"lineNumber": 470, "col_offset": 87, "nodeName": "i", "type": "int"}]