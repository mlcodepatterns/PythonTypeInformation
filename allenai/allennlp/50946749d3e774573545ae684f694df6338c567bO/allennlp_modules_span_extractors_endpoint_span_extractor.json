[{"lineNumber": 13, "col_offset": 28, "nodeName": "SpanExtractor", "type": "Type[allennlp.modules.span_extractors.span_extractor.SpanExtractor]"}, {"lineNumber": 63, "col_offset": 31, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 66, "col_offset": 32, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "_input_dim", "type": "int"}, {"lineNumber": 50, "col_offset": 26, "nodeName": "input_dim", "type": "int"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "_combination", "type": "str"}, {"lineNumber": 51, "col_offset": 28, "nodeName": "combination", "type": "str"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "_num_width_buckets", "type": "int"}, {"lineNumber": 52, "col_offset": 34, "nodeName": "num_width_buckets", "type": "int"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "_use_bucket_widths", "type": "bool"}, {"lineNumber": 53, "col_offset": 34, "nodeName": "use_bucket_widths", "type": "bool"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "_input_dim", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "start_embeddings", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "end_embeddings", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "combined_tensors", "type": "Any"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "combined_tensors", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "input_dim", "type": "int"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "combination", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "num_width_buckets", "type": "int"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "span_width_embedding_dim", "type": "int"}, {"lineNumber": 48, "col_offset": 36, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "_span_width_embedding", "type": "Any"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "get_combined_dim", "type": "Callable[[str, List[int]], int]"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "_combination", "type": "Any"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "span_starts", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "span_ends", "type": "Any"}, {"lineNumber": 75, "col_offset": 27, "nodeName": "batched_index_select", "type": "Callable[..., Any]"}, {"lineNumber": 75, "col_offset": 48, "nodeName": "sequence_tensor", "type": "Any"}, {"lineNumber": 75, "col_offset": 65, "nodeName": "span_starts", "type": "Any"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "batched_index_select", "type": "Callable[..., Any]"}, {"lineNumber": 76, "col_offset": 46, "nodeName": "sequence_tensor", "type": "Any"}, {"lineNumber": 76, "col_offset": 63, "nodeName": "span_ends", "type": "Any"}, {"lineNumber": 78, "col_offset": 27, "nodeName": "combine_tensors", "type": "Callable[[str, List[Any]], Any]"}, {"lineNumber": 78, "col_offset": 43, "nodeName": "_combination", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "_span_width_embedding", "type": "Any"}, {"lineNumber": 81, "col_offset": 15, "nodeName": "_use_bucket_widths", "type": "Any"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "span_width_embeddings", "type": "Any"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 94, "col_offset": 20, "nodeName": "pop_int", "type": "Callable[..., int]"}, {"lineNumber": 95, "col_offset": 22, "nodeName": "pop", "type": "Any"}, {"lineNumber": 96, "col_offset": 28, "nodeName": "pop_int", "type": "Callable[..., int]"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "pop_int", "type": "Callable[..., int]"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "EndpointSpanExtractor", "type": "Any"}, {"lineNumber": 55, "col_offset": 11, "nodeName": "num_width_buckets", "type": "int"}, {"lineNumber": 55, "col_offset": 45, "nodeName": "span_width_embedding_dim", "type": "int"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 56, "col_offset": 41, "nodeName": "Embedding", "type": "Any"}, {"lineNumber": 56, "col_offset": 51, "nodeName": "num_width_buckets", "type": "int"}, {"lineNumber": 56, "col_offset": 70, "nodeName": "span_width_embedding_dim", "type": "int"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "self", "type": "Any"}, {"lineNumber": 67, "col_offset": 52, "nodeName": "_input_dim", "type": "Any"}, {"lineNumber": 67, "col_offset": 69, "nodeName": "_input_dim", "type": "Any"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "torch", "type": "Any"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 74, "col_offset": 34, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 74, "col_offset": 56, "nodeName": "index", "type": "Any"}, {"lineNumber": 78, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 78, "col_offset": 63, "nodeName": "start_embeddings", "type": "Any"}, {"lineNumber": 78, "col_offset": 81, "nodeName": "end_embeddings", "type": "Any"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 16, "nodeName": "span_widths", "type": "Any"}, {"lineNumber": 87, "col_offset": 36, "nodeName": "_span_width_embedding", "type": "Any"}, {"lineNumber": 87, "col_offset": 63, "nodeName": "span_widths", "type": "Any"}, {"lineNumber": 88, "col_offset": 19, "nodeName": "cat", "type": "Any"}, {"lineNumber": 94, "col_offset": 20, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 95, "col_offset": 22, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 96, "col_offset": 28, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 99, "col_offset": 47, "nodeName": "input_dim", "type": "int"}, {"lineNumber": 100, "col_offset": 49, "nodeName": "combination", "type": "Any"}, {"lineNumber": 101, "col_offset": 55, "nodeName": "num_width_buckets", "type": "int"}, {"lineNumber": 102, "col_offset": 62, "nodeName": "span_width_embedding_dim", "type": "int"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 67, "col_offset": 52, "nodeName": "self", "type": "Any"}, {"lineNumber": 67, "col_offset": 69, "nodeName": "self", "type": "Any"}, {"lineNumber": 74, "col_offset": 34, "nodeName": "index", "type": "Any"}, {"lineNumber": 74, "col_offset": 65, "nodeName": "split", "type": "Any"}, {"lineNumber": 82, "col_offset": 30, "nodeName": "bucket_values", "type": "Callable[..., Any]"}, {"lineNumber": 85, "col_offset": 30, "nodeName": "span_ends", "type": "Any"}, {"lineNumber": 85, "col_offset": 42, "nodeName": "span_starts", "type": "Any"}, {"lineNumber": 87, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 19, "nodeName": "torch", "type": "Any"}, {"lineNumber": 88, "col_offset": 30, "nodeName": "combined_tensors", "type": "Any"}, {"lineNumber": 88, "col_offset": 48, "nodeName": "span_width_embeddings", "type": "Any"}, {"lineNumber": 74, "col_offset": 65, "nodeName": "indicies", "type": "Any"}, {"lineNumber": 82, "col_offset": 44, "nodeName": "span_ends", "type": "Any"}, {"lineNumber": 82, "col_offset": 56, "nodeName": "span_starts", "type": "Any"}, {"lineNumber": 83, "col_offset": 62, "nodeName": "_num_width_buckets", "type": "Any"}, {"lineNumber": 83, "col_offset": 62, "nodeName": "self", "type": "Any"}]