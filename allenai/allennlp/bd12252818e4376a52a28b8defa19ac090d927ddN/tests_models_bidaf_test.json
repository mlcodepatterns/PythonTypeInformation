[{"lineNumber": 17, "col_offset": 37, "nodeName": "AllenNlpTestCase", "type": "Type[allennlp.common.testing.test_case.AllenNlpTestCase]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "GLOVE_PATH", "type": "str"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 34, "col_offset": 21, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 36, "col_offset": 23, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "small_model", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "training_arrays", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "question", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "constants", "type": "module"}, {"lineNumber": 22, "col_offset": 24, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 32, "col_offset": 18, "nodeName": "read", "type": "Any"}, {"lineNumber": 33, "col_offset": 16, "nodeName": "from_dataset", "type": "Callable[..., allennlp.data.vocabulary.Vocabulary]"}, {"lineNumber": 33, "col_offset": 40, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "index_instances", "type": "Any"}, {"lineNumber": 35, "col_offset": 32, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 40, "col_offset": 21, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 40, "col_offset": 60, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 42, "col_offset": 23, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 92, "col_offset": 27, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 92, "col_offset": 66, "nodeName": "vocab", "type": "allennlp.data.vocabulary.Vocabulary"}, {"lineNumber": 92, "col_offset": 78, "nodeName": "small_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 95, "col_offset": 26, "nodeName": "arrays_to_variables", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "forward", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "ensure_model_can_train_save_and_load", "type": "Callable[..., Tuple[allennlp.models.model.Model, allennlp.models.model.Model]]"}, {"lineNumber": 99, "col_offset": 50, "nodeName": "small_model", "type": "Any"}, {"lineNumber": 99, "col_offset": 68, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "TextField", "type": "Type[allennlp.data.fields.text_field.TextField]"}, {"lineNumber": 105, "col_offset": 18, "nodeName": "TextField", "type": "Type[allennlp.data.fields.text_field.TextField]"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "predict_span", "type": "Any"}, {"lineNumber": 107, "col_offset": 46, "nodeName": "question", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 107, "col_offset": 56, "nodeName": "passage", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 112, "col_offset": 20, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 112, "col_offset": 31, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 113, "col_offset": 15, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 114, "col_offset": 15, "nodeName": "span_start", "type": "Any"}, {"lineNumber": 114, "col_offset": 28, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 115, "col_offset": 15, "nodeName": "span_end", "type": "Any"}, {"lineNumber": 122, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 123, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 124, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 124, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 129, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 131, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 131, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 136, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 138, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 138, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "log", "type": "Any"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "log", "type": "Any"}, {"lineNumber": 146, "col_offset": 25, "nodeName": "_get_best_span", "type": "Any"}, {"lineNumber": 146, "col_offset": 67, "nodeName": "span_begin_probs", "type": "Any"}, {"lineNumber": 146, "col_offset": 85, "nodeName": "span_end_probs", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 150, "col_offset": 17, "nodeName": "from_file", "type": "Callable[[str], allennlp.common.params.Params]"}, {"lineNumber": 151, "col_offset": 16, "nodeName": "load", "type": "Callable[..., allennlp.models.model.Model]"}, {"lineNumber": 151, "col_offset": 27, "nodeName": "params", "type": "allennlp.common.params.Params"}, {"lineNumber": 153, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 153, "col_offset": 26, "nodeName": "model", "type": "allennlp.models.model.Model"}, {"lineNumber": 153, "col_offset": 33, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 33, "col_offset": 16, "nodeName": "Vocabulary", "type": "Type[allennlp.data.vocabulary.Vocabulary]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 37, "col_offset": 41, "nodeName": "SingleIdTokenIndexer", "type": "Any"}, {"lineNumber": 38, "col_offset": 51, "nodeName": "TokenCharactersIndexer", "type": "Any"}, {"lineNumber": 40, "col_offset": 21, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 40, "col_offset": 60, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 40, "col_offset": 72, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 92, "col_offset": 27, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 92, "col_offset": 66, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 95, "col_offset": 46, "nodeName": "as_array_dict", "type": "Any"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "model", "type": "Any"}, {"lineNumber": 96, "col_offset": 33, "nodeName": "training_arrays", "type": "Dict[str, Any]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 99, "col_offset": 50, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 99, "col_offset": 68, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 104, "col_offset": 69, "nodeName": "token_indexers", "type": "Dict[str, Any]"}, {"lineNumber": 105, "col_offset": 59, "nodeName": "STOP_TOKEN", "type": "Any"}, {"lineNumber": 106, "col_offset": 43, "nodeName": "token_indexers", "type": "Dict[str, Any]"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "model", "type": "Any"}, {"lineNumber": 109, "col_offset": 28, "nodeName": "sum", "type": "Any"}, {"lineNumber": 110, "col_offset": 28, "nodeName": "sum", "type": "Any"}, {"lineNumber": 115, "col_offset": 26, "nodeName": "sequence_length", "type": "Callable[[], int]"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 125, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 132, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 139, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 146, "col_offset": 25, "nodeName": "BidirectionalAttentionFlow", "type": "Any"}, {"lineNumber": 147, "col_offset": 28, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 150, "col_offset": 17, "nodeName": "Params", "type": "Type[allennlp.common.params.Params]"}, {"lineNumber": 151, "col_offset": 16, "nodeName": "Model", "type": "Type[allennlp.models.model.Model]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 19, "col_offset": 14, "nodeName": "BidirectionalAttentionFlowTest", "type": "Type[BidirectionalAttentionFlowTest]"}, {"lineNumber": 19, "col_offset": 46, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 32, "col_offset": 18, "nodeName": "from_params", "type": "Any"}, {"lineNumber": 32, "col_offset": 42, "nodeName": "reader_params", "type": "allennlp.common.params.Params"}, {"lineNumber": 95, "col_offset": 46, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 104, "col_offset": 69, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 105, "col_offset": 59, "nodeName": "SquadReader", "type": "Any"}, {"lineNumber": 106, "col_offset": 43, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 109, "col_offset": 28, "nodeName": "numpy", "type": "module"}, {"lineNumber": 109, "col_offset": 38, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 110, "col_offset": 28, "nodeName": "numpy", "type": "module"}, {"lineNumber": 110, "col_offset": 38, "nodeName": "output_dict", "type": "Any"}, {"lineNumber": 115, "col_offset": 26, "nodeName": "passage", "type": "allennlp.data.fields.text_field.TextField"}, {"lineNumber": 122, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 123, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 125, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 129, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 132, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 136, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 139, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 147, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 32, "col_offset": 18, "nodeName": "SquadReader", "type": "Any"}, {"lineNumber": 46, "col_offset": 51, "nodeName": "GLOVE_PATH", "type": "str"}, {"lineNumber": 95, "col_offset": 46, "nodeName": "self", "type": "BidirectionalAttentionFlowTest"}, {"lineNumber": 122, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 123, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 125, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 129, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 130, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 132, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 136, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 137, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 139, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 144, "col_offset": 36, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 145, "col_offset": 34, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 147, "col_offset": 28, "nodeName": "begin_end_idxs", "type": "Any"}, {"lineNumber": 46, "col_offset": 51, "nodeName": "constants", "type": "module"}, {"lineNumber": 122, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 123, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 129, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 130, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 136, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 137, "col_offset": 34, "nodeName": "torch", "type": "Any"}, {"lineNumber": 144, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 145, "col_offset": 34, "nodeName": "torch", "type": "Any"}]