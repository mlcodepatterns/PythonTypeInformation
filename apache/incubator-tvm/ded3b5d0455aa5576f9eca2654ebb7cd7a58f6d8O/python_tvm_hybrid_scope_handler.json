[{"lineNumber": 35, "col_offset": 0, "nodeName": "Assert", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "let", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 57, "col_offset": 0, "nodeName": "attr", "type": "Callable[[Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 53, "col_offset": 21, "nodeName": "buffer_bounds", "type": "Any"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "ana", "type": "Any"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "extent", "type": "Any"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "loop_var_name", "type": "Any"}, {"lineNumber": 77, "col_offset": 20, "nodeName": "id", "type": "Any"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "loop_var", "type": "Any"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "body", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "for_type_dict", "type": "Dict[str, int]"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "AssertStmt", "type": "Any"}, {"lineNumber": 39, "col_offset": 30, "nodeName": "condition", "type": "Any"}, {"lineNumber": 39, "col_offset": 71, "nodeName": "body", "type": "Any"}, {"lineNumber": 46, "col_offset": 11, "nodeName": "LetStmt", "type": "Any"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "var", "type": "Any"}, {"lineNumber": 46, "col_offset": 32, "nodeName": "value", "type": "Any"}, {"lineNumber": 46, "col_offset": 39, "nodeName": "body", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "buffer", "type": "Any"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "bounds", "type": "Any"}, {"lineNumber": 54, "col_offset": 11, "nodeName": "BufferRealize", "type": "Any"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "buffer", "type": "Any"}, {"lineNumber": 54, "col_offset": 41, "nodeName": "bounds", "type": "Any"}, {"lineNumber": 54, "col_offset": 49, "nodeName": "condition", "type": "Any"}, {"lineNumber": 54, "col_offset": 60, "nodeName": "body", "type": "Any"}, {"lineNumber": 61, "col_offset": 11, "nodeName": "AttrStmt", "type": "Any"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "attr_node", "type": "Any"}, {"lineNumber": 61, "col_offset": 39, "nodeName": "attr_key", "type": "Any"}, {"lineNumber": 61, "col_offset": 77, "nodeName": "body", "type": "Any"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "Allocate", "type": "Any"}, {"lineNumber": 68, "col_offset": 28, "nodeName": "buffer_var", "type": "Any"}, {"lineNumber": 68, "col_offset": 40, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 68, "col_offset": 47, "nodeName": "extents", "type": "Any"}, {"lineNumber": 68, "col_offset": 88, "nodeName": "body", "type": "Any"}, {"lineNumber": 75, "col_offset": 10, "nodeName": "Analyzer", "type": "Any"}, {"lineNumber": 76, "col_offset": 13, "nodeName": "end", "type": "Any"}, {"lineNumber": 77, "col_offset": 20, "nodeName": "target", "type": "Any"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "var", "type": "Any"}, {"lineNumber": 78, "col_offset": 26, "nodeName": "loop_var_name", "type": "Any"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "new_scope", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "update_symbol", "type": "Any"}, {"lineNumber": 81, "col_offset": 39, "nodeName": "loop_var_name", "type": "Any"}, {"lineNumber": 81, "col_offset": 54, "nodeName": "loop_var", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "extend", "type": "Any"}, {"lineNumber": 83, "col_offset": 11, "nodeName": "get_body", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "pop_scope", "type": "Any"}, {"lineNumber": 87, "col_offset": 7, "nodeName": "for_type", "type": "Any"}, {"lineNumber": 87, "col_offset": 23, "nodeName": "for_type_dict", "type": "Dict[str, int]"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "For", "type": "Any"}, {"lineNumber": 89, "col_offset": 23, "nodeName": "loop_var", "type": "Any"}, {"lineNumber": 89, "col_offset": 33, "nodeName": "begin", "type": "Any"}, {"lineNumber": 89, "col_offset": 40, "nodeName": "extent", "type": "Any"}, {"lineNumber": 89, "col_offset": 76, "nodeName": "body", "type": "Any"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "tir", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "convert", "type": "Any"}, {"lineNumber": 39, "col_offset": 61, "nodeName": "message", "type": "Any"}, {"lineNumber": 46, "col_offset": 11, "nodeName": "tir", "type": "Any"}, {"lineNumber": 54, "col_offset": 11, "nodeName": "tir", "type": "Any"}, {"lineNumber": 61, "col_offset": 11, "nodeName": "tir", "type": "Any"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "convert", "type": "Any"}, {"lineNumber": 61, "col_offset": 69, "nodeName": "value", "type": "Any"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "tir", "type": "Any"}, {"lineNumber": 68, "col_offset": 56, "nodeName": "convert", "type": "Any"}, {"lineNumber": 68, "col_offset": 76, "nodeName": "condition", "type": "Any"}, {"lineNumber": 75, "col_offset": 10, "nodeName": "arith", "type": "Any"}, {"lineNumber": 76, "col_offset": 20, "nodeName": "begin", "type": "Any"}, {"lineNumber": 76, "col_offset": 36, "nodeName": "simplify", "type": "Any"}, {"lineNumber": 77, "col_offset": 20, "nodeName": "node", "type": "Any"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "te", "type": "Any"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "scope_emitter", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "scope_emitter", "type": "Any"}, {"lineNumber": 82, "col_offset": 47, "nodeName": "reversed", "type": "Type[reversed[Any]]"}, {"lineNumber": 82, "col_offset": 56, "nodeName": "body", "type": "Any"}, {"lineNumber": 83, "col_offset": 11, "nodeName": "parser", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "scope_emitter", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "report_error", "type": "Any"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "tir", "type": "Any"}, {"lineNumber": 89, "col_offset": 48, "nodeName": "for_type_dict", "type": "Dict[str, int]"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "runtime", "type": "Any"}, {"lineNumber": 46, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 54, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 61, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "runtime", "type": "Any"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 68, "col_offset": 56, "nodeName": "runtime", "type": "Any"}, {"lineNumber": 75, "col_offset": 10, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 76, "col_offset": 36, "nodeName": "ana", "type": "Any"}, {"lineNumber": 76, "col_offset": 49, "nodeName": "end", "type": "Any"}, {"lineNumber": 76, "col_offset": 55, "nodeName": "begin", "type": "Any"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "parser", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "parser", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "node_stack", "type": "Any"}, {"lineNumber": 82, "col_offset": 56, "nodeName": "node", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "parser", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "parser", "type": "Any"}, {"lineNumber": 88, "col_offset": 50, "nodeName": "for_type", "type": "Any"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 89, "col_offset": 62, "nodeName": "for_type", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 68, "col_offset": 56, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "scope_emitter", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "parser", "type": "Any"}]