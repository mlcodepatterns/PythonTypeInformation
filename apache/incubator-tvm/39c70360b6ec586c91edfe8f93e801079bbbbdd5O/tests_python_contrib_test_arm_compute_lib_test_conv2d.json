[{"lineNumber": 124, "col_offset": 0, "nodeName": "test_conv2d", "type": "Callable[[], Any]"}, {"lineNumber": 185, "col_offset": 0, "nodeName": "test_codegen_conv2d", "type": "Callable[[], Any]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "a", "type": "Any"}, {"lineNumber": 34, "col_offset": 7, "nodeName": "has_pad", "type": "bool"}, {"lineNumber": 43, "col_offset": 4, "nodeName": "weight_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "w", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "weights", "type": "Any"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 59, "col_offset": 7, "nodeName": "has_bias", "type": "bool"}, {"lineNumber": 64, "col_offset": 7, "nodeName": "has_activation", "type": "bool"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "weight_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "output_height", "type": "int"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "output_width", "type": "int"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "output_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 101, "col_offset": 7, "nodeName": "has_activation", "type": "bool"}, {"lineNumber": 113, "col_offset": 7, "nodeName": "has_bias", "type": "bool"}, {"lineNumber": 128, "col_offset": 4, "nodeName": "device", "type": "Any"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "dtype", "type": "str"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "pad_ksize", "type": "Tuple[Tuple[int, int], int]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 189, "col_offset": 4, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 190, "col_offset": 4, "nodeName": "dtype", "type": "str"}, {"lineNumber": 191, "col_offset": 4, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "pad_ksize", "type": "Tuple[Tuple[int, int], int]"}, {"lineNumber": 212, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "var", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "p", "type": "Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "padding", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 43, "col_offset": 20, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 43, "col_offset": 33, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 43, "col_offset": 66, "nodeName": "channels", "type": "int"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "const", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "w", "type": "Any"}, {"lineNumber": 45, "col_offset": 29, "nodeName": "dtype", "type": "str"}, {"lineNumber": 46, "col_offset": 10, "nodeName": "conv2d", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "weights", "type": "Any"}, {"lineNumber": 58, "col_offset": 19, "nodeName": "w", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "b", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "biasc", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "b", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "out", "type": "Any"}, {"lineNumber": 66, "col_offset": 16, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "padding", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 74, "col_offset": 20, "nodeName": "channels", "type": "int"}, {"lineNumber": 74, "col_offset": 30, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 74, "col_offset": 43, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 77, "col_offset": 62, "nodeName": "channels", "type": "int"}, {"lineNumber": 125, "col_offset": 7, "nodeName": "skip_runtime_test", "type": "Any"}, {"lineNumber": 128, "col_offset": 13, "nodeName": "Device", "type": "Any"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 143, "col_offset": 12, "nodeName": "acl", "type": "bool"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "acl", "type": "bool"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 163, "col_offset": 12, "nodeName": "acl", "type": "bool"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "acl", "type": "bool"}, {"lineNumber": 186, "col_offset": 7, "nodeName": "skip_codegen_test", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "args", "type": "Tuple[Tuple[int, int, int, int], int, Tuple[int, int], Tuple[int, int], int, int, str, int]"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]], Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]]]"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "args", "type": "Tuple[Tuple[int, int, int, int], int, Tuple[int, int], Tuple[int, int], int, int, str, int]"}, {"lineNumber": 213, "col_offset": 4, "nodeName": "test_conv2d", "type": "Callable[[], Any]"}, {"lineNumber": 214, "col_offset": 4, "nodeName": "test_codegen_conv2d", "type": "Callable[[], Any]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 33, "col_offset": 18, "nodeName": "next", "type": "Callable"}, {"lineNumber": 33, "col_offset": 23, "nodeName": "var_names", "type": "Iterator[str]"}, {"lineNumber": 33, "col_offset": 41, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 33, "col_offset": 54, "nodeName": "dtype", "type": "str"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "pad", "type": "Any"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "a", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "padding", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 43, "col_offset": 58, "nodeName": "groups", "type": "int"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "nd", "type": "Any"}, {"lineNumber": 44, "col_offset": 21, "nodeName": "astype", "type": "Any"}, {"lineNumber": 44, "col_offset": 71, "nodeName": "dtype", "type": "str"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 46, "col_offset": 10, "nodeName": "nn", "type": "Any"}, {"lineNumber": 53, "col_offset": 16, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 54, "col_offset": 16, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "groups", "type": "int"}, {"lineNumber": 56, "col_offset": 17, "nodeName": "channels", "type": "int"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "const", "type": "Any"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "b", "type": "Any"}, {"lineNumber": 61, "col_offset": 31, "nodeName": "dtype", "type": "str"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "bias_add", "type": "Any"}, {"lineNumber": 62, "col_offset": 32, "nodeName": "out", "type": "Any"}, {"lineNumber": 62, "col_offset": 37, "nodeName": "biasc", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 65, "col_offset": 14, "nodeName": "relu", "type": "Any"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "out", "type": "Any"}, {"lineNumber": 72, "col_offset": 7, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 74, "col_offset": 68, "nodeName": "groups", "type": "int"}, {"lineNumber": 77, "col_offset": 23, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 77, "col_offset": 27, "nodeName": "output_height", "type": "int"}, {"lineNumber": 77, "col_offset": 43, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 77, "col_offset": 47, "nodeName": "output_width", "type": "int"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 119, "col_offset": 16, "nodeName": "input", "type": "Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]]"}, {"lineNumber": 119, "col_offset": 23, "nodeName": "kernel", "type": "Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]]"}, {"lineNumber": 119, "col_offset": 31, "nodeName": "bias", "type": "Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]]"}, {"lineNumber": 119, "col_offset": 37, "nodeName": "node", "type": "Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]"}, {"lineNumber": 121, "col_offset": 16, "nodeName": "input", "type": "Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]]"}, {"lineNumber": 121, "col_offset": 23, "nodeName": "kernel", "type": "Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]]"}, {"lineNumber": 121, "col_offset": 31, "nodeName": "node", "type": "Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 135, "col_offset": 13, "nodeName": "array", "type": "Any"}, {"lineNumber": 140, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 140, "col_offset": 34, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 140, "col_offset": 41, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 142, "col_offset": 34, "nodeName": "dtype", "type": "str"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 147, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 151, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 151, "col_offset": 34, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 152, "col_offset": 48, "nodeName": "dtype", "type": "str"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 157, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 161, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 161, "col_offset": 34, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 161, "col_offset": 52, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 162, "col_offset": 40, "nodeName": "dtype", "type": "str"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 167, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 173, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 173, "col_offset": 34, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 174, "col_offset": 40, "nodeName": "dtype", "type": "str"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 194, "col_offset": 65, "nodeName": "dtype", "type": "str"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 195, "col_offset": 14, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 195, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 196, "col_offset": 22, "nodeName": "_get_expected_codegen", "type": "Callable[..., Any]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "verify_codegen", "type": "Any"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "func", "type": "Any"}, {"lineNumber": 197, "col_offset": 29, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]], Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]]]"}, {"lineNumber": 201, "col_offset": 16, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 201, "col_offset": 48, "nodeName": "dtype", "type": "str"}, {"lineNumber": 202, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 206, "col_offset": 22, "nodeName": "_get_expected_codegen", "type": "Callable[..., Any]"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "verify_codegen", "type": "Any"}, {"lineNumber": 209, "col_offset": 23, "nodeName": "func", "type": "Any"}, {"lineNumber": 209, "col_offset": 29, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[str, Dict[str, Union[List[List[List[int]]], List[List[str]]]]]], Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]]]"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "nn", "type": "Any"}, {"lineNumber": 36, "col_offset": 38, "nodeName": "p", "type": "Tuple[Tuple[int, int], Tuple[int, int], Tuple[int, int], Tuple[int, int]]"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 41, "col_offset": 17, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 42, "col_offset": 44, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 43, "col_offset": 46, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 46, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 49, "col_offset": 21, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 49, "col_offset": 34, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "nd", "type": "Any"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 60, "col_offset": 78, "nodeName": "dtype", "type": "str"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "relay", "type": "Any"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 65, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 73, "col_offset": 31, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 73, "col_offset": 43, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 73, "col_offset": 55, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 74, "col_offset": 56, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 75, "col_offset": 74, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 76, "col_offset": 73, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 85, "col_offset": 30, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "node", "type": "Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 135, "col_offset": 13, "nodeName": "nd", "type": "Any"}, {"lineNumber": 135, "col_offset": 26, "nodeName": "astype", "type": "Any"}, {"lineNumber": 135, "col_offset": 69, "nodeName": "dtype", "type": "str"}, {"lineNumber": 142, "col_offset": 44, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 142, "col_offset": 49, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 151, "col_offset": 41, "nodeName": "pad_ksize", "type": "Tuple[Tuple[int, int], int]"}, {"lineNumber": 151, "col_offset": 55, "nodeName": "pad_ksize", "type": "Tuple[Tuple[int, int], int]"}, {"lineNumber": 152, "col_offset": 58, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 152, "col_offset": 63, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 162, "col_offset": 50, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 162, "col_offset": 55, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 174, "col_offset": 50, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 174, "col_offset": 55, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 194, "col_offset": 23, "nodeName": "pad_ksize", "type": "Tuple[Tuple[int, int], int]"}, {"lineNumber": 194, "col_offset": 37, "nodeName": "pad_ksize", "type": "Tuple[Tuple[int, int], int]"}, {"lineNumber": 195, "col_offset": 35, "nodeName": "args", "type": "Tuple[Tuple[int, int, int, int], int, Tuple[int, int], Tuple[int, int], int, int, str, int]"}, {"lineNumber": 196, "col_offset": 45, "nodeName": "args", "type": "Tuple[Tuple[int, int, int, int], int, Tuple[int, int], Tuple[int, int], int, int, str, int]"}, {"lineNumber": 35, "col_offset": 22, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 35, "col_offset": 34, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 35, "col_offset": 48, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 35, "col_offset": 60, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "relay", "type": "Any"}, {"lineNumber": 40, "col_offset": 23, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 40, "col_offset": 35, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 40, "col_offset": 47, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 40, "col_offset": 59, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 41, "col_offset": 27, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 42, "col_offset": 17, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 44, "col_offset": 21, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 44, "col_offset": 50, "nodeName": "weight_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 65, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 75, "col_offset": 60, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 76, "col_offset": 59, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 85, "col_offset": 39, "nodeName": "has_bias", "type": "bool"}, {"lineNumber": 95, "col_offset": 27, "nodeName": "dtype", "type": "str"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "node", "type": "Dict[str, Union[str, List[List[int]], Dict[str, Union[List[List[str]], str, List[List[List[int]]]]]]]"}, {"lineNumber": 135, "col_offset": 13, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 175, "col_offset": 42, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 176, "col_offset": 43, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 177, "col_offset": 49, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 195, "col_offset": 51, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 195, "col_offset": 56, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 202, "col_offset": 51, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 202, "col_offset": 56, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 203, "col_offset": 42, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 204, "col_offset": 43, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 205, "col_offset": 49, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 207, "col_offset": 53, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 208, "col_offset": 59, "nodeName": "composite", "type": "Tuple[bool, bool, bool]"}, {"lineNumber": 41, "col_offset": 38, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 42, "col_offset": 28, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 44, "col_offset": 21, "nodeName": "random", "type": "Any"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 75, "col_offset": 33, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 75, "col_offset": 47, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 76, "col_offset": 32, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 76, "col_offset": 46, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 93, "col_offset": 37, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 93, "col_offset": 51, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 93, "col_offset": 55, "nodeName": "kernel_size", "type": "int"}, {"lineNumber": 94, "col_offset": 27, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 94, "col_offset": 32, "nodeName": "output_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 96, "col_offset": 29, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 96, "col_offset": 33, "nodeName": "p", "type": "int"}, {"lineNumber": 96, "col_offset": 40, "nodeName": "p", "type": "int"}, {"lineNumber": 96, "col_offset": 45, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 97, "col_offset": 29, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 97, "col_offset": 33, "nodeName": "s", "type": "int"}, {"lineNumber": 97, "col_offset": 40, "nodeName": "s", "type": "int"}, {"lineNumber": 97, "col_offset": 45, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 107, "col_offset": 29, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 107, "col_offset": 34, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 111, "col_offset": 29, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 111, "col_offset": 34, "nodeName": "weight_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 135, "col_offset": 26, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 135, "col_offset": 55, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 144, "col_offset": 41, "nodeName": "func", "type": "Any"}, {"lineNumber": 144, "col_offset": 47, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 145, "col_offset": 41, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 145, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 154, "col_offset": 27, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 154, "col_offset": 41, "nodeName": "func", "type": "Any"}, {"lineNumber": 154, "col_offset": 47, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 155, "col_offset": 41, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 155, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 164, "col_offset": 27, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 164, "col_offset": 41, "nodeName": "func", "type": "Any"}, {"lineNumber": 164, "col_offset": 47, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 165, "col_offset": 41, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 165, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 179, "col_offset": 27, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 179, "col_offset": 41, "nodeName": "func", "type": "Any"}, {"lineNumber": 179, "col_offset": 47, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 180, "col_offset": 41, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 180, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 44, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "random", "type": "Any"}, {"lineNumber": 60, "col_offset": 54, "nodeName": "weight_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 76, "col_offset": 21, "nodeName": "shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 135, "col_offset": 26, "nodeName": "random", "type": "Any"}, {"lineNumber": 146, "col_offset": 52, "nodeName": "acl", "type": "bool"}, {"lineNumber": 156, "col_offset": 52, "nodeName": "acl", "type": "bool"}, {"lineNumber": 166, "col_offset": 52, "nodeName": "acl", "type": "bool"}, {"lineNumber": 181, "col_offset": 52, "nodeName": "acl", "type": "bool"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 117, "col_offset": 34, "nodeName": "weight_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 135, "col_offset": 26, "nodeName": "np", "type": "module"}]