[{"lineNumber": 28, "col_offset": 0, "nodeName": "optimize_source", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 37, "col_offset": 0, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "test_dead_let", "type": "Callable[[], Any]"}, {"lineNumber": 62, "col_offset": 0, "nodeName": "test_one_live_let", "type": "Callable[[], Any]"}, {"lineNumber": 81, "col_offset": 0, "nodeName": "test_nested_let", "type": "Callable[[], Any]"}, {"lineNumber": 100, "col_offset": 0, "nodeName": "test_live_recursion", "type": "Callable[[], Any]"}, {"lineNumber": 134, "col_offset": 0, "nodeName": "test_dead_recursion", "type": "Callable[[], Any]"}, {"lineNumber": 161, "col_offset": 0, "nodeName": "test_add_with_let", "type": "Callable[[], Any]"}, {"lineNumber": 181, "col_offset": 0, "nodeName": "test_tuple_get_item", "type": "Callable[[], Any]"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "optimize", "type": "Any"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "module", "type": "Any"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "optimize_module", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "after_module", "type": "Any"}, {"lineNumber": 200, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "passes", "type": "List[Any]"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "Sequential", "type": "Any"}, {"lineNumber": 32, "col_offset": 40, "nodeName": "passes", "type": "Union[Any, List[Any]]"}, {"lineNumber": 33, "col_offset": 13, "nodeName": "parse", "type": "Any"}, {"lineNumber": 33, "col_offset": 30, "nodeName": "source", "type": "Any"}, {"lineNumber": 34, "col_offset": 11, "nodeName": "optimize", "type": "Any"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "module", "type": "Any"}, {"lineNumber": 38, "col_offset": 22, "nodeName": "optimize_source", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 38, "col_offset": 38, "nodeName": "before_source", "type": "Any"}, {"lineNumber": 38, "col_offset": 53, "nodeName": "passes", "type": "Any"}, {"lineNumber": 39, "col_offset": 19, "nodeName": "parse", "type": "Any"}, {"lineNumber": 39, "col_offset": 36, "nodeName": "after_source", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 40, "col_offset": 10, "nodeName": "optimize_module", "type": "Any"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 10, "nodeName": "after_module", "type": "Any"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "structural_equal", "type": "Any"}, {"lineNumber": 42, "col_offset": 35, "nodeName": "after_module", "type": "Any"}, {"lineNumber": 42, "col_offset": 49, "nodeName": "optimize_module", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 59, "col_offset": 23, "nodeName": "before_program", "type": "str"}, {"lineNumber": 59, "col_offset": 39, "nodeName": "after_program", "type": "str"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 78, "col_offset": 23, "nodeName": "before_program", "type": "str"}, {"lineNumber": 78, "col_offset": 39, "nodeName": "after_program", "type": "str"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "before_program", "type": "str"}, {"lineNumber": 97, "col_offset": 39, "nodeName": "after_program", "type": "str"}, {"lineNumber": 129, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "before_program", "type": "str"}, {"lineNumber": 130, "col_offset": 24, "nodeName": "after_program", "type": "str"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "before_program", "type": "str"}, {"lineNumber": 157, "col_offset": 24, "nodeName": "after_program", "type": "str"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "before_program", "type": "str"}, {"lineNumber": 177, "col_offset": 24, "nodeName": "after_program", "type": "str"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "optimize_and_check", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "before_program", "type": "str"}, {"lineNumber": 197, "col_offset": 39, "nodeName": "after_program", "type": "str"}, {"lineNumber": 203, "col_offset": 4, "nodeName": "main", "type": "Any"}, {"lineNumber": 203, "col_offset": 16, "nodeName": "argv", "type": "List[str]"}, {"lineNumber": 29, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 29, "col_offset": 22, "nodeName": "passes", "type": "Any"}, {"lineNumber": 29, "col_offset": 30, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 30, "col_offset": 18, "nodeName": "passes", "type": "Any"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "transform", "type": "Any"}, {"lineNumber": 33, "col_offset": 13, "nodeName": "parser", "type": "Any"}, {"lineNumber": 39, "col_offset": 19, "nodeName": "parser", "type": "Any"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "ir", "type": "Any"}, {"lineNumber": 59, "col_offset": 54, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 78, "col_offset": 54, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 97, "col_offset": 54, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 197, "col_offset": 54, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 203, "col_offset": 4, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 203, "col_offset": 16, "nodeName": "sys", "type": "module"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 33, "col_offset": 13, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 39, "col_offset": 19, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 59, "col_offset": 54, "nodeName": "transform", "type": "Any"}, {"lineNumber": 78, "col_offset": 54, "nodeName": "transform", "type": "Any"}, {"lineNumber": 97, "col_offset": 54, "nodeName": "transform", "type": "Any"}, {"lineNumber": 130, "col_offset": 40, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 130, "col_offset": 73, "nodeName": "InferType", "type": "Any"}, {"lineNumber": 157, "col_offset": 40, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 157, "col_offset": 73, "nodeName": "InferType", "type": "Any"}, {"lineNumber": 177, "col_offset": 40, "nodeName": "DeadCodeElimination", "type": "Any"}, {"lineNumber": 177, "col_offset": 73, "nodeName": "InferType", "type": "Any"}, {"lineNumber": 197, "col_offset": 54, "nodeName": "transform", "type": "Any"}, {"lineNumber": 130, "col_offset": 40, "nodeName": "transform", "type": "Any"}, {"lineNumber": 130, "col_offset": 73, "nodeName": "transform", "type": "Any"}, {"lineNumber": 157, "col_offset": 40, "nodeName": "transform", "type": "Any"}, {"lineNumber": 157, "col_offset": 73, "nodeName": "transform", "type": "Any"}, {"lineNumber": 177, "col_offset": 40, "nodeName": "transform", "type": "Any"}, {"lineNumber": 177, "col_offset": 73, "nodeName": "transform", "type": "Any"}]