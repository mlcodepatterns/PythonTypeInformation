[{"lineNumber": 30, "col_offset": 0, "nodeName": "legalize_qnn_dense", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 34, "col_offset": 0, "nodeName": "make_requantize_params", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 79, "col_offset": 0, "nodeName": "make_int_configuration", "type": "Callable[..., Any]"}, {"lineNumber": 130, "col_offset": 0, "nodeName": "qnn_dense_driver", "type": "Callable[[Any], Any]"}, {"lineNumber": 184, "col_offset": 0, "nodeName": "test_qnn_dense_without_bias", "type": "Callable[[], Any]"}, {"lineNumber": 192, "col_offset": 0, "nodeName": "test_qnn_dense_with_bias", "type": "Callable[[], Any]"}, {"lineNumber": 200, "col_offset": 0, "nodeName": "test_qnn_dense_with_requantized_output", "type": "Callable[[], Any]"}, {"lineNumber": 208, "col_offset": 0, "nodeName": "test_per_channel_weight_scale", "type": "Callable[[], Any]"}, {"lineNumber": 41, "col_offset": 11, "nodeName": "config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "config", "type": "Dict[str, Any]"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "units", "type": "int"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "input_scale", "type": "float"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "kernel_scale", "type": "float"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "output_scale", "type": "float"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "bias", "type": "None"}, {"lineNumber": 99, "col_offset": 7, "nodeName": "per_channel", "type": "bool"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "output", "type": "Any"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 133, "col_offset": 4, "nodeName": "quantized_data_name", "type": "str"}, {"lineNumber": 134, "col_offset": 4, "nodeName": "quantized_kernel_name", "type": "str"}, {"lineNumber": 135, "col_offset": 4, "nodeName": "expected_out_dtype", "type": "str"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "bias_name", "type": "str"}, {"lineNumber": 167, "col_offset": 4, "nodeName": "mod", "type": "Any"}, {"lineNumber": 168, "col_offset": 4, "nodeName": "mod", "type": "Any"}, {"lineNumber": 169, "col_offset": 4, "nodeName": "mod", "type": "Any"}, {"lineNumber": 215, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 36, "col_offset": 23, "nodeName": "input_scale", "type": "float"}, {"lineNumber": 37, "col_offset": 24, "nodeName": "output_scale", "type": "float"}, {"lineNumber": 38, "col_offset": 29, "nodeName": "output_zero_point", "type": "int"}, {"lineNumber": 39, "col_offset": 21, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 58, "col_offset": 7, "nodeName": "requantize", "type": "None"}, {"lineNumber": 61, "col_offset": 26, "nodeName": "quantized_data", "type": "Any"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "quantized_kernel", "type": "Any"}, {"lineNumber": 63, "col_offset": 17, "nodeName": "dtype", "type": "str"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "input_shape", "type": "Tuple[int, int]"}, {"lineNumber": 65, "col_offset": 24, "nodeName": "kernel_shape", "type": "Tuple[int, int]"}, {"lineNumber": 66, "col_offset": 28, "nodeName": "input_zero_point", "type": "int"}, {"lineNumber": 67, "col_offset": 29, "nodeName": "kernel_zero_point", "type": "int"}, {"lineNumber": 68, "col_offset": 23, "nodeName": "input_scale", "type": "float"}, {"lineNumber": 69, "col_offset": 24, "nodeName": "kernel_scale", "type": "float"}, {"lineNumber": 70, "col_offset": 17, "nodeName": "units", "type": "int"}, {"lineNumber": 71, "col_offset": 18, "nodeName": "output", "type": "Any"}, {"lineNumber": 72, "col_offset": 21, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 73, "col_offset": 16, "nodeName": "bias", "type": "None"}, {"lineNumber": 74, "col_offset": 22, "nodeName": "requantize", "type": "None"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "input_shape", "type": "Tuple[int, int]"}, {"lineNumber": 80, "col_offset": 17, "nodeName": "kernel_shape", "type": "Tuple[int, int]"}, {"lineNumber": 80, "col_offset": 31, "nodeName": "output_shape", "type": "Tuple[int, int]"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "input_zero_point", "type": "int"}, {"lineNumber": 81, "col_offset": 22, "nodeName": "kernel_zero_point", "type": "int"}, {"lineNumber": 88, "col_offset": 17, "nodeName": "input_shape", "type": "Tuple[int, int]"}, {"lineNumber": 93, "col_offset": 17, "nodeName": "kernel_shape", "type": "Tuple[int, int]"}, {"lineNumber": 97, "col_offset": 72, "nodeName": "use_bias", "type": "bool"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "kernel_scale", "type": "numpy.ndarray"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "output", "type": "numpy.ndarray"}, {"lineNumber": 103, "col_offset": 9, "nodeName": "requantize_output", "type": "bool"}, {"lineNumber": 112, "col_offset": 73, "nodeName": "requantize_output", "type": "bool"}, {"lineNumber": 114, "col_offset": 13, "nodeName": "reshape", "type": "Any"}, {"lineNumber": 114, "col_offset": 46, "nodeName": "output_shape", "type": "Tuple[int, int]"}, {"lineNumber": 115, "col_offset": 11, "nodeName": "make_configuration", "type": "Callable[..., Any]"}, {"lineNumber": 131, "col_offset": 15, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 132, "col_offset": 16, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 135, "col_offset": 25, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 137, "col_offset": 21, "nodeName": "var", "type": "Any"}, {"lineNumber": 137, "col_offset": 31, "nodeName": "quantized_data_name", "type": "str"}, {"lineNumber": 140, "col_offset": 23, "nodeName": "var", "type": "Any"}, {"lineNumber": 140, "col_offset": 33, "nodeName": "quantized_kernel_name", "type": "str"}, {"lineNumber": 143, "col_offset": 10, "nodeName": "dense", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "quantized_data", "type": "Any"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "quantized_kernel", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "mod", "type": "Any"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "requantize_config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "expected_out_dtype", "type": "str"}, {"lineNumber": 167, "col_offset": 10, "nodeName": "Function", "type": "Any"}, {"lineNumber": 167, "col_offset": 56, "nodeName": "mod", "type": "Any"}, {"lineNumber": 168, "col_offset": 10, "nodeName": "from_expr", "type": "Any"}, {"lineNumber": 168, "col_offset": 33, "nodeName": "mod", "type": "Any"}, {"lineNumber": 169, "col_offset": 48, "nodeName": "mod", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "mod", "type": "Any"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 216, "col_offset": 4, "nodeName": "test_qnn_dense_without_bias", "type": "Callable[[], Any]"}, {"lineNumber": 217, "col_offset": 4, "nodeName": "test_qnn_dense_with_bias", "type": "Callable[[], Any]"}, {"lineNumber": 218, "col_offset": 4, "nodeName": "test_qnn_dense_with_requantized_output", "type": "Callable[[], Any]"}, {"lineNumber": 219, "col_offset": 4, "nodeName": "test_per_channel_weight_scale", "type": "Callable[[], Any]"}, {"lineNumber": 59, "col_offset": 15, "nodeName": "bias", "type": "Any"}, {"lineNumber": 83, "col_offset": 31, "nodeName": "requantize_output", "type": "bool"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "reshape", "type": "Any"}, {"lineNumber": 100, "col_offset": 15, "nodeName": "use_bias", "type": "bool"}, {"lineNumber": 100, "col_offset": 28, "nodeName": "requantize_output", "type": "bool"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 104, "col_offset": 15, "nodeName": "use_bias", "type": "bool"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "output", "type": "numpy.ndarray"}, {"lineNumber": 106, "col_offset": 9, "nodeName": "use_bias", "type": "bool"}, {"lineNumber": 112, "col_offset": 44, "nodeName": "output_scale", "type": "float"}, {"lineNumber": 115, "col_offset": 45, "nodeName": "quantized_data_np", "type": "Any"}, {"lineNumber": 116, "col_offset": 47, "nodeName": "quantized_kernel_np", "type": "Any"}, {"lineNumber": 117, "col_offset": 36, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 118, "col_offset": 42, "nodeName": "input_shape", "type": "Tuple[int, int]"}, {"lineNumber": 119, "col_offset": 43, "nodeName": "kernel_shape", "type": "Tuple[int, int]"}, {"lineNumber": 120, "col_offset": 47, "nodeName": "input_zero_point", "type": "int"}, {"lineNumber": 121, "col_offset": 48, "nodeName": "kernel_zero_point", "type": "int"}, {"lineNumber": 122, "col_offset": 42, "nodeName": "input_scale", "type": "float"}, {"lineNumber": 123, "col_offset": 43, "nodeName": "kernel_scale", "type": "float"}, {"lineNumber": 124, "col_offset": 36, "nodeName": "units", "type": "int"}, {"lineNumber": 125, "col_offset": 37, "nodeName": "output", "type": "Any"}, {"lineNumber": 126, "col_offset": 35, "nodeName": "bias", "type": "None"}, {"lineNumber": 127, "col_offset": 41, "nodeName": "requant_params", "type": "None"}, {"lineNumber": 137, "col_offset": 21, "nodeName": "relay", "type": "Any"}, {"lineNumber": 139, "col_offset": 37, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 140, "col_offset": 23, "nodeName": "relay", "type": "Any"}, {"lineNumber": 142, "col_offset": 39, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 143, "col_offset": 10, "nodeName": "op", "type": "Any"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 151, "col_offset": 7, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 152, "col_offset": 15, "nodeName": "var", "type": "Any"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "bias_name", "type": "str"}, {"lineNumber": 155, "col_offset": 14, "nodeName": "bias_add", "type": "Any"}, {"lineNumber": 155, "col_offset": 32, "nodeName": "mod", "type": "Any"}, {"lineNumber": 155, "col_offset": 37, "nodeName": "bias", "type": "Any"}, {"lineNumber": 156, "col_offset": 7, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 157, "col_offset": 28, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 158, "col_offset": 14, "nodeName": "requantize", "type": "Any"}, {"lineNumber": 159, "col_offset": 12, "nodeName": "mod", "type": "Any"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "requantize_config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 167, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "free_vars", "type": "Any"}, {"lineNumber": 167, "col_offset": 50, "nodeName": "mod", "type": "Any"}, {"lineNumber": 168, "col_offset": 10, "nodeName": "IRModule", "type": "Any"}, {"lineNumber": 169, "col_offset": 10, "nodeName": "CanonicalizeOps", "type": "Any"}, {"lineNumber": 170, "col_offset": 9, "nodeName": "build_config", "type": "Any"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "graph", "type": "Any"}, {"lineNumber": 171, "col_offset": 15, "nodeName": "lib", "type": "Any"}, {"lineNumber": 171, "col_offset": 20, "nodeName": "params", "type": "Any"}, {"lineNumber": 171, "col_offset": 29, "nodeName": "build", "type": "Any"}, {"lineNumber": 171, "col_offset": 41, "nodeName": "mod", "type": "Any"}, {"lineNumber": 172, "col_offset": 14, "nodeName": "create", "type": "Any"}, {"lineNumber": 172, "col_offset": 35, "nodeName": "graph", "type": "Any"}, {"lineNumber": 172, "col_offset": 42, "nodeName": "lib", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "set_input", "type": "Any"}, {"lineNumber": 173, "col_offset": 22, "nodeName": "quantized_data_name", "type": "str"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "set_input", "type": "Any"}, {"lineNumber": 174, "col_offset": 22, "nodeName": "quantized_kernel_name", "type": "str"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "set_input", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "run", "type": "Any"}, {"lineNumber": 179, "col_offset": 14, "nodeName": "asnumpy", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 180, "col_offset": 32, "nodeName": "res", "type": "Any"}, {"lineNumber": 181, "col_offset": 15, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 181, "col_offset": 28, "nodeName": "expected_out_dtype", "type": "str"}, {"lineNumber": 185, "col_offset": 9, "nodeName": "TempOpAttr", "type": "Any"}, {"lineNumber": 185, "col_offset": 52, "nodeName": "legalize_qnn_dense", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "make_int_configuration", "type": "Callable[..., Any]"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "qnn_dense_driver", "type": "Callable[[Any], Any]"}, {"lineNumber": 189, "col_offset": 25, "nodeName": "int32_output_without_bias_params", "type": "Dict[str, Any]"}, {"lineNumber": 193, "col_offset": 9, "nodeName": "TempOpAttr", "type": "Any"}, {"lineNumber": 193, "col_offset": 52, "nodeName": "legalize_qnn_dense", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 196, "col_offset": 12, "nodeName": "make_int_configuration", "type": "Callable[..., Any]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "qnn_dense_driver", "type": "Callable[[Any], Any]"}, {"lineNumber": 197, "col_offset": 25, "nodeName": "int32_output_with_bias_params", "type": "Dict[str, Any]"}, {"lineNumber": 201, "col_offset": 9, "nodeName": "TempOpAttr", "type": "Any"}, {"lineNumber": 201, "col_offset": 52, "nodeName": "legalize_qnn_dense", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "make_int_configuration", "type": "Callable[..., Any]"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "qnn_dense_driver", "type": "Callable[[Any], Any]"}, {"lineNumber": 205, "col_offset": 25, "nodeName": "int8_requantized_output_with_bias_params", "type": "Dict[str, Any]"}, {"lineNumber": 209, "col_offset": 9, "nodeName": "TempOpAttr", "type": "Any"}, {"lineNumber": 209, "col_offset": 52, "nodeName": "legalize_qnn_dense", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 210, "col_offset": 17, "nodeName": "make_int_configuration", "type": "Callable[..., Any]"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "qnn_dense_driver", "type": "Callable[[Any], Any]"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "config", "type": "Dict[str, Any]"}, {"lineNumber": 87, "col_offset": 16, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 92, "col_offset": 16, "nodeName": "in_dtype", "type": "str"}, {"lineNumber": 97, "col_offset": 59, "nodeName": "units", "type": "int"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 101, "col_offset": 55, "nodeName": "float32", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 105, "col_offset": 17, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "output", "type": "numpy.ndarray"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "output", "type": "numpy.ndarray"}, {"lineNumber": 114, "col_offset": 13, "nodeName": "astype", "type": "Any"}, {"lineNumber": 114, "col_offset": 27, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 138, "col_offset": 37, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 143, "col_offset": 10, "nodeName": "qnn", "type": "Any"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 146, "col_offset": 20, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 147, "col_offset": 20, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 148, "col_offset": 20, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 149, "col_offset": 20, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 151, "col_offset": 26, "nodeName": "bias_name", "type": "str"}, {"lineNumber": 152, "col_offset": 15, "nodeName": "relay", "type": "Any"}, {"lineNumber": 153, "col_offset": 31, "nodeName": "shape", "type": "Any"}, {"lineNumber": 154, "col_offset": 31, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 155, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 158, "col_offset": 14, "nodeName": "op", "type": "Any"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "analysis", "type": "Any"}, {"lineNumber": 168, "col_offset": 10, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 169, "col_offset": 10, "nodeName": "transform", "type": "Any"}, {"lineNumber": 170, "col_offset": 9, "nodeName": "relay", "type": "Any"}, {"lineNumber": 171, "col_offset": 29, "nodeName": "relay", "type": "Any"}, {"lineNumber": 172, "col_offset": 14, "nodeName": "graph_runtime", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "mod", "type": "Any"}, {"lineNumber": 173, "col_offset": 43, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "mod", "type": "Any"}, {"lineNumber": 174, "col_offset": 45, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 175, "col_offset": 11, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "set_input", "type": "Any"}, {"lineNumber": 176, "col_offset": 26, "nodeName": "bias_name", "type": "str"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "mod", "type": "Any"}, {"lineNumber": 177, "col_offset": 24, "nodeName": "params", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "mod", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 180, "col_offset": 37, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 181, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "astype", "type": "Any"}, {"lineNumber": 97, "col_offset": 39, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 101, "col_offset": 55, "nodeName": "np", "type": "module"}, {"lineNumber": 105, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 114, "col_offset": 13, "nodeName": "output", "type": "numpy.ndarray"}, {"lineNumber": 143, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 155, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 158, "col_offset": 14, "nodeName": "qnn", "type": "Any"}, {"lineNumber": 160, "col_offset": 24, "nodeName": "const", "type": "Any"}, {"lineNumber": 161, "col_offset": 29, "nodeName": "const", "type": "Any"}, {"lineNumber": 162, "col_offset": 25, "nodeName": "const", "type": "Any"}, {"lineNumber": 163, "col_offset": 30, "nodeName": "const", "type": "Any"}, {"lineNumber": 164, "col_offset": 22, "nodeName": "requantize_config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "relay", "type": "Any"}, {"lineNumber": 169, "col_offset": 10, "nodeName": "qnn", "type": "Any"}, {"lineNumber": 172, "col_offset": 51, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 173, "col_offset": 62, "nodeName": "quantized_data_name", "type": "str"}, {"lineNumber": 174, "col_offset": 64, "nodeName": "quantized_kernel_name", "type": "str"}, {"lineNumber": 175, "col_offset": 30, "nodeName": "bias_name", "type": "str"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "mod", "type": "Any"}, {"lineNumber": 176, "col_offset": 37, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 179, "col_offset": 14, "nodeName": "get_output", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 85, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 89, "col_offset": 26, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 153, "col_offset": 31, "nodeName": "test_configuration", "type": "Dict[str, Any]"}, {"lineNumber": 158, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 160, "col_offset": 24, "nodeName": "relay", "type": "Any"}, {"lineNumber": 160, "col_offset": 36, "nodeName": "requantize_config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 161, "col_offset": 29, "nodeName": "relay", "type": "Any"}, {"lineNumber": 162, "col_offset": 25, "nodeName": "relay", "type": "Any"}, {"lineNumber": 162, "col_offset": 37, "nodeName": "requantize_config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 163, "col_offset": 30, "nodeName": "relay", "type": "Any"}, {"lineNumber": 163, "col_offset": 42, "nodeName": "requantize_config", "type": "Dict[str, Union[float, int, str]]"}, {"lineNumber": 169, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 172, "col_offset": 51, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 176, "col_offset": 56, "nodeName": "bias_name", "type": "str"}, {"lineNumber": 179, "col_offset": 14, "nodeName": "mod", "type": "Any"}, {"lineNumber": 85, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 89, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "np", "type": "module"}]