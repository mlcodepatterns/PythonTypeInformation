[{"lineNumber": 34, "col_offset": 0, "nodeName": "_calculate_output_shape", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 41, "col_offset": 0, "nodeName": "_get_pooling_model", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 90, "col_offset": 0, "nodeName": "_get_global_pooling_model", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 108, "col_offset": 0, "nodeName": "_get_expected_pooling_codegen", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 139, "col_offset": 0, "nodeName": "_get_expected_global_pooling_codegen", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 157, "col_offset": 0, "nodeName": "test_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 225, "col_offset": 0, "nodeName": "test_global_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 274, "col_offset": 0, "nodeName": "test_codegen_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 315, "col_offset": 0, "nodeName": "test_codegen_global_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "output_height", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "output_width", "type": "Any"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "out", "type": "Any"}, {"lineNumber": 87, "col_offset": 11, "nodeName": "out", "type": "Any"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "out", "type": "Any"}, {"lineNumber": 105, "col_offset": 11, "nodeName": "out", "type": "Any"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "output_shape", "type": "Tuple[int, int, int, Any]"}, {"lineNumber": 135, "col_offset": 4, "nodeName": "input", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]]"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "input", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]]"}, {"lineNumber": 163, "col_offset": 4, "nodeName": "device", "type": "Any"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 167, "col_offset": 4, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 194, "col_offset": 9, "nodeName": "trials", "type": "List[Union[List[Union[str, Tuple[str, int, int, float, float], Tuple[int, int], bool, Tuple[int, int, int]]], List[Union[str, Tuple[str, int, int, int, int], Tuple[int, int], bool, Tuple[int, int, int]]]]]"}, {"lineNumber": 231, "col_offset": 4, "nodeName": "device", "type": "Any"}, {"lineNumber": 234, "col_offset": 4, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 235, "col_offset": 4, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 250, "col_offset": 62, "nodeName": "trials", "type": "List[Union[List[Union[str, Tuple[str, int, int, float, float], Tuple[int, int, int]]], List[Union[str, Tuple[str, int, int, int, int], Tuple[int, int, int]]]]]"}, {"lineNumber": 278, "col_offset": 4, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 279, "col_offset": 4, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 306, "col_offset": 9, "nodeName": "trials", "type": "List[List[Union[str, Tuple[str, int, int], Tuple[int, int], bool, Tuple[int, int, int]]]]"}, {"lineNumber": 319, "col_offset": 4, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 320, "col_offset": 4, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 335, "col_offset": 50, "nodeName": "trials", "type": "List[List[Union[str, Tuple[str, int, int], Tuple[int, int, int]]]]"}, {"lineNumber": 344, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "padding", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 47, "col_offset": 10, "nodeName": "var", "type": "Any"}, {"lineNumber": 49, "col_offset": 7, "nodeName": "typef", "type": "str"}, {"lineNumber": 92, "col_offset": 10, "nodeName": "var", "type": "Any"}, {"lineNumber": 94, "col_offset": 7, "nodeName": "typef", "type": "str"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "padding", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 113, "col_offset": 19, "nodeName": "_calculate_output_shape", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 113, "col_offset": 43, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 113, "col_offset": 50, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 113, "col_offset": 57, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 113, "col_offset": 66, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 117, "col_offset": 16, "nodeName": "typef", "type": "str"}, {"lineNumber": 136, "col_offset": 12, "nodeName": "input", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]]"}, {"lineNumber": 136, "col_offset": 19, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 142, "col_offset": 16, "nodeName": "typef", "type": "str"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "input", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]]"}, {"lineNumber": 154, "col_offset": 19, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "load", "type": "Any"}, {"lineNumber": 160, "col_offset": 7, "nodeName": "skip_runtime_test", "type": "Any"}, {"lineNumber": 163, "col_offset": 13, "nodeName": "Device", "type": "Any"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "verify_saturation", "type": "bool"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "acl", "type": "int"}, {"lineNumber": 226, "col_offset": 4, "nodeName": "load", "type": "Any"}, {"lineNumber": 228, "col_offset": 7, "nodeName": "skip_runtime_test", "type": "Any"}, {"lineNumber": 231, "col_offset": 13, "nodeName": "Device", "type": "Any"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "typef", "type": "str"}, {"lineNumber": 250, "col_offset": 47, "nodeName": "input_shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "verify_saturation", "type": "bool"}, {"lineNumber": 266, "col_offset": 12, "nodeName": "acl", "type": "int"}, {"lineNumber": 275, "col_offset": 7, "nodeName": "skip_codegen_test", "type": "Any"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 308, "col_offset": 8, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "args", "type": "Tuple[Tuple[int, Any], str, str, Tuple[int, int], Tuple[int, int], Tuple[int, int], bool, bool]"}, {"lineNumber": 310, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 311, "col_offset": 8, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 316, "col_offset": 7, "nodeName": "skip_codegen_test", "type": "Any"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "typef", "type": "str"}, {"lineNumber": 335, "col_offset": 35, "nodeName": "input_shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 336, "col_offset": 8, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "args", "type": "Tuple[Tuple[int, Any], str, str]"}, {"lineNumber": 339, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 340, "col_offset": 8, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 345, "col_offset": 4, "nodeName": "test_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 346, "col_offset": 4, "nodeName": "test_global_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 347, "col_offset": 4, "nodeName": "test_codegen_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 348, "col_offset": 4, "nodeName": "test_codegen_global_pooling", "type": "Callable[[], Any]"}, {"lineNumber": 38, "col_offset": 14, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 38, "col_offset": 18, "nodeName": "output_height", "type": "Any"}, {"lineNumber": 38, "col_offset": 34, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 38, "col_offset": 38, "nodeName": "output_width", "type": "Any"}, {"lineNumber": 38, "col_offset": 53, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 45, "col_offset": 7, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 47, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 47, "col_offset": 20, "nodeName": "next", "type": "Callable"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "var_names", "type": "Iterator[str]"}, {"lineNumber": 47, "col_offset": 43, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 47, "col_offset": 56, "nodeName": "dtype", "type": "str"}, {"lineNumber": 50, "col_offset": 14, "nodeName": "max_pool2d", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 58, "col_offset": 9, "nodeName": "typef", "type": "str"}, {"lineNumber": 92, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 92, "col_offset": 20, "nodeName": "next", "type": "Callable"}, {"lineNumber": 92, "col_offset": 25, "nodeName": "var_names", "type": "Iterator[str]"}, {"lineNumber": 92, "col_offset": 43, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 92, "col_offset": 56, "nodeName": "dtype", "type": "str"}, {"lineNumber": 95, "col_offset": 14, "nodeName": "global_max_pool2d", "type": "Any"}, {"lineNumber": 95, "col_offset": 41, "nodeName": "out", "type": "Any"}, {"lineNumber": 96, "col_offset": 9, "nodeName": "typef", "type": "str"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 111, "col_offset": 7, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 111, "col_offset": 11, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 132, "col_offset": 7, "nodeName": "typef", "type": "str"}, {"lineNumber": 132, "col_offset": 35, "nodeName": "typef", "type": "str"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "Device", "type": "Any"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 170, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 171, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 172, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 173, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 174, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 175, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 176, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 177, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 178, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 179, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 181, "col_offset": 25, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 182, "col_offset": 25, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 201, "col_offset": 15, "nodeName": "_get_pooling_model", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 202, "col_offset": 12, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 202, "col_offset": 19, "nodeName": "dtype", "type": "str"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "typef", "type": "str"}, {"lineNumber": 202, "col_offset": 33, "nodeName": "size", "type": "Tuple[int, int]"}, {"lineNumber": 202, "col_offset": 39, "nodeName": "stride", "type": "Tuple[int, int]"}, {"lineNumber": 202, "col_offset": 47, "nodeName": "pad", "type": "Tuple[int, int]"}, {"lineNumber": 202, "col_offset": 52, "nodeName": "ceil_mode", "type": "bool"}, {"lineNumber": 202, "col_offset": 63, "nodeName": "count_include_pad", "type": "bool"}, {"lineNumber": 206, "col_offset": 20, "nodeName": "size", "type": "Tuple[int, int]"}, {"lineNumber": 207, "col_offset": 22, "nodeName": "stride", "type": "Tuple[int, int]"}, {"lineNumber": 208, "col_offset": 21, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 209, "col_offset": 28, "nodeName": "typef", "type": "str"}, {"lineNumber": 210, "col_offset": 21, "nodeName": "dtype", "type": "str"}, {"lineNumber": 211, "col_offset": 23, "nodeName": "pad", "type": "Tuple[int, int]"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "ceil_mode", "type": "bool"}, {"lineNumber": 213, "col_offset": 33, "nodeName": "count_include_pad", "type": "bool"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 222, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 226, "col_offset": 4, "nodeName": "Device", "type": "Any"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 238, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 239, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 240, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 241, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 242, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 243, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 244, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 245, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int, float, float]"}, {"lineNumber": 246, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 247, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int, int, int]"}, {"lineNumber": 250, "col_offset": 16, "nodeName": "dtype", "type": "str"}, {"lineNumber": 250, "col_offset": 23, "nodeName": "low", "type": "int"}, {"lineNumber": 250, "col_offset": 28, "nodeName": "high", "type": "int"}, {"lineNumber": 250, "col_offset": 34, "nodeName": "atol", "type": "Union[float, int]"}, {"lineNumber": 250, "col_offset": 40, "nodeName": "rtol", "type": "Union[float, int]"}, {"lineNumber": 257, "col_offset": 15, "nodeName": "_get_global_pooling_model", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 257, "col_offset": 41, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 257, "col_offset": 48, "nodeName": "dtype", "type": "str"}, {"lineNumber": 257, "col_offset": 55, "nodeName": "typef", "type": "str"}, {"lineNumber": 260, "col_offset": 21, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 261, "col_offset": 28, "nodeName": "typef", "type": "str"}, {"lineNumber": 262, "col_offset": 21, "nodeName": "dtype", "type": "str"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 271, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 282, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 283, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 284, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 285, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 286, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 287, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 288, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 289, "col_offset": 26, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 290, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 291, "col_offset": 26, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 292, "col_offset": 25, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 293, "col_offset": 25, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 294, "col_offset": 25, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 309, "col_offset": 16, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 309, "col_offset": 23, "nodeName": "dtype", "type": "str"}, {"lineNumber": 309, "col_offset": 30, "nodeName": "typef", "type": "str"}, {"lineNumber": 309, "col_offset": 37, "nodeName": "size", "type": "Tuple[int, int]"}, {"lineNumber": 309, "col_offset": 43, "nodeName": "stride", "type": "Tuple[int, int]"}, {"lineNumber": 309, "col_offset": 51, "nodeName": "pad", "type": "Tuple[int, int]"}, {"lineNumber": 310, "col_offset": 15, "nodeName": "_get_pooling_model", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 311, "col_offset": 22, "nodeName": "_get_expected_pooling_codegen", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "verify_codegen", "type": "Any"}, {"lineNumber": 312, "col_offset": 23, "nodeName": "func", "type": "Any"}, {"lineNumber": 312, "col_offset": 29, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 323, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 324, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 325, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 326, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 327, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 328, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 329, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 330, "col_offset": 33, "nodeName": "fp32_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 331, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 332, "col_offset": 33, "nodeName": "uint8_dtype", "type": "Tuple[str, int, int]"}, {"lineNumber": 335, "col_offset": 16, "nodeName": "dtype", "type": "str"}, {"lineNumber": 335, "col_offset": 23, "nodeName": "low", "type": "int"}, {"lineNumber": 335, "col_offset": 28, "nodeName": "high", "type": "int"}, {"lineNumber": 338, "col_offset": 16, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 338, "col_offset": 23, "nodeName": "dtype", "type": "str"}, {"lineNumber": 338, "col_offset": 30, "nodeName": "typef", "type": "str"}, {"lineNumber": 339, "col_offset": 15, "nodeName": "_get_global_pooling_model", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 340, "col_offset": 22, "nodeName": "_get_expected_global_pooling_codegen", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 341, "col_offset": 8, "nodeName": "verify_codegen", "type": "Any"}, {"lineNumber": 341, "col_offset": 23, "nodeName": "func", "type": "Any"}, {"lineNumber": 341, "col_offset": 29, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 36, "col_offset": 71, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 37, "col_offset": 70, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 46, "col_offset": 19, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 46, "col_offset": 31, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 46, "col_offset": 43, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 46, "col_offset": 55, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 50, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 52, "col_offset": 22, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 53, "col_offset": 20, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 54, "col_offset": 20, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 55, "col_offset": 22, "nodeName": "ceil_mode", "type": "bool"}, {"lineNumber": 59, "col_offset": 11, "nodeName": "dtype", "type": "str"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 61, "col_offset": 14, "nodeName": "avg_pool2d", "type": "Any"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "dtype", "type": "str"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 72, "col_offset": 9, "nodeName": "typef", "type": "str"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 95, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "dtype", "type": "str"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 99, "col_offset": 14, "nodeName": "global_avg_pool2d", "type": "Any"}, {"lineNumber": 99, "col_offset": 41, "nodeName": "out", "type": "Any"}, {"lineNumber": 100, "col_offset": 11, "nodeName": "dtype", "type": "str"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 103, "col_offset": 14, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 112, "col_offset": 31, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 112, "col_offset": 43, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 112, "col_offset": 55, "nodeName": "padding", "type": "Tuple[int, int]"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 195, "col_offset": 21, "nodeName": "input_shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 198, "col_offset": 17, "nodeName": "array", "type": "Any"}, {"lineNumber": 202, "col_offset": 82, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 202, "col_offset": 87, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 215, "col_offset": 36, "nodeName": "dtype", "type": "str"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 222, "col_offset": 29, "nodeName": "atol", "type": "Union[int, float]"}, {"lineNumber": 222, "col_offset": 40, "nodeName": "rtol", "type": "Union[float, int]"}, {"lineNumber": 222, "col_offset": 53, "nodeName": "config", "type": "Dict[str, Union[bool, Tuple[int, int], str, Tuple[int, Any]]]"}, {"lineNumber": 222, "col_offset": 79, "nodeName": "verify_saturation", "type": "bool"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 251, "col_offset": 21, "nodeName": "input_shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 254, "col_offset": 17, "nodeName": "array", "type": "Any"}, {"lineNumber": 257, "col_offset": 62, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 257, "col_offset": 67, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 264, "col_offset": 36, "nodeName": "dtype", "type": "str"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 271, "col_offset": 29, "nodeName": "atol", "type": "Union[int, float]"}, {"lineNumber": 271, "col_offset": 40, "nodeName": "rtol", "type": "Union[float, int]"}, {"lineNumber": 271, "col_offset": 53, "nodeName": "config", "type": "Dict[str, Union[str, Tuple[int, Any]]]"}, {"lineNumber": 271, "col_offset": 79, "nodeName": "verify_saturation", "type": "bool"}, {"lineNumber": 307, "col_offset": 21, "nodeName": "input_shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 310, "col_offset": 35, "nodeName": "args", "type": "Tuple[Tuple[int, Any], str, str, Tuple[int, int], Tuple[int, int], Tuple[int, int], bool, bool]"}, {"lineNumber": 310, "col_offset": 41, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 310, "col_offset": 46, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 311, "col_offset": 53, "nodeName": "args", "type": "Tuple[Tuple[int, Any], str, str, Tuple[int, int], Tuple[int, int], Tuple[int, int], bool, bool]"}, {"lineNumber": 336, "col_offset": 21, "nodeName": "input_shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 339, "col_offset": 42, "nodeName": "args", "type": "Tuple[Tuple[int, Any], str, str]"}, {"lineNumber": 339, "col_offset": 48, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 339, "col_offset": 53, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 340, "col_offset": 60, "nodeName": "args", "type": "Tuple[Tuple[int, Any], str, str]"}, {"lineNumber": 36, "col_offset": 57, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 37, "col_offset": 56, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 50, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 60, "col_offset": 18, "nodeName": "cast", "type": "Any"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "out", "type": "Any"}, {"lineNumber": 61, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 64, "col_offset": 20, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 65, "col_offset": 20, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 66, "col_offset": 22, "nodeName": "ceil_mode", "type": "bool"}, {"lineNumber": 67, "col_offset": 30, "nodeName": "count_include_pad", "type": "bool"}, {"lineNumber": 71, "col_offset": 18, "nodeName": "cast", "type": "Any"}, {"lineNumber": 71, "col_offset": 29, "nodeName": "out", "type": "Any"}, {"lineNumber": 73, "col_offset": 14, "nodeName": "power", "type": "Any"}, {"lineNumber": 73, "col_offset": 26, "nodeName": "out", "type": "Any"}, {"lineNumber": 74, "col_offset": 14, "nodeName": "avg_pool2d", "type": "Any"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "out", "type": "Any"}, {"lineNumber": 83, "col_offset": 14, "nodeName": "sqrt", "type": "Any"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "out", "type": "Any"}, {"lineNumber": 85, "col_offset": 14, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 95, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 98, "col_offset": 18, "nodeName": "cast", "type": "Any"}, {"lineNumber": 98, "col_offset": 29, "nodeName": "out", "type": "Any"}, {"lineNumber": 99, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 101, "col_offset": 18, "nodeName": "cast", "type": "Any"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "out", "type": "Any"}, {"lineNumber": 124, "col_offset": 23, "nodeName": "dtype", "type": "str"}, {"lineNumber": 133, "col_offset": 54, "nodeName": "count_include_pad", "type": "bool"}, {"lineNumber": 135, "col_offset": 87, "nodeName": "dtype", "type": "str"}, {"lineNumber": 149, "col_offset": 23, "nodeName": "dtype", "type": "str"}, {"lineNumber": 153, "col_offset": 87, "nodeName": "dtype", "type": "str"}, {"lineNumber": 198, "col_offset": 17, "nodeName": "nd", "type": "Any"}, {"lineNumber": 198, "col_offset": 30, "nodeName": "astype", "type": "Any"}, {"lineNumber": 198, "col_offset": 73, "nodeName": "dtype", "type": "str"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 254, "col_offset": 17, "nodeName": "nd", "type": "Any"}, {"lineNumber": 254, "col_offset": 30, "nodeName": "astype", "type": "Any"}, {"lineNumber": 254, "col_offset": 73, "nodeName": "dtype", "type": "str"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 36, "col_offset": 44, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 37, "col_offset": 43, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 60, "col_offset": 18, "nodeName": "relay", "type": "Any"}, {"lineNumber": 61, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 71, "col_offset": 18, "nodeName": "relay", "type": "Any"}, {"lineNumber": 73, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 73, "col_offset": 31, "nodeName": "const", "type": "Any"}, {"lineNumber": 74, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 76, "col_offset": 22, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 77, "col_offset": 20, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 78, "col_offset": 20, "nodeName": "padding", "type": "Union[Tuple[int, int, int, int], Tuple[int, int]]"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "ceil_mode", "type": "bool"}, {"lineNumber": 80, "col_offset": 30, "nodeName": "count_include_pad", "type": "bool"}, {"lineNumber": 83, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 98, "col_offset": 18, "nodeName": "relay", "type": "Any"}, {"lineNumber": 99, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 101, "col_offset": 18, "nodeName": "relay", "type": "Any"}, {"lineNumber": 123, "col_offset": 23, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 123, "col_offset": 28, "nodeName": "output_shape", "type": "Tuple[int, int, int, Any]"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 125, "col_offset": 29, "nodeName": "p", "type": "int"}, {"lineNumber": 125, "col_offset": 36, "nodeName": "p", "type": "int"}, {"lineNumber": 125, "col_offset": 41, "nodeName": "padding", "type": "Union[Tuple[int, int], Tuple[int, int, int, int]]"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "s", "type": "int"}, {"lineNumber": 126, "col_offset": 36, "nodeName": "s", "type": "int"}, {"lineNumber": 126, "col_offset": 41, "nodeName": "strides", "type": "Tuple[int, int]"}, {"lineNumber": 127, "col_offset": 27, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 127, "col_offset": 31, "nodeName": "s", "type": "int"}, {"lineNumber": 127, "col_offset": 38, "nodeName": "s", "type": "int"}, {"lineNumber": 127, "col_offset": 43, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 128, "col_offset": 27, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 135, "col_offset": 61, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 135, "col_offset": 66, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 153, "col_offset": 61, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 153, "col_offset": 66, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 198, "col_offset": 17, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 219, "col_offset": 16, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 219, "col_offset": 30, "nodeName": "func", "type": "Any"}, {"lineNumber": 219, "col_offset": 36, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 219, "col_offset": 53, "nodeName": "device", "type": "Any"}, {"lineNumber": 254, "col_offset": 17, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 268, "col_offset": 16, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 268, "col_offset": 30, "nodeName": "func", "type": "Any"}, {"lineNumber": 268, "col_offset": 36, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 268, "col_offset": 53, "nodeName": "device", "type": "Any"}, {"lineNumber": 36, "col_offset": 22, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 37, "col_offset": 21, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 37, "col_offset": 32, "nodeName": "sizes", "type": "Tuple[int, int]"}, {"lineNumber": 73, "col_offset": 31, "nodeName": "relay", "type": "Any"}, {"lineNumber": 74, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 128, "col_offset": 36, "nodeName": "ceil_mode", "type": "bool"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 198, "col_offset": 30, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 198, "col_offset": 48, "nodeName": "low", "type": "int"}, {"lineNumber": 198, "col_offset": 53, "nodeName": "high", "type": "int"}, {"lineNumber": 198, "col_offset": 59, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 219, "col_offset": 72, "nodeName": "acl", "type": "int"}, {"lineNumber": 219, "col_offset": 84, "nodeName": "config", "type": "Dict[str, Union[bool, Tuple[int, int], str, Tuple[int, Any]]]"}, {"lineNumber": 254, "col_offset": 30, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 254, "col_offset": 48, "nodeName": "low", "type": "int"}, {"lineNumber": 254, "col_offset": 53, "nodeName": "high", "type": "int"}, {"lineNumber": 254, "col_offset": 59, "nodeName": "shape", "type": "Tuple[int, Any]"}, {"lineNumber": 268, "col_offset": 72, "nodeName": "acl", "type": "int"}, {"lineNumber": 268, "col_offset": 84, "nodeName": "config", "type": "Dict[str, Union[str, Tuple[int, Any]]]"}, {"lineNumber": 198, "col_offset": 30, "nodeName": "random", "type": "Any"}, {"lineNumber": 254, "col_offset": 30, "nodeName": "random", "type": "Any"}, {"lineNumber": 198, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 254, "col_offset": 30, "nodeName": "np", "type": "module"}]