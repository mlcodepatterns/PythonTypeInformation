[{"lineNumber": 35, "col_offset": 0, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 50, "col_offset": 0, "nodeName": "_get_qnn_params", "type": "Callable[[Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 113, "col_offset": 0, "nodeName": "_get_expected_codegen", "type": "Callable[..., Any]"}, {"lineNumber": 178, "col_offset": 0, "nodeName": "test_dense", "type": "Callable[[], Any]"}, {"lineNumber": 211, "col_offset": 0, "nodeName": "test_codegen_dense", "type": "Callable[[], Any]"}, {"lineNumber": 232, "col_offset": 0, "nodeName": "test_qnn_dense", "type": "Callable[[], Any]"}, {"lineNumber": 291, "col_offset": 0, "nodeName": "test_codegen_qnn_dense", "type": "Callable[[], Any]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "a", "type": "Any"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "w", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "weights", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "out", "type": "Any"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 42, "col_offset": 7, "nodeName": "has_bias", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "input_max", "type": "float"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "input_min", "type": "float"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "kernel_max", "type": "float"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "kernel_min", "type": "float"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "output_max", "type": "Any"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "output_min", "type": "Any"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "output_zp", "type": "int"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "a", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "w", "type": "Any"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "weights", "type": "Any"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 97, "col_offset": 7, "nodeName": "has_bias", "type": "Any"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "output_shape", "type": "Tuple[Any, Any]"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 152, "col_offset": 7, "nodeName": "has_bias", "type": "Any"}, {"lineNumber": 169, "col_offset": 4, "nodeName": "input_idx", "type": "int"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "_", "type": "int"}, {"lineNumber": 175, "col_offset": 11, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 184, "col_offset": 4, "nodeName": "device", "type": "Any"}, {"lineNumber": 187, "col_offset": 4, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 189, "col_offset": 4, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 190, "col_offset": 4, "nodeName": "trials", "type": "Any"}, {"lineNumber": 192, "col_offset": 58, "nodeName": "trials", "type": "Any"}, {"lineNumber": 217, "col_offset": 4, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 218, "col_offset": 4, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 219, "col_offset": 4, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 220, "col_offset": 4, "nodeName": "trials", "type": "Any"}, {"lineNumber": 222, "col_offset": 58, "nodeName": "trials", "type": "Any"}, {"lineNumber": 238, "col_offset": 4, "nodeName": "device", "type": "Any"}, {"lineNumber": 241, "col_offset": 4, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 242, "col_offset": 4, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 243, "col_offset": 4, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 244, "col_offset": 4, "nodeName": "trials", "type": "Any"}, {"lineNumber": 246, "col_offset": 58, "nodeName": "trials", "type": "Any"}, {"lineNumber": 297, "col_offset": 4, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 298, "col_offset": 4, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 299, "col_offset": 4, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 300, "col_offset": 4, "nodeName": "trials", "type": "Any"}, {"lineNumber": 302, "col_offset": 58, "nodeName": "trials", "type": "Any"}, {"lineNumber": 329, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "var", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 39, "col_offset": 14, "nodeName": "const", "type": "Any"}, {"lineNumber": 39, "col_offset": 26, "nodeName": "w", "type": "Any"}, {"lineNumber": 39, "col_offset": 29, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 40, "col_offset": 10, "nodeName": "dense", "type": "Any"}, {"lineNumber": 40, "col_offset": 25, "nodeName": "a", "type": "Any"}, {"lineNumber": 40, "col_offset": 28, "nodeName": "weights", "type": "Any"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "w", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "b", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "biasc", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 46, "col_offset": 22, "nodeName": "b", "type": "Any"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "out", "type": "Any"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 52, "col_offset": 16, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 53, "col_offset": 28, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 54, "col_offset": 17, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 55, "col_offset": 30, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 62, "col_offset": 17, "nodeName": "max", "type": "Callable"}, {"lineNumber": 62, "col_offset": 21, "nodeName": "output_limits", "type": "List[Any]"}, {"lineNumber": 63, "col_offset": 17, "nodeName": "min", "type": "Callable"}, {"lineNumber": 63, "col_offset": 21, "nodeName": "output_limits", "type": "List[Any]"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "output_zp", "type": "int"}, {"lineNumber": 66, "col_offset": 22, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "var", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 85, "col_offset": 14, "nodeName": "const", "type": "Any"}, {"lineNumber": 85, "col_offset": 26, "nodeName": "w", "type": "Any"}, {"lineNumber": 85, "col_offset": 29, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 86, "col_offset": 10, "nodeName": "dense", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "weights", "type": "Any"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "w", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "b", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "biasc", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 101, "col_offset": 22, "nodeName": "b", "type": "Any"}, {"lineNumber": 102, "col_offset": 10, "nodeName": "requantize", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 110, "col_offset": 11, "nodeName": "out", "type": "Any"}, {"lineNumber": 110, "col_offset": 16, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 114, "col_offset": 30, "nodeName": "units", "type": "Any"}, {"lineNumber": 140, "col_offset": 7, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "param_dtype", "type": "str"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "bias_dtype", "type": "str"}, {"lineNumber": 163, "col_offset": 7, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "param_dtype", "type": "str"}, {"lineNumber": 170, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "input_idx", "type": "int"}, {"lineNumber": 173, "col_offset": 34, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "append", "type": "Callable"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "load", "type": "Any"}, {"lineNumber": 181, "col_offset": 7, "nodeName": "skip_runtime_test", "type": "Any"}, {"lineNumber": 184, "col_offset": 13, "nodeName": "Device", "type": "Any"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 190, "col_offset": 13, "nodeName": "generate_trials", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 192, "col_offset": 45, "nodeName": "composite", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 198, "col_offset": 12, "nodeName": "acl", "type": "bool"}, {"lineNumber": 212, "col_offset": 7, "nodeName": "skip_codegen_test", "type": "Any"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 220, "col_offset": 13, "nodeName": "generate_trials", "type": "Any"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 222, "col_offset": 45, "nodeName": "composite", "type": "Any"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "args", "type": "Tuple[Any, Any, Any, Any]"}, {"lineNumber": 228, "col_offset": 8, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 233, "col_offset": 4, "nodeName": "load", "type": "Any"}, {"lineNumber": 235, "col_offset": 7, "nodeName": "skip_runtime_test", "type": "Any"}, {"lineNumber": 238, "col_offset": 13, "nodeName": "Device", "type": "Any"}, {"lineNumber": 239, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 244, "col_offset": 13, "nodeName": "generate_trials", "type": "Any"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 246, "col_offset": 45, "nodeName": "composite", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 272, "col_offset": 12, "nodeName": "acl", "type": "bool"}, {"lineNumber": 292, "col_offset": 7, "nodeName": "skip_codegen_test", "type": "Any"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 300, "col_offset": 13, "nodeName": "generate_trials", "type": "Any"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 302, "col_offset": 45, "nodeName": "composite", "type": "Any"}, {"lineNumber": 303, "col_offset": 8, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 304, "col_offset": 8, "nodeName": "args", "type": "Tuple[Any, Any, Any, Any]"}, {"lineNumber": 306, "col_offset": 8, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 308, "col_offset": 8, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 330, "col_offset": 4, "nodeName": "test_dense", "type": "Callable[[], Any]"}, {"lineNumber": 331, "col_offset": 4, "nodeName": "test_qnn_dense", "type": "Callable[[], Any]"}, {"lineNumber": 332, "col_offset": 4, "nodeName": "test_codegen_dense", "type": "Callable[[], Any]"}, {"lineNumber": 333, "col_offset": 4, "nodeName": "test_codegen_qnn_dense", "type": "Callable[[], Any]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 37, "col_offset": 18, "nodeName": "next", "type": "Callable"}, {"lineNumber": 37, "col_offset": 23, "nodeName": "var_names", "type": "Iterator[str]"}, {"lineNumber": 37, "col_offset": 41, "nodeName": "shape", "type": "Any"}, {"lineNumber": 37, "col_offset": 54, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "nd", "type": "Any"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "astype", "type": "Any"}, {"lineNumber": 38, "col_offset": 71, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 39, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 40, "col_offset": 10, "nodeName": "nn", "type": "Any"}, {"lineNumber": 40, "col_offset": 43, "nodeName": "units", "type": "Any"}, {"lineNumber": 40, "col_offset": 60, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "const", "type": "Any"}, {"lineNumber": 44, "col_offset": 28, "nodeName": "b", "type": "Any"}, {"lineNumber": 44, "col_offset": 31, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "bias_add", "type": "Any"}, {"lineNumber": 45, "col_offset": 32, "nodeName": "out", "type": "Any"}, {"lineNumber": 45, "col_offset": 37, "nodeName": "biasc", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 52, "col_offset": 34, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 53, "col_offset": 17, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 54, "col_offset": 36, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 55, "col_offset": 18, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 57, "col_offset": 43, "nodeName": "input_max", "type": "float"}, {"lineNumber": 58, "col_offset": 43, "nodeName": "input_max", "type": "float"}, {"lineNumber": 59, "col_offset": 43, "nodeName": "input_min", "type": "float"}, {"lineNumber": 60, "col_offset": 43, "nodeName": "input_min", "type": "float"}, {"lineNumber": 64, "col_offset": 17, "nodeName": "output_max", "type": "Any"}, {"lineNumber": 64, "col_offset": 30, "nodeName": "output_min", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 83, "col_offset": 18, "nodeName": "next", "type": "Callable"}, {"lineNumber": 83, "col_offset": 23, "nodeName": "var_names", "type": "Iterator[str]"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "shape", "type": "Any"}, {"lineNumber": 83, "col_offset": 54, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "nd", "type": "Any"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "astype", "type": "Any"}, {"lineNumber": 84, "col_offset": 71, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 85, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 86, "col_offset": 10, "nodeName": "op", "type": "Any"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "units", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "const", "type": "Any"}, {"lineNumber": 99, "col_offset": 28, "nodeName": "b", "type": "Any"}, {"lineNumber": 100, "col_offset": 14, "nodeName": "bias_add", "type": "Any"}, {"lineNumber": 100, "col_offset": 32, "nodeName": "out", "type": "Any"}, {"lineNumber": 100, "col_offset": 37, "nodeName": "biasc", "type": "Any"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 102, "col_offset": 10, "nodeName": "op", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 106, "col_offset": 20, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "const", "type": "Any"}, {"lineNumber": 107, "col_offset": 20, "nodeName": "output_zp", "type": "int"}, {"lineNumber": 114, "col_offset": 20, "nodeName": "shape", "type": "Any"}, {"lineNumber": 115, "col_offset": 27, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 143, "col_offset": 16, "nodeName": "_", "type": "int"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 170, "col_offset": 19, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 173, "col_offset": 4, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 173, "col_offset": 38, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 173, "col_offset": 42, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "Device", "type": "Any"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 190, "col_offset": 30, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 190, "col_offset": 37, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 190, "col_offset": 44, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 192, "col_offset": 16, "nodeName": "shape", "type": "Any"}, {"lineNumber": 192, "col_offset": 23, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 192, "col_offset": 37, "nodeName": "units", "type": "Any"}, {"lineNumber": 195, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 196, "col_offset": 12, "nodeName": "shape", "type": "Any"}, {"lineNumber": 196, "col_offset": 19, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 196, "col_offset": 33, "nodeName": "units", "type": "Any"}, {"lineNumber": 196, "col_offset": 40, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 202, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 203, "col_offset": 28, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 204, "col_offset": 21, "nodeName": "units", "type": "Any"}, {"lineNumber": 205, "col_offset": 21, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 206, "col_offset": 42, "nodeName": "composite", "type": "Any"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 208, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 220, "col_offset": 30, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 220, "col_offset": 37, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 220, "col_offset": 44, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 222, "col_offset": 16, "nodeName": "shape", "type": "Any"}, {"lineNumber": 222, "col_offset": 23, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 222, "col_offset": 37, "nodeName": "units", "type": "Any"}, {"lineNumber": 225, "col_offset": 16, "nodeName": "shape", "type": "Any"}, {"lineNumber": 225, "col_offset": 23, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 225, "col_offset": 37, "nodeName": "units", "type": "Any"}, {"lineNumber": 225, "col_offset": 44, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 227, "col_offset": 14, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 227, "col_offset": 23, "nodeName": "_get_model", "type": "Callable[..., Any]"}, {"lineNumber": 228, "col_offset": 22, "nodeName": "_get_expected_codegen", "type": "Callable[..., Any]"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "verify_codegen", "type": "Any"}, {"lineNumber": 229, "col_offset": 23, "nodeName": "func", "type": "Any"}, {"lineNumber": 229, "col_offset": 29, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 233, "col_offset": 4, "nodeName": "Device", "type": "Any"}, {"lineNumber": 239, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 244, "col_offset": 30, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 244, "col_offset": 37, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 244, "col_offset": 44, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 246, "col_offset": 16, "nodeName": "shape", "type": "Any"}, {"lineNumber": 246, "col_offset": 23, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 246, "col_offset": 37, "nodeName": "units", "type": "Any"}, {"lineNumber": 253, "col_offset": 31, "nodeName": "_get_qnn_params", "type": "Callable[[Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 254, "col_offset": 12, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 254, "col_offset": 22, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 254, "col_offset": 32, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 254, "col_offset": 43, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 257, "col_offset": 23, "nodeName": "_get_qnn_model", "type": "Callable[..., Any]"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "shape", "type": "Any"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 260, "col_offset": 12, "nodeName": "units", "type": "Any"}, {"lineNumber": 261, "col_offset": 12, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 262, "col_offset": 12, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 264, "col_offset": 12, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 265, "col_offset": 12, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 266, "col_offset": 12, "nodeName": "output_zp", "type": "int"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 276, "col_offset": 21, "nodeName": "shape", "type": "Any"}, {"lineNumber": 277, "col_offset": 28, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 278, "col_offset": 21, "nodeName": "units", "type": "Any"}, {"lineNumber": 279, "col_offset": 21, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 280, "col_offset": 42, "nodeName": "composite", "type": "Any"}, {"lineNumber": 281, "col_offset": 27, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 282, "col_offset": 32, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 283, "col_offset": 28, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 284, "col_offset": 33, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 285, "col_offset": 28, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 286, "col_offset": 33, "nodeName": "output_zp", "type": "int"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "verify", "type": "Any"}, {"lineNumber": 288, "col_offset": 15, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 300, "col_offset": 30, "nodeName": "dtype", "type": "List[str]"}, {"lineNumber": 300, "col_offset": 37, "nodeName": "shape", "type": "List[Tuple[Tuple[int, int], Tuple[int, int], int]]"}, {"lineNumber": 300, "col_offset": 44, "nodeName": "composite", "type": "List[bool]"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "shape", "type": "Any"}, {"lineNumber": 302, "col_offset": 23, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 302, "col_offset": 37, "nodeName": "units", "type": "Any"}, {"lineNumber": 304, "col_offset": 16, "nodeName": "shape", "type": "Any"}, {"lineNumber": 304, "col_offset": 23, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 304, "col_offset": 37, "nodeName": "units", "type": "Any"}, {"lineNumber": 304, "col_offset": 44, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 310, "col_offset": 31, "nodeName": "_get_qnn_params", "type": "Callable[[Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 311, "col_offset": 12, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 311, "col_offset": 22, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 311, "col_offset": 32, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 311, "col_offset": 43, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 314, "col_offset": 23, "nodeName": "_get_qnn_model", "type": "Callable[..., Any]"}, {"lineNumber": 325, "col_offset": 22, "nodeName": "_get_expected_codegen", "type": "Callable[..., Any]"}, {"lineNumber": 326, "col_offset": 8, "nodeName": "verify_codegen", "type": "Any"}, {"lineNumber": 326, "col_offset": 23, "nodeName": "func", "type": "Any"}, {"lineNumber": 326, "col_offset": 29, "nodeName": "exp_codegen", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 40, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "nd", "type": "Any"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 43, "col_offset": 78, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "relay", "type": "Any"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "kernel_w", "type": "Any"}, {"lineNumber": 58, "col_offset": 32, "nodeName": "kernel_w", "type": "Any"}, {"lineNumber": 59, "col_offset": 32, "nodeName": "kernel_w", "type": "Any"}, {"lineNumber": 60, "col_offset": 32, "nodeName": "kernel_w", "type": "Any"}, {"lineNumber": 65, "col_offset": 21, "nodeName": "output_min", "type": "Any"}, {"lineNumber": 65, "col_offset": 34, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 86, "col_offset": 10, "nodeName": "qnn", "type": "Any"}, {"lineNumber": 90, "col_offset": 25, "nodeName": "const", "type": "Any"}, {"lineNumber": 90, "col_offset": 37, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 91, "col_offset": 26, "nodeName": "const", "type": "Any"}, {"lineNumber": 91, "col_offset": 38, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 92, "col_offset": 20, "nodeName": "const", "type": "Any"}, {"lineNumber": 92, "col_offset": 32, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 93, "col_offset": 21, "nodeName": "const", "type": "Any"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "nd", "type": "Any"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "relay", "type": "Any"}, {"lineNumber": 100, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 102, "col_offset": 10, "nodeName": "qnn", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 104, "col_offset": 20, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 104, "col_offset": 31, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 105, "col_offset": 20, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 105, "col_offset": 31, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "relay", "type": "Any"}, {"lineNumber": 143, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 153, "col_offset": 32, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 165, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 171, "col_offset": 31, "nodeName": "input_idx", "type": "int"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 194, "col_offset": 23, "nodeName": "array", "type": "Any"}, {"lineNumber": 196, "col_offset": 80, "nodeName": "composite", "type": "Any"}, {"lineNumber": 199, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 208, "col_offset": 54, "nodeName": "config", "type": "Dict[str, Any]"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 227, "col_offset": 35, "nodeName": "args", "type": "Tuple[Any, Any, Any, Any]"}, {"lineNumber": 227, "col_offset": 74, "nodeName": "composite", "type": "Any"}, {"lineNumber": 228, "col_offset": 45, "nodeName": "args", "type": "Tuple[Any, Any, Any, Any]"}, {"lineNumber": 228, "col_offset": 60, "nodeName": "composite", "type": "Any"}, {"lineNumber": 239, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 248, "col_offset": 23, "nodeName": "array", "type": "Any"}, {"lineNumber": 254, "col_offset": 54, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 254, "col_offset": 71, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 269, "col_offset": 21, "nodeName": "composite", "type": "Any"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 288, "col_offset": 47, "nodeName": "config", "type": "Dict[str, Any]"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 311, "col_offset": 54, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 311, "col_offset": 71, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 315, "col_offset": 13, "nodeName": "args", "type": "Tuple[Any, Any, Any, Any]"}, {"lineNumber": 317, "col_offset": 21, "nodeName": "input_zp", "type": "int"}, {"lineNumber": 318, "col_offset": 21, "nodeName": "input_sc", "type": "float"}, {"lineNumber": 319, "col_offset": 22, "nodeName": "kernel_zp", "type": "int"}, {"lineNumber": 320, "col_offset": 22, "nodeName": "kernel_sc", "type": "float"}, {"lineNumber": 321, "col_offset": 22, "nodeName": "output_zp", "type": "int"}, {"lineNumber": 322, "col_offset": 22, "nodeName": "output_sc", "type": "Any"}, {"lineNumber": 323, "col_offset": 21, "nodeName": "composite", "type": "Any"}, {"lineNumber": 325, "col_offset": 45, "nodeName": "args", "type": "Tuple[Any, Any, Any, Any]"}, {"lineNumber": 325, "col_offset": 60, "nodeName": "composite", "type": "Any"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 38, "col_offset": 50, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "kernel_max", "type": "float"}, {"lineNumber": 57, "col_offset": 21, "nodeName": "kernel_h", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "kernel_min", "type": "float"}, {"lineNumber": 58, "col_offset": 21, "nodeName": "kernel_h", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "kernel_min", "type": "float"}, {"lineNumber": 59, "col_offset": 21, "nodeName": "kernel_h", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "kernel_max", "type": "float"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "kernel_h", "type": "Any"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 84, "col_offset": 50, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 86, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 90, "col_offset": 25, "nodeName": "relay", "type": "Any"}, {"lineNumber": 91, "col_offset": 26, "nodeName": "relay", "type": "Any"}, {"lineNumber": 92, "col_offset": 20, "nodeName": "relay", "type": "Any"}, {"lineNumber": 93, "col_offset": 21, "nodeName": "relay", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 100, "col_offset": 14, "nodeName": "relay", "type": "Any"}, {"lineNumber": 102, "col_offset": 10, "nodeName": "relay", "type": "Any"}, {"lineNumber": 123, "col_offset": 27, "nodeName": "out_dtype", "type": "str"}, {"lineNumber": 125, "col_offset": 23, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 144, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 165, "col_offset": 12, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "node", "type": "Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]"}, {"lineNumber": 194, "col_offset": 23, "nodeName": "nd", "type": "Any"}, {"lineNumber": 194, "col_offset": 36, "nodeName": "astype", "type": "Any"}, {"lineNumber": 194, "col_offset": 79, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 196, "col_offset": 57, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 196, "col_offset": 62, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 199, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 227, "col_offset": 51, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 227, "col_offset": 56, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 248, "col_offset": 23, "nodeName": "nd", "type": "Any"}, {"lineNumber": 248, "col_offset": 36, "nodeName": "astype", "type": "Any"}, {"lineNumber": 248, "col_offset": 76, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 268, "col_offset": 22, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 268, "col_offset": 27, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "outputs", "type": "List[Any]"}, {"lineNumber": 316, "col_offset": 22, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 316, "col_offset": 27, "nodeName": "inputs", "type": "Set[str]"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "random", "type": "Any"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "randint", "type": "Any"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "random", "type": "Any"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "randint", "type": "Any"}, {"lineNumber": 124, "col_offset": 23, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 124, "col_offset": 28, "nodeName": "output_shape", "type": "Tuple[Any, Any]"}, {"lineNumber": 126, "col_offset": 23, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 126, "col_offset": 27, "nodeName": "units", "type": "Any"}, {"lineNumber": 144, "col_offset": 16, "nodeName": "inputs", "type": "List[Union[Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[Any]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[List[nothing]]]]], str]], Dict[str, Union[Dict[str, Union[List[List[str]], List[List[Any]], List[List[List[Any]]], str]], List[List[int]], str]]]]"}, {"lineNumber": 194, "col_offset": 23, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 199, "col_offset": 27, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 199, "col_offset": 41, "nodeName": "func", "type": "Any"}, {"lineNumber": 199, "col_offset": 47, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 199, "col_offset": 58, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 199, "col_offset": 66, "nodeName": "device", "type": "Any"}, {"lineNumber": 248, "col_offset": 23, "nodeName": "tvm", "type": "Any"}, {"lineNumber": 273, "col_offset": 27, "nodeName": "build_and_run", "type": "Any"}, {"lineNumber": 273, "col_offset": 41, "nodeName": "func", "type": "Any"}, {"lineNumber": 273, "col_offset": 47, "nodeName": "inputs", "type": "Dict[str, Any]"}, {"lineNumber": 273, "col_offset": 58, "nodeName": "params", "type": "Dict[str, Any]"}, {"lineNumber": 273, "col_offset": 66, "nodeName": "device", "type": "Any"}, {"lineNumber": 38, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "random", "type": "Any"}, {"lineNumber": 43, "col_offset": 54, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "random", "type": "Any"}, {"lineNumber": 98, "col_offset": 51, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 131, "col_offset": 57, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 131, "col_offset": 62, "nodeName": "shape", "type": "Any"}, {"lineNumber": 131, "col_offset": 83, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 131, "col_offset": 87, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 135, "col_offset": 33, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 135, "col_offset": 38, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 135, "col_offset": 66, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 135, "col_offset": 70, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 158, "col_offset": 69, "nodeName": "bias_dtype", "type": "str"}, {"lineNumber": 194, "col_offset": 36, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 194, "col_offset": 65, "nodeName": "shape", "type": "Any"}, {"lineNumber": 199, "col_offset": 85, "nodeName": "acl", "type": "bool"}, {"lineNumber": 248, "col_offset": 36, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 248, "col_offset": 62, "nodeName": "shape", "type": "Any"}, {"lineNumber": 273, "col_offset": 85, "nodeName": "acl", "type": "bool"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 166, "col_offset": 82, "nodeName": "param_dtype", "type": "str"}, {"lineNumber": 194, "col_offset": 36, "nodeName": "random", "type": "Any"}, {"lineNumber": 248, "col_offset": 36, "nodeName": "random", "type": "Any"}, {"lineNumber": 148, "col_offset": 62, "nodeName": "param_dtype", "type": "str"}, {"lineNumber": 158, "col_offset": 38, "nodeName": "weight_shape", "type": "Any"}, {"lineNumber": 194, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 248, "col_offset": 36, "nodeName": "np", "type": "module"}]