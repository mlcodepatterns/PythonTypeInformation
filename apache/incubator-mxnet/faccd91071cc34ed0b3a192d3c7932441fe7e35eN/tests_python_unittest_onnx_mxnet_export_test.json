[{"lineNumber": 37, "col_offset": 0, "nodeName": "_assert_sym_equal", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "_force_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 48, "col_offset": 0, "nodeName": "_optional_group", "type": "Callable[..., Any]"}, {"lineNumber": 55, "col_offset": 0, "nodeName": "_check_onnx_export", "type": "Callable[..., Any]"}, {"lineNumber": 25, "col_offset": 0, "nodeName": "curr_path", "type": "str"}, {"lineNumber": 34, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 83, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "dirname", "type": "Callable"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "insert", "type": "Callable"}, {"lineNumber": 34, "col_offset": 9, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 35, "col_offset": 0, "nodeName": "setLevel", "type": "Callable[[Union[int, str]], None]"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "DEBUG", "type": "int"}, {"lineNumber": 49, "col_offset": 7, "nodeName": "group", "type": "Any"}, {"lineNumber": 55, "col_offset": 60, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "data", "type": "Any"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "net_sym", "type": "Any"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "net_params", "type": "Dict[Any, Any]"}, {"lineNumber": 83, "col_offset": 17, "nodeName": "unittest", "type": "module"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "path", "type": "module"}, {"lineNumber": 25, "col_offset": 28, "nodeName": "abspath", "type": "Callable"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "path", "type": "List[str]"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "join", "type": "Callable"}, {"lineNumber": 26, "col_offset": 32, "nodeName": "curr_path", "type": "str"}, {"lineNumber": 34, "col_offset": 9, "nodeName": "logging", "type": "module"}, {"lineNumber": 35, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "logging", "type": "module"}, {"lineNumber": 43, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 43, "col_offset": 18, "nodeName": "output", "type": "Any"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "NDArray", "type": "Any"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 45, "col_offset": 16, "nodeName": "output", "type": "Any"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "symbols", "type": "Any"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "initialize", "type": "Any"}, {"lineNumber": 57, "col_offset": 11, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 58, "col_offset": 13, "nodeName": "_force_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 59, "col_offset": 14, "nodeName": "_optional_group", "type": "Callable[..., Any]"}, {"lineNumber": 59, "col_offset": 57, "nodeName": "group_outputs", "type": "Any"}, {"lineNumber": 60, "col_offset": 18, "nodeName": "name", "type": "Any"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "update", "type": "Callable"}, {"lineNumber": 61, "col_offset": 22, "nodeName": "extra_params", "type": "Any"}, {"lineNumber": 62, "col_offset": 42, "nodeName": "tmpdirname", "type": "nothing"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "onnx_file_path", "type": "str"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "imported_net", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "imported_net_output", "type": "List[Any]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "HybridBlock", "type": "Any"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "os", "type": "module"}, {"lineNumber": 25, "col_offset": 28, "nodeName": "path", "type": "module"}, {"lineNumber": 25, "col_offset": 44, "nodeName": "expanduser", "type": "Callable"}, {"lineNumber": 25, "col_offset": 63, "nodeName": "__file__", "type": "str"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "sys", "type": "module"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "path", "type": "module"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "list_inputs", "type": "Any"}, {"lineNumber": 38, "col_offset": 32, "nodeName": "list_inputs", "type": "Any"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 39, "col_offset": 38, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "nd", "type": "Any"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "output", "type": "Any"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "Group", "type": "Any"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "symbols", "type": "Any"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "net", "type": "Any"}, {"lineNumber": 57, "col_offset": 11, "nodeName": "random", "type": "Any"}, {"lineNumber": 58, "col_offset": 25, "nodeName": "net", "type": "Any"}, {"lineNumber": 58, "col_offset": 29, "nodeName": "data", "type": "Any"}, {"lineNumber": 59, "col_offset": 30, "nodeName": "net", "type": "Any"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "_reduce", "type": "Any"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "net_params", "type": "Dict[Any, Any]"}, {"lineNumber": 62, "col_offset": 9, "nodeName": "TemporaryDirectory", "type": "Type[tempfile.TemporaryDirectory[Any]]"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "join", "type": "Callable"}, {"lineNumber": 63, "col_offset": 38, "nodeName": "tmpdirname", "type": "nothing"}, {"lineNumber": 64, "col_offset": 22, "nodeName": "export_model", "type": "Any"}, {"lineNumber": 69, "col_offset": 15, "nodeName": "export_path", "type": "Any"}, {"lineNumber": 69, "col_offset": 30, "nodeName": "onnx_file_path", "type": "str"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "_assert_sym_equal", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 26, "nodeName": "net_sym", "type": "Any"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "import_to_gluon", "type": "Any"}, {"lineNumber": 74, "col_offset": 50, "nodeName": "export_path", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "_assert_sym_equal", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 75, "col_offset": 26, "nodeName": "net_sym", "type": "Any"}, {"lineNumber": 78, "col_offset": 30, "nodeName": "_force_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "out", "type": "nothing"}, {"lineNumber": 79, "col_offset": 17, "nodeName": "imp_out", "type": "nothing"}, {"lineNumber": 79, "col_offset": 28, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 40, "nodeName": "imported_net_output", "type": "List[Any]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "set_default_context", "type": "Any"}, {"lineNumber": 92, "col_offset": 14, "nodeName": "HybridSequential", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "_check_onnx_export", "type": "Callable[..., Any]"}, {"lineNumber": 95, "col_offset": 27, "nodeName": "net", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "nn", "type": "Any"}, {"lineNumber": 111, "col_offset": 14, "nodeName": "MultiOutputBlock", "type": "Type[Any]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "_check_onnx_export", "type": "Callable[..., Any]"}, {"lineNumber": 113, "col_offset": 27, "nodeName": "net", "type": "Any"}, {"lineNumber": 117, "col_offset": 14, "nodeName": "HybridSequential", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "_check_onnx_export", "type": "Callable[..., Any]"}, {"lineNumber": 120, "col_offset": 27, "nodeName": "net", "type": "Any"}, {"lineNumber": 124, "col_offset": 14, "nodeName": "HybridSequential", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "_check_onnx_export", "type": "Callable[..., Any]"}, {"lineNumber": 127, "col_offset": 27, "nodeName": "net", "type": "Any"}, {"lineNumber": 25, "col_offset": 28, "nodeName": "os", "type": "module"}, {"lineNumber": 25, "col_offset": 44, "nodeName": "path", "type": "module"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "os", "type": "module"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "lhs", "type": "Any"}, {"lineNumber": 38, "col_offset": 32, "nodeName": "rhs", "type": "Any"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "list_outputs", "type": "Any"}, {"lineNumber": 39, "col_offset": 42, "nodeName": "list_outputs", "type": "Any"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "sym", "type": "Any"}, {"lineNumber": 57, "col_offset": 11, "nodeName": "nd", "type": "Any"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "param", "type": "Any"}, {"lineNumber": 60, "col_offset": 44, "nodeName": "name", "type": "Any"}, {"lineNumber": 60, "col_offset": 50, "nodeName": "param", "type": "Any"}, {"lineNumber": 60, "col_offset": 59, "nodeName": "items", "type": "Any"}, {"lineNumber": 62, "col_offset": 9, "nodeName": "tempfile", "type": "module"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "path", "type": "module"}, {"lineNumber": 64, "col_offset": 22, "nodeName": "onnx_mxnet", "type": "Any"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "net_sym", "type": "Any"}, {"lineNumber": 66, "col_offset": 19, "nodeName": "net_params", "type": "Dict[Any, Any]"}, {"lineNumber": 68, "col_offset": 27, "nodeName": "onnx_file_path", "type": "str"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "onnx_mxnet", "type": "Any"}, {"lineNumber": 75, "col_offset": 35, "nodeName": "_optional_group", "type": "Callable[..., Any]"}, {"lineNumber": 75, "col_offset": 87, "nodeName": "group_outputs", "type": "Any"}, {"lineNumber": 78, "col_offset": 42, "nodeName": "imported_net", "type": "Any"}, {"lineNumber": 78, "col_offset": 55, "nodeName": "data", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "assert_almost_equal", "type": "Any"}, {"lineNumber": 80, "col_offset": 46, "nodeName": "out", "type": "nothing"}, {"lineNumber": 80, "col_offset": 51, "nodeName": "imp_out", "type": "nothing"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 92, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 93, "col_offset": 13, "nodeName": "name_scope", "type": "Any"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "add", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "out", "type": "Tuple[Any, ...]"}, {"lineNumber": 109, "col_offset": 23, "nodeName": "out", "type": "Tuple[Any, ...]"}, {"lineNumber": 112, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 117, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 118, "col_offset": 13, "nodeName": "name_scope", "type": "Any"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "add", "type": "Any"}, {"lineNumber": 120, "col_offset": 43, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 124, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 125, "col_offset": 13, "nodeName": "name_scope", "type": "Any"}, {"lineNumber": 126, "col_offset": 12, "nodeName": "add", "type": "Any"}, {"lineNumber": 25, "col_offset": 44, "nodeName": "os", "type": "module"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "lhs", "type": "Any"}, {"lineNumber": 39, "col_offset": 42, "nodeName": "rhs", "type": "Any"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "sym", "type": "Any"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "os", "type": "module"}, {"lineNumber": 71, "col_offset": 35, "nodeName": "import_model", "type": "Any"}, {"lineNumber": 71, "col_offset": 59, "nodeName": "export_path", "type": "Any"}, {"lineNumber": 75, "col_offset": 51, "nodeName": "imported_net", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "test_utils", "type": "Any"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "mx", "type": "Any"}, {"lineNumber": 93, "col_offset": 13, "nodeName": "net", "type": "Any"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "net", "type": "Any"}, {"lineNumber": 94, "col_offset": 20, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 94, "col_offset": 54, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 101, "col_offset": 16, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 103, "col_offset": 20, "nodeName": "net", "type": "Any"}, {"lineNumber": 104, "col_offset": 24, "nodeName": "i", "type": "int"}, {"lineNumber": 108, "col_offset": 22, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "list_outputs", "type": "Any"}, {"lineNumber": 118, "col_offset": 13, "nodeName": "net", "type": "Any"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "net", "type": "Any"}, {"lineNumber": 119, "col_offset": 20, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 119, "col_offset": 54, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 125, "col_offset": 13, "nodeName": "net", "type": "Any"}, {"lineNumber": 126, "col_offset": 12, "nodeName": "net", "type": "Any"}, {"lineNumber": 126, "col_offset": 20, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 126, "col_offset": 54, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 60, "col_offset": 59, "nodeName": "collect_params", "type": "Any"}, {"lineNumber": 67, "col_offset": 25, "nodeName": "shape_type", "type": "Any"}, {"lineNumber": 67, "col_offset": 36, "nodeName": "shape", "type": "Any"}, {"lineNumber": 71, "col_offset": 35, "nodeName": "onnx_mxnet", "type": "Any"}, {"lineNumber": 75, "col_offset": 64, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "mx", "type": "Any"}, {"lineNumber": 94, "col_offset": 20, "nodeName": "nn", "type": "Any"}, {"lineNumber": 94, "col_offset": 54, "nodeName": "nn", "type": "Any"}, {"lineNumber": 102, "col_offset": 21, "nodeName": "name_scope", "type": "Any"}, {"lineNumber": 103, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 103, "col_offset": 31, "nodeName": "HybridSequential", "type": "Any"}, {"lineNumber": 104, "col_offset": 29, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 119, "col_offset": 20, "nodeName": "nn", "type": "Any"}, {"lineNumber": 119, "col_offset": 54, "nodeName": "nn", "type": "Any"}, {"lineNumber": 126, "col_offset": 20, "nodeName": "nn", "type": "Any"}, {"lineNumber": 126, "col_offset": 54, "nodeName": "nn", "type": "Any"}, {"lineNumber": 127, "col_offset": 61, "nodeName": "array", "type": "Any"}, {"lineNumber": 60, "col_offset": 59, "nodeName": "net", "type": "Any"}, {"lineNumber": 67, "col_offset": 36, "nodeName": "data", "type": "Any"}, {"lineNumber": 75, "col_offset": 64, "nodeName": "sym", "type": "Any"}, {"lineNumber": 101, "col_offset": 16, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 101, "col_offset": 22, "nodeName": "MultiOutputBlock", "type": "Type[Any]"}, {"lineNumber": 101, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 103, "col_offset": 31, "nodeName": "nn", "type": "Any"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "add", "type": "Any"}, {"lineNumber": 108, "col_offset": 28, "nodeName": "block", "type": "Any"}, {"lineNumber": 108, "col_offset": 34, "nodeName": "x", "type": "Any"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "block", "type": "Any"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "Group", "type": "Any"}, {"lineNumber": 127, "col_offset": 61, "nodeName": "nd", "type": "Any"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "net", "type": "Any"}, {"lineNumber": 105, "col_offset": 37, "nodeName": "Dense", "type": "Any"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "values", "type": "Any"}, {"lineNumber": 112, "col_offset": 19, "nodeName": "sym", "type": "Any"}, {"lineNumber": 112, "col_offset": 29, "nodeName": "net", "type": "Any"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 105, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "_children", "type": "Any"}, {"lineNumber": 112, "col_offset": 33, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 105, "col_offset": 52, "nodeName": "i", "type": "int"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "net", "type": "Any"}, {"lineNumber": 112, "col_offset": 33, "nodeName": "sym", "type": "Any"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "self", "type": "Any"}]