[{"lineNumber": 40, "col_offset": 0, "nodeName": "run_mx_misc_operators_benchmarks", "type": "Callable[..., Any]"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "int64_tensor_inputs_add_n", "type": "List[Dict[str, List[Tuple[int, int]]]]"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "c", "type": "Any"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "mx_misc_ops", "type": "Dict[Any, Any]"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "mx_misc_op_results", "type": "Dict[Any, Any]"}, {"lineNumber": 40, "col_offset": 41, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 95, "col_offset": 7, "nodeName": "int64_tensor", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "inputs_array_ops", "type": "List[Dict[str, Union[int, List[Tuple[int, int]]]]]"}, {"lineNumber": 96, "col_offset": 27, "nodeName": "int64_tensor_inputs_array_ops", "type": "List[Dict[str, Union[int, List[Tuple[int, int]]]]]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "inputs_add_n", "type": "List[Dict[str, List[Tuple[int, int]]]]"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "int64_tensor_inputs_add_n", "type": "List[Dict[str, List[Tuple[int, int]]]]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "inputs_upsampling", "type": "List[Dict[str, Union[str, int, Tuple[int, int, int, int]]]]"}, {"lineNumber": 98, "col_offset": 28, "nodeName": "int64_tensor_inputs_upsampling", "type": "List[Dict[str, Union[str, int, Tuple[int, int, int, int]]]]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "inputs_custom", "type": "List[Dict[str, Union[str, List[Tuple[int, int]]]]]"}, {"lineNumber": 99, "col_offset": 24, "nodeName": "int64_tensor_inputs_custom", "type": "List[Dict[str, Union[str, List[Tuple[int, int]]]]]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "inputs_array_ops", "type": "List[Dict[str, Union[int, List[Tuple[int, int]]]]]"}, {"lineNumber": 101, "col_offset": 27, "nodeName": "standard_inputs_array_ops", "type": "List[Dict[str, Union[int, List[Tuple[int, int]]]]]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "inputs_add_n", "type": "List[Dict[str, List[Tuple[int, int]]]]"}, {"lineNumber": 102, "col_offset": 23, "nodeName": "standard_inputs_add_n", "type": "List[Dict[str, List[Tuple[int, int]]]]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "inputs_upsampling", "type": "List[Dict[str, Union[str, int, Tuple[int, int, int, int]]]]"}, {"lineNumber": 103, "col_offset": 28, "nodeName": "standard_inputs_upsampling", "type": "List[Dict[str, Union[str, int, Tuple[int, int, int, int]]]]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "inputs_custom", "type": "List[Dict[str, Union[str, List[Tuple[int, int]]]]]"}, {"lineNumber": 104, "col_offset": 24, "nodeName": "standard_inputs_custom", "type": "List[Dict[str, Union[str, List[Tuple[int, int]]]]]"}, {"lineNumber": 107, "col_offset": 26, "nodeName": "run_performance_test", "type": "Callable[..., List[Any]]"}, {"lineNumber": 117, "col_offset": 22, "nodeName": "run_performance_test", "type": "Callable[..., List[Any]]"}, {"lineNumber": 127, "col_offset": 27, "nodeName": "run_performance_test", "type": "Callable[..., List[Any]]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "CustomAddOneProp", "type": "Any"}, {"lineNumber": 137, "col_offset": 4, "nodeName": "create_operator", "type": "Any"}, {"lineNumber": 137, "col_offset": 22, "nodeName": "ctx", "type": "Any"}, {"lineNumber": 138, "col_offset": 23, "nodeName": "run_performance_test", "type": "Callable[..., List[Any]]"}, {"lineNumber": 148, "col_offset": 18, "nodeName": "get_remaining_miscellaneous_operators", "type": "Callable[[], Dict[Any, Any]]"}, {"lineNumber": 150, "col_offset": 25, "nodeName": "run_op_benchmarks", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any], Dict[Any, Any]]"}, {"lineNumber": 150, "col_offset": 43, "nodeName": "mx_misc_ops", "type": "Dict[Any, Any]"}, {"lineNumber": 150, "col_offset": 56, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 150, "col_offset": 63, "nodeName": "ctx", "type": "Any"}, {"lineNumber": 150, "col_offset": 68, "nodeName": "profiler", "type": "Any"}, {"lineNumber": 150, "col_offset": 78, "nodeName": "int64_tensor", "type": "Any"}, {"lineNumber": 150, "col_offset": 92, "nodeName": "warmup", "type": "Any"}, {"lineNumber": 150, "col_offset": 100, "nodeName": "runs", "type": "Any"}, {"lineNumber": 151, "col_offset": 11, "nodeName": "merge_map_list", "type": "Callable[[Any], Dict[Any, Any]]"}, {"lineNumber": 40, "col_offset": 41, "nodeName": "mx", "type": "Any"}, {"lineNumber": 111, "col_offset": 53, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 112, "col_offset": 51, "nodeName": "ctx", "type": "Any"}, {"lineNumber": 113, "col_offset": 56, "nodeName": "profiler", "type": "Any"}, {"lineNumber": 114, "col_offset": 54, "nodeName": "inputs_array_ops", "type": "List[Dict[str, Union[int, List[Tuple[int, int]]]]]"}, {"lineNumber": 115, "col_offset": 54, "nodeName": "warmup", "type": "Any"}, {"lineNumber": 116, "col_offset": 52, "nodeName": "runs", "type": "Any"}, {"lineNumber": 119, "col_offset": 49, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 120, "col_offset": 47, "nodeName": "ctx", "type": "Any"}, {"lineNumber": 121, "col_offset": 52, "nodeName": "profiler", "type": "Any"}, {"lineNumber": 122, "col_offset": 50, "nodeName": "inputs_add_n", "type": "List[Dict[str, List[Tuple[int, int]]]]"}, {"lineNumber": 123, "col_offset": 50, "nodeName": "warmup", "type": "Any"}, {"lineNumber": 124, "col_offset": 48, "nodeName": "runs", "type": "Any"}, {"lineNumber": 129, "col_offset": 54, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 130, "col_offset": 52, "nodeName": "ctx", "type": "Any"}, {"lineNumber": 131, "col_offset": 57, "nodeName": "profiler", "type": "Any"}, {"lineNumber": 132, "col_offset": 55, "nodeName": "inputs_upsampling", "type": "List[Dict[str, Union[str, int, Tuple[int, int, int, int]]]]"}, {"lineNumber": 133, "col_offset": 55, "nodeName": "warmup", "type": "Any"}, {"lineNumber": 134, "col_offset": 53, "nodeName": "runs", "type": "Any"}, {"lineNumber": 137, "col_offset": 4, "nodeName": "c", "type": "Any"}, {"lineNumber": 137, "col_offset": 43, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 140, "col_offset": 50, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 141, "col_offset": 48, "nodeName": "ctx", "type": "Any"}, {"lineNumber": 142, "col_offset": 53, "nodeName": "profiler", "type": "Any"}, {"lineNumber": 143, "col_offset": 51, "nodeName": "inputs_custom", "type": "List[Dict[str, Union[str, List[Tuple[int, int]]]]]"}, {"lineNumber": 144, "col_offset": 51, "nodeName": "warmup", "type": "Any"}, {"lineNumber": 145, "col_offset": 49, "nodeName": "runs", "type": "Any"}, {"lineNumber": 107, "col_offset": 48, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 107, "col_offset": 56, "nodeName": "MX_OP_MODULE", "type": "module"}, {"lineNumber": 108, "col_offset": 48, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 108, "col_offset": 56, "nodeName": "MX_OP_MODULE", "type": "module"}, {"lineNumber": 109, "col_offset": 48, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 109, "col_offset": 56, "nodeName": "MX_OP_MODULE", "type": "module"}, {"lineNumber": 117, "col_offset": 44, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 117, "col_offset": 52, "nodeName": "MX_OP_MODULE", "type": "module"}, {"lineNumber": 127, "col_offset": 49, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 127, "col_offset": 57, "nodeName": "MX_OP_MODULE", "type": "module"}, {"lineNumber": 138, "col_offset": 45, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 138, "col_offset": 53, "nodeName": "MX_OP_MODULE", "type": "module"}, {"lineNumber": 151, "col_offset": 89, "nodeName": "custom_benchmark", "type": "List[Any]"}, {"lineNumber": 151, "col_offset": 109, "nodeName": "mx_misc_op_results", "type": "Dict[Any, Any]"}, {"lineNumber": 151, "col_offset": 66, "nodeName": "upsampling_benchmark", "type": "List[Any]"}, {"lineNumber": 151, "col_offset": 26, "nodeName": "array_ops_benchmark", "type": "List[Any]"}, {"lineNumber": 151, "col_offset": 48, "nodeName": "add_n_benchmark", "type": "List[Any]"}]