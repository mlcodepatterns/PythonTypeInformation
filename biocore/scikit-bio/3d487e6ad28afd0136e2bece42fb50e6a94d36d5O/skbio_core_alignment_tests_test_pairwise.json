[{"lineNumber": 26, "col_offset": 29, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "filterwarnings", "type": "Callable[..., None]"}, {"lineNumber": 211, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "expected_score_m", "type": "Any"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "expected_tback_m", "type": "Any"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 61, "nodeName": "expected", "type": "Dict[str, Dict[str, int]]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 53, "col_offset": 61, "nodeName": "expected", "type": "Dict[str, Dict[str, int]]"}, {"lineNumber": 57, "col_offset": 17, "nodeName": "global_pairwise_align_protein", "type": "Callable[..., Any]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 17, "nodeName": "global_pairwise_align_protein", "type": "Callable[..., Any]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 77, "col_offset": 17, "nodeName": "global_pairwise_align_protein", "type": "Callable[..., Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 88, "col_offset": 17, "nodeName": "local_pairwise_align_protein", "type": "Callable[..., Any]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "local_pairwise_align_protein", "type": "Callable[..., Any]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "local_pairwise_align_protein", "type": "Callable[..., Any]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "make_nt_substitution_matrix", "type": "Callable"}, {"lineNumber": 119, "col_offset": 17, "nodeName": "global_pairwise_align_nucleotide", "type": "Callable[..., Any]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 130, "col_offset": 17, "nodeName": "global_pairwise_align_nucleotide", "type": "Callable[..., Any]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 142, "col_offset": 17, "nodeName": "global_pairwise_align_nucleotide", "type": "Callable[..., Any]"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "make_nt_substitution_matrix", "type": "Callable"}, {"lineNumber": 155, "col_offset": 17, "nodeName": "local_pairwise_align_nucleotide", "type": "Callable[..., Any]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 166, "col_offset": 17, "nodeName": "local_pairwise_align_nucleotide", "type": "Callable[..., Any]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 178, "col_offset": 17, "nodeName": "local_pairwise_align_nucleotide", "type": "Callable[..., Any]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 189, "col_offset": 27, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "expected_tback_m", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "actual_score_m", "type": "Any"}, {"lineNumber": 192, "col_offset": 24, "nodeName": "actual_tback_m", "type": "Any"}, {"lineNumber": 192, "col_offset": 41, "nodeName": "_init_matrices_sw", "type": "Callable[[Any, Any, Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 193, "col_offset": 38, "nodeName": "actual_score_m", "type": "Any"}, {"lineNumber": 193, "col_offset": 54, "nodeName": "expected_score_m", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 194, "col_offset": 38, "nodeName": "actual_tback_m", "type": "Any"}, {"lineNumber": 194, "col_offset": 54, "nodeName": "expected_tback_m", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "actual_score_m", "type": "Any"}, {"lineNumber": 207, "col_offset": 24, "nodeName": "actual_tback_m", "type": "Any"}, {"lineNumber": 207, "col_offset": 41, "nodeName": "_init_matrices_nw", "type": "Callable[[Any, Any, Any, Any], Tuple[Any, Any]]"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 208, "col_offset": 38, "nodeName": "actual_score_m", "type": "Any"}, {"lineNumber": 208, "col_offset": 54, "nodeName": "expected_score_m", "type": "List[List[int]]"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 209, "col_offset": 38, "nodeName": "actual_tback_m", "type": "Any"}, {"lineNumber": 209, "col_offset": 54, "nodeName": "expected_tback_m", "type": "List[List[int]]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "make_nt_substitution_matrix", "type": "Callable"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "make_nt_substitution_matrix", "type": "Callable"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 60, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 61, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 62, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 70, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 71, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 71, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 72, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 77, "col_offset": 47, "nodeName": "Protein", "type": "Type[skbio.core.sequence.ProteinSequence]"}, {"lineNumber": 78, "col_offset": 47, "nodeName": "Protein", "type": "Type[skbio.core.sequence.ProteinSequence]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 81, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 82, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 91, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 91, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 92, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 93, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 94, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 100, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 101, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 101, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 102, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 102, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 107, "col_offset": 46, "nodeName": "Protein", "type": "Type[skbio.core.sequence.ProteinSequence]"}, {"lineNumber": 108, "col_offset": 46, "nodeName": "Protein", "type": "Type[skbio.core.sequence.ProteinSequence]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 111, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 111, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 112, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 113, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 113, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 114, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 123, "col_offset": 70, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 124, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 125, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 126, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 134, "col_offset": 70, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 135, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 135, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 136, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 136, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 137, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 142, "col_offset": 50, "nodeName": "DNA", "type": "Type[skbio.core.sequence.DNASequence]"}, {"lineNumber": 143, "col_offset": 50, "nodeName": "DNA", "type": "Type[skbio.core.sequence.DNASequence]"}, {"lineNumber": 146, "col_offset": 70, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 147, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 147, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 148, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 149, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 150, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 159, "col_offset": 69, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 160, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 160, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 161, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 162, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 162, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 163, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 170, "col_offset": 69, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 171, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 171, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 172, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 173, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 173, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 178, "col_offset": 49, "nodeName": "DNA", "type": "Type[skbio.core.sequence.DNASequence]"}, {"lineNumber": 179, "col_offset": 49, "nodeName": "DNA", "type": "Type[skbio.core.sequence.DNASequence]"}, {"lineNumber": 182, "col_offset": 69, "nodeName": "m", "type": "Dict[Any, Dict[Any, int]]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 183, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 183, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 184, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 184, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 185, "col_offset": 25, "nodeName": "score", "type": "Any"}, {"lineNumber": 185, "col_offset": 41, "nodeName": "expected", "type": "Tuple[str, str, float, int, int]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "self", "type": "PairwiseAlignmentTests"}, {"lineNumber": 186, "col_offset": 25, "nodeName": "start_end_positions", "type": "Any"}, {"lineNumber": 189, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 190, "col_offset": 27, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 61, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 70, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 71, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 81, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 82, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 92, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 94, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 100, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 102, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 111, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 112, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 113, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 114, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 124, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 125, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 135, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 136, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 147, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 148, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 150, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 160, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 161, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 162, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 163, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 171, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 172, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 173, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 183, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 184, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 185, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 186, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 190, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "np", "type": "module"}]