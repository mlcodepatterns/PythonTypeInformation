[{"lineNumber": 25, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 29, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "test_parse_reference", "type": "Callable[[Any], Any]"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "test_parse_locus", "type": "Callable[[Any], Any]"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "test_parse_locus_invalid", "type": "Callable[[Any], Any]"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "test_parse_single_feature", "type": "Callable[[Any], Any]"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "test_parse_features", "type": "Callable[[Any], Any]"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "test_parse_loc_str", "type": "Callable[[Any], Any]"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "test_parse_genbanks", "type": "Callable[[Any], Any]"}, {"lineNumber": 182, "col_offset": 4, "nodeName": "test_genbank_to_generator", "type": "Callable[[Any], Any]"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "test_genbank_to_biological_sequence", "type": "Callable[[Any], Any]"}, {"lineNumber": 195, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 199, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "valid", "type": "List[nothing]"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "line", "type": "str"}, {"lineNumber": 82, "col_offset": 20, "nodeName": "lines", "type": "List[str]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "length", "type": "int"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "fp", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "fp", "type": "Any"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "fp", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 200, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "ReaderTests"}, {"lineNumber": 39, "col_offset": -1, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 50, "nodeName": "exp", "type": "Dict[str, str]"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "line", "type": "Any"}, {"lineNumber": 68, "col_offset": 18, "nodeName": "exp", "type": "Any"}, {"lineNumber": 68, "col_offset": 25, "nodeName": "zip", "type": "Any"}, {"lineNumber": 68, "col_offset": 29, "nodeName": "lines", "type": "List[List[str]]"}, {"lineNumber": 68, "col_offset": 36, "nodeName": "expects", "type": "List[Union[Dict[str, Any], Dict[str, Union[str, Type[skbio.sequence._protein.Protein], datetime.datetime, int]]]]"}, {"lineNumber": 100, "col_offset": -1, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 139, "col_offset": -1, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "pprint", "type": "Any"}, {"lineNumber": 170, "col_offset": 12, "nodeName": "example", "type": "Any"}, {"lineNumber": 170, "col_offset": 21, "nodeName": "expect", "type": "Any"}, {"lineNumber": 170, "col_offset": 31, "nodeName": "zip", "type": "Any"}, {"lineNumber": 170, "col_offset": 35, "nodeName": "examples", "type": "List[str]"}, {"lineNumber": 170, "col_offset": 45, "nodeName": "expects", "type": "List[Tuple[Dict[str, bool], numpy.ndarray]]"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "parsed", "type": "Tuple[Dict[unicode, bool], Any]"}, {"lineNumber": 176, "col_offset": 13, "nodeName": "get_data_path", "type": "Callable[..., Any]"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "fh", "type": "file"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "a", "type": "Any"}, {"lineNumber": 183, "col_offset": 13, "nodeName": "get_data_path", "type": "Callable[..., Any]"}, {"lineNumber": 184, "col_offset": 12, "nodeName": "_genbank_to_generator", "type": "Any"}, {"lineNumber": 184, "col_offset": 34, "nodeName": "fp", "type": "Any"}, {"lineNumber": 186, "col_offset": 21, "nodeName": "set_trace", "type": "Any"}, {"lineNumber": 189, "col_offset": 13, "nodeName": "get_data_path", "type": "Callable[..., Any]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 14, "nodeName": "fp", "type": "Any"}, {"lineNumber": 191, "col_offset": 12, "nodeName": "_genbank_to_biological_sequence", "type": "Any"}, {"lineNumber": 191, "col_offset": 44, "nodeName": "fp", "type": "Any"}, {"lineNumber": 192, "col_offset": 21, "nodeName": "set_trace", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "ReaderTests"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "_parse_reference", "type": "Callable[[Any], Dict[Any, Any]]"}, {"lineNumber": 47, "col_offset": 42, "nodeName": "lines", "type": "List[str]"}, {"lineNumber": 58, "col_offset": 44, "nodeName": "DNA", "type": "Any"}, {"lineNumber": 61, "col_offset": 44, "nodeName": "DNA", "type": "Any"}, {"lineNumber": 64, "col_offset": 44, "nodeName": "Protein", "type": "Type[skbio.sequence._protein.Protein]"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 69, "col_offset": 49, "nodeName": "exp", "type": "Any"}, {"lineNumber": 101, "col_offset": 14, "nodeName": "_parse_single_feature", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Any]]"}, {"lineNumber": 101, "col_offset": 36, "nodeName": "lines", "type": "List[str]"}, {"lineNumber": 140, "col_offset": 15, "nodeName": "_parse_features", "type": "Callable[..., Tuple[List[Any], List[Any]]]"}, {"lineNumber": 140, "col_offset": 31, "nodeName": "lines", "type": "List[str]"}, {"lineNumber": 171, "col_offset": 21, "nodeName": "_parse_loc_str", "type": "Callable[[Any, Any], Tuple[Dict[unicode, bool], Any]]"}, {"lineNumber": 171, "col_offset": 36, "nodeName": "example", "type": "Any"}, {"lineNumber": 171, "col_offset": 45, "nodeName": "length", "type": "int"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "assertDictEqual", "type": "Callable[..., None]"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 177, "col_offset": 13, "nodeName": "open", "type": "Callable[..., file]"}, {"lineNumber": 177, "col_offset": 18, "nodeName": "fp", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "pprint", "type": "Any"}, {"lineNumber": 179, "col_offset": 19, "nodeName": "a", "type": "Any"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "set_trace", "type": "Any"}, {"lineNumber": 185, "col_offset": 12, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 185, "col_offset": 17, "nodeName": "a", "type": "Any"}, {"lineNumber": 186, "col_offset": 21, "nodeName": "ipdb", "type": "Any"}, {"lineNumber": 192, "col_offset": 21, "nodeName": "ipdb", "type": "Any"}, {"lineNumber": 59, "col_offset": 48, "nodeName": "datetime", "type": "Type[datetime.datetime]"}, {"lineNumber": 62, "col_offset": 47, "nodeName": "datetime", "type": "Type[datetime.datetime]"}, {"lineNumber": 65, "col_offset": 48, "nodeName": "datetime", "type": "Type[datetime.datetime]"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "self", "type": "ReaderTests"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "_parse_locus", "type": "Callable[[Any], Dict[Any, Any]]"}, {"lineNumber": 69, "col_offset": 42, "nodeName": "line", "type": "Any"}, {"lineNumber": 83, "col_offset": 17, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 83, "col_offset": 35, "nodeName": "GenbankFormatError", "type": "Type[skbio.io._exception.GenbankFormatError]"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 157, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 159, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 161, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 163, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 165, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 167, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 169, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "self", "type": "ReaderTests"}, {"lineNumber": 172, "col_offset": 33, "nodeName": "parsed", "type": "Tuple[Dict[unicode, bool], Any]"}, {"lineNumber": 172, "col_offset": 44, "nodeName": "expect", "type": "Any"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "nptest", "type": "Any"}, {"lineNumber": 173, "col_offset": 32, "nodeName": "parsed", "type": "Tuple[Dict[unicode, bool], Any]"}, {"lineNumber": 173, "col_offset": 43, "nodeName": "expect", "type": "Any"}, {"lineNumber": 178, "col_offset": 16, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "ipdb", "type": "Any"}, {"lineNumber": 83, "col_offset": 17, "nodeName": "self", "type": "ReaderTests"}, {"lineNumber": 84, "col_offset": 22, "nodeName": "_parse_locus", "type": "Callable[[Any], Dict[Any, Any]]"}, {"lineNumber": 84, "col_offset": 35, "nodeName": "line", "type": "str"}, {"lineNumber": 157, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 157, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 159, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 159, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 161, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 161, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 163, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 163, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 165, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 165, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 167, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 167, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 169, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 169, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 178, "col_offset": 21, "nodeName": "_parse_genbanks", "type": "Callable[[Any], Generator[Any, Any, None]]"}, {"lineNumber": 178, "col_offset": 37, "nodeName": "fh", "type": "file"}]