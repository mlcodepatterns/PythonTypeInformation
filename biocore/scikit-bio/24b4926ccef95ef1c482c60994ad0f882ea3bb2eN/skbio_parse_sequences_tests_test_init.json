[{"lineNumber": 277, "col_offset": 0, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 21, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 126, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 242, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 284, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 279, "col_offset": 4, "nodeName": "path", "type": "str"}, {"lineNumber": 280, "col_offset": 4, "nodeName": "data_path", "type": "str"}, {"lineNumber": 281, "col_offset": 11, "nodeName": "data_path", "type": "str"}, {"lineNumber": 487, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "rev_f", "type": "Callable[[Any], Any]"}, {"lineNumber": 52, "col_offset": 21, "nodeName": "rev_f", "type": "Callable[[Any], Any]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, None], Dict[str, str]]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, None], Dict[str, str]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, None], Dict[str, str]]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, None], Dict[str, str]]"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "fastas", "type": "List[Any]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "quals", "type": "List[Any]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "obs4", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "obs5", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "obs4", "type": "Any"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "obs5", "type": "Any"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "exp_ids", "type": "List[str]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "obs_ids", "type": "List[Any]"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 233, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "exp_ids", "type": "List[str]"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "obs_ids", "type": "List[Any]"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "fastqs", "type": "List[Any]"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.FastqIterator"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 279, "col_offset": 11, "nodeName": "dirname", "type": "Callable"}, {"lineNumber": 280, "col_offset": 16, "nodeName": "join", "type": "Callable"}, {"lineNumber": 280, "col_offset": 29, "nodeName": "path", "type": "str"}, {"lineNumber": 280, "col_offset": 43, "nodeName": "fn", "type": "str"}, {"lineNumber": 286, "col_offset": 8, "nodeName": "fna1", "type": "str"}, {"lineNumber": 287, "col_offset": 8, "nodeName": "fna1gz", "type": "str"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "fq1", "type": "str"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 290, "col_offset": 8, "nodeName": "qual1", "type": "str"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "noext", "type": "str"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 303, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 323, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 336, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 354, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 355, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 361, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 362, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 381, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 382, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 392, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 393, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 399, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 400, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 406, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 407, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 413, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 414, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 421, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 422, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 488, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 55, "col_offset": 13, "nodeName": "SequenceIterator", "type": "Type[skbio.parse.sequences.SequenceIterator]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "validate_ids", "type": "Callable[..., Any]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 61, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "validate_ids", "type": "Callable[..., Any]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "validate_ids", "type": "Callable[..., Any]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 24, "nodeName": "failed", "type": "bool"}, {"lineNumber": 70, "col_offset": 13, "nodeName": "SequenceIterator", "type": "Type[skbio.parse.sequences.SequenceIterator]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "validate_ids", "type": "Callable[..., Any]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 76, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "validate_ids", "type": "Callable[..., Any]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "validate_ids", "type": "Callable[..., Any]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 85, "col_offset": 13, "nodeName": "SequenceIterator", "type": "Type[skbio.parse.sequences.SequenceIterator]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "valid_lengths", "type": "Callable[..., Any]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "valid_lengths", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 95, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "valid_lengths", "type": "Callable[..., Any]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 24, "nodeName": "failed", "type": "bool"}, {"lineNumber": 100, "col_offset": 13, "nodeName": "SequenceIterator", "type": "Type[skbio.parse.sequences.SequenceIterator]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 102, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "valid_lengths", "type": "Callable[..., Any]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 106, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "valid_lengths", "type": "Callable[..., Any]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 108, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 110, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "valid_lengths", "type": "Callable[..., Any]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 115, "col_offset": 13, "nodeName": "SequenceIterator", "type": "Type[skbio.parse.sequences.SequenceIterator]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "transform", "type": "Callable[..., Any]"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 137, "col_offset": 13, "nodeName": "FastaIterator", "type": "Type[skbio.parse.sequences.FastaIterator]"}, {"lineNumber": 138, "col_offset": 14, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 151, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 152, "col_offset": 31, "nodeName": "exp1", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 155, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 155, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 156, "col_offset": 25, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 156, "col_offset": 31, "nodeName": "exp2", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 157, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 159, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 159, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 160, "col_offset": 25, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 160, "col_offset": 31, "nodeName": "exp3", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 163, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 164, "col_offset": 25, "nodeName": "obs4", "type": "Any"}, {"lineNumber": 164, "col_offset": 31, "nodeName": "exp4", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 165, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 167, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 167, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 168, "col_offset": 25, "nodeName": "obs5", "type": "Any"}, {"lineNumber": 168, "col_offset": 31, "nodeName": "exp5", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 169, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 172, "col_offset": 13, "nodeName": "FastaIterator", "type": "Type[skbio.parse.sequences.FastaIterator]"}, {"lineNumber": 173, "col_offset": 14, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 186, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 186, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 25, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 190, "col_offset": 31, "nodeName": "exp1", "type": "Dict[str, Any]"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 191, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 193, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 193, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 197, "col_offset": 25, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 197, "col_offset": 31, "nodeName": "exp2", "type": "Dict[str, Any]"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 198, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 200, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 200, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 204, "col_offset": 25, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 204, "col_offset": 31, "nodeName": "exp3", "type": "Dict[str, Any]"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 205, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 207, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 207, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 211, "col_offset": 25, "nodeName": "obs4", "type": "Any"}, {"lineNumber": 211, "col_offset": 31, "nodeName": "exp4", "type": "Dict[str, Any]"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 214, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 214, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 218, "col_offset": 25, "nodeName": "obs5", "type": "Any"}, {"lineNumber": 218, "col_offset": 31, "nodeName": "exp5", "type": "Dict[str, Any]"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 219, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 222, "col_offset": 13, "nodeName": "FastaIterator", "type": "Type[skbio.parse.sequences.FastaIterator]"}, {"lineNumber": 223, "col_offset": 14, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 229, "col_offset": 25, "nodeName": "obs_ids", "type": "List[Any]"}, {"lineNumber": 229, "col_offset": 34, "nodeName": "exp_ids", "type": "List[str]"}, {"lineNumber": 232, "col_offset": 13, "nodeName": "FastaIterator", "type": "Type[skbio.parse.sequences.FastaIterator]"}, {"lineNumber": 233, "col_offset": 14, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 239, "col_offset": 25, "nodeName": "obs_ids", "type": "List[Any]"}, {"lineNumber": 239, "col_offset": 34, "nodeName": "exp_ids", "type": "List[str]"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 247, "col_offset": 13, "nodeName": "FastqIterator", "type": "Type[skbio.parse.sequences.FastqIterator]"}, {"lineNumber": 248, "col_offset": 14, "nodeName": "wk", "type": "skbio.parse.sequences.FastqIterator"}, {"lineNumber": 257, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 257, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 261, "col_offset": 25, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 261, "col_offset": 31, "nodeName": "exp1", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 263, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 263, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 267, "col_offset": 25, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 267, "col_offset": 31, "nodeName": "exp2", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 269, "col_offset": 15, "nodeName": "next", "type": "Callable"}, {"lineNumber": 269, "col_offset": 20, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "pop", "type": "Any"}, {"lineNumber": 272, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 273, "col_offset": 25, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 273, "col_offset": 31, "nodeName": "exp3", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 279, "col_offset": 11, "nodeName": "path", "type": "module"}, {"lineNumber": 279, "col_offset": 27, "nodeName": "abspath", "type": "Callable"}, {"lineNumber": 279, "col_offset": 43, "nodeName": "__file__", "type": "str"}, {"lineNumber": 280, "col_offset": 16, "nodeName": "path", "type": "module"}, {"lineNumber": 286, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 286, "col_offset": 20, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 287, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 287, "col_offset": 22, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 288, "col_offset": 19, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 289, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 290, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 290, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 291, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 295, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 295, "col_offset": 18, "nodeName": "fna1", "type": "str"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 301, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 301, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 302, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 302, "col_offset": 18, "nodeName": "fq1", "type": "str"}, {"lineNumber": 308, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 308, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 308, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 308, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 308, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[numpy.ndarray, str]]]"}, {"lineNumber": 314, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 314, "col_offset": 18, "nodeName": "fna1gz", "type": "str"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 320, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 320, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 322, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 322, "col_offset": 18, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 328, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 328, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 328, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 328, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 328, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[numpy.ndarray, str]]]"}, {"lineNumber": 336, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 347, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 348, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 352, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 354, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 355, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 356, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 361, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 362, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 364, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 368, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 371, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 372, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 381, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 392, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 393, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 394, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 395, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 396, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 397, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 399, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 400, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 401, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 402, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 403, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 404, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 406, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 407, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 408, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 409, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 410, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 411, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 413, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 414, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 415, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 416, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 417, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 418, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 421, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 427, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 427, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 427, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 31, "col_offset": 35, "nodeName": "arange", "type": "Any"}, {"lineNumber": 41, "col_offset": 39, "nodeName": "arange", "type": "Any"}, {"lineNumber": 46, "col_offset": 41, "nodeName": "arange", "type": "Any"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "seq_ok", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 61, "col_offset": 19, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "seqqual_bad_id", "type": "Dict[str, Any]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 67, "col_offset": 24, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "seq_ok", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 76, "col_offset": 19, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 78, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "seqqual_bad_id", "type": "Dict[str, Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "seq_ok", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 95, "col_offset": 19, "nodeName": "seqqual_bad_qual", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 97, "col_offset": 24, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 102, "col_offset": 19, "nodeName": "seq_ok", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 106, "col_offset": 19, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 108, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 110, "col_offset": 19, "nodeName": "seqqual_bad_qual", "type": "Dict[str, Any]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 115, "col_offset": 52, "nodeName": "rev_f", "type": "Callable[[Any], Any]"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 118, "col_offset": 47, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 128, "col_offset": 23, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 128, "col_offset": 32, "nodeName": "fasta1", "type": "str"}, {"lineNumber": 128, "col_offset": 41, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 128, "col_offset": 50, "nodeName": "fasta2", "type": "str"}, {"lineNumber": 128, "col_offset": 59, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 128, "col_offset": 68, "nodeName": "fasta3", "type": "str"}, {"lineNumber": 129, "col_offset": 22, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 129, "col_offset": 31, "nodeName": "qual1", "type": "str"}, {"lineNumber": 129, "col_offset": 39, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 129, "col_offset": 48, "nodeName": "qual2", "type": "str"}, {"lineNumber": 129, "col_offset": 56, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 129, "col_offset": 65, "nodeName": "qual3", "type": "str"}, {"lineNumber": 131, "col_offset": 29, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 131, "col_offset": 38, "nodeName": "qual1", "type": "str"}, {"lineNumber": 131, "col_offset": 46, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 131, "col_offset": 55, "nodeName": "qual_bad_val", "type": "str"}, {"lineNumber": 132, "col_offset": 29, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 132, "col_offset": 38, "nodeName": "qual3", "type": "str"}, {"lineNumber": 133, "col_offset": 28, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 133, "col_offset": 37, "nodeName": "qual1", "type": "str"}, {"lineNumber": 133, "col_offset": 45, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 133, "col_offset": 54, "nodeName": "qual_bad_id", "type": "str"}, {"lineNumber": 134, "col_offset": 28, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 134, "col_offset": 37, "nodeName": "qual3", "type": "str"}, {"lineNumber": 137, "col_offset": 31, "nodeName": "fastas", "type": "List[Any]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 153, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 157, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 165, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 169, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 172, "col_offset": 31, "nodeName": "fastas", "type": "List[Any]"}, {"lineNumber": 172, "col_offset": 49, "nodeName": "quals", "type": "List[Any]"}, {"lineNumber": 176, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 179, "col_offset": 63, "nodeName": "arange", "type": "Any"}, {"lineNumber": 181, "col_offset": 65, "nodeName": "arange", "type": "Any"}, {"lineNumber": 183, "col_offset": 64, "nodeName": "arange", "type": "Any"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 187, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "exp1", "type": "Dict[str, Any]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 191, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "exp2", "type": "Dict[str, Any]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 198, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "exp3", "type": "Dict[str, Any]"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 205, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 208, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "obs4", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "exp4", "type": "Dict[str, Any]"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 215, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "obs5", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "exp5", "type": "Dict[str, Any]"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 219, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.FastaIterator"}, {"lineNumber": 222, "col_offset": 31, "nodeName": "fastas", "type": "List[Any]"}, {"lineNumber": 222, "col_offset": 49, "nodeName": "bad_qual_val", "type": "List[Any]"}, {"lineNumber": 227, "col_offset": 19, "nodeName": "r", "type": "Any"}, {"lineNumber": 227, "col_offset": 39, "nodeName": "r", "type": "Any"}, {"lineNumber": 227, "col_offset": 44, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 232, "col_offset": 31, "nodeName": "fastas", "type": "List[Any]"}, {"lineNumber": 232, "col_offset": 49, "nodeName": "bad_qual_id", "type": "List[Any]"}, {"lineNumber": 237, "col_offset": 19, "nodeName": "r", "type": "Any"}, {"lineNumber": 237, "col_offset": 39, "nodeName": "r", "type": "Any"}, {"lineNumber": 237, "col_offset": 44, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 244, "col_offset": 23, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 244, "col_offset": 32, "nodeName": "fastq1", "type": "str"}, {"lineNumber": 244, "col_offset": 41, "nodeName": "StringIO", "type": "Any"}, {"lineNumber": 244, "col_offset": 50, "nodeName": "fastq2", "type": "str"}, {"lineNumber": 247, "col_offset": 31, "nodeName": "fastqs", "type": "List[Any]"}, {"lineNumber": 251, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 253, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 255, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 258, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "exp1", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 264, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "exp2", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 270, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 272, "col_offset": 8, "nodeName": "exp3", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 279, "col_offset": 11, "nodeName": "os", "type": "module"}, {"lineNumber": 279, "col_offset": 27, "nodeName": "path", "type": "module"}, {"lineNumber": 280, "col_offset": 16, "nodeName": "os", "type": "module"}, {"lineNumber": 295, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 296, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 296, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 296, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 302, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 303, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 303, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 303, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 309, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 310, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 311, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 312, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 314, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 315, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 315, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 315, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 322, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 323, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 323, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 323, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 329, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 330, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 331, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 332, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 336, "col_offset": 19, "nodeName": "fq1", "type": "str"}, {"lineNumber": 336, "col_offset": 29, "nodeName": "fna1", "type": "str"}, {"lineNumber": 337, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 337, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 337, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 349, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 349, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 350, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 350, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 351, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 351, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 352, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 352, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 356, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 356, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 356, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 357, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 357, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 358, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 358, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 359, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 363, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 363, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 364, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 364, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 364, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 365, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 365, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 366, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 366, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 370, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 370, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 371, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 371, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 371, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 372, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 372, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 372, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 373, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 373, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 378, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 379, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 381, "col_offset": 19, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 381, "col_offset": 31, "nodeName": "fna1", "type": "str"}, {"lineNumber": 381, "col_offset": 53, "nodeName": "rev_f", "type": "Callable[[Any], Any]"}, {"lineNumber": 382, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 382, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 382, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 394, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 394, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 394, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 395, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 395, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 395, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 396, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 396, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 396, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 397, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 397, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 401, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 401, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 401, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 402, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 402, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 402, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 403, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 403, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 403, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 404, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 404, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 408, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 408, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 408, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 409, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 409, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 409, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 410, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 410, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 410, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 411, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 411, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 411, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 415, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 415, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 415, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 416, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 416, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 416, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 417, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 417, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 417, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 418, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 418, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 418, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 421, "col_offset": 19, "nodeName": "noext", "type": "str"}, {"lineNumber": 421, "col_offset": 44, "nodeName": "FastaIterator", "type": "Type[skbio.parse.sequences.FastaIterator]"}, {"lineNumber": 422, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 422, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 422, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 427, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 49, "col_offset": 29, "nodeName": "st", "type": "Any"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 61, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 76, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 95, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 102, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 106, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 110, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 115, "col_offset": 52, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 118, "col_offset": 47, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 137, "col_offset": 31, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 172, "col_offset": 31, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 172, "col_offset": 49, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 178, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 222, "col_offset": 31, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 222, "col_offset": 49, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 232, "col_offset": 31, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 232, "col_offset": 49, "nodeName": "self", "type": "FastaTests"}, {"lineNumber": 247, "col_offset": 31, "nodeName": "self", "type": "FastqTests"}, {"lineNumber": 279, "col_offset": 27, "nodeName": "os", "type": "module"}, {"lineNumber": 296, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 303, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 305, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 307, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 309, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 309, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 309, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 310, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 310, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 310, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 311, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 311, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 311, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 312, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 312, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 315, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 323, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 325, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 327, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 329, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 329, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 329, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 330, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 330, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 330, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 331, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 331, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 331, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 332, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 332, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 336, "col_offset": 19, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 336, "col_offset": 29, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 337, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 339, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 341, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 378, "col_offset": 29, "nodeName": "st", "type": "Any"}, {"lineNumber": 381, "col_offset": 19, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 381, "col_offset": 31, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 382, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 384, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 386, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 421, "col_offset": 19, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 422, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 50, "col_offset": 45, "nodeName": "st", "type": "Any"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "st", "type": "Any"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "self", "type": "SeqIterTests"}, {"lineNumber": 379, "col_offset": 45, "nodeName": "st", "type": "Any"}, {"lineNumber": 379, "col_offset": 25, "nodeName": "st", "type": "Any"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "state", "type": "Union[Dict[str, Any], Dict[str, str]]"}, {"lineNumber": 187, "col_offset": 25, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 187, "col_offset": 41, "nodeName": "exp1", "type": "Dict[str, Any]"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 194, "col_offset": 41, "nodeName": "exp2", "type": "Dict[str, Any]"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 201, "col_offset": 41, "nodeName": "exp3", "type": "Dict[str, Any]"}, {"lineNumber": 208, "col_offset": 25, "nodeName": "obs4", "type": "Any"}, {"lineNumber": 208, "col_offset": 41, "nodeName": "exp4", "type": "Dict[str, Any]"}, {"lineNumber": 215, "col_offset": 25, "nodeName": "obs5", "type": "Any"}, {"lineNumber": 215, "col_offset": 41, "nodeName": "exp5", "type": "Dict[str, Any]"}, {"lineNumber": 258, "col_offset": 25, "nodeName": "obs1", "type": "Any"}, {"lineNumber": 258, "col_offset": 41, "nodeName": "exp1", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 264, "col_offset": 25, "nodeName": "obs2", "type": "Any"}, {"lineNumber": 264, "col_offset": 41, "nodeName": "exp2", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 270, "col_offset": 25, "nodeName": "obs3", "type": "Any"}, {"lineNumber": 270, "col_offset": 41, "nodeName": "exp3", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 352, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 352, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 359, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 359, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 397, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 397, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 404, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 404, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "wk", "type": "skbio.parse.sequences.SequenceIterator"}, {"lineNumber": 123, "col_offset": 25, "nodeName": "seqqual_ok", "type": "Dict[str, Any]"}, {"lineNumber": 312, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 312, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 332, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 332, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 123, "col_offset": 25, "nodeName": "self", "type": "SeqIterTests"}]