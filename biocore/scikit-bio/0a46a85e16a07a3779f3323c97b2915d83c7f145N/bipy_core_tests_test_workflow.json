[{"lineNumber": 17, "col_offset": 0, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 29, "col_offset": 19, "nodeName": "Workflow", "type": "Type[bipy.core.workflow.Workflow]"}, {"lineNumber": 105, "col_offset": 20, "nodeName": "TestCase", "type": "Type[bipy.util.unit_test.TestCase]"}, {"lineNumber": 248, "col_offset": 26, "nodeName": "Workflow", "type": "Type[bipy.core.workflow.Workflow]"}, {"lineNumber": 283, "col_offset": 20, "nodeName": "TestCase", "type": "Type[bipy.util.unit_test.TestCase]"}, {"lineNumber": 362, "col_offset": 20, "nodeName": "TestCase", "type": "Type[bipy.util.unit_test.TestCase]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "k", "type": "str"}, {"lineNumber": 373, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 20, "col_offset": 13, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 20, "col_offset": 20, "nodeName": "kwargs", "type": "Dict[str, List[int]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "final_state", "type": "None"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "gen", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "gen", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "obj", "type": "Generator[Any, Any, None]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "exp", "type": "Tuple[str, int]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "obs", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 139, "col_offset": 14, "nodeName": "debug_trace", "type": "List[Any]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "gen", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "exp_wf", "type": "List[Callable[..., Any]]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "exp_result", "type": "List[Tuple[str, int]]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "r1", "type": "Any"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "r2", "type": "Any"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "r3", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "r4", "type": "Any"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "r5", "type": "Any"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "r1", "type": "Any"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "r2", "type": "Any"}, {"lineNumber": 233, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "r4", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "r5", "type": "Any"}, {"lineNumber": 253, "col_offset": 8, "nodeName": "final_state", "type": "None"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 280, "col_offset": 8, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 286, "col_offset": 8, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 292, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 298, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 299, "col_offset": 8, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 305, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 311, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 323, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "failed", "type": "bool"}, {"lineNumber": 333, "col_offset": 8, "nodeName": "failed", "type": "bool"}, {"lineNumber": 342, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "failed", "type": "bool"}, {"lineNumber": 356, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 374, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "startswith", "type": "Callable[..., bool]"}, {"lineNumber": 23, "col_offset": 7, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 23, "col_offset": 11, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "x", "type": "int"}, {"lineNumber": 26, "col_offset": 15, "nodeName": "izip", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "methodA1", "type": "Any"}, {"lineNumber": 39, "col_offset": 22, "nodeName": "item", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "methodA2", "type": "Any"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "item", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "methodB1", "type": "Any"}, {"lineNumber": 44, "col_offset": 22, "nodeName": "item", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "methodB2", "type": "Any"}, {"lineNumber": 45, "col_offset": 22, "nodeName": "item", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "methodC1", "type": "Any"}, {"lineNumber": 50, "col_offset": 22, "nodeName": "item", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "methodC2", "type": "Any"}, {"lineNumber": 51, "col_offset": 22, "nodeName": "item", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 57, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 64, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 66, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 66, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "final_state", "type": "str"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "final_state", "type": "str"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "final_state", "type": "Tuple[str, Any]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 92, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 94, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 94, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 100, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 102, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 108, "col_offset": 25, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 109, "col_offset": 25, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 110, "col_offset": 27, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 113, "col_offset": 14, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 114, "col_offset": 18, "nodeName": "wf_setup_debug_trace", "type": "Callable[..., Any]"}, {"lineNumber": 115, "col_offset": 18, "nodeName": "wf_groupA", "type": "Callable[..., Any]"}, {"lineNumber": 116, "col_offset": 18, "nodeName": "wf_groupC", "type": "Callable[..., Any]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "obs_gen", "type": "itertools.chain[nothing]"}, {"lineNumber": 117, "col_offset": 17, "nodeName": "obs_wf", "type": "List[Any]"}, {"lineNumber": 117, "col_offset": 26, "nodeName": "_get_workflow", "type": "Callable[[Any], Tuple[itertools.chain[Any], List[Any]]]"}, {"lineNumber": 117, "col_offset": 55, "nodeName": "gen", "type": "Any"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "obs_wf", "type": "List[Any]"}, {"lineNumber": 119, "col_offset": 33, "nodeName": "exp_wf", "type": "List[Callable[..., Any]]"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "short_circuit", "type": "Any"}, {"lineNumber": 126, "col_offset": 14, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 127, "col_offset": 14, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 127, "col_offset": 29, "nodeName": "gen", "type": "Any"}, {"lineNumber": 130, "col_offset": 14, "nodeName": "next", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "obs", "type": "Any"}, {"lineNumber": 131, "col_offset": 30, "nodeName": "exp", "type": "Tuple[str, int]"}, {"lineNumber": 139, "col_offset": 14, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 140, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 140, "col_offset": 30, "nodeName": "exp", "type": "List[str]"}, {"lineNumber": 143, "col_offset": 14, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 144, "col_offset": 18, "nodeName": "wf_groupA", "type": "Callable[..., Any]"}, {"lineNumber": 144, "col_offset": 44, "nodeName": "wf_groupC", "type": "Callable[..., Any]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "obs_gen", "type": "itertools.chain[nothing]"}, {"lineNumber": 145, "col_offset": 17, "nodeName": "obs_wf", "type": "List[Any]"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "_get_workflow", "type": "Callable[[Any], Tuple[itertools.chain[Any], List[Any]]]"}, {"lineNumber": 145, "col_offset": 55, "nodeName": "gen", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 147, "col_offset": 25, "nodeName": "obs_wf", "type": "List[Any]"}, {"lineNumber": 147, "col_offset": 33, "nodeName": "exp_wf", "type": "List[Callable[..., Any]]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 150, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 151, "col_offset": 24, "nodeName": "short_circuit", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "options", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 156, "col_offset": 24, "nodeName": "short_circuit", "type": "Any"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 157, "col_offset": 25, "nodeName": "options", "type": "Any"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 158, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 159, "col_offset": 25, "nodeName": "short_circuit", "type": "Any"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "wf_groupA", "type": "Callable[..., Any]"}, {"lineNumber": 163, "col_offset": 41, "nodeName": "wf_groupC", "type": "Callable[..., Any]"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "wf_groupB", "type": "Callable[..., Any]"}, {"lineNumber": 165, "col_offset": 14, "nodeName": "_all_wf_methods", "type": "Callable[..., List[Any]]"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 166, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 166, "col_offset": 30, "nodeName": "exp", "type": "List[Callable[..., Any]]"}, {"lineNumber": 169, "col_offset": 16, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 176, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 178, "col_offset": 37, "nodeName": "exp_result", "type": "List[Tuple[str, int]]"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 179, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 179, "col_offset": 47, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 182, "col_offset": 16, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 183, "col_offset": 23, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 184, "col_offset": 23, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "options", "type": "Any"}, {"lineNumber": 190, "col_offset": 14, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 190, "col_offset": 29, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 190, "col_offset": 36, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 190, "col_offset": 40, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 192, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 193, "col_offset": 25, "nodeName": "r1", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 196, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 197, "col_offset": 25, "nodeName": "r2", "type": "Any"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 198, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 200, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 202, "col_offset": 24, "nodeName": "failed", "type": "bool"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 203, "col_offset": 25, "nodeName": "r3", "type": "Any"}, {"lineNumber": 205, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 206, "col_offset": 25, "nodeName": "r4", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 207, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 209, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 210, "col_offset": 25, "nodeName": "r5", "type": "Any"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 211, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 213, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 213, "col_offset": 47, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 216, "col_offset": 16, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 217, "col_offset": 23, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 218, "col_offset": 23, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 223, "col_offset": 14, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 223, "col_offset": 31, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 223, "col_offset": 38, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 223, "col_offset": 42, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 225, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 226, "col_offset": 25, "nodeName": "r1", "type": "Any"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 227, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 229, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 230, "col_offset": 25, "nodeName": "r2", "type": "Any"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 231, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "next", "type": "Any"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 234, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 235, "col_offset": 24, "nodeName": "failed", "type": "bool"}, {"lineNumber": 237, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 238, "col_offset": 25, "nodeName": "r4", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 239, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 241, "col_offset": 13, "nodeName": "next", "type": "Any"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 242, "col_offset": 25, "nodeName": "r5", "type": "Any"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 245, "col_offset": 49, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 253, "col_offset": 8, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 260, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 261, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 262, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 262, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 269, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 271, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 271, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 278, "col_offset": 11, "nodeName": "item", "type": "Any"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 280, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 280, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 280, "col_offset": 34, "nodeName": "item", "type": "Any"}, {"lineNumber": 285, "col_offset": 14, "nodeName": "MockWorkflowReqTest", "type": "Type[MockWorkflowReqTest]"}, {"lineNumber": 286, "col_offset": 22, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 292, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 294, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 294, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 294, "col_offset": 37, "nodeName": "exp_result", "type": "List[Tuple[str, int]]"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 295, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 295, "col_offset": 36, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 298, "col_offset": 14, "nodeName": "MockWorkflowReqTest", "type": "Type[MockWorkflowReqTest]"}, {"lineNumber": 299, "col_offset": 22, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 305, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 307, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 307, "col_offset": 37, "nodeName": "exp_result", "type": "List[Tuple[str, int]]"}, {"lineNumber": 308, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 308, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 308, "col_offset": 36, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 311, "col_offset": 14, "nodeName": "MockWorkflowReqTest", "type": "Type[MockWorkflowReqTest]"}, {"lineNumber": 312, "col_offset": 22, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 318, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 319, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 319, "col_offset": 37, "nodeName": "exp_result", "type": "List[Tuple[str, int]]"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 320, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 320, "col_offset": 36, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 323, "col_offset": 14, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "methodB1", "type": "Callable[..., Any]"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 325, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 326, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 326, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "methodB1", "type": "Callable[..., Any]"}, {"lineNumber": 331, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 331, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 333, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 334, "col_offset": 8, "nodeName": "methodB1", "type": "Callable[..., Any]"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 335, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 337, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 342, "col_offset": 14, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "methodB2", "type": "Callable[..., Any]"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 344, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 345, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "methodB2", "type": "Callable[..., Any]"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 350, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 351, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 356, "col_offset": 14, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "methodB2", "type": "Callable[..., Any]"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 358, "col_offset": 25, "nodeName": "final_state", "type": "Any"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 359, "col_offset": 25, "nodeName": "stats", "type": "Union[Dict[str, Any], collections.defaultdict[str, Any]]"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 369, "col_offset": 25, "nodeName": "priority", "type": "Any"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 370, "col_offset": 25, "nodeName": "__name__", "type": "str"}, {"lineNumber": 371, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 371, "col_offset": 25, "nodeName": "__doc__", "type": "str"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "k", "type": "str"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 24, "col_offset": 22, "nodeName": "x", "type": "int"}, {"lineNumber": 26, "col_offset": 21, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 57, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 64, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 72, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 76, "col_offset": 32, "nodeName": "name", "type": "str"}, {"lineNumber": 76, "col_offset": 38, "nodeName": "item", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 32, "nodeName": "name", "type": "str"}, {"lineNumber": 86, "col_offset": 38, "nodeName": "item", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 91, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 92, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 99, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 100, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 46, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 109, "col_offset": 58, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 110, "col_offset": 69, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 114, "col_offset": 18, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 115, "col_offset": 18, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 116, "col_offset": 18, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 117, "col_offset": 26, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 120, "col_offset": 30, "nodeName": "obs_gen", "type": "itertools.chain[nothing]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 127, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 130, "col_offset": 14, "nodeName": "obj", "type": "Generator[Any, Any, None]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 139, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 144, "col_offset": 18, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 144, "col_offset": 44, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 148, "col_offset": 30, "nodeName": "obs_gen", "type": "itertools.chain[nothing]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 150, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 151, "col_offset": 24, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 156, "col_offset": 24, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 157, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 158, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 159, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 163, "col_offset": 41, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 165, "col_offset": 14, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "x", "type": "Any"}, {"lineNumber": 176, "col_offset": 26, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 176, "col_offset": 41, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 176, "col_offset": 48, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 179, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 183, "col_offset": 23, "nodeName": "x", "type": "Any"}, {"lineNumber": 184, "col_offset": 23, "nodeName": "x", "type": "Any"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 190, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 192, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 196, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 198, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 200, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 202, "col_offset": 24, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 205, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 207, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 209, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 211, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 213, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 217, "col_offset": 23, "nodeName": "x", "type": "Any"}, {"lineNumber": 218, "col_offset": 23, "nodeName": "x", "type": "Any"}, {"lineNumber": 223, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 225, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 227, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 229, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 231, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 234, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 235, "col_offset": 24, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 237, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 239, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 241, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 259, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 260, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 261, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 268, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 269, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 277, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 278, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 292, "col_offset": 26, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 292, "col_offset": 30, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 294, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 295, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 305, "col_offset": 26, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 305, "col_offset": 30, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 308, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 308, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 318, "col_offset": 26, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 318, "col_offset": 30, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 320, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 325, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 326, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 326, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 331, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 331, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 334, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 335, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 337, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 344, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 345, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 350, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 351, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 358, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 359, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 367, "col_offset": 27, "nodeName": "z", "type": "Any"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "self", "type": "PriorityTests"}, {"lineNumber": 369, "col_offset": 25, "nodeName": "foo", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "self", "type": "PriorityTests"}, {"lineNumber": 370, "col_offset": 25, "nodeName": "foo", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 371, "col_offset": 8, "nodeName": "self", "type": "PriorityTests"}, {"lineNumber": 371, "col_offset": 25, "nodeName": "foo", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 22, "col_offset": 26, "nodeName": "kwargs", "type": "Dict[str, List[int]]"}, {"lineNumber": 24, "col_offset": 27, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 114, "col_offset": 18, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 115, "col_offset": 18, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 116, "col_offset": 18, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 117, "col_offset": 26, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 144, "col_offset": 18, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 144, "col_offset": 44, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 150, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 151, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 156, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 157, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 158, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 159, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 163, "col_offset": 41, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 165, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 176, "col_offset": 26, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 179, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 198, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 202, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 207, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 211, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 213, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 227, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 231, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 234, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 235, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 239, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 367, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 367, "col_offset": 23, "nodeName": "y", "type": "Any"}, {"lineNumber": 22, "col_offset": 33, "nodeName": "k", "type": "str"}]