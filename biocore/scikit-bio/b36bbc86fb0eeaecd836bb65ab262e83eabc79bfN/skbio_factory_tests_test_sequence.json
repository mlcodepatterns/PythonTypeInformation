[{"lineNumber": 19, "col_offset": 0, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 26, "col_offset": 27, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "path", "type": "str"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "data_path", "type": "str"}, {"lineNumber": 23, "col_offset": 11, "nodeName": "data_path", "type": "str"}, {"lineNumber": 172, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "dirname", "type": "Callable"}, {"lineNumber": 22, "col_offset": 16, "nodeName": "join", "type": "Callable"}, {"lineNumber": 22, "col_offset": 29, "nodeName": "path", "type": "str"}, {"lineNumber": 22, "col_offset": 43, "nodeName": "fn", "type": "str"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "fna1", "type": "str"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "fna1gz", "type": "str"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "fq1", "type": "str"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "qual1", "type": "str"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "noext", "type": "str"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 173, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "path", "type": "module"}, {"lineNumber": 21, "col_offset": 27, "nodeName": "abspath", "type": "Callable"}, {"lineNumber": 21, "col_offset": 43, "nodeName": "__file__", "type": "str"}, {"lineNumber": 22, "col_offset": 16, "nodeName": "path", "type": "module"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 28, "col_offset": 20, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 29, "col_offset": 22, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 31, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 32, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 33, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[[Any], Any]"}, {"lineNumber": 37, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 37, "col_offset": 21, "nodeName": "fna1", "type": "str"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "fq1", "type": "str"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 51, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 51, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 51, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[numpy.ndarray, str]]]"}, {"lineNumber": 57, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 57, "col_offset": 21, "nodeName": "fna1gz", "type": "str"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 63, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 65, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 65, "col_offset": 21, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 71, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 71, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 71, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[numpy.ndarray, str]]]"}, {"lineNumber": 79, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 124, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 136, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 143, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 156, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 164, "col_offset": 13, "nodeName": "factory", "type": "Callable[..., Any]"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 170, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 170, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "os", "type": "module"}, {"lineNumber": 21, "col_offset": 27, "nodeName": "path", "type": "module"}, {"lineNumber": 22, "col_offset": 16, "nodeName": "os", "type": "module"}, {"lineNumber": 37, "col_offset": 21, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 38, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 38, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 46, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 46, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 21, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 58, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 58, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 65, "col_offset": 21, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 66, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 66, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "fq1", "type": "str"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "fna1", "type": "str"}, {"lineNumber": 80, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 80, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 80, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 92, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 92, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 93, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 94, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 94, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 95, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 99, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 100, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 101, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 101, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 102, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 106, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 106, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 107, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 107, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 108, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 108, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 109, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 109, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 113, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 113, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 114, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 114, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 115, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 115, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 116, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 121, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 122, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 124, "col_offset": 22, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 124, "col_offset": 34, "nodeName": "fna1", "type": "str"}, {"lineNumber": 124, "col_offset": 56, "nodeName": "rev_f", "type": "Callable[[Any], Any]"}, {"lineNumber": 125, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 125, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 125, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 137, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 138, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 139, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 139, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 140, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 144, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 144, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 145, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 146, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 146, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 147, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 151, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 152, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 153, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 153, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 154, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 158, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 158, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 159, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 159, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 160, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 160, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 161, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 164, "col_offset": 22, "nodeName": "noext", "type": "str"}, {"lineNumber": 164, "col_offset": 47, "nodeName": "FastaIterator", "type": "Type[skbio.core.iterator.FastaIterator]"}, {"lineNumber": 165, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 165, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 165, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 21, "col_offset": 27, "nodeName": "os", "type": "module"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 50, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 52, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 52, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 53, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 53, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 54, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 54, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 55, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 68, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 70, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 72, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 72, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 73, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 74, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 75, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 80, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 82, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 84, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 121, "col_offset": 29, "nodeName": "st", "type": "Any"}, {"lineNumber": 124, "col_offset": 22, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 124, "col_offset": 34, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 125, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 127, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 129, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 164, "col_offset": 22, "nodeName": "self", "type": "SequenceFactoryTests"}, {"lineNumber": 165, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 122, "col_offset": 45, "nodeName": "st", "type": "Any"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "st", "type": "Any"}, {"lineNumber": 95, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 95, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 102, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 102, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 140, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 140, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 147, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 147, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 55, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 55, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 75, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "e", "type": "nothing"}]