[{"lineNumber": 21, "col_offset": 27, "nodeName": "IUPACSequence", "type": "Type[skbio.sequence._iupac_sequence.IUPACSequence]"}, {"lineNumber": 32, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 259, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 34, "col_offset": 52, "nodeName": "IUPACSequence", "type": "Type[skbio.sequence._iupac_sequence.IUPACSequence]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "expected", "type": "Dict[str, Set[str]]"}, {"lineNumber": 233, "col_offset": 8, "nodeName": "seq", "type": "ExampleIUPACSequence"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 260, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 29, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 37, "col_offset": 45, "nodeName": "cm", "type": "unittest.case._AssertRaisesContext[TypeError]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 67, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "degenerate_chars", "type": "Any"}, {"lineNumber": 47, "col_offset": 64, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "degenerate_chars", "type": "Any"}, {"lineNumber": 50, "col_offset": 64, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "degenerate_chars", "type": "Any"}, {"lineNumber": 52, "col_offset": 68, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "degenerate_chars", "type": "Set[str]"}, {"lineNumber": 58, "col_offset": 19, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "nondegenerate_chars", "type": "Any"}, {"lineNumber": 59, "col_offset": 67, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "nondegenerate_chars", "type": "Any"}, {"lineNumber": 62, "col_offset": 67, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "nondegenerate_chars", "type": "Any"}, {"lineNumber": 65, "col_offset": 25, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "nondegenerate_chars", "type": "Set[str]"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 72, "col_offset": 60, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "gap_chars", "type": "Any"}, {"lineNumber": 73, "col_offset": 57, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "gap_chars", "type": "Any"}, {"lineNumber": 76, "col_offset": 57, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 25, "nodeName": "gap_chars", "type": "Any"}, {"lineNumber": 78, "col_offset": 61, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "gap_chars", "type": "Set[str]"}, {"lineNumber": 84, "col_offset": 19, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 85, "col_offset": 59, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "alphabet", "type": "Any"}, {"lineNumber": 86, "col_offset": 56, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "alphabet", "type": "Any"}, {"lineNumber": 89, "col_offset": 56, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 91, "col_offset": 25, "nodeName": "alphabet", "type": "Any"}, {"lineNumber": 91, "col_offset": 60, "nodeName": "expected", "type": "Set[str]"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "alphabet", "type": "Set[str]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "degenerate_map", "type": "Any"}, {"lineNumber": 98, "col_offset": 62, "nodeName": "expected", "type": "Dict[str, Set[str]]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "degenerate_map", "type": "Any"}, {"lineNumber": 100, "col_offset": 51, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "degenerate_map", "type": "Any"}, {"lineNumber": 101, "col_offset": 51, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 102, "col_offset": 25, "nodeName": "degenerate_map", "type": "Any"}, {"lineNumber": 102, "col_offset": 62, "nodeName": "expected", "type": "Dict[str, Set[str]]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "degenerate_map", "type": "Any"}, {"lineNumber": 104, "col_offset": 66, "nodeName": "expected", "type": "Dict[str, Set[str]]"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "degenerate_map", "type": "Dict[str, str]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 110, "col_offset": 61, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 111, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 128, "col_offset": 65, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 129, "col_offset": 66, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 138, "col_offset": 68, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 139, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 158, "col_offset": 72, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 159, "col_offset": 73, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 169, "col_offset": 22, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 170, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 22, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 192, "col_offset": 22, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 233, "col_offset": 14, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 242, "col_offset": 14, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 243, "col_offset": 30, "nodeName": "exp", "type": "List[ExampleIUPACSequence]"}, {"lineNumber": 255, "col_offset": 14, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 257, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 257, "col_offset": 30, "nodeName": "exp", "type": "List[ExampleIUPACSequence]"}, {"lineNumber": 24, "col_offset": 21, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 24, "col_offset": 37, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 24, "col_offset": 53, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 37, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 37, "col_offset": 31, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "IUPACSequenceSubclassNoImplementation", "type": "Type[Any]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 40, "col_offset": 40, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 40, "col_offset": 44, "nodeName": "exception", "type": "TypeError"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 41, "col_offset": 45, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 41, "col_offset": 49, "nodeName": "exception", "type": "TypeError"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 42, "col_offset": 40, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 42, "col_offset": 44, "nodeName": "exception", "type": "TypeError"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 46, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "degenerate_chars", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "degenerate_chars", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 54, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 55, "col_offset": 56, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "degenerate_chars", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 67, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 67, "col_offset": 31, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 68, "col_offset": 59, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 72, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 72, "col_offset": 27, "nodeName": "gap_chars", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "gap_chars", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 80, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 80, "col_offset": 31, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 81, "col_offset": 49, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 85, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 85, "col_offset": 27, "nodeName": "alphabet", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "alphabet", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 93, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 93, "col_offset": 31, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 94, "col_offset": 48, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 97, "col_offset": 41, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 97, "col_offset": 57, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 102, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 106, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 106, "col_offset": 31, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 110, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 110, "col_offset": 61, "nodeName": "np", "type": "module"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 111, "col_offset": 61, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 113, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 113, "col_offset": 45, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 115, "col_offset": 25, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 116, "col_offset": 43, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 128, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 129, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "has_gaps", "type": "Callable[[], bool]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 132, "col_offset": 25, "nodeName": "has_gaps", "type": "Callable[[], bool]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 134, "col_offset": 24, "nodeName": "has_gaps", "type": "Callable[[], bool]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 135, "col_offset": 24, "nodeName": "has_gaps", "type": "Callable[[], bool]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 138, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 138, "col_offset": 68, "nodeName": "np", "type": "module"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 140, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 143, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 143, "col_offset": 45, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 146, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 146, "col_offset": 43, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 158, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 159, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "has_degenerates", "type": "Callable[[], bool]"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 162, "col_offset": 25, "nodeName": "has_degenerates", "type": "Callable[[], bool]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 164, "col_offset": 24, "nodeName": "has_degenerates", "type": "Callable[[], bool]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 165, "col_offset": 24, "nodeName": "has_degenerates", "type": "Callable[[], bool]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 168, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 169, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 171, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 173, "col_offset": 25, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 174, "col_offset": 45, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 176, "col_offset": 25, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "astype", "type": "Any"}, {"lineNumber": 177, "col_offset": 43, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 179, "col_offset": 25, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 182, "col_offset": 25, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 183, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "npt", "type": "Any"}, {"lineNumber": 185, "col_offset": 25, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 186, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 189, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 191, "col_offset": 22, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "has_nondegenerates", "type": "Callable[[], bool]"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 195, "col_offset": 25, "nodeName": "has_nondegenerates", "type": "Callable[[], bool]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 197, "col_offset": 24, "nodeName": "has_nondegenerates", "type": "Callable[[], bool]"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 198, "col_offset": 24, "nodeName": "has_nondegenerates", "type": "Callable[[], bool]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 206, "col_offset": 26, "nodeName": "degap", "type": "Callable[[], Any]"}, {"lineNumber": 207, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 211, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 216, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 223, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 230, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 234, "col_offset": 25, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 234, "col_offset": 58, "nodeName": "seq", "type": "ExampleIUPACSequence"}, {"lineNumber": 237, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 237, "col_offset": 44, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 238, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 238, "col_offset": 44, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 239, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 239, "col_offset": 44, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 240, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 240, "col_offset": 44, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 242, "col_offset": 21, "nodeName": "expand_degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 242, "col_offset": 75, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 247, "col_offset": 23, "nodeName": "arange", "type": "Any"}, {"lineNumber": 251, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 252, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 253, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 254, "col_offset": 15, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 255, "col_offset": 21, "nodeName": "expand_degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 256, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 37, "col_offset": 13, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 40, "col_offset": 44, "nodeName": "cm", "type": "unittest.case._AssertRaisesContext[TypeError]"}, {"lineNumber": 41, "col_offset": 49, "nodeName": "cm", "type": "unittest.case._AssertRaisesContext[TypeError]"}, {"lineNumber": 42, "col_offset": 44, "nodeName": "cm", "type": "unittest.case._AssertRaisesContext[TypeError]"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 54, "col_offset": 13, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 67, "col_offset": 13, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 72, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 78, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 80, "col_offset": 13, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 85, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 91, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 93, "col_offset": 13, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 106, "col_offset": 13, "nodeName": "self", "type": "TestIUPACSequence"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 110, "col_offset": 27, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 111, "col_offset": 22, "nodeName": "gaps", "type": "Callable[[], Any]"}, {"lineNumber": 111, "col_offset": 61, "nodeName": "np", "type": "module"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 119, "col_offset": 52, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 122, "col_offset": 55, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 125, "col_offset": 60, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 128, "col_offset": 27, "nodeName": "has_gaps", "type": "Callable[[], bool]"}, {"lineNumber": 129, "col_offset": 27, "nodeName": "has_gaps", "type": "Callable[[], bool]"}, {"lineNumber": 138, "col_offset": 27, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 139, "col_offset": 22, "nodeName": "degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 140, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 149, "col_offset": 52, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 152, "col_offset": 55, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 155, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 155, "col_offset": 60, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 158, "col_offset": 27, "nodeName": "has_degenerates", "type": "Callable[[], bool]"}, {"lineNumber": 159, "col_offset": 27, "nodeName": "has_degenerates", "type": "Callable[[], bool]"}, {"lineNumber": 168, "col_offset": 27, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 170, "col_offset": 22, "nodeName": "nondegenerates", "type": "Callable[[], Any]"}, {"lineNumber": 171, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 180, "col_offset": 52, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 183, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 183, "col_offset": 55, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 186, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 186, "col_offset": 60, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 189, "col_offset": 27, "nodeName": "has_nondegenerates", "type": "Callable[[], bool]"}, {"lineNumber": 191, "col_offset": 27, "nodeName": "has_nondegenerates", "type": "Callable[[], bool]"}, {"lineNumber": 207, "col_offset": 65, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 212, "col_offset": 49, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 218, "col_offset": 49, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 225, "col_offset": 49, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 230, "col_offset": 65, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 234, "col_offset": 30, "nodeName": "expand_degenerates", "type": "Callable[[], Any]"}, {"lineNumber": 247, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 251, "col_offset": 45, "nodeName": "kw", "type": "Dict[str, Any]"}, {"lineNumber": 252, "col_offset": 45, "nodeName": "kw", "type": "Dict[str, Any]"}, {"lineNumber": 253, "col_offset": 45, "nodeName": "kw", "type": "Dict[str, Any]"}, {"lineNumber": 254, "col_offset": 45, "nodeName": "kw", "type": "Dict[str, Any]"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 113, "col_offset": 25, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 115, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "ones", "type": "Any"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 132, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 134, "col_offset": 24, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 135, "col_offset": 24, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 143, "col_offset": 25, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 146, "col_offset": 25, "nodeName": "ones", "type": "Any"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 162, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 164, "col_offset": 24, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 165, "col_offset": 24, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 173, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 176, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "ones", "type": "Any"}, {"lineNumber": 179, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 182, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 185, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 194, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 195, "col_offset": 25, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 197, "col_offset": 24, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 198, "col_offset": 24, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 206, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 209, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 211, "col_offset": 65, "nodeName": "arange", "type": "Any"}, {"lineNumber": 214, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 220, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 227, "col_offset": 26, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 234, "col_offset": 30, "nodeName": "seq", "type": "ExampleIUPACSequence"}, {"lineNumber": 242, "col_offset": 21, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 255, "col_offset": 21, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 110, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 111, "col_offset": 22, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 113, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 128, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 129, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 138, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 139, "col_offset": 22, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 143, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 146, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 158, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 159, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 168, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 170, "col_offset": 22, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 189, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 191, "col_offset": 27, "nodeName": "ExampleIUPACSequence", "type": "Type[ExampleIUPACSequence]"}, {"lineNumber": 206, "col_offset": 65, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 210, "col_offset": 49, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 211, "col_offset": 65, "nodeName": "np", "type": "module"}, {"lineNumber": 215, "col_offset": 49, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 221, "col_offset": 72, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 228, "col_offset": 72, "nodeName": "kw", "type": "Dict[str, str]"}, {"lineNumber": 255, "col_offset": 51, "nodeName": "kw", "type": "Dict[str, Any]"}, {"lineNumber": 209, "col_offset": 65, "nodeName": "arange", "type": "Any"}, {"lineNumber": 214, "col_offset": 66, "nodeName": "arange", "type": "Any"}, {"lineNumber": 221, "col_offset": 55, "nodeName": "arange", "type": "Any"}, {"lineNumber": 228, "col_offset": 55, "nodeName": "arange", "type": "Any"}, {"lineNumber": 209, "col_offset": 65, "nodeName": "np", "type": "module"}, {"lineNumber": 214, "col_offset": 66, "nodeName": "np", "type": "module"}, {"lineNumber": 221, "col_offset": 55, "nodeName": "np", "type": "module"}, {"lineNumber": 228, "col_offset": 55, "nodeName": "np", "type": "module"}]