[{"lineNumber": 22, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 234, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "fna1", "type": "str"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "fna1gz", "type": "str"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "fq1", "type": "str"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "qual1", "type": "str"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "noext", "type": "str"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "qs1", "type": "str"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "qs1gz", "type": "str"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "o", "type": "Any"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "it", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 202, "col_offset": 12, "nodeName": "null", "type": "Optional[Union[str, List[nothing], Tuple[()]]]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "obs", "type": "Any"}, {"lineNumber": 235, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 24, "col_offset": 20, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 25, "col_offset": 22, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 27, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 28, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 29, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 31, "col_offset": 21, "nodeName": "get_data_path", "type": "Callable[..., str]"}, {"lineNumber": 35, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 35, "col_offset": 18, "nodeName": "fna1", "type": "str"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 41, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 42, "col_offset": 18, "nodeName": "fq1", "type": "str"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 48, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 48, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[numpy.ndarray, str]]]"}, {"lineNumber": 54, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 54, "col_offset": 18, "nodeName": "qs1", "type": "str"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 64, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 64, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[str, numpy.ndarray]]]"}, {"lineNumber": 70, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 70, "col_offset": 18, "nodeName": "fna1gz", "type": "str"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 76, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 78, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 78, "col_offset": 18, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 84, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 84, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 84, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[numpy.ndarray, str]]]"}, {"lineNumber": 90, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 90, "col_offset": 18, "nodeName": "qs1gz", "type": "str"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "o", "type": "nothing"}, {"lineNumber": 100, "col_offset": 15, "nodeName": "e", "type": "nothing"}, {"lineNumber": 100, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 100, "col_offset": 24, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 100, "col_offset": 29, "nodeName": "exp", "type": "List[Dict[str, Union[str, numpy.ndarray]]]"}, {"lineNumber": 108, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 126, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 133, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 140, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 165, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 185, "col_offset": 12, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 186, "col_offset": 12, "nodeName": "exp", "type": "List[Union[Dict[str, Union[numpy.ndarray, str]], Dict[str, Optional[str]]]]"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 193, "col_offset": 13, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 199, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 199, "col_offset": 30, "nodeName": "exp", "type": "List[Dict[str, Optional[str]]]"}, {"lineNumber": 220, "col_offset": 14, "nodeName": "_open_or_none", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 220, "col_offset": 34, "nodeName": "fna1", "type": "str"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 35, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 36, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 36, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 42, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 43, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 43, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 43, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 54, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 55, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 55, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 70, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 71, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 78, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 79, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 79, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 79, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 90, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 91, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 91, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 108, "col_offset": 19, "nodeName": "fq1", "type": "str"}, {"lineNumber": 108, "col_offset": 29, "nodeName": "fna1", "type": "str"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 109, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 109, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 121, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 122, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 122, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 123, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 123, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 128, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 128, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 129, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 129, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 130, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 135, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 135, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 136, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 136, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 137, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 138, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 142, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 143, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 143, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 144, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 144, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 145, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "st", "type": "Any"}, {"lineNumber": 153, "col_offset": 19, "nodeName": "fq1gz", "type": "str"}, {"lineNumber": 153, "col_offset": 31, "nodeName": "fna1", "type": "str"}, {"lineNumber": 153, "col_offset": 53, "nodeName": "rev_f", "type": "Callable[[Any], Any]"}, {"lineNumber": 154, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 154, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 154, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 166, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 166, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 167, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 168, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 168, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 169, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 173, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 173, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 174, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 175, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 175, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 176, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 180, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 181, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 181, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 182, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 182, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 183, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 183, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 187, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 187, "col_offset": 40, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 188, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 188, "col_offset": 42, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 189, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 189, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 190, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 190, "col_offset": 36, "nodeName": "e", "type": "Dict[str, Optional[str]]"}, {"lineNumber": 193, "col_offset": 19, "nodeName": "noext", "type": "str"}, {"lineNumber": 193, "col_offset": 44, "nodeName": "FastaIterator", "type": "Type[skbio.parse.sequences.iterator.FastaIterator]"}, {"lineNumber": 194, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 194, "col_offset": 30, "nodeName": "rec", "type": "Any"}, {"lineNumber": 194, "col_offset": 37, "nodeName": "it", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 207, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 207, "col_offset": 31, "nodeName": "IOError", "type": "Type[OSError]"}, {"lineNumber": 208, "col_offset": 12, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 211, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 211, "col_offset": 31, "nodeName": "IOError", "type": "Type[OSError]"}, {"lineNumber": 212, "col_offset": 12, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 216, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 216, "col_offset": 31, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 220, "col_offset": 34, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 221, "col_offset": 24, "nodeName": "obs", "type": "Any"}, {"lineNumber": 225, "col_offset": 18, "nodeName": "IOError", "type": "Type[OSError]"}, {"lineNumber": 227, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 227, "col_offset": 31, "nodeName": "IOError", "type": "Type[OSError]"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "_open_or_none", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 228, "col_offset": 26, "nodeName": "bogus_opener", "type": "Callable[[Any], Any]"}, {"lineNumber": 228, "col_offset": 40, "nodeName": "fna1", "type": "str"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 231, "col_offset": 24, "nodeName": "_is_single_iterator_type", "type": "Callable[[Any], bool]"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 43, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 45, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 47, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 49, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 49, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 50, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 50, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 51, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 51, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 52, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 56, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 65, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 65, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 66, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 66, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 67, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 67, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 67, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 68, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 79, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 81, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 83, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 85, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 85, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 86, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 86, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 87, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 87, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 88, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 92, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 96, "col_offset": 24, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 101, "col_offset": 44, "nodeName": "e", "type": "nothing"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 102, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 102, "col_offset": 46, "nodeName": "e", "type": "nothing"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 103, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 103, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 104, "col_offset": 29, "nodeName": "all", "type": "nothing"}, {"lineNumber": 108, "col_offset": 19, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 108, "col_offset": 29, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 111, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 113, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 150, "col_offset": 29, "nodeName": "st", "type": "Any"}, {"lineNumber": 153, "col_offset": 19, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 153, "col_offset": 31, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 154, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 156, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 158, "col_offset": 40, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 193, "col_offset": 19, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 194, "col_offset": 15, "nodeName": "rec", "type": "Any"}, {"lineNumber": 203, "col_offset": 17, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 203, "col_offset": 35, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 204, "col_offset": 16, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 204, "col_offset": 21, "nodeName": "null", "type": "Optional[Union[Tuple[()], List[nothing], str]]"}, {"lineNumber": 207, "col_offset": 13, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 211, "col_offset": 13, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 216, "col_offset": 13, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 217, "col_offset": 18, "nodeName": "fna1", "type": "str"}, {"lineNumber": 217, "col_offset": 29, "nodeName": "fq1", "type": "str"}, {"lineNumber": 217, "col_offset": 45, "nodeName": "qual1", "type": "str"}, {"lineNumber": 227, "col_offset": 13, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 228, "col_offset": 40, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 151, "col_offset": 45, "nodeName": "st", "type": "Any"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "st", "type": "Any"}, {"lineNumber": 203, "col_offset": 17, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 217, "col_offset": 18, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 217, "col_offset": 29, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 217, "col_offset": 45, "nodeName": "self", "type": "SequenceLoadTests"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 124, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 131, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 131, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 169, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 169, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 176, "col_offset": 25, "nodeName": "o", "type": "Any"}, {"lineNumber": 176, "col_offset": 38, "nodeName": "e", "type": "Dict[str, Union[numpy.ndarray, str]]"}, {"lineNumber": 52, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 52, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 68, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 68, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 88, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 88, "col_offset": 42, "nodeName": "e", "type": "nothing"}, {"lineNumber": 104, "col_offset": 29, "nodeName": "o", "type": "nothing"}, {"lineNumber": 104, "col_offset": 42, "nodeName": "e", "type": "nothing"}]