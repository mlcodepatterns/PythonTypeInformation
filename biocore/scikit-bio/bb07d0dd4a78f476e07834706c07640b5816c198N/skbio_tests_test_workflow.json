[{"lineNumber": 18, "col_offset": 0, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "Workflow", "type": "Type[skbio.workflow.Workflow]"}, {"lineNumber": 102, "col_offset": 20, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 257, "col_offset": 26, "nodeName": "Workflow", "type": "Type[skbio.workflow.Workflow]"}, {"lineNumber": 291, "col_offset": 20, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 372, "col_offset": 20, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 384, "col_offset": 23, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 392, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 399, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "k", "type": "str"}, {"lineNumber": 406, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 21, "col_offset": 13, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 21, "col_offset": 20, "nodeName": "kwargs", "type": "Dict[str, List[int]]"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "item", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "state", "type": "Union[List[Any], str]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "gen", "type": "Any"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "obj", "type": "Generator[Any, Any, None]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "exp", "type": "List[Union[str, int]]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "obs", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "obs_trace", "type": "Set[Tuple[Any, int]]"}, {"lineNumber": 139, "col_offset": 20, "nodeName": "debug_trace", "type": "Set[Tuple[Any, int]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "obs_pre_state", "type": "Dict[Tuple[Any, int], Any]"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "debug_pre_state", "type": "Dict[Tuple[Any, int], Any]"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "obs_post_state", "type": "Dict[Tuple[Any, int], Any]"}, {"lineNumber": 141, "col_offset": 25, "nodeName": "debug_post_state", "type": "Dict[Tuple[Any, int], Any]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "exp_result", "type": "List[List[Union[str, int]]]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 189, "col_offset": 13, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "r1", "type": "Any"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "r2", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "r3", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "r4", "type": "Any"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "r5", "type": "Any"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 227, "col_offset": 13, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "r1", "type": "Any"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "r2", "type": "Any"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "r4", "type": "Any"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "r5", "type": "Any"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "state", "type": "None"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "state", "type": "List[Optional[Any]]"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 279, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 284, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 293, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 294, "col_offset": 8, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 300, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 313, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 328, "col_offset": 8, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 333, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 340, "col_offset": 8, "nodeName": "failed", "type": "bool"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "failed", "type": "bool"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "state", "type": "List[Optional[str]]"}, {"lineNumber": 386, "col_offset": 8, "nodeName": "ne", "type": "skbio.workflow.NotExecuted"}, {"lineNumber": 387, "col_offset": 8, "nodeName": "obs", "type": "skbio.workflow.NotExecuted"}, {"lineNumber": 394, "col_offset": 8, "nodeName": "e", "type": "skbio.workflow.Exists"}, {"lineNumber": 401, "col_offset": 8, "nodeName": "nn", "type": "skbio.workflow.NotNone"}, {"lineNumber": 407, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 22, "col_offset": 11, "nodeName": "startswith", "type": "Callable[..., bool]"}, {"lineNumber": 24, "col_offset": 7, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 24, "col_offset": 11, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 25, "col_offset": 16, "nodeName": "x", "type": "int"}, {"lineNumber": 27, "col_offset": 15, "nodeName": "zip", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "state", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "methodA1", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "methodA2", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "methodB1", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "methodB2", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "methodC1", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "methodC2", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 57, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 65, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "state", "type": "str"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "state", "type": "str"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "state", "type": "Union[Any, str]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 99, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 107, "col_offset": 25, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 109, "col_offset": 27, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 114, "col_offset": 14, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 115, "col_offset": 14, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 115, "col_offset": 29, "nodeName": "gen", "type": "Any"}, {"lineNumber": 118, "col_offset": 14, "nodeName": "next", "type": "Callable"}, {"lineNumber": 118, "col_offset": 19, "nodeName": "obj", "type": "Generator[Any, Any, None]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "obs", "type": "Any"}, {"lineNumber": 119, "col_offset": 30, "nodeName": "exp", "type": "List[Union[str, int]]"}, {"lineNumber": 121, "col_offset": 20, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 139, "col_offset": 20, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 141, "col_offset": 25, "nodeName": "obj_debug", "type": "MockWorkflow"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 143, "col_offset": 25, "nodeName": "obs_trace", "type": "Set[Tuple[Any, int]]"}, {"lineNumber": 143, "col_offset": 36, "nodeName": "exp_trace", "type": "Set[Tuple[str, int]]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 144, "col_offset": 25, "nodeName": "obs_pre_state", "type": "Dict[Tuple[Any, int], Any]"}, {"lineNumber": 144, "col_offset": 40, "nodeName": "exp_pre_state", "type": "Dict[Tuple[str, int], Union[List[Union[str, int]], List[Optional[int]]]]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "obs_post_state", "type": "Dict[Tuple[Any, int], Any]"}, {"lineNumber": 145, "col_offset": 41, "nodeName": "exp_post_state", "type": "Dict[Tuple[str, int], List[Union[str, int]]]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "options", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 150, "col_offset": 24, "nodeName": "short_circuit", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "options", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 25, "nodeName": "short_circuit", "type": "Any"}, {"lineNumber": 161, "col_offset": 15, "nodeName": "wf_groupA", "type": "Callable[..., Any]"}, {"lineNumber": 161, "col_offset": 41, "nodeName": "wf_groupC", "type": "Callable[..., Any]"}, {"lineNumber": 162, "col_offset": 15, "nodeName": "wf_groupB", "type": "Callable[..., Any]"}, {"lineNumber": 163, "col_offset": 14, "nodeName": "_all_wf_methods", "type": "Callable[[], List[Any]]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 164, "col_offset": 25, "nodeName": "obs", "type": "List[Any]"}, {"lineNumber": 164, "col_offset": 30, "nodeName": "exp", "type": "List[Callable[..., Any]]"}, {"lineNumber": 167, "col_offset": 16, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 177, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 179, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 179, "col_offset": 37, "nodeName": "exp_result", "type": "List[List[Union[str, int]]]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 180, "col_offset": 47, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 183, "col_offset": 16, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "options", "type": "Any"}, {"lineNumber": 195, "col_offset": 14, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 195, "col_offset": 29, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 195, "col_offset": 36, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 195, "col_offset": 40, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 197, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 197, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 198, "col_offset": 25, "nodeName": "r1", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 199, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 201, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 201, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 202, "col_offset": 25, "nodeName": "r2", "type": "Any"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 203, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 205, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 205, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 206, "col_offset": 25, "nodeName": "state", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 207, "col_offset": 24, "nodeName": "failed", "type": "bool"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 208, "col_offset": 25, "nodeName": "r3", "type": "Any"}, {"lineNumber": 210, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 210, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 211, "col_offset": 25, "nodeName": "r4", "type": "Any"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 214, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 214, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 215, "col_offset": 25, "nodeName": "r5", "type": "Any"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 216, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 218, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 218, "col_offset": 47, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 221, "col_offset": 16, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 232, "col_offset": 14, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 232, "col_offset": 31, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 232, "col_offset": 38, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 232, "col_offset": 42, "nodeName": "ff", "type": "Callable[[Any], Any]"}, {"lineNumber": 234, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 234, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 235, "col_offset": 25, "nodeName": "r1", "type": "Any"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 236, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 238, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 238, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 239, "col_offset": 25, "nodeName": "r2", "type": "Any"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 240, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "next", "type": "Callable"}, {"lineNumber": 242, "col_offset": 13, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "state", "type": "Any"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 244, "col_offset": 24, "nodeName": "failed", "type": "bool"}, {"lineNumber": 246, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 246, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 247, "col_offset": 25, "nodeName": "r4", "type": "Any"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 250, "col_offset": 13, "nodeName": "next", "type": "Callable"}, {"lineNumber": 250, "col_offset": 18, "nodeName": "gen", "type": "Generator[Any, Any, None]"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 251, "col_offset": 25, "nodeName": "r5", "type": "Any"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 252, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 254, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 254, "col_offset": 49, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 262, "col_offset": 28, "nodeName": "item", "type": "Any"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 271, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 278, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 279, "col_offset": 8, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 279, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "stats", "type": "Any"}, {"lineNumber": 287, "col_offset": 12, "nodeName": "failed", "type": "bool"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 288, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 293, "col_offset": 14, "nodeName": "MockWorkflowReqTest", "type": "Type[MockWorkflowReqTest]"}, {"lineNumber": 294, "col_offset": 22, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 300, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 301, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 301, "col_offset": 37, "nodeName": "exp_result", "type": "List[List[Union[str, int]]]"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 302, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 302, "col_offset": 36, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 305, "col_offset": 14, "nodeName": "MockWorkflowReqTest", "type": "Type[MockWorkflowReqTest]"}, {"lineNumber": 307, "col_offset": 22, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 313, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 315, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 315, "col_offset": 37, "nodeName": "exp_result", "type": "List[List[Union[str, int]]]"}, {"lineNumber": 316, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 316, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 316, "col_offset": 36, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 319, "col_offset": 14, "nodeName": "MockWorkflowReqTest", "type": "Type[MockWorkflowReqTest]"}, {"lineNumber": 322, "col_offset": 22, "nodeName": "construct_iterator", "type": "Callable[..., Any]"}, {"lineNumber": 328, "col_offset": 21, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 329, "col_offset": 25, "nodeName": "obs_result", "type": "List[Any]"}, {"lineNumber": 329, "col_offset": 37, "nodeName": "exp_result", "type": "List[List[Union[str, int]]]"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 330, "col_offset": 36, "nodeName": "exp_stats", "type": "Dict[str, int]"}, {"lineNumber": 333, "col_offset": 14, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 334, "col_offset": 8, "nodeName": "initialize_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "methodB1", "type": "Callable[[], Any]"}, {"lineNumber": 336, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 336, "col_offset": 25, "nodeName": "state", "type": "Union[str, List[Any]]"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 337, "col_offset": 25, "nodeName": "failed", "type": "bool"}, {"lineNumber": 340, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 341, "col_offset": 8, "nodeName": "initialize_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 342, "col_offset": 8, "nodeName": "methodB1", "type": "Callable[[], Any]"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 343, "col_offset": 25, "nodeName": "state", "type": "Union[List[Any], str]"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "methodB1", "type": "Callable[[], Any]"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 348, "col_offset": 25, "nodeName": "state", "type": "Union[List[str], str]"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 350, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 355, "col_offset": 14, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "initialize_state", "type": "Callable[[Any], Any]"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "methodB2", "type": "Callable[..., Any]"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 359, "col_offset": 25, "nodeName": "state", "type": "Any"}, {"lineNumber": 360, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 360, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 365, "col_offset": 14, "nodeName": "MockWorkflow", "type": "Type[MockWorkflow]"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "methodB2", "type": "Callable[..., Any]"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 368, "col_offset": 25, "nodeName": "state", "type": "Any"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 369, "col_offset": 25, "nodeName": "stats", "type": "Any"}, {"lineNumber": 379, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 379, "col_offset": 25, "nodeName": "priority", "type": "Any"}, {"lineNumber": 380, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 380, "col_offset": 25, "nodeName": "__name__", "type": "str"}, {"lineNumber": 381, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 381, "col_offset": 25, "nodeName": "__doc__", "type": "str"}, {"lineNumber": 386, "col_offset": 13, "nodeName": "NotExecuted", "type": "Type[skbio.workflow.NotExecuted]"}, {"lineNumber": 387, "col_offset": 14, "nodeName": "ne", "type": "skbio.workflow.NotExecuted"}, {"lineNumber": 388, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 389, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 389, "col_offset": 25, "nodeName": "msg", "type": "Any"}, {"lineNumber": 394, "col_offset": 12, "nodeName": "Exists", "type": "Type[skbio.workflow.Exists]"}, {"lineNumber": 395, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 396, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 401, "col_offset": 13, "nodeName": "NotNone", "type": "Type[skbio.workflow.NotNone]"}, {"lineNumber": 402, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 403, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 22, "col_offset": 11, "nodeName": "k", "type": "str"}, {"lineNumber": 23, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 25, "col_offset": 22, "nodeName": "x", "type": "int"}, {"lineNumber": 27, "col_offset": 20, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 55, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 56, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 56, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 57, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 58, "col_offset": 28, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 62, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 63, "col_offset": 11, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 63, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 69, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 70, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 74, "col_offset": 26, "nodeName": "name", "type": "str"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 79, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 80, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 26, "nodeName": "name", "type": "str"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 88, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "state", "type": "Union[List[Any], str]"}, {"lineNumber": 89, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 91, "col_offset": 28, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 97, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 99, "col_offset": 28, "nodeName": "state", "type": "List[Union[str, Any]]"}, {"lineNumber": 105, "col_offset": 60, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 107, "col_offset": 72, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 110, "col_offset": 48, "nodeName": "opts", "type": "Dict[str, bool]"}, {"lineNumber": 115, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 139, "col_offset": 20, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 141, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 150, "col_offset": 24, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 153, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 156, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 156, "col_offset": 31, "nodeName": "AttributeError", "type": "Type[AttributeError]"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "Workflow", "type": "Type[skbio.workflow.Workflow]"}, {"lineNumber": 161, "col_offset": 15, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 161, "col_offset": 41, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 162, "col_offset": 15, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 163, "col_offset": 14, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 171, "col_offset": 19, "nodeName": "state", "type": "Any"}, {"lineNumber": 177, "col_offset": 26, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 177, "col_offset": 41, "nodeName": "iter_", "type": "Any"}, {"lineNumber": 177, "col_offset": 48, "nodeName": "sf", "type": "Callable[[Any], Any]"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 187, "col_offset": 19, "nodeName": "state", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 195, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 199, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 203, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 206, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 207, "col_offset": 24, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 216, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 218, "col_offset": 25, "nodeName": "obj_short", "type": "MockWorkflow"}, {"lineNumber": 225, "col_offset": 19, "nodeName": "state", "type": "Any"}, {"lineNumber": 232, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 236, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 240, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 244, "col_offset": 24, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 252, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 254, "col_offset": 25, "nodeName": "obj_noshort", "type": "MockWorkflow"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 268, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 269, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 269, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 271, "col_offset": 28, "nodeName": "state", "type": "List[Union[str, Any]]"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 276, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 277, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 277, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 278, "col_offset": 12, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 279, "col_offset": 28, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 285, "col_offset": 19, "nodeName": "name", "type": "str"}, {"lineNumber": 286, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 286, "col_offset": 41, "nodeName": "name", "type": "str"}, {"lineNumber": 287, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 288, "col_offset": 28, "nodeName": "state", "type": "List[Union[str, Any]]"}, {"lineNumber": 300, "col_offset": 26, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 300, "col_offset": 30, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 302, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 313, "col_offset": 26, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 313, "col_offset": 30, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 316, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 316, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 328, "col_offset": 26, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 328, "col_offset": 30, "nodeName": "single_iter", "type": "Any"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflowReqTest"}, {"lineNumber": 334, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 336, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 336, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 337, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 337, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 341, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 342, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 343, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 348, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 350, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 357, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 359, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 360, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 360, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 368, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 369, "col_offset": 8, "nodeName": "self", "type": "RequiresTests"}, {"lineNumber": 369, "col_offset": 25, "nodeName": "obj", "type": "MockWorkflow"}, {"lineNumber": 377, "col_offset": 27, "nodeName": "z", "type": "Any"}, {"lineNumber": 379, "col_offset": 8, "nodeName": "self", "type": "PriorityTests"}, {"lineNumber": 379, "col_offset": 25, "nodeName": "foo", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 380, "col_offset": 8, "nodeName": "self", "type": "PriorityTests"}, {"lineNumber": 380, "col_offset": 25, "nodeName": "foo", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 381, "col_offset": 8, "nodeName": "self", "type": "PriorityTests"}, {"lineNumber": 381, "col_offset": 25, "nodeName": "foo", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 388, "col_offset": 8, "nodeName": "self", "type": "NotExecutedTests"}, {"lineNumber": 388, "col_offset": 24, "nodeName": "obs", "type": "skbio.workflow.NotExecuted"}, {"lineNumber": 388, "col_offset": 31, "nodeName": "ne", "type": "skbio.workflow.NotExecuted"}, {"lineNumber": 389, "col_offset": 8, "nodeName": "self", "type": "NotExecutedTests"}, {"lineNumber": 389, "col_offset": 25, "nodeName": "obs", "type": "skbio.workflow.NotExecuted"}, {"lineNumber": 395, "col_offset": 8, "nodeName": "self", "type": "ExistsTests"}, {"lineNumber": 395, "col_offset": 33, "nodeName": "e", "type": "skbio.workflow.Exists"}, {"lineNumber": 396, "col_offset": 8, "nodeName": "self", "type": "ExistsTests"}, {"lineNumber": 396, "col_offset": 32, "nodeName": "e", "type": "skbio.workflow.Exists"}, {"lineNumber": 402, "col_offset": 8, "nodeName": "self", "type": "NotNoneTests"}, {"lineNumber": 402, "col_offset": 33, "nodeName": "nn", "type": "skbio.workflow.NotNone"}, {"lineNumber": 403, "col_offset": 8, "nodeName": "self", "type": "NotNoneTests"}, {"lineNumber": 403, "col_offset": 33, "nodeName": "nn", "type": "skbio.workflow.NotNone"}, {"lineNumber": 23, "col_offset": 12, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "kwargs", "type": "Dict[str, List[int]]"}, {"lineNumber": 25, "col_offset": 27, "nodeName": "to_gen", "type": "List[List[int]]"}, {"lineNumber": 56, "col_offset": 11, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 58, "col_offset": 28, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 63, "col_offset": 11, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "state", "type": "List[Any]"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 32, "nodeName": "state", "type": "List[Union[str, Any]]"}, {"lineNumber": 89, "col_offset": 11, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 91, "col_offset": 28, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 99, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 106, "col_offset": 44, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 106, "col_offset": 56, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 108, "col_offset": 44, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 108, "col_offset": 56, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 111, "col_offset": 46, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 111, "col_offset": 58, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 150, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 151, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 153, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 156, "col_offset": 13, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 161, "col_offset": 15, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 161, "col_offset": 41, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 162, "col_offset": 15, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 163, "col_offset": 14, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 171, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 177, "col_offset": 26, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 180, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 187, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 199, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 203, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 206, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 207, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 212, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 216, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 218, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 225, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 236, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 240, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 243, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 244, "col_offset": 24, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 252, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 254, "col_offset": 25, "nodeName": "self", "type": "WorkflowTests"}, {"lineNumber": 269, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 271, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 277, "col_offset": 11, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 279, "col_offset": 28, "nodeName": "self", "type": "MockWorkflowReqTest"}, {"lineNumber": 286, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 288, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 293, "col_offset": 54, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 293, "col_offset": 66, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 306, "col_offset": 40, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 306, "col_offset": 52, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 321, "col_offset": 40, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 321, "col_offset": 52, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 333, "col_offset": 47, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 333, "col_offset": 59, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 356, "col_offset": 33, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 356, "col_offset": 45, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 366, "col_offset": 33, "nodeName": "defaultdict", "type": "Type[collections.defaultdict[Any, Any]]"}, {"lineNumber": 366, "col_offset": 45, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 377, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 377, "col_offset": 23, "nodeName": "y", "type": "Any"}, {"lineNumber": 23, "col_offset": 33, "nodeName": "k", "type": "str"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "self", "type": "MockWorkflow"}, {"lineNumber": 84, "col_offset": 32, "nodeName": "self", "type": "Any"}]