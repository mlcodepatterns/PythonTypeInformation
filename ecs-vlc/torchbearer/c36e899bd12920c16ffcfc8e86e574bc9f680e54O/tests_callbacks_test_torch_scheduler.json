[{"lineNumber": 9, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 10, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_with_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_with_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_no_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_no_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 119, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 120, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 131, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 143, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 144, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 155, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 167, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 168, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 179, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 180, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 194, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 195, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any], Any]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 13, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 40, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 67, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 94, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "version", "type": "Any"}, {"lineNumber": 11, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 11, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 11, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 12, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 15, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 17, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 21, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 25, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 29, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 33, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 38, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 38, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 42, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 44, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 48, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 52, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 56, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 60, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 65, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 66, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 79, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 87, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 92, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 92, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 96, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 98, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 102, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 106, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 110, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 114, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 122, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 124, "col_offset": 20, "nodeName": "LambdaLR", "type": "Type[torchbearer.callbacks.torch_scheduler.LambdaLR]"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 125, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 134, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 136, "col_offset": 20, "nodeName": "StepLR", "type": "Type[torchbearer.callbacks.torch_scheduler.StepLR]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 137, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 146, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 148, "col_offset": 20, "nodeName": "MultiStepLR", "type": "Type[torchbearer.callbacks.torch_scheduler.MultiStepLR]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 149, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 158, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 160, "col_offset": 20, "nodeName": "ExponentialLR", "type": "Type[torchbearer.callbacks.torch_scheduler.ExponentialLR]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 161, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 172, "col_offset": 20, "nodeName": "CosineAnnealingLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CosineAnnealingLR]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 173, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 182, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 184, "col_offset": 20, "nodeName": "ReduceLROnPlateau", "type": "Type[torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 186, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 198, "col_offset": 18, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 11, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 11, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 11, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 38, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 38, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 65, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 92, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 92, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 122, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 128, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 134, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 146, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 152, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 158, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 164, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 176, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 182, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 190, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 191, "col_offset": 24, "nodeName": "_monitor", "type": "Any"}, {"lineNumber": 198, "col_offset": 65, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 198, "col_offset": 18, "nodeName": "torch", "type": "Any"}, {"lineNumber": 199, "col_offset": 11, "nodeName": "LooseVersion", "type": "Type[distutils.version.LooseVersion]"}, {"lineNumber": 199, "col_offset": 24, "nodeName": "version", "type": "Any"}, {"lineNumber": 199, "col_offset": 35, "nodeName": "LooseVersion", "type": "Type[distutils.version.LooseVersion]"}, {"lineNumber": 200, "col_offset": 63, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 201, "col_offset": 16, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 214, "col_offset": 12, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 214, "col_offset": 30, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 15, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 15, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 42, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 42, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 69, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 69, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 96, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 96, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 128, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 152, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 164, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 176, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 190, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 191, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 198, "col_offset": 39, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 198, "col_offset": 43, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 198, "col_offset": 65, "nodeName": "torch", "type": "Any"}, {"lineNumber": 200, "col_offset": 17, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 203, "col_offset": 28, "nodeName": "CyclicLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CyclicLR]"}, {"lineNumber": 206, "col_offset": 16, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 206, "col_offset": 35, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 211, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 212, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 214, "col_offset": 12, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 198, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 201, "col_offset": 25, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 206, "col_offset": 16, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 211, "col_offset": 16, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 211, "col_offset": 32, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 212, "col_offset": 16, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 212, "col_offset": 32, "nodeName": "_monitor", "type": "Any"}, {"lineNumber": 214, "col_offset": 59, "nodeName": "CyclicLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CyclicLR]"}, {"lineNumber": 211, "col_offset": 32, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 212, "col_offset": 32, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}]