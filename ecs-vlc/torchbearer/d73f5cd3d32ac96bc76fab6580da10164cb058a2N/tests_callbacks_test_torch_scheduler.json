[{"lineNumber": 10, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 11, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_with_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_with_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_no_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_no_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "test_monitor_not_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 140, "col_offset": 4, "nodeName": "test_monitor_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "test_batch_monitor_not_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 171, "col_offset": 4, "nodeName": "test_batch_monitor_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 184, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 196, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 208, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 209, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 220, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 221, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 232, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 233, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 244, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 245, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 259, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 260, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any], Any]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 22, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 50, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 77, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing]]]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 104, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 127, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 143, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 162, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 174, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "version", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "filterwarnings", "type": "Callable[..., None]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "tearDown", "type": "Callable[[], None]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "filterwarnings", "type": "Callable[..., None]"}, {"lineNumber": 20, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 20, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 20, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 21, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 24, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 26, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "on_start_training", "type": "Any"}, {"lineNumber": 30, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 34, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 38, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 42, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str]]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 47, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 47, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "DATA", "type": "torchbearer.state.StateKey"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 52, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str]]]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "on_start_training", "type": "Any"}, {"lineNumber": 58, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str]]]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 62, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str]]]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 66, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str]]]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 70, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str]]]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 75, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 75, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 79, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 81, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "on_start_training", "type": "Any"}, {"lineNumber": 85, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 89, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 93, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 97, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str]]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 102, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 102, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 106, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 108, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing]]]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 112, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing]]]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 116, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing]]]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 120, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing]]]"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 125, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 125, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 125, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 129, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 130, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 132, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 136, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 141, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 141, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 146, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 147, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 151, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 155, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 160, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 160, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 160, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 161, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 164, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 165, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 167, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 172, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 172, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 172, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 173, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 176, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 177, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 179, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 187, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 189, "col_offset": 20, "nodeName": "LambdaLR", "type": "Type[torchbearer.callbacks.torch_scheduler.LambdaLR]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 190, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 199, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 201, "col_offset": 20, "nodeName": "StepLR", "type": "Type[torchbearer.callbacks.torch_scheduler.StepLR]"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 202, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 211, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 213, "col_offset": 20, "nodeName": "MultiStepLR", "type": "Type[torchbearer.callbacks.torch_scheduler.MultiStepLR]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 214, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 223, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 225, "col_offset": 20, "nodeName": "ExponentialLR", "type": "Type[torchbearer.callbacks.torch_scheduler.ExponentialLR]"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 226, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 228, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 235, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 237, "col_offset": 20, "nodeName": "CosineAnnealingLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CosineAnnealingLR]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 238, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 247, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 249, "col_offset": 20, "nodeName": "ReduceLROnPlateau", "type": "Type[torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau]"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 251, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 253, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 263, "col_offset": 18, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "warnings", "type": "module"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "warnings", "type": "module"}, {"lineNumber": 20, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 20, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 20, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 47, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 47, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 75, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 75, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 102, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 102, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 125, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 125, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 125, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 132, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 133, "col_offset": 12, "nodeName": "on_start_validation", "type": "Any"}, {"lineNumber": 133, "col_offset": 48, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 136, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 137, "col_offset": 12, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 137, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 141, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 141, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "on_start_training", "type": "Any"}, {"lineNumber": 148, "col_offset": 46, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 151, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "on_start_validation", "type": "Any"}, {"lineNumber": 152, "col_offset": 48, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 155, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 156, "col_offset": 12, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 156, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 160, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 160, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 160, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 167, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 168, "col_offset": 12, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 168, "col_offset": 45, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 172, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 172, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 172, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 179, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 180, "col_offset": 12, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 180, "col_offset": 45, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float]]]"}, {"lineNumber": 181, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 187, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 193, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 199, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 205, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 211, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 217, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 223, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 228, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 229, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 235, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 241, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 247, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 253, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 255, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 256, "col_offset": 24, "nodeName": "_monitor", "type": "Any"}, {"lineNumber": 263, "col_offset": 65, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 263, "col_offset": 18, "nodeName": "torch", "type": "Any"}, {"lineNumber": 264, "col_offset": 11, "nodeName": "LooseVersion", "type": "Type[distutils.version.LooseVersion]"}, {"lineNumber": 264, "col_offset": 24, "nodeName": "version", "type": "Any"}, {"lineNumber": 264, "col_offset": 35, "nodeName": "LooseVersion", "type": "Type[distutils.version.LooseVersion]"}, {"lineNumber": 265, "col_offset": 63, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 266, "col_offset": 16, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 279, "col_offset": 30, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 12, "col_offset": 14, "nodeName": "TestTorchScheduler", "type": "Type[TestTorchScheduler]"}, {"lineNumber": 12, "col_offset": 34, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 16, "col_offset": 14, "nodeName": "TestTorchScheduler", "type": "Type[TestTorchScheduler]"}, {"lineNumber": 16, "col_offset": 34, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 24, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 24, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 52, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 52, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 79, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 79, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 106, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 106, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 129, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 129, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 132, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 133, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 136, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 137, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 145, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 145, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 151, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 155, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 156, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 164, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 164, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 167, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 168, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 176, "col_offset": 53, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 176, "col_offset": 68, "nodeName": "opt", "type": "Any"}, {"lineNumber": 179, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 180, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 181, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 193, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 205, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 217, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 229, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 241, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 255, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 256, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 263, "col_offset": 39, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 263, "col_offset": 43, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 263, "col_offset": 65, "nodeName": "torch", "type": "Any"}, {"lineNumber": 265, "col_offset": 17, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 266, "col_offset": 25, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 268, "col_offset": 28, "nodeName": "CyclicLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CyclicLR]"}, {"lineNumber": 271, "col_offset": 16, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 271, "col_offset": 35, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, str]"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 276, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 277, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 134, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 134, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 138, "col_offset": 63, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 138, "col_offset": 67, "nodeName": "message", "type": "Warning"}, {"lineNumber": 149, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 149, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 153, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 153, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 157, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 157, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 169, "col_offset": 63, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 169, "col_offset": 67, "nodeName": "message", "type": "Warning"}, {"lineNumber": 181, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 181, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 263, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 266, "col_offset": 25, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 271, "col_offset": 16, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 273, "col_offset": 16, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 276, "col_offset": 16, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 276, "col_offset": 32, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 277, "col_offset": 16, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 277, "col_offset": 32, "nodeName": "_monitor", "type": "Any"}, {"lineNumber": 279, "col_offset": 59, "nodeName": "CyclicLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CyclicLR]"}, {"lineNumber": 276, "col_offset": 32, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 277, "col_offset": 32, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 138, "col_offset": 67, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 169, "col_offset": 67, "nodeName": "w", "type": "List[warnings.WarningMessage]"}]