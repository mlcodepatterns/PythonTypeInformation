[{"lineNumber": 38, "col_offset": 0, "nodeName": "loss", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 9, "col_offset": 10, "nodeName": "Module", "type": "Any"}, {"lineNumber": 10, "col_offset": 4, "nodeName": "__init__", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 14, "col_offset": 4, "nodeName": "f", "type": "Callable[[Any], Any]"}, {"lineNumber": 27, "col_offset": 4, "nodeName": "forward", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 31, "col_offset": 19, "nodeName": "Net", "type": "Type[Net]"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "forward", "type": "Callable[..., Any]"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 43, "col_offset": 4, "nodeName": "test_basic_opt", "type": "Callable[[Any], Any]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "test_basic_checkpoint", "type": "Callable[[Any], Any]"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "test_with_loader", "type": "Callable[[Any], Any]"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "test_only_model", "type": "Callable[[Any], Any]"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "test_no_model", "type": "Callable[[Any], Any]"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "test_no_train_steps", "type": "Callable[[Any], Any]"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "y_pred", "type": "Any"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "unittest", "type": "module"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "pars", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "model", "type": "NetWithState"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "model", "type": "Net"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "model", "type": "Net"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "model", "type": "Net"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "optim", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "test_var", "type": "Dict[str, bool]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "model", "type": "Net"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "self", "type": "Net"}, {"lineNumber": 12, "col_offset": 20, "nodeName": "Parameter", "type": "Any"}, {"lineNumber": 12, "col_offset": 39, "nodeName": "x", "type": "Any"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "zeros_like", "type": "Any"}, {"lineNumber": 21, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 23, "col_offset": 17, "nodeName": "pars", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "sum", "type": "Any"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "f", "type": "Callable[[], Any]"}, {"lineNumber": 33, "col_offset": 11, "nodeName": "state", "type": "Any"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 35, "col_offset": 49, "nodeName": "_", "type": "Any"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "NetWithState", "type": "Type[NetWithState]"}, {"lineNumber": 47, "col_offset": 29, "nodeName": "p", "type": "Any"}, {"lineNumber": 48, "col_offset": 16, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 50, "col_offset": 18, "nodeName": "for_val_steps", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "run", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "Net", "type": "Type[Net]"}, {"lineNumber": 61, "col_offset": 20, "nodeName": "p", "type": "Any"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 64, "col_offset": 18, "nodeName": "for_val_steps", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "run", "type": "Any"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 69, "col_offset": 16, "nodeName": "Net", "type": "Type[Net]"}, {"lineNumber": 69, "col_offset": 20, "nodeName": "p", "type": "Any"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 72, "col_offset": 18, "nodeName": "for_train_steps", "type": "Any"}, {"lineNumber": 72, "col_offset": 138, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "load_state_dict", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "remove", "type": "Callable[[Union[str, unicode]], None]"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 86, "col_offset": 16, "nodeName": "Net", "type": "Type[Net]"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "p", "type": "Any"}, {"lineNumber": 87, "col_offset": 16, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "for_val_steps", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "with_loader", "type": "Any"}, {"lineNumber": 95, "col_offset": 28, "nodeName": "custom_loader", "type": "Callable[[Any], Any]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "run", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "remove", "type": "Callable[[Union[str, unicode]], None]"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 106, "col_offset": 16, "nodeName": "Net", "type": "Type[Net]"}, {"lineNumber": 106, "col_offset": 20, "nodeName": "p", "type": "Any"}, {"lineNumber": 108, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 108, "col_offset": 36, "nodeName": "model", "type": "Net"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 115, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 122, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "for_val_steps", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "run", "type": "Any"}, {"lineNumber": 12, "col_offset": 20, "nodeName": "nn", "type": "Any"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "torch", "type": "Any"}, {"lineNumber": 21, "col_offset": 31, "nodeName": "self", "type": "Net"}, {"lineNumber": 22, "col_offset": 17, "nodeName": "pars", "type": "Any"}, {"lineNumber": 23, "col_offset": 17, "nodeName": "self", "type": "Net"}, {"lineNumber": 24, "col_offset": 17, "nodeName": "pars", "type": "Any"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "torch", "type": "Any"}, {"lineNumber": 25, "col_offset": 25, "nodeName": "out", "type": "Any"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "self", "type": "Net"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 48, "col_offset": 16, "nodeName": "optim", "type": "Any"}, {"lineNumber": 48, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 53, "col_offset": 31, "nodeName": "item", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "item", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 55, "col_offset": 31, "nodeName": "item", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "optim", "type": "Any"}, {"lineNumber": 62, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "optim", "type": "Any"}, {"lineNumber": 70, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 73, "col_offset": 32, "nodeName": "load", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 75, "col_offset": 31, "nodeName": "item", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "item", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 77, "col_offset": 31, "nodeName": "item", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "os", "type": "module"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 87, "col_offset": 16, "nodeName": "optim", "type": "Any"}, {"lineNumber": 87, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "test_var", "type": "Dict[str, bool]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 98, "col_offset": 24, "nodeName": "test_var", "type": "Dict[str, bool]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "os", "type": "module"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 108, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 109, "col_offset": 29, "nodeName": "run", "type": "Any"}, {"lineNumber": 112, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 115, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 116, "col_offset": 12, "nodeName": "run", "type": "Any"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 122, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 11, "col_offset": 14, "nodeName": "Net", "type": "Type[Net]"}, {"lineNumber": 11, "col_offset": 19, "nodeName": "self", "type": "Net"}, {"lineNumber": 12, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 22, "col_offset": 17, "nodeName": "self", "type": "Net"}, {"lineNumber": 24, "col_offset": 17, "nodeName": "self", "type": "Net"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 35, "col_offset": 21, "nodeName": "NetWithState", "type": "Type[NetWithState]"}, {"lineNumber": 35, "col_offset": 35, "nodeName": "self", "type": "NetWithState"}, {"lineNumber": 48, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 48, "col_offset": 32, "nodeName": "model", "type": "NetWithState"}, {"lineNumber": 50, "col_offset": 18, "nodeName": "for_train_steps", "type": "Any"}, {"lineNumber": 50, "col_offset": 72, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 62, "col_offset": 32, "nodeName": "model", "type": "Net"}, {"lineNumber": 64, "col_offset": 18, "nodeName": "for_train_steps", "type": "Any"}, {"lineNumber": 64, "col_offset": 138, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 70, "col_offset": 32, "nodeName": "model", "type": "Net"}, {"lineNumber": 72, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 72, "col_offset": 36, "nodeName": "model", "type": "Net"}, {"lineNumber": 72, "col_offset": 43, "nodeName": "optim", "type": "Any"}, {"lineNumber": 72, "col_offset": 50, "nodeName": "loss", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 73, "col_offset": 32, "nodeName": "torch", "type": "Any"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "state", "type": "Any"}, {"lineNumber": 87, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 87, "col_offset": 32, "nodeName": "model", "type": "Net"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "state", "type": "Any"}, {"lineNumber": 91, "col_offset": 34, "nodeName": "state", "type": "Any"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "for_train_steps", "type": "Any"}, {"lineNumber": 94, "col_offset": 138, "nodeName": "training_steps", "type": "int"}, {"lineNumber": 96, "col_offset": 28, "nodeName": "test_var", "type": "Dict[str, bool]"}, {"lineNumber": 109, "col_offset": 29, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 115, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 116, "col_offset": 12, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "self", "type": "TestEndToEnd"}, {"lineNumber": 53, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 55, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 72, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "tbmodel", "type": "Any"}, {"lineNumber": 74, "col_offset": 43, "nodeName": "HISTORY", "type": "torchbearer.state.StateKey"}, {"lineNumber": 75, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 77, "col_offset": 31, "nodeName": "pars", "type": "Any"}, {"lineNumber": 91, "col_offset": 18, "nodeName": "X", "type": "torchbearer.state.StateKey"}, {"lineNumber": 91, "col_offset": 40, "nodeName": "Y_TRUE", "type": "torchbearer.state.StateKey"}, {"lineNumber": 117, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 117, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 119, "col_offset": 24, "nodeName": "MockModel", "type": "Type[torchbearer.trial.MockModel]"}, {"lineNumber": 119, "col_offset": 54, "nodeName": "rand", "type": "Any"}, {"lineNumber": 50, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 50, "col_offset": 36, "nodeName": "model", "type": "NetWithState"}, {"lineNumber": 50, "col_offset": 43, "nodeName": "optim", "type": "Any"}, {"lineNumber": 50, "col_offset": 50, "nodeName": "loss", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 53, "col_offset": 31, "nodeName": "model", "type": "NetWithState"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "model", "type": "NetWithState"}, {"lineNumber": 55, "col_offset": 31, "nodeName": "model", "type": "NetWithState"}, {"lineNumber": 64, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "model", "type": "Net"}, {"lineNumber": 64, "col_offset": 43, "nodeName": "optim", "type": "Any"}, {"lineNumber": 64, "col_offset": 50, "nodeName": "loss", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 74, "col_offset": 43, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 75, "col_offset": 31, "nodeName": "model", "type": "Net"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "model", "type": "Net"}, {"lineNumber": 77, "col_offset": 31, "nodeName": "model", "type": "Net"}, {"lineNumber": 91, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 91, "col_offset": 40, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "Trial", "type": "Any"}, {"lineNumber": 94, "col_offset": 36, "nodeName": "model", "type": "Net"}, {"lineNumber": 94, "col_offset": 43, "nodeName": "optim", "type": "Any"}, {"lineNumber": 94, "col_offset": 50, "nodeName": "loss", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 119, "col_offset": 24, "nodeName": "trial", "type": "module"}, {"lineNumber": 119, "col_offset": 54, "nodeName": "torch", "type": "Any"}, {"lineNumber": 50, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 64, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 72, "col_offset": 67, "nodeName": "MostRecent", "type": "Type[torchbearer.callbacks.checkpointers.MostRecent]"}, {"lineNumber": 94, "col_offset": 18, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 119, "col_offset": 24, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 72, "col_offset": 67, "nodeName": "callbacks", "type": "module"}, {"lineNumber": 64, "col_offset": 67, "nodeName": "MostRecent", "type": "Type[torchbearer.callbacks.checkpointers.MostRecent]"}, {"lineNumber": 72, "col_offset": 67, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 94, "col_offset": 67, "nodeName": "MostRecent", "type": "Type[torchbearer.callbacks.checkpointers.MostRecent]"}, {"lineNumber": 64, "col_offset": 67, "nodeName": "callbacks", "type": "module"}, {"lineNumber": 94, "col_offset": 67, "nodeName": "callbacks", "type": "module"}, {"lineNumber": 64, "col_offset": 67, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 94, "col_offset": 67, "nodeName": "torchbearer", "type": "module"}]