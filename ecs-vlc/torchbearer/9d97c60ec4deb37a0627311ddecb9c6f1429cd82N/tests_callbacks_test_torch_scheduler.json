[{"lineNumber": 10, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 11, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_with_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_with_monitor_oldstyle", "type": "Callable[[Any], Any]"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_with_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_with_monitor_oldstyle", "type": "Callable[[Any], Any]"}, {"lineNumber": 141, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_no_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 169, "col_offset": 4, "nodeName": "test_torch_scheduler_on_batch_no_monitor_oldstyle", "type": "Callable[[Any], Any]"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_no_monitor", "type": "Callable[[Any], Any]"}, {"lineNumber": 221, "col_offset": 4, "nodeName": "test_torch_scheduler_on_epoch_no_monitor_oldstyle", "type": "Callable[[Any], Any]"}, {"lineNumber": 249, "col_offset": 4, "nodeName": "test_monitor_not_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 265, "col_offset": 4, "nodeName": "test_monitor_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 284, "col_offset": 4, "nodeName": "test_batch_monitor_not_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 296, "col_offset": 4, "nodeName": "test_batch_monitor_found", "type": "Callable[[Any], Any]"}, {"lineNumber": 309, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 310, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 321, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 322, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 333, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 334, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 345, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 346, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 357, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 358, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 369, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 370, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 384, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 385, "col_offset": 4, "nodeName": "test_lambda_lr", "type": "Callable[[Any], Any]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 22, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 54, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 87, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 116, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 144, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 172, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 200, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 224, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "_newstyle", "type": "bool"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 252, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 268, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 286, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 287, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 287, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 297, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 298, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 299, "col_offset": 8, "nodeName": "return_value", "type": "mock.Mock"}, {"lineNumber": 299, "col_offset": 38, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 301, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 326, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 336, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 350, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 360, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 362, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 372, "col_offset": 8, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 388, "col_offset": 8, "nodeName": "version", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "filterwarnings", "type": "Callable[..., None]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "tearDown", "type": "Callable[[], None]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "filterwarnings", "type": "Callable[..., None]"}, {"lineNumber": 20, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 20, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 20, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 20, "col_offset": 111, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 21, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 24, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 24, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 28, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 35, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 39, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 43, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 47, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 52, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 52, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 52, "col_offset": 111, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 56, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 56, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 60, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 67, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 71, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 75, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 79, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 84, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 84, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 84, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 85, "col_offset": 17, "nodeName": "DATA", "type": "torchbearer.state.StateKey"}, {"lineNumber": 85, "col_offset": 41, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 89, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 89, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 92, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 96, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 100, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 104, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 108, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 113, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 113, "col_offset": 39, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 113, "col_offset": 75, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "DATA", "type": "torchbearer.state.StateKey"}, {"lineNumber": 114, "col_offset": 41, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 115, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 118, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 118, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 121, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 125, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 129, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 133, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 137, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Optional[Union[int, Dict[str, int], str, mock.Mock]]]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 142, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 142, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 142, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 143, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 146, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 146, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 149, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 153, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 157, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 161, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 165, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 170, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 170, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 171, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 174, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 174, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 177, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 181, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 185, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "assert_called_once", "type": "Any"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 189, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 193, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, mock.Mock]]"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 198, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 198, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 198, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 198, "col_offset": 100, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 199, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 202, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 202, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 205, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 209, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 213, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 217, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "assert_called_once", "type": "Any"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 222, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 222, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 222, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 222, "col_offset": 100, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 223, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 226, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 226, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 229, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 233, "col_offset": 8, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 233, "col_offset": 42, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "assert_called_once", "type": "Any"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "on_sample", "type": "Callable[[Any], None]"}, {"lineNumber": 237, "col_offset": 34, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 241, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 245, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[nothing, nothing], mock.Mock]]"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "assert_called_once", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "reset_mock", "type": "Any"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 250, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 250, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 250, "col_offset": 114, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 251, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 254, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 254, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 255, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 257, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 261, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 266, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 266, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 266, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 266, "col_offset": 110, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 267, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 270, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 270, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 271, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 272, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 276, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 280, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 285, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 285, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 285, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 285, "col_offset": 114, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 286, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 287, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 289, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 289, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 290, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 290, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 292, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 297, "col_offset": 17, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 297, "col_offset": 39, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 297, "col_offset": 75, "nodeName": "METRICS", "type": "torchbearer.state.StateKey"}, {"lineNumber": 297, "col_offset": 110, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 298, "col_offset": 25, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 299, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 301, "col_offset": 26, "nodeName": "TorchScheduler", "type": "Type[torchbearer.callbacks.torch_scheduler.TorchScheduler]"}, {"lineNumber": 301, "col_offset": 41, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 302, "col_offset": 33, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 304, "col_offset": 53, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 312, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 312, "col_offset": 53, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 312, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 314, "col_offset": 20, "nodeName": "LambdaLR", "type": "Type[torchbearer.callbacks.torch_scheduler.LambdaLR]"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 315, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 318, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 324, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 324, "col_offset": 53, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 324, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 326, "col_offset": 20, "nodeName": "StepLR", "type": "Type[torchbearer.callbacks.torch_scheduler.StepLR]"}, {"lineNumber": 327, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 327, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 330, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 336, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 336, "col_offset": 53, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 336, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 338, "col_offset": 20, "nodeName": "MultiStepLR", "type": "Type[torchbearer.callbacks.torch_scheduler.MultiStepLR]"}, {"lineNumber": 339, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 339, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 341, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 342, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 342, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 348, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 348, "col_offset": 53, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 348, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 350, "col_offset": 20, "nodeName": "ExponentialLR", "type": "Type[torchbearer.callbacks.torch_scheduler.ExponentialLR]"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 351, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 353, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 354, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 354, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 360, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 360, "col_offset": 53, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 360, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 362, "col_offset": 20, "nodeName": "CosineAnnealingLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CosineAnnealingLR]"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 363, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 366, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 372, "col_offset": 17, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 372, "col_offset": 53, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 372, "col_offset": 75, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 374, "col_offset": 20, "nodeName": "ReduceLROnPlateau", "type": "Type[torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau]"}, {"lineNumber": 376, "col_offset": 8, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 376, "col_offset": 27, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 378, "col_offset": 8, "nodeName": "assert_called_with", "type": "Any"}, {"lineNumber": 380, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 380, "col_offset": 24, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 381, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 388, "col_offset": 18, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "warnings", "type": "module"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "warnings", "type": "module"}, {"lineNumber": 20, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 20, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 20, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 20, "col_offset": 111, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 20, "col_offset": 130, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 28, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 29, "col_offset": 12, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 29, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 52, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 52, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 52, "col_offset": 111, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 52, "col_offset": 130, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 60, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, Dict[str, int], str, mock.Mock]]"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 84, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 84, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 84, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 85, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 85, "col_offset": 41, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 85, "col_offset": 60, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 113, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 113, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 113, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 114, "col_offset": 41, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 114, "col_offset": 60, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 142, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 142, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 142, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 142, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 161, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 170, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 170, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 170, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 198, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 198, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 198, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 198, "col_offset": 100, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 198, "col_offset": 119, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 211, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 222, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 222, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 222, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 222, "col_offset": 100, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 222, "col_offset": 119, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 233, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 250, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 250, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 250, "col_offset": 114, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 250, "col_offset": 133, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 257, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "on_start_validation", "type": "Any"}, {"lineNumber": 258, "col_offset": 48, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 261, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 262, "col_offset": 12, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 262, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 266, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 266, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 266, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 266, "col_offset": 110, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 266, "col_offset": 129, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 272, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "on_start_training", "type": "Callable[[Any], None]"}, {"lineNumber": 273, "col_offset": 46, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 274, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 276, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 277, "col_offset": 12, "nodeName": "on_start_validation", "type": "Any"}, {"lineNumber": 277, "col_offset": 48, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 278, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 280, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 281, "col_offset": 12, "nodeName": "on_end_epoch", "type": "Callable[[Any], None]"}, {"lineNumber": 281, "col_offset": 41, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 282, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 285, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 285, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 285, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 285, "col_offset": 114, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 285, "col_offset": 133, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 290, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 292, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 293, "col_offset": 45, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 294, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 297, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 297, "col_offset": 39, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 297, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 297, "col_offset": 110, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 297, "col_offset": 129, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 304, "col_offset": 13, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 305, "col_offset": 12, "nodeName": "on_step_training", "type": "Callable[[Any], None]"}, {"lineNumber": 305, "col_offset": 45, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[int, str, Dict[str, float], mock.Mock]]"}, {"lineNumber": 306, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 312, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 312, "col_offset": 53, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 312, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 312, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 318, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.LambdaLR"}, {"lineNumber": 324, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 324, "col_offset": 53, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 324, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 324, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 327, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 330, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.StepLR"}, {"lineNumber": 336, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 336, "col_offset": 53, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 336, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 336, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 339, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 341, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 342, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 342, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.MultiStepLR"}, {"lineNumber": 348, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 348, "col_offset": 53, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 348, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 348, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 351, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 353, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 354, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 354, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ExponentialLR"}, {"lineNumber": 360, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 360, "col_offset": 53, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 360, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 360, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 366, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CosineAnnealingLR"}, {"lineNumber": 372, "col_offset": 17, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 372, "col_offset": 53, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 372, "col_offset": 75, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 372, "col_offset": 94, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 376, "col_offset": 8, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 378, "col_offset": 8, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 380, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 380, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 381, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 381, "col_offset": 24, "nodeName": "_monitor", "type": "Any"}, {"lineNumber": 388, "col_offset": 65, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 388, "col_offset": 18, "nodeName": "torch", "type": "Any"}, {"lineNumber": 389, "col_offset": 11, "nodeName": "LooseVersion", "type": "Type[distutils.version.LooseVersion]"}, {"lineNumber": 389, "col_offset": 24, "nodeName": "version", "type": "Any"}, {"lineNumber": 389, "col_offset": 35, "nodeName": "LooseVersion", "type": "Type[distutils.version.LooseVersion]"}, {"lineNumber": 390, "col_offset": 63, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 391, "col_offset": 16, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 405, "col_offset": 12, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 405, "col_offset": 30, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 12, "col_offset": 14, "nodeName": "TestTorchScheduler", "type": "Type[TestTorchScheduler]"}, {"lineNumber": 12, "col_offset": 34, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 16, "col_offset": 14, "nodeName": "TestTorchScheduler", "type": "Type[TestTorchScheduler]"}, {"lineNumber": 16, "col_offset": 34, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 28, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 29, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 31, "col_offset": 28, "nodeName": "issubclass", "type": "Callable[[Type[Any], Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 31, "col_offset": 39, "nodeName": "category", "type": "Type[Warning]"}, {"lineNumber": 31, "col_offset": 55, "nodeName": "UserWarning", "type": "Type[UserWarning]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 60, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 63, "col_offset": 28, "nodeName": "issubclass", "type": "Callable[[Type[Any], Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 63, "col_offset": 39, "nodeName": "category", "type": "Type[Warning]"}, {"lineNumber": 63, "col_offset": 55, "nodeName": "UserWarning", "type": "Type[UserWarning]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "mock_scheduler", "type": "mock.Mock"}, {"lineNumber": 257, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 261, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 262, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 272, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 274, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 276, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 277, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 278, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 280, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 281, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 282, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 292, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 294, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 304, "col_offset": 13, "nodeName": "warnings", "type": "module"}, {"lineNumber": 305, "col_offset": 12, "nodeName": "torch_scheduler", "type": "torchbearer.callbacks.torch_scheduler.TorchScheduler"}, {"lineNumber": 306, "col_offset": 12, "nodeName": "self", "type": "TestTorchScheduler"}, {"lineNumber": 381, "col_offset": 24, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.ReduceLROnPlateau"}, {"lineNumber": 388, "col_offset": 39, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 388, "col_offset": 43, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 388, "col_offset": 65, "nodeName": "torch", "type": "Any"}, {"lineNumber": 390, "col_offset": 17, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 391, "col_offset": 25, "nodeName": "OPTIMIZER", "type": "torchbearer.state.StateKey"}, {"lineNumber": 391, "col_offset": 61, "nodeName": "EPOCH", "type": "torchbearer.state.StateKey"}, {"lineNumber": 391, "col_offset": 83, "nodeName": "MODEL", "type": "torchbearer.state.StateKey"}, {"lineNumber": 393, "col_offset": 28, "nodeName": "CyclicLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CyclicLR]"}, {"lineNumber": 396, "col_offset": 16, "nodeName": "on_start", "type": "Callable[[Any], None]"}, {"lineNumber": 396, "col_offset": 35, "nodeName": "state", "type": "Dict[torchbearer.state.StateKey, Union[str, int, mock.Mock]]"}, {"lineNumber": 398, "col_offset": 16, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 402, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 402, "col_offset": 32, "nodeName": "_step_on_batch", "type": "Any"}, {"lineNumber": 403, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 405, "col_offset": 12, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 30, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 30, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 62, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 259, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 259, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 263, "col_offset": 63, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 263, "col_offset": 67, "nodeName": "message", "type": "Warning"}, {"lineNumber": 274, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 274, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 278, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 278, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 282, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 282, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 294, "col_offset": 63, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 294, "col_offset": 67, "nodeName": "message", "type": "Warning"}, {"lineNumber": 306, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 306, "col_offset": 32, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 388, "col_offset": 43, "nodeName": "torch", "type": "Any"}, {"lineNumber": 391, "col_offset": 25, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 391, "col_offset": 61, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 391, "col_offset": 83, "nodeName": "torchbearer", "type": "module"}, {"lineNumber": 391, "col_offset": 102, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 396, "col_offset": 16, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 398, "col_offset": 16, "nodeName": "lr_mock", "type": "Any"}, {"lineNumber": 402, "col_offset": 16, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 402, "col_offset": 32, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 403, "col_offset": 16, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 403, "col_offset": 32, "nodeName": "_monitor", "type": "Any"}, {"lineNumber": 406, "col_offset": 38, "nodeName": "CyclicLR", "type": "Type[torchbearer.callbacks.torch_scheduler.CyclicLR]"}, {"lineNumber": 31, "col_offset": 39, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 63, "col_offset": 39, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 403, "col_offset": 32, "nodeName": "scheduler", "type": "torchbearer.callbacks.torch_scheduler.CyclicLR"}, {"lineNumber": 263, "col_offset": 67, "nodeName": "w", "type": "List[warnings.WarningMessage]"}, {"lineNumber": 294, "col_offset": 67, "nodeName": "w", "type": "List[warnings.WarningMessage]"}]