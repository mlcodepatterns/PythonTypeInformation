[{"lineNumber": 11, "col_offset": 0, "nodeName": "test_is_abstract", "type": "Callable[[], Any]"}, {"lineNumber": 15, "col_offset": 0, "nodeName": "test_no_args", "type": "Callable[[], Any]"}, {"lineNumber": 21, "col_offset": 0, "nodeName": "test_one_arg", "type": "Callable[[], Any]"}, {"lineNumber": 27, "col_offset": 0, "nodeName": "test_args", "type": "Callable[[], Any]"}, {"lineNumber": 7, "col_offset": 11, "nodeName": "Subcommand", "type": "Type[bokeh.command.subcommand.Subcommand]"}, {"lineNumber": 8, "col_offset": 12, "nodeName": "Subcommand", "type": "Type[bokeh.command.subcommand.Subcommand]"}, {"lineNumber": 9, "col_offset": 4, "nodeName": "invoke", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 7, "col_offset": 11, "nodeName": "sc", "type": "module"}, {"lineNumber": 8, "col_offset": 12, "nodeName": "sc", "type": "module"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "args", "type": "Tuple[()]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "obj", "type": "_Good"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "args", "type": "Tuple[Tuple[str, Dict[Any, Any]]]"}, {"lineNumber": 23, "col_offset": 4, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 24, "col_offset": 4, "nodeName": "obj", "type": "_Good"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "args", "type": "Tuple[Tuple[str, Dict[Any, Any]], Tuple[str, Dict[Any, Any]]]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "obj", "type": "_Good"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "_Good", "type": "Type[_Good]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 18, "col_offset": 10, "nodeName": "_Good", "type": "Type[_Good]"}, {"lineNumber": 18, "col_offset": 16, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "_Good", "type": "Type[_Good]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 24, "col_offset": 10, "nodeName": "_Good", "type": "Type[_Good]"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "_Good", "type": "Type[_Good]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 30, "col_offset": 10, "nodeName": "_Good", "type": "Type[_Good]"}, {"lineNumber": 30, "col_offset": 16, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "call_count", "type": "int"}, {"lineNumber": 12, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 12, "col_offset": 23, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "_Bad", "type": "Type[_Bad]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "add_argument", "type": "Any"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "add_argument", "type": "Any"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 12, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 22, "col_offset": 26, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "p", "type": "mock.MagicMock"}, {"lineNumber": 25, "col_offset": 52, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 28, "col_offset": 26, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 28, "col_offset": 50, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}]