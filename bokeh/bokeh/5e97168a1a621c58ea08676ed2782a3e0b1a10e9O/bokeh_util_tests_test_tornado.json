[{"lineNumber": 10, "col_offset": 0, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 25, "col_offset": 0, "nodeName": "run", "type": "Callable[[Any], Any]"}, {"lineNumber": 263, "col_offset": 0, "nodeName": "async_value", "type": "Callable[[Any], Any]"}, {"lineNumber": 268, "col_offset": 0, "nodeName": "test__yield_for_all_futures", "type": "Callable[[], Any]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "count", "type": "Callable[[Any], Any]"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "__init__", "type": "Callable[..., Any]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "__exit__", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "__enter__", "type": "Callable[[Any], Any]"}, {"lineNumber": 48, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "test_next_tick_runs", "type": "Callable[[Any], Any]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "test_timeout_runs", "type": "Callable[[Any], Any]"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "test_periodic_runs", "type": "Callable[[Any], Any]"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "test_next_tick_does_not_run_if_removed_immediately", "type": "Callable[[Any], Any]"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "test_timeout_does_not_run_if_removed_immediately", "type": "Callable[[Any], Any]"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "test_periodic_does_not_run_if_removed_immediately", "type": "Callable[[Any], Any]"}, {"lineNumber": 102, "col_offset": 4, "nodeName": "test_next_tick_remove_with_returned_callable", "type": "Callable[[Any], Any]"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "test_timeout_remove_with_returned_callable", "type": "Callable[[Any], Any]"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "test_periodic_remove_with_returned_callable", "type": "Callable[[Any], Any]"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "test_same_callback_as_all_three_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "test_adding_next_tick_twice", "type": "Callable[[Any], Any]"}, {"lineNumber": 142, "col_offset": 4, "nodeName": "test_adding_timeout_twice", "type": "Callable[[Any], Any]"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "test_adding_periodic_twice", "type": "Callable[[Any], Any]"}, {"lineNumber": 162, "col_offset": 4, "nodeName": "test_remove_all_callbacks", "type": "Callable[[Any], Any]"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "test_removing_next_tick_twice", "type": "Callable[[Any], Any]"}, {"lineNumber": 185, "col_offset": 4, "nodeName": "test_removing_timeout_twice", "type": "Callable[[Any], Any]"}, {"lineNumber": 195, "col_offset": 4, "nodeName": "test_removing_periodic_twice", "type": "Callable[[Any], Any]"}, {"lineNumber": 205, "col_offset": 4, "nodeName": "test_next_tick_cleanup_when_removed", "type": "Callable[[Any], Any]"}, {"lineNumber": 217, "col_offset": 4, "nodeName": "test_timeout_cleanup_when_removed", "type": "Callable[[Any], Any]"}, {"lineNumber": 229, "col_offset": 4, "nodeName": "test_periodic_cleanup_when_removed", "type": "Callable[[Any], Any]"}, {"lineNumber": 241, "col_offset": 4, "nodeName": "test_next_tick_cleanup_when_run", "type": "Callable[[Any], Any]"}, {"lineNumber": 252, "col_offset": 4, "nodeName": "test_timeout_cleanup_when_run", "type": "Callable[[Any], Any]"}, {"lineNumber": 272, "col_offset": 4, "nodeName": "several_steps", "type": "Callable[[], Any]"}, {"lineNumber": 12, "col_offset": 4, "nodeName": "counter", "type": "Dict[str, int]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "counter", "type": "Dict[str, int]"}, {"lineNumber": 20, "col_offset": 19, "nodeName": "counter", "type": "Dict[str, int]"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 48, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 269, "col_offset": 4, "nodeName": "loop", "type": "Any"}, {"lineNumber": 280, "col_offset": 4, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 19, "col_offset": 17, "nodeName": "MethodType", "type": "Type[types.UnboundMethodType]"}, {"lineNumber": 19, "col_offset": 28, "nodeName": "count", "type": "Callable[[Any], Any]"}, {"lineNumber": 19, "col_offset": 35, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 28, "col_offset": 11, "nodeName": "KeyboardInterrupt", "type": "Type[KeyboardInterrupt]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 253, "col_offset": 8, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 265, "col_offset": 10, "nodeName": "moment", "type": "Any"}, {"lineNumber": 266, "col_offset": 10, "nodeName": "Return", "type": "Type[tornado.gen.Return]"}, {"lineNumber": 266, "col_offset": 21, "nodeName": "value", "type": "Any"}, {"lineNumber": 269, "col_offset": 11, "nodeName": "IOLoop", "type": "Type[tornado.ioloop.IOLoop]"}, {"lineNumber": 270, "col_offset": 4, "nodeName": "make_current", "type": "Any"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "value", "type": "int"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "value", "type": "Any"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "value", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "value", "type": "Any"}, {"lineNumber": 285, "col_offset": 4, "nodeName": "add_future", "type": "Any"}, {"lineNumber": 286, "col_offset": 20, "nodeName": "on_done", "type": "Callable[[Any], Any]"}, {"lineNumber": 290, "col_offset": 11, "nodeName": "KeyboardInterrupt", "type": "Type[KeyboardInterrupt]"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "close", "type": "Any"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "counter", "type": "Dict[str, int]"}, {"lineNumber": 18, "col_offset": 15, "nodeName": "counter", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "start", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 34, "col_offset": 23, "nodeName": "IOLoop", "type": "Type[tornado.ioloop.IOLoop]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 35, "col_offset": 21, "nodeName": "_CallbackGroup", "type": "Type[bokeh.util.tornado._CallbackGroup]"}, {"lineNumber": 35, "col_offset": 36, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 37, "col_offset": 11, "nodeName": "quit_after", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "run", "type": "Callable[[Any], Any]"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "close", "type": "Any"}, {"lineNumber": 50, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 70, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "remove_periodic_callback", "type": "Callable[[Any], None]"}, {"lineNumber": 78, "col_offset": 43, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 82, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 89, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 96, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 110, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 117, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 118, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 133, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 143, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 163, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 176, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 177, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 186, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 196, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 197, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 198, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 207, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 208, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 212, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 219, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 220, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 224, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 231, "col_offset": 46, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 236, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 243, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 244, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 254, "col_offset": 33, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 255, "col_offset": 12, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 265, "col_offset": 10, "nodeName": "gen", "type": "module"}, {"lineNumber": 266, "col_offset": 10, "nodeName": "gen", "type": "module"}, {"lineNumber": 270, "col_offset": 4, "nodeName": "loop", "type": "Any"}, {"lineNumber": 278, "col_offset": 14, "nodeName": "Return", "type": "Type[tornado.gen.Return]"}, {"lineNumber": 278, "col_offset": 25, "nodeName": "value", "type": "Any"}, {"lineNumber": 282, "col_offset": 8, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 282, "col_offset": 26, "nodeName": "result", "type": "Any"}, {"lineNumber": 283, "col_offset": 8, "nodeName": "stop", "type": "Any"}, {"lineNumber": 285, "col_offset": 4, "nodeName": "loop", "type": "Any"}, {"lineNumber": 285, "col_offset": 20, "nodeName": "yield_for_all_futures", "type": "Any"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "start", "type": "Any"}, {"lineNumber": 293, "col_offset": 16, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "loop", "type": "Any"}, {"lineNumber": 15, "col_offset": 11, "nodeName": "stop_after", "type": "int"}, {"lineNumber": 15, "col_offset": 58, "nodeName": "stop_after", "type": "int"}, {"lineNumber": 16, "col_offset": 12, "nodeName": "stop", "type": "Any"}, {"lineNumber": 18, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "loop", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 35, "col_offset": 36, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "call_later", "type": "Any"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 50, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 51, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 53, "col_offset": 45, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 55, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 57, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "_next_tick_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 61, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 61, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 63, "col_offset": 43, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 67, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "_timeout_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 70, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 71, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 73, "col_offset": 44, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 77, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 77, "col_offset": 32, "nodeName": "_periodic_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 79, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "_periodic_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 82, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 83, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 84, "col_offset": 45, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "remove_next_tick_callback", "type": "Callable[[Any], None]"}, {"lineNumber": 85, "col_offset": 48, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 86, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 90, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 90, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 91, "col_offset": 43, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "remove_timeout_callback", "type": "Callable[[Any], None]"}, {"lineNumber": 92, "col_offset": 46, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 93, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 96, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 97, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 98, "col_offset": 44, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "remove_periodic_callback", "type": "Callable[[Any], None]"}, {"lineNumber": 99, "col_offset": 47, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 100, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 103, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 104, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 105, "col_offset": 22, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 105, "col_offset": 55, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 106, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 107, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 110, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 111, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 111, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 112, "col_offset": 22, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 112, "col_offset": 53, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 114, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 117, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 118, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 118, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 119, "col_offset": 22, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 119, "col_offset": 54, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 121, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 124, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 125, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 125, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 127, "col_offset": 44, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 128, "col_offset": 43, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 129, "col_offset": 45, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 130, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 133, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 136, "col_offset": 52, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "add_callback", "type": "Any"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 143, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 146, "col_offset": 52, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "add_callback", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 153, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 156, "col_offset": 52, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 159, "col_offset": 12, "nodeName": "add_callback", "type": "Any"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 163, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 167, "col_offset": 12, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 167, "col_offset": 45, "nodeName": "remove_all", "type": "Callable[[], Any]"}, {"lineNumber": 169, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 169, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 170, "col_offset": 12, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 170, "col_offset": 44, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 171, "col_offset": 43, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 172, "col_offset": 45, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 173, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 176, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 177, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 177, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 178, "col_offset": 22, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 178, "col_offset": 55, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 180, "col_offset": 52, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 182, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 186, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 187, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 187, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 188, "col_offset": 22, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 188, "col_offset": 53, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 189, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 190, "col_offset": 52, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 192, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 196, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 197, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 197, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 198, "col_offset": 22, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 198, "col_offset": 54, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 199, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 200, "col_offset": 52, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 202, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 207, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 208, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 208, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 212, "col_offset": 22, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 212, "col_offset": 55, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 213, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 214, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 215, "col_offset": 24, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 219, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 220, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 220, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 224, "col_offset": 22, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 224, "col_offset": 53, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 226, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 227, "col_offset": 24, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 231, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 232, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 232, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 236, "col_offset": 22, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 236, "col_offset": 54, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 237, "col_offset": 12, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 238, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 239, "col_offset": 24, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 243, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 244, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 244, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 248, "col_offset": 12, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 248, "col_offset": 45, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 249, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 250, "col_offset": 24, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 254, "col_offset": 14, "nodeName": "LoopAndGroup", "type": "Type[LoopAndGroup]"}, {"lineNumber": 255, "col_offset": 19, "nodeName": "_make_invocation_counter", "type": "Callable[..., Any]"}, {"lineNumber": 255, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 259, "col_offset": 43, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 260, "col_offset": 28, "nodeName": "count", "type": "types.UnboundMethodType"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 261, "col_offset": 24, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 275, "col_offset": 23, "nodeName": "async_value", "type": "Any"}, {"lineNumber": 276, "col_offset": 23, "nodeName": "async_value", "type": "Any"}, {"lineNumber": 277, "col_offset": 23, "nodeName": "async_value", "type": "Any"}, {"lineNumber": 278, "col_offset": 14, "nodeName": "gen", "type": "module"}, {"lineNumber": 282, "col_offset": 26, "nodeName": "future", "type": "Any"}, {"lineNumber": 283, "col_offset": 8, "nodeName": "loop", "type": "Any"}, {"lineNumber": 285, "col_offset": 42, "nodeName": "several_steps", "type": "Any"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "loop", "type": "Any"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 15, "col_offset": 38, "nodeName": "counter", "type": "Dict[str, int]"}, {"lineNumber": 16, "col_offset": 12, "nodeName": "loop", "type": "Any"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 38, "col_offset": 36, "nodeName": "quit_after", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 51, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 52, "col_offset": 32, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 52, "col_offset": 36, "nodeName": "_next_tick_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 54, "col_offset": 32, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 54, "col_offset": 36, "nodeName": "_next_tick_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 55, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 61, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 62, "col_offset": 32, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 62, "col_offset": 36, "nodeName": "_timeout_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "_timeout_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 65, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 71, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 72, "col_offset": 32, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 72, "col_offset": 36, "nodeName": "_periodic_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 74, "col_offset": 36, "nodeName": "_periodic_callbacks", "type": "Dict[Any, Callable[[], Any]]"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 77, "col_offset": 32, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 83, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 86, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 90, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 93, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 97, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 100, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 104, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 105, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 107, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 111, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 112, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 114, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 118, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 119, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 121, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 125, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 130, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 136, "col_offset": 18, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 136, "col_offset": 36, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 137, "col_offset": 49, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "add_next_tick_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 138, "col_offset": 49, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 140, "col_offset": 35, "nodeName": "repr", "type": "Callable[[Any], str]"}, {"lineNumber": 140, "col_offset": 40, "nodeName": "exception", "type": "Any"}, {"lineNumber": 146, "col_offset": 18, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 146, "col_offset": 36, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 147, "col_offset": 47, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 148, "col_offset": 16, "nodeName": "add_timeout_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 148, "col_offset": 47, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 150, "col_offset": 35, "nodeName": "repr", "type": "Callable[[Any], str]"}, {"lineNumber": 150, "col_offset": 40, "nodeName": "exception", "type": "Any"}, {"lineNumber": 156, "col_offset": 18, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 156, "col_offset": 36, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 157, "col_offset": 16, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 157, "col_offset": 48, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 158, "col_offset": 16, "nodeName": "add_periodic_callback", "type": "Callable[..., Callable[[], Any]]"}, {"lineNumber": 158, "col_offset": 48, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 159, "col_offset": 12, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 160, "col_offset": 35, "nodeName": "repr", "type": "Callable[[Any], str]"}, {"lineNumber": 160, "col_offset": 40, "nodeName": "exception", "type": "Any"}, {"lineNumber": 166, "col_offset": 16, "nodeName": "remove_all_callbacks", "type": "Callable[[], None]"}, {"lineNumber": 167, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 169, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 170, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 173, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 177, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 178, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 180, "col_offset": 18, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 180, "col_offset": 36, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 181, "col_offset": 16, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 182, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 183, "col_offset": 35, "nodeName": "repr", "type": "Callable[[Any], str]"}, {"lineNumber": 183, "col_offset": 40, "nodeName": "exception", "type": "Any"}, {"lineNumber": 187, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 188, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 190, "col_offset": 18, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 190, "col_offset": 36, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 191, "col_offset": 16, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 192, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 193, "col_offset": 35, "nodeName": "repr", "type": "Callable[[Any], str]"}, {"lineNumber": 193, "col_offset": 40, "nodeName": "exception", "type": "Any"}, {"lineNumber": 197, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 198, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 200, "col_offset": 18, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 200, "col_offset": 36, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 201, "col_offset": 16, "nodeName": "remover", "type": "Callable[[], Any]"}, {"lineNumber": 202, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 203, "col_offset": 35, "nodeName": "repr", "type": "Callable[[Any], str]"}, {"lineNumber": 203, "col_offset": 40, "nodeName": "exception", "type": "Any"}, {"lineNumber": 208, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 210, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 210, "col_offset": 30, "nodeName": "callback", "type": "Any"}, {"lineNumber": 210, "col_offset": 40, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 211, "col_offset": 16, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 212, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 212, "col_offset": 69, "nodeName": "cleanup", "type": "Callable[[Any], Any]"}, {"lineNumber": 214, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 220, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 222, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 222, "col_offset": 30, "nodeName": "callback", "type": "Any"}, {"lineNumber": 222, "col_offset": 40, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 223, "col_offset": 16, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 224, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 224, "col_offset": 91, "nodeName": "cleanup", "type": "Callable[[Any], Any]"}, {"lineNumber": 226, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 232, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 234, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 234, "col_offset": 30, "nodeName": "callback", "type": "Any"}, {"lineNumber": 234, "col_offset": 40, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 235, "col_offset": 16, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 236, "col_offset": 22, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 236, "col_offset": 91, "nodeName": "cleanup", "type": "Callable[[Any], Any]"}, {"lineNumber": 238, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 244, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 246, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 246, "col_offset": 30, "nodeName": "callback", "type": "Any"}, {"lineNumber": 246, "col_offset": 40, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 247, "col_offset": 16, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 248, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 248, "col_offset": 59, "nodeName": "cleanup", "type": "Callable[[Any], Any]"}, {"lineNumber": 249, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 255, "col_offset": 44, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 257, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 257, "col_offset": 30, "nodeName": "callback", "type": "Any"}, {"lineNumber": 257, "col_offset": 40, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 258, "col_offset": 16, "nodeName": "result", "type": "Dict[str, bool]"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 259, "col_offset": 81, "nodeName": "cleanup", "type": "Callable[[Any], Any]"}, {"lineNumber": 260, "col_offset": 28, "nodeName": "func", "type": "Callable[[], Any]"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 39, "col_offset": 44, "nodeName": "stop", "type": "Any"}, {"lineNumber": 52, "col_offset": 36, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 54, "col_offset": 36, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 62, "col_offset": 36, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 72, "col_offset": 36, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 74, "col_offset": 36, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 77, "col_offset": 32, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 105, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 112, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 119, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 136, "col_offset": 18, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 139, "col_offset": 45, "nodeName": "stop", "type": "Any"}, {"lineNumber": 140, "col_offset": 40, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 146, "col_offset": 18, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 148, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 149, "col_offset": 45, "nodeName": "stop", "type": "Any"}, {"lineNumber": 150, "col_offset": 40, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 156, "col_offset": 18, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 157, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 158, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 159, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 159, "col_offset": 45, "nodeName": "stop", "type": "Any"}, {"lineNumber": 160, "col_offset": 40, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 166, "col_offset": 16, "nodeName": "group", "type": "bokeh.util.tornado._CallbackGroup"}, {"lineNumber": 167, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 170, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 178, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 180, "col_offset": 18, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 183, "col_offset": 40, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 188, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 190, "col_offset": 18, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 193, "col_offset": 40, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 198, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 200, "col_offset": 18, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 203, "col_offset": 40, "nodeName": "manager", "type": "unittest._AssertRaisesContext"}, {"lineNumber": 210, "col_offset": 16, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 212, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 222, "col_offset": 16, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 224, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 234, "col_offset": 16, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 236, "col_offset": 22, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 246, "col_offset": 16, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 248, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 257, "col_offset": 16, "nodeName": "self", "type": "TestCallbackGroup"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 39, "col_offset": 44, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 52, "col_offset": 36, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 54, "col_offset": 36, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 62, "col_offset": 36, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 72, "col_offset": 36, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 74, "col_offset": 36, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 139, "col_offset": 45, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 148, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 149, "col_offset": 45, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 157, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 158, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 159, "col_offset": 45, "nodeName": "io_loop", "type": "Any"}, {"lineNumber": 166, "col_offset": 16, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 39, "col_offset": 44, "nodeName": "self", "type": "LoopAndGroup"}, {"lineNumber": 139, "col_offset": 45, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 149, "col_offset": 45, "nodeName": "ctx", "type": "LoopAndGroup"}, {"lineNumber": 159, "col_offset": 45, "nodeName": "ctx", "type": "LoopAndGroup"}]