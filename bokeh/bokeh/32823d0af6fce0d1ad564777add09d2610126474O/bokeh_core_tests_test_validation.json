[{"lineNumber": 10, "col_offset": 0, "nodeName": "test_error_decorator_code", "type": "Callable[[], Any]"}, {"lineNumber": 22, "col_offset": 0, "nodeName": "test_warning_decorator_code", "type": "Callable[[], Any]"}, {"lineNumber": 34, "col_offset": 0, "nodeName": "test_error_decorator_custom", "type": "Callable[[], Any]"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "test_warning_decorator_custom", "type": "Callable[[], Any]"}, {"lineNumber": 56, "col_offset": 10, "nodeName": "Model", "type": "Type[bokeh.model.Model]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "code", "type": "int"}, {"lineNumber": 11, "col_offset": 16, "nodeName": "ec", "type": "Dict[int, Tuple[str, str]]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "code", "type": "int"}, {"lineNumber": 23, "col_offset": 16, "nodeName": "wc", "type": "Dict[int, Tuple[str, str]]"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "foo", "type": "bokeh.core.property.primitive.Int"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "m", "type": "Mod"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "m", "type": "Mod"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "called", "type": "Any"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "m", "type": "Mod"}, {"lineNumber": 91, "col_offset": 11, "nodeName": "called", "type": "Any"}, {"lineNumber": 58, "col_offset": 10, "nodeName": "Int", "type": "Type[bokeh.core.property.primitive.Int]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "Mod", "type": "Type[Mod]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "check_integrity", "type": "Callable[[Any], None]"}, {"lineNumber": 74, "col_offset": 15, "nodeName": "called", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "called", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "Mod", "type": "Type[Mod]"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "check_integrity", "type": "Callable[[Any], None]"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "mock_error", "type": "Any"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "called", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "Mod", "type": "Type[Mod]"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "check_integrity", "type": "Callable[[Any], None]"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "called", "type": "Any"}, {"lineNumber": 91, "col_offset": 11, "nodeName": "mock_warn", "type": "Any"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "good", "type": "Any"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "bad", "type": "Any"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "good", "type": "Any"}, {"lineNumber": 54, "col_offset": 11, "nodeName": "bad", "type": "Any"}, {"lineNumber": 62, "col_offset": 11, "nodeName": "foo", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "foo", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "v", "type": "module"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "m", "type": "Mod"}, {"lineNumber": 74, "col_offset": 15, "nodeName": "mock_error", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "mock_warn", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "v", "type": "module"}, {"lineNumber": 81, "col_offset": 23, "nodeName": "m", "type": "Mod"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "mock_warn", "type": "Any"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "v", "type": "module"}, {"lineNumber": 89, "col_offset": 23, "nodeName": "m", "type": "Mod"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "mock_error", "type": "Any"}, {"lineNumber": 15, "col_offset": 15, "nodeName": "good", "type": "Any"}, {"lineNumber": 20, "col_offset": 15, "nodeName": "bad", "type": "Any"}, {"lineNumber": 27, "col_offset": 15, "nodeName": "good", "type": "Any"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "bad", "type": "Any"}, {"lineNumber": 62, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 20, "col_offset": 26, "nodeName": "code", "type": "int"}, {"lineNumber": 20, "col_offset": 35, "nodeName": "ec", "type": "Dict[int, Tuple[str, str]]"}, {"lineNumber": 32, "col_offset": 26, "nodeName": "code", "type": "int"}, {"lineNumber": 32, "col_offset": 35, "nodeName": "wc", "type": "Dict[int, Tuple[str, str]]"}, {"lineNumber": 20, "col_offset": 38, "nodeName": "code", "type": "int"}, {"lineNumber": 32, "col_offset": 38, "nodeName": "code", "type": "int"}]