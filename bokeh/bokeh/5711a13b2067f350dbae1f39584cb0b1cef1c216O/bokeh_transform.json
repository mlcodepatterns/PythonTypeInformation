[{"lineNumber": 206, "col_offset": 0, "nodeName": "stack", "type": "Callable[..., Any]"}, {"lineNumber": 224, "col_offset": 0, "nodeName": "transform", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 19, "col_offset": 0, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 19, "col_offset": 6, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 19, "col_offset": 24, "nodeName": "__name__", "type": "str"}, {"lineNumber": 21, "col_offset": 42, "nodeName": "general", "type": "Callable[[Any], Any]"}, {"lineNumber": 21, "col_offset": 51, "nodeName": "dev", "type": "Callable[[Any], Any]"}, {"lineNumber": 19, "col_offset": 6, "nodeName": "logging", "type": "module"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "field", "type": "Any"}, {"lineNumber": 73, "col_offset": 17, "nodeName": "field_name", "type": "Any"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "field", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "field_name", "type": "Any"}, {"lineNumber": 131, "col_offset": 11, "nodeName": "field", "type": "Any"}, {"lineNumber": 131, "col_offset": 17, "nodeName": "field_name", "type": "Any"}, {"lineNumber": 164, "col_offset": 11, "nodeName": "field", "type": "Any"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "field_name", "type": "Any"}, {"lineNumber": 199, "col_offset": 11, "nodeName": "field", "type": "Any"}, {"lineNumber": 199, "col_offset": 17, "nodeName": "field_name", "type": "Any"}, {"lineNumber": 222, "col_offset": 11, "nodeName": "expr", "type": "Any"}, {"lineNumber": 238, "col_offset": 11, "nodeName": "field", "type": "Any"}, {"lineNumber": 238, "col_offset": 17, "nodeName": "field_name", "type": "Any"}, {"lineNumber": 238, "col_offset": 29, "nodeName": "transform", "type": "Any"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "Dodge", "type": "Any"}, {"lineNumber": 102, "col_offset": 29, "nodeName": "CategoricalColorMapper", "type": "Any"}, {"lineNumber": 131, "col_offset": 29, "nodeName": "Jitter", "type": "Any"}, {"lineNumber": 164, "col_offset": 29, "nodeName": "LinearColorMapper", "type": "Any"}, {"lineNumber": 199, "col_offset": 29, "nodeName": "LogColorMapper", "type": "Any"}, {"lineNumber": 222, "col_offset": 16, "nodeName": "Stack", "type": "Any"}, {"lineNumber": 73, "col_offset": 41, "nodeName": "value", "type": "Any"}, {"lineNumber": 73, "col_offset": 54, "nodeName": "range", "type": "Any"}, {"lineNumber": 102, "col_offset": 60, "nodeName": "palette", "type": "Any"}, {"lineNumber": 103, "col_offset": 60, "nodeName": "factors", "type": "Any"}, {"lineNumber": 104, "col_offset": 58, "nodeName": "start", "type": "Any"}, {"lineNumber": 105, "col_offset": 56, "nodeName": "end", "type": "Any"}, {"lineNumber": 106, "col_offset": 62, "nodeName": "nan_color", "type": "Any"}, {"lineNumber": 131, "col_offset": 41, "nodeName": "mean", "type": "Any"}, {"lineNumber": 132, "col_offset": 42, "nodeName": "width", "type": "Any"}, {"lineNumber": 133, "col_offset": 49, "nodeName": "distribution", "type": "Any"}, {"lineNumber": 134, "col_offset": 42, "nodeName": "range", "type": "Any"}, {"lineNumber": 164, "col_offset": 55, "nodeName": "palette", "type": "Any"}, {"lineNumber": 165, "col_offset": 51, "nodeName": "low", "type": "Any"}, {"lineNumber": 166, "col_offset": 52, "nodeName": "high", "type": "Any"}, {"lineNumber": 167, "col_offset": 57, "nodeName": "nan_color", "type": "Any"}, {"lineNumber": 168, "col_offset": 57, "nodeName": "low_color", "type": "Any"}, {"lineNumber": 169, "col_offset": 58, "nodeName": "high_color", "type": "Any"}, {"lineNumber": 199, "col_offset": 52, "nodeName": "palette", "type": "Any"}, {"lineNumber": 200, "col_offset": 48, "nodeName": "low", "type": "Any"}, {"lineNumber": 201, "col_offset": 49, "nodeName": "high", "type": "Any"}, {"lineNumber": 202, "col_offset": 54, "nodeName": "nan_color", "type": "Any"}, {"lineNumber": 203, "col_offset": 54, "nodeName": "low_color", "type": "Any"}, {"lineNumber": 204, "col_offset": 55, "nodeName": "high_color", "type": "Any"}, {"lineNumber": 222, "col_offset": 29, "nodeName": "fields", "type": "Tuple[Any, ...]"}]