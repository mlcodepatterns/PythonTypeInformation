[{"lineNumber": 38, "col_offset": 15, "nodeName": "classifier_data", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "max_epochs", "type": "int"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "classifier_data", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "num_examples", "type": "int"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "max_epochs", "type": "int"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "classifier_data", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "expected", "type": "int"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "targets", "type": "Union[List[Any], Any]"}, {"lineNumber": 110, "col_offset": 12, "nodeName": "epoch", "type": "int"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "targets", "type": "Any"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "targets", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "remaining_epochs", "type": "Any"}, {"lineNumber": 123, "col_offset": 27, "nodeName": "epochs", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "current_period", "type": "Any"}, {"lineNumber": 124, "col_offset": 25, "nodeName": "base_period", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "targets", "type": "List[Any]"}, {"lineNumber": 133, "col_offset": 15, "nodeName": "targets", "type": "List[Any]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 150, "col_offset": 20, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "epochs", "type": "int"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "base_period", "type": "int"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 169, "col_offset": 20, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "epochs", "type": "int"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "base_period", "type": "int"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "epochs", "type": "int"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "min_lr_group", "type": "List[float]"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "max_lr_group", "type": "List[float]"}, {"lineNumber": 201, "col_offset": 8, "nodeName": "base_period", "type": "int"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "targets", "type": "List[Any]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "target", "type": "List[int]"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "targets", "type": "List[List[int]]"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "deltas", "type": "List[int]"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "base_lrs", "type": "List[int]"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "max_lrs", "type": "List[int]"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "targets", "type": "List[List[Union[int, float]]]"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "diff_lr", "type": "int"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "gamma", "type": "float"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "target", "type": "List[float]"}, {"lineNumber": 282, "col_offset": 8, "nodeName": "targets", "type": "List[List[float]]"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 300, "col_offset": 8, "nodeName": "batch_idxs", "type": "int"}, {"lineNumber": 301, "col_offset": 12, "nodeName": "batch_num", "type": "int"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "X", "type": "Any"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "y", "type": "Any"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "LRScheduler", "type": "Type[skorch.callbacks.lr_scheduler.LRScheduler]"}, {"lineNumber": 39, "col_offset": 32, "nodeName": "policy", "type": "Any"}, {"lineNumber": 40, "col_offset": 14, "nodeName": "NeuralNetClassifier", "type": "Type[skorch.net.NeuralNetClassifier]"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "fit", "type": "Callable[..., Any]"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "X", "type": "Any"}, {"lineNumber": 43, "col_offset": 19, "nodeName": "y", "type": "Any"}, {"lineNumber": 44, "col_offset": 15, "nodeName": "any", "type": "Callable[[Any], bool]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "X", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "y", "type": "Any"}, {"lineNumber": 67, "col_offset": 20, "nodeName": "LRScheduler", "type": "Type[skorch.callbacks.lr_scheduler.LRScheduler]"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "policy", "type": "Any"}, {"lineNumber": 68, "col_offset": 14, "nodeName": "NeuralNetClassifier", "type": "Type[skorch.net.NeuralNetClassifier]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "fit", "type": "Callable[..., Any]"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "X", "type": "Any"}, {"lineNumber": 74, "col_offset": 19, "nodeName": "y", "type": "Any"}, {"lineNumber": 76, "col_offset": 15, "nodeName": "last_epoch", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "X", "type": "Any"}, {"lineNumber": 92, "col_offset": 11, "nodeName": "y", "type": "Any"}, {"lineNumber": 93, "col_offset": 20, "nodeName": "LRScheduler", "type": "Type[skorch.callbacks.lr_scheduler.LRScheduler]"}, {"lineNumber": 93, "col_offset": 32, "nodeName": "policy", "type": "Any"}, {"lineNumber": 94, "col_offset": 14, "nodeName": "NeuralNetClassifier", "type": "Type[skorch.net.NeuralNetClassifier]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "fit", "type": "Callable[..., Any]"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "X", "type": "Any"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "y", "type": "Any"}, {"lineNumber": 97, "col_offset": 50, "nodeName": "max_epochs", "type": "int"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "last_batch_idx", "type": "Any"}, {"lineNumber": 99, "col_offset": 57, "nodeName": "expected", "type": "int"}, {"lineNumber": 106, "col_offset": 69, "nodeName": "targets", "type": "Any"}, {"lineNumber": 107, "col_offset": 20, "nodeName": "WarmRestartLR", "type": "Type[skorch.callbacks.lr_scheduler.WarmRestartLR]"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 108, "col_offset": 23, "nodeName": "min_lr", "type": "Any"}, {"lineNumber": 108, "col_offset": 31, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 108, "col_offset": 39, "nodeName": "base_period", "type": "Any"}, {"lineNumber": 108, "col_offset": 52, "nodeName": "period_mult", "type": "Any"}, {"lineNumber": 110, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 110, "col_offset": 27, "nodeName": "epochs", "type": "Any"}, {"lineNumber": 117, "col_offset": 18, "nodeName": "min_lr", "type": "Any"}, {"lineNumber": 118, "col_offset": 15, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 125, "col_offset": 18, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 126, "col_offset": 14, "nodeName": "remaining_epochs", "type": "Any"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "period_epochs", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "remaining_epochs", "type": "Any"}, {"lineNumber": 128, "col_offset": 32, "nodeName": "period_epochs", "type": "Any"}, {"lineNumber": 132, "col_offset": 12, "nodeName": "current_period", "type": "Any"}, {"lineNumber": 137, "col_offset": 15, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 140, "col_offset": 42, "nodeName": "excinfo", "type": "Any"}, {"lineNumber": 145, "col_offset": 42, "nodeName": "excinfo", "type": "Any"}, {"lineNumber": 156, "col_offset": 18, "nodeName": "_single_period_targets", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 157, "col_offset": 12, "nodeName": "epochs", "type": "int"}, {"lineNumber": 157, "col_offset": 20, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 157, "col_offset": 28, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 157, "col_offset": 36, "nodeName": "base_period", "type": "int"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assert_lr_correct", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 159, "col_offset": 12, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 160, "col_offset": 12, "nodeName": "targets", "type": "Any"}, {"lineNumber": 161, "col_offset": 12, "nodeName": "epochs", "type": "int"}, {"lineNumber": 162, "col_offset": 12, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 163, "col_offset": 12, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "base_period", "type": "int"}, {"lineNumber": 165, "col_offset": 12, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "_multi_period_targets", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "epochs", "type": "int"}, {"lineNumber": 176, "col_offset": 20, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 176, "col_offset": 28, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 176, "col_offset": 36, "nodeName": "base_period", "type": "int"}, {"lineNumber": 176, "col_offset": 49, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assert_lr_correct", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 180, "col_offset": 12, "nodeName": "targets", "type": "Any"}, {"lineNumber": 181, "col_offset": 12, "nodeName": "epochs", "type": "int"}, {"lineNumber": 182, "col_offset": 12, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 183, "col_offset": 12, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 184, "col_offset": 12, "nodeName": "base_period", "type": "int"}, {"lineNumber": 185, "col_offset": 12, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 189, "col_offset": 21, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 190, "col_offset": 20, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 203, "col_offset": 18, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 204, "col_offset": 20, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 204, "col_offset": 30, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 204, "col_offset": 34, "nodeName": "min_lr_group", "type": "List[float]"}, {"lineNumber": 204, "col_offset": 48, "nodeName": "max_lr_group", "type": "List[float]"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "assert_lr_correct", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 211, "col_offset": 12, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 212, "col_offset": 12, "nodeName": "targets", "type": "List[Any]"}, {"lineNumber": 213, "col_offset": 12, "nodeName": "epochs", "type": "int"}, {"lineNumber": 214, "col_offset": 12, "nodeName": "min_lr_group", "type": "List[float]"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "max_lr_group", "type": "List[float]"}, {"lineNumber": 216, "col_offset": 12, "nodeName": "base_period", "type": "int"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 225, "col_offset": 11, "nodeName": "param", "type": "Any"}, {"lineNumber": 227, "col_offset": 21, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 228, "col_offset": 15, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 238, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 238, "col_offset": 19, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 258, "col_offset": 29, "nodeName": "num_groups", "type": "Any"}, {"lineNumber": 259, "col_offset": 20, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 259, "col_offset": 29, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "_test_cycle_lr", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 261, "col_offset": 28, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 261, "col_offset": 44, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 261, "col_offset": 55, "nodeName": "targets", "type": "List[List[int]]"}, {"lineNumber": 271, "col_offset": 20, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 271, "col_offset": 29, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "_test_cycle_lr", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 273, "col_offset": 28, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 273, "col_offset": 44, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 273, "col_offset": 55, "nodeName": "targets", "type": "List[List[Union[int, float]]]"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "base_lr", "type": "int"}, {"lineNumber": 276, "col_offset": 17, "nodeName": "max_lr", "type": "int"}, {"lineNumber": 277, "col_offset": 18, "nodeName": "max_lr", "type": "int"}, {"lineNumber": 277, "col_offset": 27, "nodeName": "base_lr", "type": "int"}, {"lineNumber": 282, "col_offset": 29, "nodeName": "num_groups", "type": "Any"}, {"lineNumber": 283, "col_offset": 20, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 283, "col_offset": 29, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "_test_cycle_lr", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 285, "col_offset": 28, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 285, "col_offset": 44, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 285, "col_offset": 55, "nodeName": "targets", "type": "List[List[float]]"}, {"lineNumber": 288, "col_offset": 20, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 288, "col_offset": 29, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "batch_step", "type": "Callable[..., None]"}, {"lineNumber": 290, "col_offset": 15, "nodeName": "last_batch_idx", "type": "Any"}, {"lineNumber": 294, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 295, "col_offset": 20, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 295, "col_offset": 29, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 296, "col_offset": 15, "nodeName": "scale_fn", "type": "Any"}, {"lineNumber": 296, "col_offset": 37, "nodeName": "scale_fn", "type": "Callable[[Any], Any]"}, {"lineNumber": 300, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 301, "col_offset": 25, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 301, "col_offset": 31, "nodeName": "batch_idxs", "type": "int"}, {"lineNumber": 39, "col_offset": 42, "nodeName": "kwargs", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "net", "type": "skorch.net.NeuralNetClassifier"}, {"lineNumber": 44, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 67, "col_offset": 42, "nodeName": "kwargs", "type": "Any"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 70, "col_offset": 23, "nodeName": "max_epochs", "type": "int"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "net", "type": "skorch.net.NeuralNetClassifier"}, {"lineNumber": 76, "col_offset": 15, "nodeName": "lr_scheduler_", "type": "Any"}, {"lineNumber": 76, "col_offset": 53, "nodeName": "max_epochs", "type": "int"}, {"lineNumber": 93, "col_offset": 42, "nodeName": "kwargs", "type": "Any"}, {"lineNumber": 94, "col_offset": 34, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 94, "col_offset": 66, "nodeName": "max_epochs", "type": "int"}, {"lineNumber": 95, "col_offset": 45, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "net", "type": "skorch.net.NeuralNetClassifier"}, {"lineNumber": 97, "col_offset": 20, "nodeName": "num_examples", "type": "int"}, {"lineNumber": 97, "col_offset": 36, "nodeName": "batch_size", "type": "int"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "lr_scheduler_", "type": "Any"}, {"lineNumber": 106, "col_offset": 19, "nodeName": "targets", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "step", "type": "Any"}, {"lineNumber": 111, "col_offset": 27, "nodeName": "epoch", "type": "int"}, {"lineNumber": 112, "col_offset": 16, "nodeName": "param_group", "type": "Any"}, {"lineNumber": 112, "col_offset": 29, "nodeName": "target", "type": "Any"}, {"lineNumber": 112, "col_offset": 39, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 112, "col_offset": 43, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 112, "col_offset": 67, "nodeName": "targets", "type": "Union[Any, List[Any]]"}, {"lineNumber": 116, "col_offset": 22, "nodeName": "cos", "type": "Any"}, {"lineNumber": 117, "col_offset": 51, "nodeName": "targets", "type": "Any"}, {"lineNumber": 118, "col_offset": 15, "nodeName": "targets", "type": "Any"}, {"lineNumber": 127, "col_offset": 28, "nodeName": "min", "type": "Callable"}, {"lineNumber": 127, "col_offset": 32, "nodeName": "remaining_epochs", "type": "Any"}, {"lineNumber": 129, "col_offset": 23, "nodeName": "_single_period_targets", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 130, "col_offset": 16, "nodeName": "period_epochs", "type": "Any"}, {"lineNumber": 130, "col_offset": 31, "nodeName": "min_lr", "type": "Any"}, {"lineNumber": 130, "col_offset": 39, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 130, "col_offset": 47, "nodeName": "current_period", "type": "Any"}, {"lineNumber": 132, "col_offset": 29, "nodeName": "current_period", "type": "Any"}, {"lineNumber": 132, "col_offset": 46, "nodeName": "period_mult", "type": "Any"}, {"lineNumber": 137, "col_offset": 19, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 140, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 140, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "WarmRestartLR", "type": "Type[skorch.callbacks.lr_scheduler.WarmRestartLR]"}, {"lineNumber": 141, "col_offset": 26, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 142, "col_offset": 27, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 142, "col_offset": 31, "nodeName": "value", "type": "Any"}, {"lineNumber": 145, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 145, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 146, "col_offset": 12, "nodeName": "WarmRestartLR", "type": "Type[skorch.callbacks.lr_scheduler.WarmRestartLR]"}, {"lineNumber": 146, "col_offset": 26, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 147, "col_offset": 27, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 147, "col_offset": 31, "nodeName": "value", "type": "Any"}, {"lineNumber": 156, "col_offset": 18, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 205, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 225, "col_offset": 11, "nodeName": "request", "type": "Any"}, {"lineNumber": 226, "col_offset": 19, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 238, "col_offset": 19, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 241, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 241, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 242, "col_offset": 12, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 242, "col_offset": 21, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 245, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 245, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 246, "col_offset": 12, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 246, "col_offset": 21, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 249, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 249, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 250, "col_offset": 12, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 250, "col_offset": 21, "nodeName": "init_optimizer", "type": "Any"}, {"lineNumber": 253, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 253, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 254, "col_offset": 12, "nodeName": "CyclicLR", "type": "Type[skorch.callbacks.lr_scheduler.CyclicLR]"}, {"lineNumber": 258, "col_offset": 19, "nodeName": "target", "type": "List[int]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 267, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 267, "col_offset": 26, "nodeName": "i", "type": "int"}, {"lineNumber": 268, "col_offset": 24, "nodeName": "delta", "type": "int"}, {"lineNumber": 268, "col_offset": 34, "nodeName": "delta", "type": "int"}, {"lineNumber": 268, "col_offset": 43, "nodeName": "deltas", "type": "List[int]"}, {"lineNumber": 269, "col_offset": 23, "nodeName": "delta", "type": "int"}, {"lineNumber": 269, "col_offset": 33, "nodeName": "delta", "type": "int"}, {"lineNumber": 269, "col_offset": 42, "nodeName": "deltas", "type": "List[int]"}, {"lineNumber": 270, "col_offset": 56, "nodeName": "delta", "type": "int"}, {"lineNumber": 270, "col_offset": 65, "nodeName": "deltas", "type": "List[int]"}, {"lineNumber": 271, "col_offset": 53, "nodeName": "base_lrs", "type": "List[int]"}, {"lineNumber": 271, "col_offset": 70, "nodeName": "max_lrs", "type": "List[int]"}, {"lineNumber": 273, "col_offset": 8, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 281, "col_offset": 18, "nodeName": "base_lr", "type": "int"}, {"lineNumber": 282, "col_offset": 19, "nodeName": "target", "type": "List[float]"}, {"lineNumber": 283, "col_offset": 53, "nodeName": "base_lr", "type": "int"}, {"lineNumber": 283, "col_offset": 69, "nodeName": "max_lr", "type": "int"}, {"lineNumber": 284, "col_offset": 66, "nodeName": "gamma", "type": "float"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "self", "type": "TestCyclicLR"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 290, "col_offset": 15, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 295, "col_offset": 54, "nodeName": "scale_fn", "type": "Callable[[Any], Any]"}, {"lineNumber": 296, "col_offset": 15, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 300, "col_offset": 25, "nodeName": "targets", "type": "List[List[float]]"}, {"lineNumber": 302, "col_offset": 12, "nodeName": "batch_step", "type": "Callable[..., None]"}, {"lineNumber": 302, "col_offset": 33, "nodeName": "batch_num", "type": "int"}, {"lineNumber": 303, "col_offset": 16, "nodeName": "param_group", "type": "Any"}, {"lineNumber": 303, "col_offset": 29, "nodeName": "target", "type": "Any"}, {"lineNumber": 303, "col_offset": 39, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 303, "col_offset": 43, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 303, "col_offset": 67, "nodeName": "targets", "type": "List[List[float]]"}, {"lineNumber": 41, "col_offset": 56, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 44, "col_offset": 24, "nodeName": "map", "type": "Callable"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "callbacks_", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 76, "col_offset": 15, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 95, "col_offset": 68, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "lr_policy", "type": "skorch.callbacks.lr_scheduler.LRScheduler"}, {"lineNumber": 106, "col_offset": 31, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 106, "col_offset": 35, "nodeName": "param_groups", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.WarmRestartLR"}, {"lineNumber": 112, "col_offset": 43, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 116, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 116, "col_offset": 57, "nodeName": "period", "type": "Any"}, {"lineNumber": 127, "col_offset": 50, "nodeName": "current_period", "type": "Any"}, {"lineNumber": 129, "col_offset": 23, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 140, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 142, "col_offset": 31, "nodeName": "excinfo", "type": "Any"}, {"lineNumber": 145, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 147, "col_offset": 31, "nodeName": "excinfo", "type": "Any"}, {"lineNumber": 205, "col_offset": 12, "nodeName": "targets", "type": "List[Any]"}, {"lineNumber": 206, "col_offset": 16, "nodeName": "_multi_period_targets", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 207, "col_offset": 20, "nodeName": "epochs", "type": "int"}, {"lineNumber": 207, "col_offset": 28, "nodeName": "min_lr", "type": "float"}, {"lineNumber": 207, "col_offset": 36, "nodeName": "max_lr", "type": "float"}, {"lineNumber": 207, "col_offset": 44, "nodeName": "base_period", "type": "int"}, {"lineNumber": 207, "col_offset": 57, "nodeName": "period_mult", "type": "int"}, {"lineNumber": 226, "col_offset": 23, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 241, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 245, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 249, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 253, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 267, "col_offset": 31, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 267, "col_offset": 40, "nodeName": "num_groups", "type": "Any"}, {"lineNumber": 270, "col_offset": 20, "nodeName": "x", "type": "Union[int, float]"}, {"lineNumber": 270, "col_offset": 24, "nodeName": "delta", "type": "int"}, {"lineNumber": 270, "col_offset": 34, "nodeName": "x", "type": "Union[int, float]"}, {"lineNumber": 270, "col_offset": 39, "nodeName": "base_target", "type": "List[Union[int, float]]"}, {"lineNumber": 281, "col_offset": 51, "nodeName": "i", "type": "int"}, {"lineNumber": 281, "col_offset": 54, "nodeName": "x", "type": "Union[float, int]"}, {"lineNumber": 281, "col_offset": 59, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 281, "col_offset": 69, "nodeName": "xs", "type": "List[Union[int, float]]"}, {"lineNumber": 302, "col_offset": 12, "nodeName": "scheduler", "type": "skorch.callbacks.lr_scheduler.CyclicLR"}, {"lineNumber": 303, "col_offset": 43, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "net", "type": "skorch.net.NeuralNetClassifier"}, {"lineNumber": 106, "col_offset": 35, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 113, "col_offset": 23, "nodeName": "param_group", "type": "Any"}, {"lineNumber": 113, "col_offset": 44, "nodeName": "approx", "type": "Any"}, {"lineNumber": 116, "col_offset": 49, "nodeName": "pi", "type": "Any"}, {"lineNumber": 117, "col_offset": 34, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 117, "col_offset": 41, "nodeName": "min_lr", "type": "Any"}, {"lineNumber": 137, "col_offset": 19, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 192, "col_offset": 27, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 193, "col_offset": 27, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 194, "col_offset": 27, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 206, "col_offset": 16, "nodeName": "self", "type": "TestWarmRestartLR"}, {"lineNumber": 230, "col_offset": 27, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 231, "col_offset": 27, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 232, "col_offset": 27, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 281, "col_offset": 28, "nodeName": "x", "type": "Union[int, float]"}, {"lineNumber": 281, "col_offset": 30, "nodeName": "diff_lr", "type": "int"}, {"lineNumber": 281, "col_offset": 38, "nodeName": "gamma", "type": "float"}, {"lineNumber": 281, "col_offset": 45, "nodeName": "i", "type": "int"}, {"lineNumber": 304, "col_offset": 23, "nodeName": "param_group", "type": "Any"}, {"lineNumber": 304, "col_offset": 44, "nodeName": "approx", "type": "Any"}, {"lineNumber": 45, "col_offset": 22, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 46, "col_offset": 54, "nodeName": "instance", "type": "Any"}, {"lineNumber": 113, "col_offset": 44, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 113, "col_offset": 58, "nodeName": "target", "type": "Any"}, {"lineNumber": 116, "col_offset": 29, "nodeName": "arange", "type": "Any"}, {"lineNumber": 116, "col_offset": 39, "nodeName": "epochs", "type": "Any"}, {"lineNumber": 116, "col_offset": 49, "nodeName": "np", "type": "module"}, {"lineNumber": 192, "col_offset": 27, "nodeName": "dense0", "type": "Any"}, {"lineNumber": 193, "col_offset": 27, "nodeName": "dense1", "type": "Any"}, {"lineNumber": 194, "col_offset": 27, "nodeName": "output", "type": "Any"}, {"lineNumber": 226, "col_offset": 23, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 230, "col_offset": 27, "nodeName": "dense0", "type": "Any"}, {"lineNumber": 231, "col_offset": 27, "nodeName": "dense1", "type": "Any"}, {"lineNumber": 232, "col_offset": 27, "nodeName": "output", "type": "Any"}, {"lineNumber": 304, "col_offset": 44, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 304, "col_offset": 58, "nodeName": "target", "type": "Any"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 113, "col_offset": 65, "nodeName": "epoch", "type": "int"}, {"lineNumber": 116, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 192, "col_offset": 27, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 193, "col_offset": 27, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 194, "col_offset": 27, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 230, "col_offset": 27, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 231, "col_offset": 27, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 232, "col_offset": 27, "nodeName": "classifier", "type": "Any"}, {"lineNumber": 304, "col_offset": 65, "nodeName": "batch_num", "type": "int"}, {"lineNumber": 46, "col_offset": 24, "nodeName": "x", "type": "Any"}]