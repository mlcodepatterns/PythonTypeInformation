[{"lineNumber": 16, "col_offset": 0, "nodeName": "fire_installed", "type": "bool"}, {"lineNumber": 19, "col_offset": 7, "nodeName": "ImportError", "type": "Type[ImportError]"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "fire_installed", "type": "bool"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "_resolve_dotted_name", "type": "Callable[[Any], Any]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "result", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "result", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "parse_net_kwargs", "type": "Callable"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "NeuralNetClassifier", "type": "Type[skorch.classifier.NeuralNetClassifier]"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "_yield_estimators", "type": "Callable[[Any], Generator[Tuple[str, Any], Any, None]]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "scaler", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "module", "type": "Any"}, {"lineNumber": 105, "col_offset": 17, "nodeName": "module", "type": "Any"}, {"lineNumber": 117, "col_offset": 15, "nodeName": "_substitute_default", "type": "Callable"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "result", "type": "Any"}, {"lineNumber": 186, "col_offset": 15, "nodeName": "print_help", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 200, "col_offset": 12, "nodeName": "snippet", "type": "str"}, {"lineNumber": 200, "col_offset": 23, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 216, "col_offset": 12, "nodeName": "snippet", "type": "str"}, {"lineNumber": 216, "col_offset": 23, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "snippet", "type": "str"}, {"lineNumber": 233, "col_offset": 23, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 252, "col_offset": 12, "nodeName": "snippet", "type": "str"}, {"lineNumber": 252, "col_offset": 23, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "snippet", "type": "str"}, {"lineNumber": 283, "col_offset": 23, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 293, "col_offset": 8, "nodeName": "out", "type": "Any"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 302, "col_offset": 12, "nodeName": "snippet", "type": "str"}, {"lineNumber": 302, "col_offset": 23, "nodeName": "expected_snippets", "type": "List[str]"}, {"lineNumber": 309, "col_offset": 15, "nodeName": "parse_args", "type": "Callable[..., Callable[[Any], Any]]"}, {"lineNumber": 313, "col_offset": 8, "nodeName": "mock", "type": "unittest.mock.NonCallableMock"}, {"lineNumber": 314, "col_offset": 15, "nodeName": "mock", "type": "unittest.mock.NonCallableMock"}, {"lineNumber": 327, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "defaults_set_params", "type": "Any"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "kwargs_set_params", "type": "Any"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 348, "col_offset": 8, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 349, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 360, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 361, "col_offset": 8, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 362, "col_offset": 8, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 374, "col_offset": 8, "nodeName": "kwargs", "type": "Dict[str, int]"}, {"lineNumber": 375, "col_offset": 8, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 376, "col_offset": 8, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 377, "col_offset": 8, "nodeName": "scaler", "type": "Any"}, {"lineNumber": 378, "col_offset": 8, "nodeName": "clf", "type": "Any"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "resolve_dotted_name", "type": "Any"}, {"lineNumber": 39, "col_offset": 37, "nodeName": "name", "type": "Any"}, {"lineNumber": 40, "col_offset": 15, "nodeName": "result", "type": "Any"}, {"lineNumber": 40, "col_offset": 25, "nodeName": "expected", "type": "Any"}, {"lineNumber": 43, "col_offset": 17, "nodeName": "resolve_dotted_name", "type": "Any"}, {"lineNumber": 44, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 44, "col_offset": 26, "nodeName": "result", "type": "Any"}, {"lineNumber": 44, "col_offset": 34, "nodeName": "RReLU", "type": "Any"}, {"lineNumber": 45, "col_offset": 15, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "lower", "type": "Any"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 46, "col_offset": 26, "nodeName": "upper", "type": "Any"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "parse_net_kwargs", "type": "Any"}, {"lineNumber": 60, "col_offset": 41, "nodeName": "kwargs", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 63, "col_offset": 15, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 66, "col_offset": 59, "nodeName": "RReLU", "type": "Any"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "lower", "type": "Any"}, {"lineNumber": 68, "col_offset": 15, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "upper", "type": "Any"}, {"lineNumber": 77, "col_offset": 15, "nodeName": "net_cls", "type": "Any"}, {"lineNumber": 77, "col_offset": 23, "nodeName": "classifier_module", "type": "Any"}, {"lineNumber": 81, "col_offset": 15, "nodeName": "Pipeline", "type": "Any"}, {"lineNumber": 94, "col_offset": 17, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 97, "col_offset": 31, "nodeName": "net", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "module", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 104, "col_offset": 14, "nodeName": "named_steps", "type": "Any"}, {"lineNumber": 105, "col_offset": 17, "nodeName": "net", "type": "Any"}, {"lineNumber": 108, "col_offset": 31, "nodeName": "scaler", "type": "Any"}, {"lineNumber": 110, "col_offset": 31, "nodeName": "net", "type": "Any"}, {"lineNumber": 112, "col_offset": 31, "nodeName": "module", "type": "Any"}, {"lineNumber": 180, "col_offset": 17, "nodeName": "substitute_default", "type": "Any"}, {"lineNumber": 180, "col_offset": 36, "nodeName": "s", "type": "Any"}, {"lineNumber": 180, "col_offset": 39, "nodeName": "new_value", "type": "Any"}, {"lineNumber": 181, "col_offset": 15, "nodeName": "result", "type": "Any"}, {"lineNumber": 181, "col_offset": 25, "nodeName": "expected", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "print_help", "type": "Any"}, {"lineNumber": 189, "col_offset": 19, "nodeName": "net", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "print_help", "type": "Any"}, {"lineNumber": 205, "col_offset": 19, "nodeName": "net", "type": "Any"}, {"lineNumber": 205, "col_offset": 24, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "print_help", "type": "Any"}, {"lineNumber": 220, "col_offset": 19, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "print_help", "type": "Any"}, {"lineNumber": 239, "col_offset": 19, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 258, "col_offset": 15, "nodeName": "LinearRegression", "type": "Any"}, {"lineNumber": 262, "col_offset": 15, "nodeName": "Pipeline", "type": "Any"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "print_help", "type": "Any"}, {"lineNumber": 274, "col_offset": 19, "nodeName": "clf_sklearn", "type": "Any"}, {"lineNumber": 292, "col_offset": 8, "nodeName": "print_help", "type": "Any"}, {"lineNumber": 292, "col_offset": 19, "nodeName": "pipe_sklearn", "type": "Any"}, {"lineNumber": 313, "col_offset": 15, "nodeName": "Mock", "type": "Type[unittest.mock.Mock]"}, {"lineNumber": 313, "col_offset": 20, "nodeName": "net_cls", "type": "Any"}, {"lineNumber": 317, "col_offset": 45, "nodeName": "exit_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 322, "col_offset": 15, "nodeName": "call_count", "type": "Any"}, {"lineNumber": 323, "col_offset": 15, "nodeName": "call_count", "type": "int"}, {"lineNumber": 324, "col_offset": 15, "nodeName": "call_count", "type": "int"}, {"lineNumber": 328, "col_offset": 45, "nodeName": "exit_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "call_count", "type": "Any"}, {"lineNumber": 336, "col_offset": 19, "nodeName": "defaults_set_params", "type": "Any"}, {"lineNumber": 340, "col_offset": 43, "nodeName": "cos", "type": "Callable[[SupportsFloat], float]"}, {"lineNumber": 342, "col_offset": 15, "nodeName": "call_count", "type": "int"}, {"lineNumber": 343, "col_offset": 15, "nodeName": "call_count", "type": "int"}, {"lineNumber": 348, "col_offset": 17, "nodeName": "parse_args", "type": "Any"}, {"lineNumber": 348, "col_offset": 28, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 348, "col_offset": 36, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 349, "col_offset": 14, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 349, "col_offset": 21, "nodeName": "net", "type": "Any"}, {"lineNumber": 352, "col_offset": 15, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 353, "col_offset": 15, "nodeName": "hidden_units", "type": "Any"}, {"lineNumber": 354, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 354, "col_offset": 26, "nodeName": "nonlin", "type": "Any"}, {"lineNumber": 354, "col_offset": 46, "nodeName": "Hardtanh", "type": "Any"}, {"lineNumber": 355, "col_offset": 15, "nodeName": "min_val", "type": "Any"}, {"lineNumber": 356, "col_offset": 15, "nodeName": "max_val", "type": "Any"}, {"lineNumber": 361, "col_offset": 17, "nodeName": "parse_args", "type": "Any"}, {"lineNumber": 361, "col_offset": 28, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 361, "col_offset": 36, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 362, "col_offset": 15, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 362, "col_offset": 22, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 366, "col_offset": 15, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 367, "col_offset": 15, "nodeName": "hidden_units", "type": "Any"}, {"lineNumber": 368, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 368, "col_offset": 26, "nodeName": "nonlin", "type": "Any"}, {"lineNumber": 368, "col_offset": 46, "nodeName": "Hardtanh", "type": "Any"}, {"lineNumber": 369, "col_offset": 15, "nodeName": "min_val", "type": "Any"}, {"lineNumber": 370, "col_offset": 15, "nodeName": "max_val", "type": "Any"}, {"lineNumber": 375, "col_offset": 17, "nodeName": "parse_args", "type": "Any"}, {"lineNumber": 375, "col_offset": 28, "nodeName": "kwargs", "type": "Dict[str, int]"}, {"lineNumber": 375, "col_offset": 36, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 376, "col_offset": 15, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 376, "col_offset": 22, "nodeName": "pipe_sklearn", "type": "Any"}, {"lineNumber": 381, "col_offset": 15, "nodeName": "copy", "type": "Any"}, {"lineNumber": 382, "col_offset": 15, "nodeName": "fit_intercept", "type": "Any"}, {"lineNumber": 383, "col_offset": 15, "nodeName": "normalize", "type": "Any"}, {"lineNumber": 45, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "result", "type": "Any"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 46, "col_offset": 26, "nodeName": "result", "type": "Any"}, {"lineNumber": 62, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 62, "col_offset": 19, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 63, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 63, "col_offset": 26, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 66, "col_offset": 26, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 68, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 94, "col_offset": 22, "nodeName": "yield_estimators", "type": "Any"}, {"lineNumber": 94, "col_offset": 39, "nodeName": "net", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "net", "type": "Any"}, {"lineNumber": 102, "col_offset": 22, "nodeName": "yield_estimators", "type": "Any"}, {"lineNumber": 102, "col_offset": 39, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 103, "col_offset": 17, "nodeName": "transformer_list", "type": "Any"}, {"lineNumber": 104, "col_offset": 14, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 190, "col_offset": 14, "nodeName": "readouterr", "type": "Any"}, {"lineNumber": 201, "col_offset": 19, "nodeName": "snippet", "type": "str"}, {"lineNumber": 201, "col_offset": 30, "nodeName": "out", "type": "Any"}, {"lineNumber": 206, "col_offset": 14, "nodeName": "readouterr", "type": "Any"}, {"lineNumber": 217, "col_offset": 19, "nodeName": "snippet", "type": "str"}, {"lineNumber": 217, "col_offset": 30, "nodeName": "out", "type": "Any"}, {"lineNumber": 221, "col_offset": 14, "nodeName": "readouterr", "type": "Any"}, {"lineNumber": 234, "col_offset": 19, "nodeName": "snippet", "type": "str"}, {"lineNumber": 234, "col_offset": 30, "nodeName": "out", "type": "Any"}, {"lineNumber": 239, "col_offset": 34, "nodeName": "defaults", "type": "Dict[str, int]"}, {"lineNumber": 240, "col_offset": 14, "nodeName": "readouterr", "type": "Any"}, {"lineNumber": 253, "col_offset": 19, "nodeName": "snippet", "type": "str"}, {"lineNumber": 253, "col_offset": 30, "nodeName": "out", "type": "Any"}, {"lineNumber": 275, "col_offset": 14, "nodeName": "readouterr", "type": "Any"}, {"lineNumber": 284, "col_offset": 19, "nodeName": "snippet", "type": "str"}, {"lineNumber": 284, "col_offset": 30, "nodeName": "out", "type": "Any"}, {"lineNumber": 293, "col_offset": 14, "nodeName": "readouterr", "type": "Any"}, {"lineNumber": 303, "col_offset": 19, "nodeName": "snippet", "type": "str"}, {"lineNumber": 303, "col_offset": 30, "nodeName": "out", "type": "Any"}, {"lineNumber": 317, "col_offset": 13, "nodeName": "patch", "type": "unittest.mock._patcher"}, {"lineNumber": 318, "col_offset": 51, "nodeName": "help_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 319, "col_offset": 16, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 322, "col_offset": 15, "nodeName": "set_params", "type": "Any"}, {"lineNumber": 323, "col_offset": 15, "nodeName": "help_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 324, "col_offset": 15, "nodeName": "exit_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 328, "col_offset": 13, "nodeName": "patch", "type": "unittest.mock._patcher"}, {"lineNumber": 329, "col_offset": 51, "nodeName": "help_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 330, "col_offset": 16, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "set_params", "type": "Any"}, {"lineNumber": 335, "col_offset": 30, "nodeName": "call_args_list", "type": "Any"}, {"lineNumber": 338, "col_offset": 28, "nodeName": "call_args_list", "type": "Any"}, {"lineNumber": 339, "col_offset": 15, "nodeName": "kwargs_set_params", "type": "Any"}, {"lineNumber": 340, "col_offset": 15, "nodeName": "kwargs_set_params", "type": "Any"}, {"lineNumber": 342, "col_offset": 15, "nodeName": "help_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 343, "col_offset": 15, "nodeName": "exit_", "type": "unittest.mock.MagicMock"}, {"lineNumber": 347, "col_offset": 55, "nodeName": "Hardtanh", "type": "Any"}, {"lineNumber": 352, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 353, "col_offset": 15, "nodeName": "module_", "type": "Any"}, {"lineNumber": 354, "col_offset": 26, "nodeName": "module_", "type": "Any"}, {"lineNumber": 354, "col_offset": 46, "nodeName": "nn", "type": "Any"}, {"lineNumber": 355, "col_offset": 15, "nodeName": "nonlin", "type": "Any"}, {"lineNumber": 356, "col_offset": 15, "nodeName": "nonlin", "type": "Any"}, {"lineNumber": 360, "col_offset": 65, "nodeName": "Hardtanh", "type": "Any"}, {"lineNumber": 363, "col_offset": 14, "nodeName": "steps", "type": "Any"}, {"lineNumber": 366, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 367, "col_offset": 15, "nodeName": "module_", "type": "Any"}, {"lineNumber": 368, "col_offset": 26, "nodeName": "module_", "type": "Any"}, {"lineNumber": 368, "col_offset": 46, "nodeName": "nn", "type": "Any"}, {"lineNumber": 369, "col_offset": 15, "nodeName": "nonlin", "type": "Any"}, {"lineNumber": 370, "col_offset": 15, "nodeName": "nonlin", "type": "Any"}, {"lineNumber": 377, "col_offset": 17, "nodeName": "transformer_list", "type": "Any"}, {"lineNumber": 378, "col_offset": 14, "nodeName": "steps", "type": "Any"}, {"lineNumber": 381, "col_offset": 15, "nodeName": "scaler", "type": "Any"}, {"lineNumber": 382, "col_offset": 15, "nodeName": "clf", "type": "Any"}, {"lineNumber": 383, "col_offset": 15, "nodeName": "clf", "type": "Any"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "parsed_kwargs", "type": "Any"}, {"lineNumber": 85, "col_offset": 20, "nodeName": "net", "type": "Any"}, {"lineNumber": 96, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 98, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 108, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 110, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 111, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 112, "col_offset": 15, "nodeName": "result", "type": "List[Any]"}, {"lineNumber": 190, "col_offset": 14, "nodeName": "capsys", "type": "Any"}, {"lineNumber": 206, "col_offset": 14, "nodeName": "capsys", "type": "Any"}, {"lineNumber": 221, "col_offset": 14, "nodeName": "capsys", "type": "Any"}, {"lineNumber": 240, "col_offset": 14, "nodeName": "capsys", "type": "Any"}, {"lineNumber": 266, "col_offset": 20, "nodeName": "clf_sklearn", "type": "Any"}, {"lineNumber": 275, "col_offset": 14, "nodeName": "capsys", "type": "Any"}, {"lineNumber": 285, "col_offset": 19, "nodeName": "count", "type": "Any"}, {"lineNumber": 285, "col_offset": 29, "nodeName": "snippet", "type": "str"}, {"lineNumber": 293, "col_offset": 14, "nodeName": "capsys", "type": "Any"}, {"lineNumber": 304, "col_offset": 19, "nodeName": "count", "type": "Any"}, {"lineNumber": 304, "col_offset": 29, "nodeName": "snippet", "type": "str"}, {"lineNumber": 318, "col_offset": 17, "nodeName": "patch", "type": "unittest.mock._patcher"}, {"lineNumber": 319, "col_offset": 25, "nodeName": "parse_args", "type": "Any"}, {"lineNumber": 320, "col_offset": 16, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 320, "col_offset": 23, "nodeName": "estimator", "type": "Any"}, {"lineNumber": 322, "col_offset": 15, "nodeName": "estimator", "type": "Any"}, {"lineNumber": 329, "col_offset": 17, "nodeName": "patch", "type": "unittest.mock._patcher"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "parse_args", "type": "Any"}, {"lineNumber": 330, "col_offset": 36, "nodeName": "kwargs", "type": "Dict[str, str]"}, {"lineNumber": 331, "col_offset": 16, "nodeName": "parsed", "type": "Any"}, {"lineNumber": 331, "col_offset": 23, "nodeName": "estimator", "type": "Any"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "estimator", "type": "Any"}, {"lineNumber": 335, "col_offset": 30, "nodeName": "set_params", "type": "Any"}, {"lineNumber": 338, "col_offset": 28, "nodeName": "set_params", "type": "Any"}, {"lineNumber": 347, "col_offset": 55, "nodeName": "nn", "type": "Any"}, {"lineNumber": 353, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 354, "col_offset": 26, "nodeName": "net", "type": "Any"}, {"lineNumber": 355, "col_offset": 15, "nodeName": "module_", "type": "Any"}, {"lineNumber": 356, "col_offset": 15, "nodeName": "module_", "type": "Any"}, {"lineNumber": 360, "col_offset": 65, "nodeName": "nn", "type": "Any"}, {"lineNumber": 363, "col_offset": 14, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 367, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 368, "col_offset": 26, "nodeName": "net", "type": "Any"}, {"lineNumber": 369, "col_offset": 15, "nodeName": "module_", "type": "Any"}, {"lineNumber": 370, "col_offset": 15, "nodeName": "module_", "type": "Any"}, {"lineNumber": 378, "col_offset": 14, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "FeatureUnion", "type": "Any"}, {"lineNumber": 103, "col_offset": 17, "nodeName": "named_steps", "type": "Any"}, {"lineNumber": 263, "col_offset": 25, "nodeName": "FeatureUnion", "type": "Any"}, {"lineNumber": 285, "col_offset": 19, "nodeName": "out", "type": "Any"}, {"lineNumber": 304, "col_offset": 19, "nodeName": "out", "type": "Any"}, {"lineNumber": 335, "col_offset": 30, "nodeName": "estimator", "type": "Any"}, {"lineNumber": 338, "col_offset": 28, "nodeName": "estimator", "type": "Any"}, {"lineNumber": 355, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 356, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 369, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 370, "col_offset": 15, "nodeName": "net", "type": "Any"}, {"lineNumber": 103, "col_offset": 17, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 377, "col_offset": 17, "nodeName": "steps", "type": "Any"}, {"lineNumber": 377, "col_offset": 17, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 83, "col_offset": 26, "nodeName": "MinMaxScaler", "type": "Any"}, {"lineNumber": 264, "col_offset": 26, "nodeName": "MinMaxScaler", "type": "Any"}]