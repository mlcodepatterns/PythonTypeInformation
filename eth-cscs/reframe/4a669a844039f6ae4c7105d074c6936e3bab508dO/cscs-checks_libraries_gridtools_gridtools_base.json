[{"lineNumber": 9, "col_offset": 21, "nodeName": "RegressionTest", "type": "Any"}, {"lineNumber": 9, "col_offset": 21, "nodeName": "rfm", "type": "module"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "is_device_test", "type": "bool"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "descr", "type": "str"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "valid_prog_environs", "type": "List[str]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "modules", "type": "List[str]"}, {"lineNumber": 20, "col_offset": 11, "nodeName": "is_device_test", "type": "bool"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "sourcesdir", "type": "str"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "is_device_test", "type": "bool"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "valid_systems", "type": "List[str]"}, {"lineNumber": 56, "col_offset": 11, "nodeName": "is_device_test", "type": "bool"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "sanity_patterns", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "max_concurrency", "type": "int"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "make_opts", "type": "List[Any]"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "executable", "type": "str"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "executable_opts", "type": "List[str]"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "reference", "type": "Dict[str, Union[Dict[str, Tuple[int, None, None, str]], Dict[str, Tuple[int, None, float, str]]]]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "tags", "type": "Set[str]"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "maintainers", "type": "List[str]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 14, "col_offset": 35, "nodeName": "variant", "type": "Any"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 57, "col_offset": 12, "nodeName": "num_gpus_per_node", "type": "int"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "num_tasks", "type": "int"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "num_gpus_per_node", "type": "int"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "num_tasks", "type": "int"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 64, "col_offset": 31, "nodeName": "assert_found", "type": "Any"}, {"lineNumber": 64, "col_offset": 58, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 164, "col_offset": 39, "nodeName": "variant", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 165, "col_offset": 26, "nodeName": "join", "type": "Callable"}, {"lineNumber": 165, "col_offset": 53, "nodeName": "variant", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 21, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "extend", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "extend", "type": "Any"}, {"lineNumber": 57, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 64, "col_offset": 31, "nodeName": "sn", "type": "module"}, {"lineNumber": 64, "col_offset": 58, "nodeName": "self", "type": "Any"}, {"lineNumber": 66, "col_offset": 25, "nodeName": "extractsingle", "type": "Any"}, {"lineNumber": 67, "col_offset": 37, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 67, "col_offset": 59, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 165, "col_offset": 26, "nodeName": "path", "type": "module"}, {"lineNumber": 166, "col_offset": 31, "nodeName": "variant_data", "type": "Dict[str, Dict[str, Union[Dict[str, Union[Dict[str, Tuple[int, None, None, str]], Dict[str, Tuple[int, None, float, str]]]], List[str]]]]"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "variant_data", "type": "Dict[str, Dict[str, Union[Dict[str, Union[Dict[str, Tuple[int, None, None, str]], Dict[str, Tuple[int, None, float, str]]]], List[str]]]]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 21, "col_offset": 12, "nodeName": "modules", "type": "List[str]"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "config_opts", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "config_opts", "type": "Any"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "valid_systems", "type": "List[str]"}, {"lineNumber": 66, "col_offset": 25, "nodeName": "sn", "type": "module"}, {"lineNumber": 67, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 165, "col_offset": 26, "nodeName": "os", "type": "module"}, {"lineNumber": 166, "col_offset": 31, "nodeName": "self", "type": "Any"}, {"lineNumber": 166, "col_offset": 49, "nodeName": "variant", "type": "Any"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 167, "col_offset": 43, "nodeName": "variant", "type": "Any"}, {"lineNumber": 21, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "build_system", "type": "str"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "build_system", "type": "str"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "self", "type": "Any"}]