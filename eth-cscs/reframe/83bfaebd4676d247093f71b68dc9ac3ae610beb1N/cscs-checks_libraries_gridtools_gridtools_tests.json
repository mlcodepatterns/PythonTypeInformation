[{"lineNumber": 16, "col_offset": 21, "nodeName": "RegressionTest", "type": "Any"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "__init__", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 16, "col_offset": 21, "nodeName": "rfm", "type": "module"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "descr", "type": "str"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "valid_prog_environs", "type": "List[str]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "modules", "type": "List[str]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "is_cuda_test", "type": "bool"}, {"lineNumber": 23, "col_offset": 11, "nodeName": "is_cuda_test", "type": "bool"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "sourcesdir", "type": "str"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 37, "col_offset": 11, "nodeName": "is_cuda_test", "type": "bool"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "flags_from_environ", "type": "bool"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "valid_systems", "type": "List[str]"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "is_cuda_test", "type": "bool"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "sanity_patterns", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "max_concurrency", "type": "int"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "make_opts", "type": "List[str]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "executable", "type": "str"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "executable_opts", "type": "List[str]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "reference", "type": "Dict[str, Dict[str, Tuple[float, None, float, str]]]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "tags", "type": "Set[str]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "maintainers", "type": "List[str]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 22, "col_offset": 32, "nodeName": "variant", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "config_opts", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "config_opts", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "num_gpus_per_node", "type": "int"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "num_tasks", "type": "int"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "valid_systems", "type": "List[str]"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "num_gpus_per_node", "type": "int"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "num_tasks", "type": "int"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 57, "col_offset": 31, "nodeName": "assert_found", "type": "Any"}, {"lineNumber": 57, "col_offset": 58, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "build_system", "type": "str"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 24, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "build_system", "type": "str"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "build_system", "type": "str"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 57, "col_offset": 31, "nodeName": "sn", "type": "module"}, {"lineNumber": 57, "col_offset": 58, "nodeName": "self", "type": "Any"}, {"lineNumber": 59, "col_offset": 21, "nodeName": "extractsingle", "type": "Any"}, {"lineNumber": 60, "col_offset": 38, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 60, "col_offset": 60, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 31, "nodeName": "variant_data", "type": "Dict[str, Dict[str, Union[List[str], Dict[str, Dict[str, Tuple[float, None, float, str]]]]]]"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "variant_data", "type": "Dict[str, Dict[str, Union[List[str], Dict[str, Dict[str, Tuple[float, None, float, str]]]]]]"}, {"lineNumber": 24, "col_offset": 12, "nodeName": "modules", "type": "List[str]"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 59, "col_offset": 21, "nodeName": "sn", "type": "module"}, {"lineNumber": 60, "col_offset": 38, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 31, "nodeName": "self", "type": "Any"}, {"lineNumber": 129, "col_offset": 49, "nodeName": "variant", "type": "Any"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 130, "col_offset": 43, "nodeName": "variant", "type": "Any"}, {"lineNumber": 24, "col_offset": 12, "nodeName": "self", "type": "Any"}]