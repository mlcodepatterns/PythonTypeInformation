[{"lineNumber": 18, "col_offset": 0, "nodeName": "reset_all", "type": "Callable[[], Any]"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "init", "type": "Callable[..., Any]"}, {"lineNumber": 53, "col_offset": 0, "nodeName": "deinit", "type": "Callable[[], Any]"}, {"lineNumber": 65, "col_offset": 0, "nodeName": "colorama_text", "type": "Callable[..., Any]"}, {"lineNumber": 74, "col_offset": 0, "nodeName": "reinit", "type": "Callable[[], Any]"}, {"lineNumber": 81, "col_offset": 0, "nodeName": "wrap_stream", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 9, "col_offset": 0, "nodeName": "orig_stdout", "type": "None"}, {"lineNumber": 10, "col_offset": 0, "nodeName": "orig_stderr", "type": "None"}, {"lineNumber": 12, "col_offset": 0, "nodeName": "wrapped_stdout", "type": "None"}, {"lineNumber": 13, "col_offset": 0, "nodeName": "wrapped_stderr", "type": "None"}, {"lineNumber": 15, "col_offset": 0, "nodeName": "atexit_done", "type": "bool"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "orig_stdout", "type": "TextIO"}, {"lineNumber": 33, "col_offset": 18, "nodeName": "stdout", "type": "TextIO"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "orig_stderr", "type": "TextIO"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 82, "col_offset": 7, "nodeName": "wrap", "type": "Any"}, {"lineNumber": 87, "col_offset": 11, "nodeName": "stream", "type": "Any"}, {"lineNumber": 19, "col_offset": 7, "nodeName": "AnsiToWin32", "type": "Any"}, {"lineNumber": 27, "col_offset": 7, "nodeName": "orig_stdout", "type": "Any"}, {"lineNumber": 33, "col_offset": 18, "nodeName": "sys", "type": "module"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "sys", "type": "module"}, {"lineNumber": 36, "col_offset": 7, "nodeName": "stdout", "type": "TextIO"}, {"lineNumber": 39, "col_offset": 21, "nodeName": "wrapped_stdout", "type": "Any"}, {"lineNumber": 41, "col_offset": 7, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 44, "col_offset": 21, "nodeName": "wrapped_stderr", "type": "Any"}, {"lineNumber": 48, "col_offset": 11, "nodeName": "atexit_done", "type": "bool"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "atexit_done", "type": "bool"}, {"lineNumber": 57, "col_offset": 7, "nodeName": "orig_stdout", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 58, "col_offset": 21, "nodeName": "orig_stdout", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "orig_stdout", "type": "None"}, {"lineNumber": 60, "col_offset": 7, "nodeName": "orig_stderr", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "stderr", "type": "Any"}, {"lineNumber": 61, "col_offset": 21, "nodeName": "orig_stderr", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "orig_stderr", "type": "None"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "init", "type": "Callable[..., Any]"}, {"lineNumber": 75, "col_offset": 7, "nodeName": "wrapped_stdout", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 76, "col_offset": 21, "nodeName": "wrapped_stdout", "type": "Any"}, {"lineNumber": 77, "col_offset": 7, "nodeName": "wrapped_stderr", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "stderr", "type": "Any"}, {"lineNumber": 78, "col_offset": 21, "nodeName": "wrapped_stderr", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "wrapper", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "reset_all", "type": "Any"}, {"lineNumber": 30, "col_offset": 11, "nodeName": "wrap", "type": "Any"}, {"lineNumber": 30, "col_offset": 20, "nodeName": "any", "type": "Callable[[Any], bool]"}, {"lineNumber": 31, "col_offset": 14, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 36, "col_offset": 7, "nodeName": "sys", "type": "module"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "wrap_stream", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 40, "col_offset": 24, "nodeName": "orig_stdout", "type": "TextIO"}, {"lineNumber": 40, "col_offset": 37, "nodeName": "convert", "type": "Any"}, {"lineNumber": 40, "col_offset": 46, "nodeName": "strip", "type": "Any"}, {"lineNumber": 40, "col_offset": 53, "nodeName": "autoreset", "type": "Any"}, {"lineNumber": 40, "col_offset": 64, "nodeName": "wrap", "type": "Any"}, {"lineNumber": 41, "col_offset": 7, "nodeName": "sys", "type": "module"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "wrap_stream", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 24, "nodeName": "orig_stderr", "type": "TextIO"}, {"lineNumber": 45, "col_offset": 37, "nodeName": "convert", "type": "Any"}, {"lineNumber": 45, "col_offset": 46, "nodeName": "strip", "type": "Any"}, {"lineNumber": 45, "col_offset": 53, "nodeName": "autoreset", "type": "Any"}, {"lineNumber": 45, "col_offset": 64, "nodeName": "wrap", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "register", "type": "Callable[..., Callable[..., Any]]"}, {"lineNumber": 49, "col_offset": 24, "nodeName": "reset_all", "type": "Callable[[], Any]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "sys", "type": "module"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "sys", "type": "module"}, {"lineNumber": 67, "col_offset": 10, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 67, "col_offset": 18, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "deinit", "type": "Callable[[], Any]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "sys", "type": "module"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "sys", "type": "module"}, {"lineNumber": 83, "col_offset": 18, "nodeName": "AnsiToWin32", "type": "Any"}, {"lineNumber": 83, "col_offset": 30, "nodeName": "stream", "type": "TextIO"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "should_wrap", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "stream", "type": "Any"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "stream", "type": "Any"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "autoreset", "type": "Any"}, {"lineNumber": 30, "col_offset": 36, "nodeName": "convert", "type": "Any"}, {"lineNumber": 30, "col_offset": 45, "nodeName": "strip", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "atexit", "type": "module"}, {"lineNumber": 84, "col_offset": 20, "nodeName": "convert", "type": "Any"}, {"lineNumber": 84, "col_offset": 35, "nodeName": "strip", "type": "Any"}, {"lineNumber": 84, "col_offset": 52, "nodeName": "autoreset", "type": "Any"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "wrapper", "type": "Any"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "wrapper", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "AnsiToWin32", "type": "Any"}, {"lineNumber": 20, "col_offset": 20, "nodeName": "orig_stdout", "type": "Any"}]