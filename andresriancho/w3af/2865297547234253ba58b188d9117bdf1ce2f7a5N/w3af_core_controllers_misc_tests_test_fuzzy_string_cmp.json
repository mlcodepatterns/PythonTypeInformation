[{"lineNumber": 29, "col_offset": 29, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "test_all", "type": "Callable[[Any], Any]"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "test_relative_distance", "type": "Callable[[Any], Any]"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "test_17092", "type": "Callable[[Any], Any]"}, {"lineNumber": 29, "col_offset": 29, "nodeName": "unittest", "type": "module"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 61, "col_offset": 23, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 84, "col_offset": 23, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "nginx_404", "type": "str"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "itest", "type": "str"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "e", "type": "str"}, {"lineNumber": 61, "col_offset": 15, "nodeName": "d", "type": "str"}, {"lineNumber": 61, "col_offset": 18, "nodeName": "f", "type": "float"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "res1", "type": "Any"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "res2", "type": "bool"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "msg", "type": "str"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "e", "type": "str"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "d", "type": "str"}, {"lineNumber": 84, "col_offset": 18, "nodeName": "f", "type": "float"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "res", "type": "float"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "msg", "type": "str"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "acceptance_tests", "type": "List[Tuple[str, str, float]]"}, {"lineNumber": 62, "col_offset": 19, "nodeName": "fuzzy_equal", "type": "Callable[..., Any]"}, {"lineNumber": 62, "col_offset": 31, "nodeName": "e", "type": "str"}, {"lineNumber": 62, "col_offset": 34, "nodeName": "d", "type": "str"}, {"lineNumber": 62, "col_offset": 37, "nodeName": "f", "type": "float"}, {"lineNumber": 63, "col_offset": 46, "nodeName": "f", "type": "float"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "res1", "type": "Any"}, {"lineNumber": 73, "col_offset": 35, "nodeName": "res2", "type": "bool"}, {"lineNumber": 85, "col_offset": 18, "nodeName": "relative_distance", "type": "Callable[[Any, Any], float]"}, {"lineNumber": 85, "col_offset": 36, "nodeName": "e", "type": "str"}, {"lineNumber": 85, "col_offset": 39, "nodeName": "d", "type": "str"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 87, "col_offset": 38, "nodeName": "msg", "type": "str"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "self", "type": "TestFuzzyStringCompare"}, {"lineNumber": 101, "col_offset": 25, "nodeName": "fuzzy_equal", "type": "Callable[..., Any]"}, {"lineNumber": 101, "col_offset": 37, "nodeName": "nginx_404", "type": "str"}, {"lineNumber": 101, "col_offset": 48, "nodeName": "itest", "type": "str"}, {"lineNumber": 63, "col_offset": 19, "nodeName": "relative_distance", "type": "Callable[[Any, Any], float]"}, {"lineNumber": 63, "col_offset": 37, "nodeName": "e", "type": "str"}, {"lineNumber": 63, "col_offset": 40, "nodeName": "d", "type": "str"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "self", "type": "TestFuzzyStringCompare"}, {"lineNumber": 73, "col_offset": 41, "nodeName": "msg", "type": "str"}, {"lineNumber": 86, "col_offset": 60, "nodeName": "res", "type": "float"}, {"lineNumber": 86, "col_offset": 65, "nodeName": "f", "type": "float"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "self", "type": "TestFuzzyStringCompare"}, {"lineNumber": 87, "col_offset": 28, "nodeName": "res", "type": "float"}, {"lineNumber": 87, "col_offset": 35, "nodeName": "f", "type": "float"}, {"lineNumber": 73, "col_offset": 48, "nodeName": "e", "type": "str"}, {"lineNumber": 73, "col_offset": 51, "nodeName": "d", "type": "str"}, {"lineNumber": 73, "col_offset": 54, "nodeName": "f", "type": "float"}, {"lineNumber": 73, "col_offset": 57, "nodeName": "res1", "type": "Any"}, {"lineNumber": 73, "col_offset": 63, "nodeName": "relative_distance", "type": "Callable[[Any, Any], float]"}, {"lineNumber": 73, "col_offset": 81, "nodeName": "e", "type": "str"}, {"lineNumber": 73, "col_offset": 84, "nodeName": "d", "type": "str"}]