[{"lineNumber": 34, "col_offset": 0, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 47, "col_offset": 0, "nodeName": "load_default_model_sentencizer", "type": "Callable[[Any], Any]"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "split_text", "type": "Callable[[Any], Any]"}, {"lineNumber": 62, "col_offset": 0, "nodeName": "get_freq_tuples", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 0, "nodeName": "_contains_blinded_text", "type": "Callable[[Any], Any]"}, {"lineNumber": 82, "col_offset": 0, "nodeName": "fetch_all_treebanks", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 114, "col_offset": 0, "nodeName": "run_single_eval", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 184, "col_offset": 0, "nodeName": "run_all_evals", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 16, "col_offset": 0, "nodeName": "ALL_LANGUAGES", "type": "str"}, {"lineNumber": 20, "col_offset": 0, "nodeName": "EVAL_NO_PARSE", "type": "List[str]"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "EVAL_PARSE", "type": "List[str]"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "PRINT_FREQ", "type": "int"}, {"lineNumber": 29, "col_offset": 0, "nodeName": "PRINT_TOTAL", "type": "int"}, {"lineNumber": 31, "col_offset": 0, "nodeName": "space_re", "type": "Pattern[str]"}, {"lineNumber": 31, "col_offset": 11, "nodeName": "compile", "type": "Callable"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "loading_start", "type": "float"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 38, "col_offset": 7, "nodeName": "add_sentencizer", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "loading_end", "type": "float"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "loading_time", "type": "float"}, {"lineNumber": 42, "col_offset": 7, "nodeName": "add_sentencizer", "type": "Any"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "loading_start", "type": "float"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "lang_class", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "loading_end", "type": "float"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "loading_time", "type": "float"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "d", "type": "Dict[Any, int]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "token", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "my_list", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "tree", "type": "xml.etree.ElementTree.ElementTree"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "root", "type": "xml.etree.ElementTree.Element"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "total_tokens", "type": "int"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "unique_lemmas", "type": "int"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "all_treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "treebank_size", "type": "Dict[Any, int]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "l", "type": "Any"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "languages", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "treebank_dir", "type": "Any"}, {"lineNumber": 111, "col_offset": 11, "nodeName": "all_treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "tokenization_start", "type": "float"}, {"lineNumber": 122, "col_offset": 4, "nodeName": "texts", "type": "Any"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "tokenization_end", "type": "float"}, {"lineNumber": 125, "col_offset": 4, "nodeName": "tokenization_time", "type": "float"}, {"lineNumber": 128, "col_offset": 4, "nodeName": "tokens_per_s", "type": "int"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "print_header_1", "type": "List[str]"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 140, "col_offset": 4, "nodeName": "scores", "type": "Any"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "eval_headers", "type": "List[str]"}, {"lineNumber": 143, "col_offset": 19, "nodeName": "EVAL_PARSE", "type": "List[str]"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "score_name", "type": "str"}, {"lineNumber": 147, "col_offset": 22, "nodeName": "eval_headers", "type": "List[str]"}, {"lineNumber": 179, "col_offset": 7, "nodeName": "print_header", "type": "bool"}, {"lineNumber": 186, "col_offset": 4, "nodeName": "print_header", "type": "bool"}, {"lineNumber": 226, "col_offset": 52, "nodeName": "ALL_LANGUAGES", "type": "str"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "languages", "type": "List[Any]"}, {"lineNumber": 234, "col_offset": 4, "nodeName": "print_freq_tasks", "type": "List[nothing]"}, {"lineNumber": 239, "col_offset": 4, "nodeName": "treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 243, "col_offset": 4, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 246, "col_offset": 4, "nodeName": "multi", "type": "None"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "lang", "type": "Any"}, {"lineNumber": 251, "col_offset": 16, "nodeName": "languages", "type": "List[Any]"}, {"lineNumber": 286, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 31, "col_offset": 11, "nodeName": "re", "type": "module"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 37, "col_offset": 10, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 37, "col_offset": 21, "nodeName": "modelname", "type": "Any"}, {"lineNumber": 40, "col_offset": 18, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "loading_end", "type": "float"}, {"lineNumber": 41, "col_offset": 33, "nodeName": "loading_start", "type": "float"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "loading_time", "type": "float"}, {"lineNumber": 44, "col_offset": 30, "nodeName": "modelname", "type": "Any"}, {"lineNumber": 49, "col_offset": 20, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 50, "col_offset": 17, "nodeName": "get_lang_class", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 32, "nodeName": "lang", "type": "Any"}, {"lineNumber": 51, "col_offset": 10, "nodeName": "lang_class", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "add_pipe", "type": "Any"}, {"lineNumber": 53, "col_offset": 18, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 54, "col_offset": 19, "nodeName": "loading_end", "type": "float"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "loading_start", "type": "float"}, {"lineNumber": 55, "col_offset": 11, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "loading_time", "type": "float"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "parse", "type": "Callable[..., xml.etree.ElementTree.ElementTree]"}, {"lineNumber": 73, "col_offset": 20, "nodeName": "stats_xml", "type": "Any"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "getroot", "type": "Callable[[], xml.etree.ElementTree.Element]"}, {"lineNumber": 75, "col_offset": 19, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "text", "type": "Any"}, {"lineNumber": 76, "col_offset": 20, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 84, "col_offset": 20, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 85, "col_offset": 20, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 90, "col_offset": 24, "nodeName": "iterdir", "type": "Any"}, {"lineNumber": 117, "col_offset": 55, "nodeName": "f", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "flat_text", "type": "Any"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 122, "col_offset": 12, "nodeName": "split_text", "type": "Callable[[Any], Any]"}, {"lineNumber": 122, "col_offset": 23, "nodeName": "flat_text", "type": "Any"}, {"lineNumber": 123, "col_offset": 11, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 124, "col_offset": 23, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 125, "col_offset": 24, "nodeName": "tokenization_end", "type": "float"}, {"lineNumber": 125, "col_offset": 43, "nodeName": "tokenization_start", "type": "float"}, {"lineNumber": 128, "col_offset": 19, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 131, "col_offset": 50, "nodeName": "name", "type": "Any"}, {"lineNumber": 132, "col_offset": 22, "nodeName": "print_name", "type": "Any"}, {"lineNumber": 132, "col_offset": 85, "nodeName": "tokens_per_s", "type": "int"}, {"lineNumber": 135, "col_offset": 60, "nodeName": "tmp_out_file", "type": "Any"}, {"lineNumber": 137, "col_offset": 60, "nodeName": "sys_file", "type": "Any"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "sys_ud", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "unlink", "type": "Any"}, {"lineNumber": 140, "col_offset": 13, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 140, "col_offset": 38, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 140, "col_offset": 47, "nodeName": "sys_ud", "type": "Any"}, {"lineNumber": 144, "col_offset": 11, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "eval_headers", "type": "List[str]"}, {"lineNumber": 145, "col_offset": 23, "nodeName": "EVAL_NO_PARSE", "type": "List[str]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "score", "type": "Any"}, {"lineNumber": 181, "col_offset": 4, "nodeName": "write", "type": "Any"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "tb_lang", "type": "Any"}, {"lineNumber": 188, "col_offset": 17, "nodeName": "treebank_list", "type": "Any"}, {"lineNumber": 188, "col_offset": 34, "nodeName": "items", "type": "Any"}, {"lineNumber": 191, "col_offset": 12, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 191, "col_offset": 25, "nodeName": "treebank_list", "type": "Any"}, {"lineNumber": 235, "col_offset": 11, "nodeName": "hide_freq", "type": "Any"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "print_freq_tasks", "type": "List[str]"}, {"lineNumber": 239, "col_offset": 16, "nodeName": "fetch_all_treebanks", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 239, "col_offset": 36, "nodeName": "ud_dir", "type": "Any"}, {"lineNumber": 239, "col_offset": 44, "nodeName": "languages", "type": "List[Any]"}, {"lineNumber": 239, "col_offset": 55, "nodeName": "corpus", "type": "Any"}, {"lineNumber": 239, "col_offset": 63, "nodeName": "best_per_language", "type": "Any"}, {"lineNumber": 241, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 242, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 242, "col_offset": 45, "nodeName": "languages", "type": "List[Any]"}, {"lineNumber": 243, "col_offset": 13, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "multi", "type": "Tuple[Any, float, str]"}, {"lineNumber": 262, "col_offset": 11, "nodeName": "exclude_trained_models", "type": "Any"}, {"lineNumber": 282, "col_offset": 54, "nodeName": "out_file", "type": "Any"}, {"lineNumber": 287, "col_offset": 4, "nodeName": "call", "type": "Any"}, {"lineNumber": 287, "col_offset": 14, "nodeName": "main", "type": "Any"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "time", "type": "module"}, {"lineNumber": 37, "col_offset": 10, "nodeName": "spacy", "type": "module"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "add_pipe", "type": "Any"}, {"lineNumber": 40, "col_offset": 18, "nodeName": "time", "type": "module"}, {"lineNumber": 43, "col_offset": 15, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 43, "col_offset": 20, "nodeName": "loading_time", "type": "float"}, {"lineNumber": 49, "col_offset": 20, "nodeName": "time", "type": "module"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "create_pipe", "type": "Any"}, {"lineNumber": 53, "col_offset": 18, "nodeName": "time", "type": "module"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "sub", "type": "Callable"}, {"lineNumber": 59, "col_offset": 47, "nodeName": "par", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "setdefault", "type": "Callable"}, {"lineNumber": 66, "col_offset": 21, "nodeName": "token", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "d", "type": "Dict[Any, int]"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 68, "col_offset": 72, "nodeName": "print_total_threshold", "type": "Any"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "ET", "type": "module"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "tree", "type": "xml.etree.ElementTree.ElementTree"}, {"lineNumber": 76, "col_offset": 24, "nodeName": "get", "type": "Callable"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "unique_lemmas", "type": "int"}, {"lineNumber": 79, "col_offset": 28, "nodeName": "total_tokens", "type": "int"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "all_treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "treebank_size", "type": "Dict[Any, int]"}, {"lineNumber": 90, "col_offset": 24, "nodeName": "ud_dir", "type": "Any"}, {"lineNumber": 91, "col_offset": 11, "nodeName": "is_dir", "type": "Any"}, {"lineNumber": 92, "col_offset": 16, "nodeName": "txt_path", "type": "Any"}, {"lineNumber": 117, "col_offset": 9, "nodeName": "open", "type": "Any"}, {"lineNumber": 118, "col_offset": 20, "nodeName": "read", "type": "Any"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "time", "type": "module"}, {"lineNumber": 123, "col_offset": 16, "nodeName": "pipe", "type": "Any"}, {"lineNumber": 123, "col_offset": 25, "nodeName": "texts", "type": "Any"}, {"lineNumber": 124, "col_offset": 23, "nodeName": "time", "type": "module"}, {"lineNumber": 128, "col_offset": 45, "nodeName": "tokenization_time", "type": "float"}, {"lineNumber": 131, "col_offset": 22, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 131, "col_offset": 50, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 131, "col_offset": 66, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 131, "col_offset": 70, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 132, "col_offset": 43, "nodeName": "loading_time", "type": "Any"}, {"lineNumber": 132, "col_offset": 66, "nodeName": "tokenization_time", "type": "float"}, {"lineNumber": 135, "col_offset": 9, "nodeName": "open", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "write_conllu", "type": "Any"}, {"lineNumber": 136, "col_offset": 21, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 136, "col_offset": 27, "nodeName": "tmp_out_file", "type": "Any"}, {"lineNumber": 137, "col_offset": 9, "nodeName": "open", "type": "Any"}, {"lineNumber": 138, "col_offset": 17, "nodeName": "load_conllu", "type": "Any"}, {"lineNumber": 138, "col_offset": 45, "nodeName": "sys_file", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "tmp_output_path", "type": "Any"}, {"lineNumber": 140, "col_offset": 13, "nodeName": "conll17_ud_eval", "type": "Any"}, {"lineNumber": 140, "col_offset": 67, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 148, "col_offset": 16, "nodeName": "scores", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "extend", "type": "Callable"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "extend", "type": "Callable"}, {"lineNumber": 159, "col_offset": 11, "nodeName": "score_name", "type": "str"}, {"lineNumber": 159, "col_offset": 25, "nodeName": "print_freq_tasks", "type": "Any"}, {"lineNumber": 163, "col_offset": 12, "nodeName": "d_under_words", "type": "List[Tuple[Any, int]]"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "d_under_shapes", "type": "List[Tuple[str, int]]"}, {"lineNumber": 165, "col_offset": 12, "nodeName": "d_over_words", "type": "List[Tuple[Any, int]]"}, {"lineNumber": 166, "col_offset": 12, "nodeName": "d_over_shapes", "type": "List[Tuple[str, int]]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "write", "type": "Any"}, {"lineNumber": 181, "col_offset": 4, "nodeName": "out_file", "type": "Any"}, {"lineNumber": 188, "col_offset": 34, "nodeName": "treebanks", "type": "Any"}, {"lineNumber": 189, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 190, "col_offset": 26, "nodeName": "tb_lang", "type": "Any"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "gold_path", "type": "Any"}, {"lineNumber": 232, "col_offset": 17, "nodeName": "strip", "type": "Any"}, {"lineNumber": 232, "col_offset": 34, "nodeName": "lang", "type": "Any"}, {"lineNumber": 247, "col_offset": 11, "nodeName": "exclude_multi", "type": "Any"}, {"lineNumber": 247, "col_offset": 33, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 248, "col_offset": 16, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 252, "col_offset": 34, "nodeName": "multi", "type": "Optional[Tuple[Any, float, str]]"}, {"lineNumber": 254, "col_offset": 15, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 263, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 265, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 268, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 270, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 272, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 274, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 278, "col_offset": 19, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 282, "col_offset": 9, "nodeName": "open", "type": "Any"}, {"lineNumber": 283, "col_offset": 8, "nodeName": "run_all_evals", "type": "Callable[[Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 283, "col_offset": 22, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 283, "col_offset": 30, "nodeName": "treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 283, "col_offset": 41, "nodeName": "out_file", "type": "Any"}, {"lineNumber": 283, "col_offset": 51, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 283, "col_offset": 64, "nodeName": "print_freq_tasks", "type": "Union[List[str], List[nothing]]"}, {"lineNumber": 287, "col_offset": 4, "nodeName": "plac", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 39, "col_offset": 21, "nodeName": "create_pipe", "type": "Any"}, {"lineNumber": 43, "col_offset": 34, "nodeName": "modelname", "type": "Any"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 55, "col_offset": 30, "nodeName": "lang", "type": "Any"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "space_re", "type": "Pattern[str]"}, {"lineNumber": 59, "col_offset": 30, "nodeName": "strip", "type": "Any"}, {"lineNumber": 59, "col_offset": 54, "nodeName": "split", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "d", "type": "Dict[Any, int]"}, {"lineNumber": 67, "col_offset": 10, "nodeName": "token", "type": "Any"}, {"lineNumber": 68, "col_offset": 18, "nodeName": "items", "type": "Callable"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "find", "type": "Callable[..., Optional[xml.etree.ElementTree.Element]]"}, {"lineNumber": 87, "col_offset": 22, "nodeName": "l", "type": "Any"}, {"lineNumber": 88, "col_offset": 22, "nodeName": "l", "type": "Any"}, {"lineNumber": 91, "col_offset": 11, "nodeName": "treebank_dir", "type": "Any"}, {"lineNumber": 92, "col_offset": 28, "nodeName": "iterdir", "type": "Any"}, {"lineNumber": 117, "col_offset": 9, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 118, "col_offset": 20, "nodeName": "f", "type": "Any"}, {"lineNumber": 123, "col_offset": 16, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 128, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 128, "col_offset": 27, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 131, "col_offset": 26, "nodeName": "today", "type": "Callable"}, {"lineNumber": 131, "col_offset": 70, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 135, "col_offset": 9, "nodeName": "tmp_output_path", "type": "Any"}, {"lineNumber": 137, "col_offset": 9, "nodeName": "tmp_output_path", "type": "Any"}, {"lineNumber": 138, "col_offset": 17, "nodeName": "conll17_ud_eval", "type": "Any"}, {"lineNumber": 138, "col_offset": 67, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 148, "col_offset": 23, "nodeName": "score_name", "type": "str"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "print_header_1", "type": "List[str]"}, {"lineNumber": 160, "col_offset": 12, "nodeName": "extend", "type": "Callable"}, {"lineNumber": 163, "col_offset": 28, "nodeName": "get_freq_tuples", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 163, "col_offset": 44, "nodeName": "undersegmented", "type": "Any"}, {"lineNumber": 163, "col_offset": 66, "nodeName": "PRINT_TOTAL", "type": "int"}, {"lineNumber": 164, "col_offset": 29, "nodeName": "get_freq_tuples", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 164, "col_offset": 92, "nodeName": "PRINT_TOTAL", "type": "int"}, {"lineNumber": 165, "col_offset": 27, "nodeName": "get_freq_tuples", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 165, "col_offset": 43, "nodeName": "oversegmented", "type": "Any"}, {"lineNumber": 165, "col_offset": 64, "nodeName": "PRINT_TOTAL", "type": "int"}, {"lineNumber": 166, "col_offset": 28, "nodeName": "get_freq_tuples", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 166, "col_offset": 90, "nodeName": "PRINT_TOTAL", "type": "int"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "out_file", "type": "Any"}, {"lineNumber": 181, "col_offset": 19, "nodeName": "join", "type": "Callable"}, {"lineNumber": 192, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 192, "col_offset": 36, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 194, "col_offset": 24, "nodeName": "parent", "type": "Any"}, {"lineNumber": 195, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 195, "col_offset": 39, "nodeName": "gold_path", "type": "Any"}, {"lineNumber": 211, "col_offset": 19, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 232, "col_offset": 17, "nodeName": "lang", "type": "Any"}, {"lineNumber": 232, "col_offset": 42, "nodeName": "split", "type": "Any"}, {"lineNumber": 252, "col_offset": 15, "nodeName": "lang", "type": "Any"}, {"lineNumber": 252, "col_offset": 24, "nodeName": "multi", "type": "Optional[Tuple[Any, float, str]]"}, {"lineNumber": 256, "col_offset": 15, "nodeName": "lang", "type": "Any"}, {"lineNumber": 264, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 266, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 269, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 271, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 275, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 276, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 277, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 280, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 282, "col_offset": 9, "nodeName": "out_path", "type": "Any"}, {"lineNumber": 39, "col_offset": 21, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 59, "col_offset": 30, "nodeName": "par", "type": "Any"}, {"lineNumber": 59, "col_offset": 54, "nodeName": "text", "type": "Any"}, {"lineNumber": 68, "col_offset": 18, "nodeName": "d", "type": "Dict[Any, int]"}, {"lineNumber": 68, "col_offset": 33, "nodeName": "itemgetter", "type": "Callable"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "root", "type": "xml.etree.ElementTree.Element"}, {"lineNumber": 76, "col_offset": 24, "nodeName": "find", "type": "Callable[..., Optional[xml.etree.ElementTree.Element]]"}, {"lineNumber": 92, "col_offset": 28, "nodeName": "treebank_dir", "type": "Any"}, {"lineNumber": 93, "col_offset": 19, "nodeName": "endswith", "type": "Any"}, {"lineNumber": 94, "col_offset": 20, "nodeName": "file_lang", "type": "Any"}, {"lineNumber": 128, "col_offset": 27, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 131, "col_offset": 26, "nodeName": "date", "type": "Type[datetime.date]"}, {"lineNumber": 149, "col_offset": 40, "nodeName": "precision", "type": "Any"}, {"lineNumber": 150, "col_offset": 40, "nodeName": "recall", "type": "Any"}, {"lineNumber": 151, "col_offset": 40, "nodeName": "f1", "type": "Any"}, {"lineNumber": 152, "col_offset": 37, "nodeName": "aligned_accuracy", "type": "Any"}, {"lineNumber": 152, "col_offset": 82, "nodeName": "aligned_accuracy", "type": "Any"}, {"lineNumber": 153, "col_offset": 37, "nodeName": "undersegmented", "type": "Any"}, {"lineNumber": 153, "col_offset": 80, "nodeName": "under_perc", "type": "Any"}, {"lineNumber": 154, "col_offset": 37, "nodeName": "oversegmented", "type": "Any"}, {"lineNumber": 154, "col_offset": 79, "nodeName": "over_perc", "type": "Any"}, {"lineNumber": 156, "col_offset": 31, "nodeName": "score_name", "type": "str"}, {"lineNumber": 156, "col_offset": 50, "nodeName": "score_name", "type": "str"}, {"lineNumber": 156, "col_offset": 69, "nodeName": "score_name", "type": "str"}, {"lineNumber": 156, "col_offset": 88, "nodeName": "score_name", "type": "str"}, {"lineNumber": 157, "col_offset": 31, "nodeName": "score_name", "type": "str"}, {"lineNumber": 157, "col_offset": 54, "nodeName": "score_name", "type": "str"}, {"lineNumber": 160, "col_offset": 12, "nodeName": "print_header_1", "type": "List[str]"}, {"lineNumber": 163, "col_offset": 44, "nodeName": "score", "type": "Any"}, {"lineNumber": 165, "col_offset": 43, "nodeName": "score", "type": "Any"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 170, "col_offset": 16, "nodeName": "replace", "type": "Callable[..., str]"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 172, "col_offset": 16, "nodeName": "replace", "type": "Callable[..., str]"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "replace", "type": "Callable[..., str]"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "replace", "type": "Callable[..., str]"}, {"lineNumber": 180, "col_offset": 23, "nodeName": "join", "type": "Callable"}, {"lineNumber": 181, "col_offset": 28, "nodeName": "map", "type": "Callable"}, {"lineNumber": 181, "col_offset": 32, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 181, "col_offset": 37, "nodeName": "print_string_1", "type": "List[Union[str, Any, int]]"}, {"lineNumber": 194, "col_offset": 24, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 194, "col_offset": 44, "nodeName": "stem", "type": "Any"}, {"lineNumber": 199, "col_offset": 67, "nodeName": "gold_file", "type": "Any"}, {"lineNumber": 200, "col_offset": 20, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 202, "col_offset": 20, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 202, "col_offset": 25, "nodeName": "nlp_loading_time", "type": "Any"}, {"lineNumber": 202, "col_offset": 43, "nodeName": "nlp_name", "type": "Any"}, {"lineNumber": 202, "col_offset": 55, "nodeName": "models", "type": "Any"}, {"lineNumber": 232, "col_offset": 42, "nodeName": "langs", "type": "Any"}, {"lineNumber": 257, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 259, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 264, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 266, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 267, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 269, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 271, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 273, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 275, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 276, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 277, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 279, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 280, "col_offset": 32, "nodeName": "load_model", "type": "Callable[..., Any]"}, {"lineNumber": 68, "col_offset": 33, "nodeName": "operator", "type": "module"}, {"lineNumber": 76, "col_offset": 24, "nodeName": "root", "type": "xml.etree.ElementTree.Element"}, {"lineNumber": 93, "col_offset": 19, "nodeName": "name", "type": "Any"}, {"lineNumber": 95, "col_offset": 23, "nodeName": "file_lang", "type": "Any"}, {"lineNumber": 95, "col_offset": 36, "nodeName": "languages", "type": "Any"}, {"lineNumber": 96, "col_offset": 24, "nodeName": "gold_path", "type": "Any"}, {"lineNumber": 97, "col_offset": 24, "nodeName": "stats_xml", "type": "Any"}, {"lineNumber": 131, "col_offset": 26, "nodeName": "datetime", "type": "module"}, {"lineNumber": 149, "col_offset": 40, "nodeName": "score", "type": "Any"}, {"lineNumber": 150, "col_offset": 40, "nodeName": "score", "type": "Any"}, {"lineNumber": 151, "col_offset": 40, "nodeName": "score", "type": "Any"}, {"lineNumber": 152, "col_offset": 37, "nodeName": "score", "type": "Any"}, {"lineNumber": 152, "col_offset": 82, "nodeName": "score", "type": "Any"}, {"lineNumber": 153, "col_offset": 37, "nodeName": "score", "type": "Any"}, {"lineNumber": 153, "col_offset": 80, "nodeName": "score", "type": "Any"}, {"lineNumber": 154, "col_offset": 37, "nodeName": "score", "type": "Any"}, {"lineNumber": 154, "col_offset": 79, "nodeName": "score", "type": "Any"}, {"lineNumber": 160, "col_offset": 35, "nodeName": "score_name", "type": "str"}, {"lineNumber": 160, "col_offset": 66, "nodeName": "score_name", "type": "str"}, {"lineNumber": 161, "col_offset": 35, "nodeName": "score_name", "type": "str"}, {"lineNumber": 161, "col_offset": 65, "nodeName": "score_name", "type": "str"}, {"lineNumber": 164, "col_offset": 46, "nodeName": "word_shape", "type": "Callable[[Any], str]"}, {"lineNumber": 164, "col_offset": 57, "nodeName": "x", "type": "Any"}, {"lineNumber": 164, "col_offset": 64, "nodeName": "x", "type": "Any"}, {"lineNumber": 164, "col_offset": 69, "nodeName": "undersegmented", "type": "Any"}, {"lineNumber": 166, "col_offset": 45, "nodeName": "word_shape", "type": "Callable[[Any], str]"}, {"lineNumber": 166, "col_offset": 56, "nodeName": "x", "type": "Any"}, {"lineNumber": 166, "col_offset": 63, "nodeName": "x", "type": "Any"}, {"lineNumber": 166, "col_offset": 68, "nodeName": "oversegmented", "type": "Any"}, {"lineNumber": 180, "col_offset": 32, "nodeName": "map", "type": "Callable"}, {"lineNumber": 180, "col_offset": 36, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 180, "col_offset": 41, "nodeName": "print_header_1", "type": "List[str]"}, {"lineNumber": 194, "col_offset": 44, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "open", "type": "Any"}, {"lineNumber": 200, "col_offset": 30, "nodeName": "load_conllu", "type": "Any"}, {"lineNumber": 200, "col_offset": 58, "nodeName": "gold_file", "type": "Any"}, {"lineNumber": 202, "col_offset": 62, "nodeName": "tb_lang", "type": "Any"}, {"lineNumber": 205, "col_offset": 24, "nodeName": "tmp_output_path", "type": "Any"}, {"lineNumber": 208, "col_offset": 24, "nodeName": "print_header", "type": "bool"}, {"lineNumber": 209, "col_offset": 27, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 212, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 257, "col_offset": 36, "nodeName": "load_default_model_sentencizer", "type": "Callable[[Any], Any]"}, {"lineNumber": 259, "col_offset": 36, "nodeName": "load_default_model_sentencizer", "type": "Callable[[Any], Any]"}, {"lineNumber": 259, "col_offset": 67, "nodeName": "lang", "type": "Any"}, {"lineNumber": 264, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 266, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 269, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 271, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 275, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 276, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 277, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 280, "col_offset": 12, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 93, "col_offset": 19, "nodeName": "txt_path", "type": "Any"}, {"lineNumber": 93, "col_offset": 51, "nodeName": "corpus", "type": "Any"}, {"lineNumber": 94, "col_offset": 32, "nodeName": "split", "type": "Any"}, {"lineNumber": 96, "col_offset": 36, "nodeName": "treebank_dir", "type": "Any"}, {"lineNumber": 97, "col_offset": 36, "nodeName": "treebank_dir", "type": "Any"}, {"lineNumber": 164, "col_offset": 69, "nodeName": "score", "type": "Any"}, {"lineNumber": 166, "col_offset": 68, "nodeName": "score", "type": "Any"}, {"lineNumber": 170, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 172, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 199, "col_offset": 21, "nodeName": "gold_path", "type": "Any"}, {"lineNumber": 200, "col_offset": 30, "nodeName": "conll17_ud_eval", "type": "Any"}, {"lineNumber": 204, "col_offset": 24, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 204, "col_offset": 49, "nodeName": "nlp_name", "type": "Any"}, {"lineNumber": 205, "col_offset": 42, "nodeName": "parent", "type": "Any"}, {"lineNumber": 206, "col_offset": 24, "nodeName": "run_single_eval", "type": "Callable[[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any], Any]"}, {"lineNumber": 206, "col_offset": 40, "nodeName": "nlp", "type": "Any"}, {"lineNumber": 206, "col_offset": 45, "nodeName": "nlp_loading_time", "type": "Any"}, {"lineNumber": 206, "col_offset": 63, "nodeName": "nlp_name", "type": "Any"}, {"lineNumber": 206, "col_offset": 73, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 206, "col_offset": 84, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 206, "col_offset": 93, "nodeName": "tmp_output_path", "type": "Any"}, {"lineNumber": 206, "col_offset": 110, "nodeName": "out_file", "type": "Any"}, {"lineNumber": 207, "col_offset": 40, "nodeName": "print_header", "type": "bool"}, {"lineNumber": 207, "col_offset": 54, "nodeName": "check_parse", "type": "Any"}, {"lineNumber": 207, "col_offset": 67, "nodeName": "print_freq_tasks", "type": "Any"}, {"lineNumber": 212, "col_offset": 47, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 212, "col_offset": 51, "nodeName": "e", "type": "Exception"}, {"lineNumber": 257, "col_offset": 16, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 259, "col_offset": 16, "nodeName": "models", "type": "Dict[Any, Union[List[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]], List[Optional[Union[Tuple[Any, float, str], Tuple[Any, float, Any]]]]]]"}, {"lineNumber": 94, "col_offset": 32, "nodeName": "name", "type": "Any"}, {"lineNumber": 96, "col_offset": 51, "nodeName": "replace", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "_contains_blinded_text", "type": "Callable[[Any], Any]"}, {"lineNumber": 99, "col_offset": 54, "nodeName": "stats_xml", "type": "Any"}, {"lineNumber": 100, "col_offset": 35, "nodeName": "best_per_language", "type": "Any"}, {"lineNumber": 170, "col_offset": 21, "nodeName": "k", "type": "Any"}, {"lineNumber": 170, "col_offset": 24, "nodeName": "v", "type": "int"}, {"lineNumber": 172, "col_offset": 21, "nodeName": "k", "type": "str"}, {"lineNumber": 172, "col_offset": 24, "nodeName": "v", "type": "int"}, {"lineNumber": 174, "col_offset": 21, "nodeName": "k", "type": "Any"}, {"lineNumber": 174, "col_offset": 24, "nodeName": "v", "type": "int"}, {"lineNumber": 176, "col_offset": 21, "nodeName": "k", "type": "str"}, {"lineNumber": 176, "col_offset": 24, "nodeName": "v", "type": "int"}, {"lineNumber": 205, "col_offset": 42, "nodeName": "text_path", "type": "Any"}, {"lineNumber": 205, "col_offset": 61, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 210, "col_offset": 24, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 259, "col_offset": 23, "nodeName": "lang", "type": "Any"}, {"lineNumber": 94, "col_offset": 32, "nodeName": "txt_path", "type": "Any"}, {"lineNumber": 96, "col_offset": 51, "nodeName": "name", "type": "Any"}, {"lineNumber": 101, "col_offset": 32, "nodeName": "append", "type": "Callable"}, {"lineNumber": 101, "col_offset": 64, "nodeName": "txt_path", "type": "Any"}, {"lineNumber": 104, "col_offset": 83, "nodeName": "gold_file", "type": "Any"}, {"lineNumber": 105, "col_offset": 36, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 106, "col_offset": 36, "nodeName": "gold_tokens", "type": "int"}, {"lineNumber": 107, "col_offset": 62, "nodeName": "gold_tokens", "type": "int"}, {"lineNumber": 109, "col_offset": 63, "nodeName": "gold_tokens", "type": "int"}, {"lineNumber": 170, "col_offset": 38, "nodeName": "d_under_words", "type": "List[Tuple[Any, int]]"}, {"lineNumber": 172, "col_offset": 38, "nodeName": "d_under_shapes", "type": "List[Tuple[str, int]]"}, {"lineNumber": 174, "col_offset": 38, "nodeName": "d_over_words", "type": "List[Tuple[Any, int]]"}, {"lineNumber": 176, "col_offset": 38, "nodeName": "d_over_shapes", "type": "List[Tuple[str, int]]"}, {"lineNumber": 210, "col_offset": 56, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 210, "col_offset": 60, "nodeName": "e", "type": "Exception"}, {"lineNumber": 96, "col_offset": 51, "nodeName": "txt_path", "type": "Any"}, {"lineNumber": 104, "col_offset": 37, "nodeName": "open", "type": "Any"}, {"lineNumber": 105, "col_offset": 46, "nodeName": "load_conllu", "type": "Any"}, {"lineNumber": 105, "col_offset": 74, "nodeName": "gold_file", "type": "Any"}, {"lineNumber": 106, "col_offset": 50, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 106, "col_offset": 54, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 107, "col_offset": 35, "nodeName": "treebank_size", "type": "Dict[Any, int]"}, {"lineNumber": 108, "col_offset": 36, "nodeName": "all_treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 108, "col_offset": 64, "nodeName": "txt_path", "type": "Any"}, {"lineNumber": 109, "col_offset": 36, "nodeName": "treebank_size", "type": "Dict[Any, int]"}, {"lineNumber": 170, "col_offset": 30, "nodeName": "k", "type": "Any"}, {"lineNumber": 170, "col_offset": 33, "nodeName": "v", "type": "int"}, {"lineNumber": 170, "col_offset": 55, "nodeName": "v", "type": "int"}, {"lineNumber": 170, "col_offset": 59, "nodeName": "PRINT_FREQ", "type": "int"}, {"lineNumber": 172, "col_offset": 30, "nodeName": "k", "type": "str"}, {"lineNumber": 172, "col_offset": 33, "nodeName": "v", "type": "int"}, {"lineNumber": 172, "col_offset": 56, "nodeName": "v", "type": "int"}, {"lineNumber": 172, "col_offset": 60, "nodeName": "PRINT_FREQ", "type": "int"}, {"lineNumber": 174, "col_offset": 30, "nodeName": "k", "type": "Any"}, {"lineNumber": 174, "col_offset": 33, "nodeName": "v", "type": "int"}, {"lineNumber": 174, "col_offset": 54, "nodeName": "v", "type": "int"}, {"lineNumber": 174, "col_offset": 58, "nodeName": "PRINT_FREQ", "type": "int"}, {"lineNumber": 176, "col_offset": 30, "nodeName": "k", "type": "str"}, {"lineNumber": 176, "col_offset": 33, "nodeName": "v", "type": "int"}, {"lineNumber": 176, "col_offset": 55, "nodeName": "v", "type": "int"}, {"lineNumber": 176, "col_offset": 59, "nodeName": "PRINT_FREQ", "type": "int"}, {"lineNumber": 205, "col_offset": 74, "nodeName": "nlp_name", "type": "Any"}, {"lineNumber": 101, "col_offset": 32, "nodeName": "all_treebanks", "type": "Dict[Any, List[Any]]"}, {"lineNumber": 104, "col_offset": 37, "nodeName": "gold_path", "type": "Any"}, {"lineNumber": 105, "col_offset": 46, "nodeName": "conll17_ud_eval", "type": "Any"}, {"lineNumber": 106, "col_offset": 54, "nodeName": "gold_ud", "type": "Any"}, {"lineNumber": 107, "col_offset": 49, "nodeName": "file_lang", "type": "Any"}, {"lineNumber": 108, "col_offset": 50, "nodeName": "file_lang", "type": "Any"}, {"lineNumber": 109, "col_offset": 50, "nodeName": "file_lang", "type": "Any"}, {"lineNumber": 101, "col_offset": 46, "nodeName": "file_lang", "type": "Any"}]