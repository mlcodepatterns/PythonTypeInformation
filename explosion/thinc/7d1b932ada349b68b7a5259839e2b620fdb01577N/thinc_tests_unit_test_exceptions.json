[{"lineNumber": 15, "col_offset": 0, "nodeName": "model", "type": "Callable[[], Any]"}, {"lineNumber": 20, "col_offset": 0, "nodeName": "dummy", "type": "Callable[..., Any]"}, {"lineNumber": 27, "col_offset": 0, "nodeName": "test_check_operator_is_defined_passes", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 35, "col_offset": 0, "nodeName": "test_check_operator_is_defined_type_fails", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "test_check_operator_is_defined_fails", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 50, "col_offset": 0, "nodeName": "test_check_equal_length_passes", "type": "Callable[[Any], Any]"}, {"lineNumber": 71, "col_offset": 0, "nodeName": "test_check_has_shape_passes", "type": "Callable[[], Any]"}, {"lineNumber": 76, "col_offset": 0, "nodeName": "test_check_has_shape_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 95, "col_offset": 0, "nodeName": "test_check_is_shape_passes", "type": "Callable[[Any], Any]"}, {"lineNumber": 100, "col_offset": 0, "nodeName": "test_check_is_shape_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 106, "col_offset": 0, "nodeName": "test_check_is_sequence_passes", "type": "Callable[[Any], Any]"}, {"lineNumber": 111, "col_offset": 0, "nodeName": "test_check_is_sequence_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 117, "col_offset": 0, "nodeName": "test_check_is_float_passes", "type": "Callable[[Any], Any]"}, {"lineNumber": 122, "col_offset": 0, "nodeName": "test_check_is_float_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 128, "col_offset": 0, "nodeName": "test_check_is_float_min_max_passes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 134, "col_offset": 0, "nodeName": "test_check_is_float_min_fails", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 140, "col_offset": 0, "nodeName": "test_check_is_float_max_fails", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 146, "col_offset": 0, "nodeName": "test_check_is_int_passes", "type": "Callable[[Any], Any]"}, {"lineNumber": 151, "col_offset": 0, "nodeName": "test_check_is_int_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 157, "col_offset": 0, "nodeName": "test_check_is_int_min_max_passes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 163, "col_offset": 0, "nodeName": "test_check_is_int_min_fails", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 169, "col_offset": 0, "nodeName": "test_check_is_int_max_fails", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 175, "col_offset": 0, "nodeName": "test_check_is_array_passes", "type": "Callable[[], Any]"}, {"lineNumber": 180, "col_offset": 0, "nodeName": "test_check_is_array_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 186, "col_offset": 0, "nodeName": "test_check_is_int_array_passes", "type": "Callable[[], Any]"}, {"lineNumber": 191, "col_offset": 0, "nodeName": "test_check_is_int_array_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 197, "col_offset": 0, "nodeName": "test_check_is_int_array_ndarray_fails", "type": "Callable[[], Any]"}, {"lineNumber": 203, "col_offset": 0, "nodeName": "test_check_arg_passes", "type": "Callable[[], Any]"}, {"lineNumber": 209, "col_offset": 0, "nodeName": "test_check_args_passes", "type": "Callable[[], Any]"}, {"lineNumber": 24, "col_offset": 11, "nodeName": "_dummy", "type": "Callable[..., Any]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "checker", "type": "Any"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "checker", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "checker", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "mock_shape", "type": "mock.MagicMock"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "return_value", "type": "int"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "return_value", "type": "Any"}, {"lineNumber": 87, "col_offset": 39, "nodeName": "shape", "type": "Any"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "return_value", "type": "Any"}, {"lineNumber": 88, "col_offset": 30, "nodeName": "shape", "type": "Any"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "mock_arg", "type": "mock.MagicMock"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "return_value", "type": "Any"}, {"lineNumber": 90, "col_offset": 37, "nodeName": "arg", "type": "Any"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 187, "col_offset": 4, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 204, "col_offset": 4, "nodeName": "checker", "type": "Any"}, {"lineNumber": 205, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 210, "col_offset": 4, "nodeName": "checker", "type": "Any"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 17, "col_offset": 11, "nodeName": "Model", "type": "Any"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "operator_is_defined", "type": "Any"}, {"lineNumber": 29, "col_offset": 40, "nodeName": "operator", "type": "Any"}, {"lineNumber": 30, "col_offset": 14, "nodeName": "checker", "type": "Any"}, {"lineNumber": 30, "col_offset": 22, "nodeName": "dummy", "type": "Any"}, {"lineNumber": 36, "col_offset": 14, "nodeName": "operator_is_defined", "type": "Any"}, {"lineNumber": 37, "col_offset": 14, "nodeName": "checker", "type": "Any"}, {"lineNumber": 37, "col_offset": 22, "nodeName": "dummy", "type": "Any"}, {"lineNumber": 44, "col_offset": 14, "nodeName": "operator_is_defined", "type": "Any"}, {"lineNumber": 44, "col_offset": 40, "nodeName": "operator", "type": "Any"}, {"lineNumber": 45, "col_offset": 14, "nodeName": "checker", "type": "Any"}, {"lineNumber": 45, "col_offset": 22, "nodeName": "dummy", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "equal_length", "type": "Any"}, {"lineNumber": 52, "col_offset": 23, "nodeName": "args", "type": "Any"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "has_shape", "type": "Any"}, {"lineNumber": 85, "col_offset": 17, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "__len__", "type": "Any"}, {"lineNumber": 86, "col_offset": 38, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 86, "col_offset": 42, "nodeName": "shape", "type": "Any"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "__iter__", "type": "Any"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "mock_shape", "type": "mock.MagicMock"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "__iter__", "type": "Any"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "is_shape", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "is_sequence", "type": "Any"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "is_float", "type": "Any"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "is_float", "type": "Any"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "is_float", "type": "Any"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 176, "col_offset": 11, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "is_array", "type": "Any"}, {"lineNumber": 187, "col_offset": 11, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "is_int_array", "type": "Any"}, {"lineNumber": 198, "col_offset": 11, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 204, "col_offset": 14, "nodeName": "arg", "type": "Any"}, {"lineNumber": 204, "col_offset": 27, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 205, "col_offset": 14, "nodeName": "checker", "type": "Any"}, {"lineNumber": 205, "col_offset": 22, "nodeName": "dummy", "type": "Any"}, {"lineNumber": 206, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 210, "col_offset": 14, "nodeName": "args", "type": "Any"}, {"lineNumber": 210, "col_offset": 25, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 211, "col_offset": 14, "nodeName": "checker", "type": "Any"}, {"lineNumber": 211, "col_offset": 22, "nodeName": "dummy", "type": "Any"}, {"lineNumber": 212, "col_offset": 4, "nodeName": "checked", "type": "Any"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "check", "type": "Any"}, {"lineNumber": 31, "col_offset": 9, "nodeName": "define_operators", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "checked", "type": "Any"}, {"lineNumber": 32, "col_offset": 16, "nodeName": "model", "type": "Any"}, {"lineNumber": 36, "col_offset": 14, "nodeName": "check", "type": "Any"}, {"lineNumber": 38, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 38, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "checked", "type": "Any"}, {"lineNumber": 44, "col_offset": 14, "nodeName": "check", "type": "Any"}, {"lineNumber": 46, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 46, "col_offset": 23, "nodeName": "UndefinedOperatorError", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "checked", "type": "Any"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "model", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 59, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 59, "col_offset": 23, "nodeName": "DifferentLengthError", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "equal_length", "type": "Any"}, {"lineNumber": 67, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 67, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "equal_length", "type": "Any"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 73, "col_offset": 24, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 78, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 78, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "has_shape", "type": "Any"}, {"lineNumber": 85, "col_offset": 32, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "mock_shape", "type": "mock.MagicMock"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "mock_shape", "type": "mock.MagicMock"}, {"lineNumber": 89, "col_offset": 30, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "mock_arg", "type": "mock.MagicMock"}, {"lineNumber": 91, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 91, "col_offset": 23, "nodeName": "ShapeMismatchError", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "has_shape", "type": "Any"}, {"lineNumber": 92, "col_offset": 24, "nodeName": "mock_shape", "type": "mock.MagicMock"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "arg", "type": "Any"}, {"lineNumber": 102, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 102, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "is_shape", "type": "Any"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 108, "col_offset": 26, "nodeName": "arg", "type": "Any"}, {"lineNumber": 113, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 113, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "is_sequence", "type": "Any"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 119, "col_offset": 23, "nodeName": "arg", "type": "Any"}, {"lineNumber": 124, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 124, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "is_float", "type": "Any"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 130, "col_offset": 23, "nodeName": "low", "type": "Any"}, {"lineNumber": 130, "col_offset": 39, "nodeName": "low", "type": "Any"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 131, "col_offset": 23, "nodeName": "high", "type": "Any"}, {"lineNumber": 131, "col_offset": 40, "nodeName": "high", "type": "Any"}, {"lineNumber": 136, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 136, "col_offset": 23, "nodeName": "OutsideRangeError", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "is_float", "type": "Any"}, {"lineNumber": 142, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 142, "col_offset": 23, "nodeName": "OutsideRangeError", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "is_float", "type": "Any"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 148, "col_offset": 21, "nodeName": "arg", "type": "Any"}, {"lineNumber": 153, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 153, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 159, "col_offset": 21, "nodeName": "low", "type": "Any"}, {"lineNumber": 159, "col_offset": 37, "nodeName": "low", "type": "Any"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 160, "col_offset": 21, "nodeName": "high", "type": "Any"}, {"lineNumber": 160, "col_offset": 38, "nodeName": "high", "type": "Any"}, {"lineNumber": 165, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 165, "col_offset": 23, "nodeName": "OutsideRangeError", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 171, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 171, "col_offset": 23, "nodeName": "OutsideRangeError", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "is_int", "type": "Any"}, {"lineNumber": 176, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 177, "col_offset": 23, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 182, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 182, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "is_array", "type": "Any"}, {"lineNumber": 187, "col_offset": 26, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "check", "type": "Any"}, {"lineNumber": 188, "col_offset": 27, "nodeName": "mock", "type": "mock.MagicMock"}, {"lineNumber": 193, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 193, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "is_int_array", "type": "Any"}, {"lineNumber": 199, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 199, "col_offset": 23, "nodeName": "ExpectedTypeError", "type": "Any"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "is_int_array", "type": "Any"}, {"lineNumber": 204, "col_offset": 14, "nodeName": "check", "type": "Any"}, {"lineNumber": 204, "col_offset": 27, "nodeName": "check", "type": "Any"}, {"lineNumber": 210, "col_offset": 14, "nodeName": "check", "type": "Any"}, {"lineNumber": 210, "col_offset": 25, "nodeName": "check", "type": "Any"}, {"lineNumber": 31, "col_offset": 9, "nodeName": "Model", "type": "Any"}, {"lineNumber": 38, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 46, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 59, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 60, "col_offset": 28, "nodeName": "args", "type": "Any"}, {"lineNumber": 67, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 68, "col_offset": 28, "nodeName": "args", "type": "Any"}, {"lineNumber": 78, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 79, "col_offset": 34, "nodeName": "arg", "type": "Any"}, {"lineNumber": 91, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 92, "col_offset": 40, "nodeName": "mock_arg", "type": "mock.MagicMock"}, {"lineNumber": 102, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 103, "col_offset": 27, "nodeName": "arg", "type": "Any"}, {"lineNumber": 113, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 114, "col_offset": 30, "nodeName": "arg", "type": "Any"}, {"lineNumber": 124, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 125, "col_offset": 27, "nodeName": "arg", "type": "Any"}, {"lineNumber": 136, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 137, "col_offset": 27, "nodeName": "low", "type": "Any"}, {"lineNumber": 137, "col_offset": 43, "nodeName": "high", "type": "Any"}, {"lineNumber": 142, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 143, "col_offset": 27, "nodeName": "high", "type": "Any"}, {"lineNumber": 143, "col_offset": 44, "nodeName": "low", "type": "Any"}, {"lineNumber": 153, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 154, "col_offset": 25, "nodeName": "arg", "type": "Any"}, {"lineNumber": 165, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 166, "col_offset": 25, "nodeName": "low", "type": "Any"}, {"lineNumber": 166, "col_offset": 41, "nodeName": "high", "type": "Any"}, {"lineNumber": 171, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "high", "type": "Any"}, {"lineNumber": 172, "col_offset": 42, "nodeName": "low", "type": "Any"}, {"lineNumber": 182, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 183, "col_offset": 27, "nodeName": "arg", "type": "Any"}, {"lineNumber": 193, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 194, "col_offset": 31, "nodeName": "arg", "type": "Any"}, {"lineNumber": 199, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "check", "type": "Any"}, {"lineNumber": 200, "col_offset": 31, "nodeName": "mock", "type": "mock.MagicMock"}]