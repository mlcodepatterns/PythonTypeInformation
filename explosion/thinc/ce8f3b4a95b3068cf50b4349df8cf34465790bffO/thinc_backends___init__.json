[{"lineNumber": 17, "col_offset": 0, "nodeName": "use_pytorch_for_gpu_memory", "type": "Callable[[], None]"}, {"lineNumber": 33, "col_offset": 0, "nodeName": "use_tensorflow_for_gpu_memory", "type": "Callable[[], None]"}, {"lineNumber": 49, "col_offset": 0, "nodeName": "get_ops", "type": "Callable[..., Any]"}, {"lineNumber": 67, "col_offset": 0, "nodeName": "get_current_ops", "type": "Callable[[], Any]"}, {"lineNumber": 72, "col_offset": 0, "nodeName": "set_current_ops", "type": "Callable[[Any], None]"}, {"lineNumber": 14, "col_offset": 0, "nodeName": "STATE", "type": "Any"}, {"lineNumber": 49, "col_offset": 41, "nodeName": "Ops", "type": "Any"}, {"lineNumber": 67, "col_offset": 25, "nodeName": "Ops", "type": "Any"}, {"lineNumber": 77, "col_offset": 0, "nodeName": "__all__", "type": "List[str]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "create_thread_local", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "ops", "type": "Dict[str, Any]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "cls", "type": "Any"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "current_ops", "type": "Any"}, {"lineNumber": 69, "col_offset": 11, "nodeName": "ops", "type": "Any"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "ops", "type": "Any"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "ops", "type": "Any"}, {"lineNumber": 14, "col_offset": 36, "nodeName": "NumpyOps", "type": "Any"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "assert_pytorch_installed", "type": "Any"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "set_allocator", "type": "Any"}, {"lineNumber": 30, "col_offset": 28, "nodeName": "cupy_pytorch_allocator", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "assert_tensorflow_installed", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "set_allocator", "type": "Any"}, {"lineNumber": 46, "col_offset": 28, "nodeName": "cupy_tensorflow_allocator", "type": "Any"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "OpsNames", "type": "Any"}, {"lineNumber": 51, "col_offset": 20, "nodeName": "NumpyOps", "type": "Any"}, {"lineNumber": 51, "col_offset": 38, "nodeName": "CupyOps", "type": "Any"}, {"lineNumber": 51, "col_offset": 54, "nodeName": "JaxOps", "type": "Any"}, {"lineNumber": 52, "col_offset": 7, "nodeName": "name", "type": "Any"}, {"lineNumber": 52, "col_offset": 19, "nodeName": "ops", "type": "Dict[str, Any]"}, {"lineNumber": 54, "col_offset": 10, "nodeName": "ops", "type": "Dict[str, Any]"}, {"lineNumber": 55, "col_offset": 11, "nodeName": "cls", "type": "Any"}, {"lineNumber": 59, "col_offset": 18, "nodeName": "OpsNames", "type": "Any"}, {"lineNumber": 61, "col_offset": 18, "nodeName": "get_current_ops", "type": "Callable[[], Any]"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "set_current_ops", "type": "Callable[[Any], None]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "set_current_ops", "type": "Callable[[Any], None]"}, {"lineNumber": 64, "col_offset": 20, "nodeName": "current_ops", "type": "Any"}, {"lineNumber": 69, "col_offset": 11, "nodeName": "STATE", "type": "Any"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "Ops", "type": "Any"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "STATE", "type": "Any"}, {"lineNumber": 14, "col_offset": 53, "nodeName": "NumpyOps", "type": "Any"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 53, "col_offset": 14, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 54, "col_offset": 14, "nodeName": "name", "type": "Any"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 62, "col_offset": 20, "nodeName": "get_ops", "type": "Callable[..., Any]"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "name", "type": "Any"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "cupy", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "cupy", "type": "Any"}, {"lineNumber": 62, "col_offset": 36, "nodeName": "kwargs", "type": "Dict[str, Any]"}]