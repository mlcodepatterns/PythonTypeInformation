[{"lineNumber": 35, "col_offset": 0, "nodeName": "test_validate_simple_config", "type": "Callable[[], Any]"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "test_invalidate_simple_config", "type": "Callable[[], Any]"}, {"lineNumber": 53, "col_offset": 0, "nodeName": "test_invalidate_extra_args", "type": "Callable[[], Any]"}, {"lineNumber": 63, "col_offset": 0, "nodeName": "test_fill_defaults_simple_config", "type": "Callable[[], Any]"}, {"lineNumber": 73, "col_offset": 0, "nodeName": "test_fill_recursive_config", "type": "Callable[[], Any]"}, {"lineNumber": 121, "col_offset": 0, "nodeName": "test_is_promise", "type": "Callable[[], Any]"}, {"lineNumber": 126, "col_offset": 0, "nodeName": "test_get_constructor", "type": "Callable[[], Any]"}, {"lineNumber": 130, "col_offset": 0, "nodeName": "test_parse_args", "type": "Callable[[], Any]"}, {"lineNumber": 135, "col_offset": 0, "nodeName": "test_make_promise_schema", "type": "Callable[[], Any]"}, {"lineNumber": 141, "col_offset": 0, "nodeName": "test_validate_promise", "type": "Callable[[], Any]"}, {"lineNumber": 150, "col_offset": 0, "nodeName": "test_fill_validate_promise", "type": "Callable[[], Any]"}, {"lineNumber": 161, "col_offset": 0, "nodeName": "test_fill_invalidate_promise", "type": "Callable[[], Any]"}, {"lineNumber": 8, "col_offset": 18, "nodeName": "registry", "type": "Type[thinc._registry.registry]"}, {"lineNumber": 12, "col_offset": 22, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 19, "col_offset": 21, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 27, "col_offset": 20, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 91, "col_offset": 46, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 97, "col_offset": 0, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 103, "col_offset": 0, "nodeName": "ok_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 108, "col_offset": 0, "nodeName": "bad_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 114, "col_offset": 0, "nodeName": "worst_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 8, "col_offset": 18, "nodeName": "_registry", "type": "module"}, {"lineNumber": 9, "col_offset": 4, "nodeName": "cats", "type": "Any"}, {"lineNumber": 13, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 14, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 20, "col_offset": 14, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "optional", "type": "str"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "outer_opt", "type": "str"}, {"lineNumber": 29, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 31, "col_offset": 16, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "level2_opt", "type": "DefaultsSchema"}, {"lineNumber": 32, "col_offset": 16, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "invalid_config", "type": "Dict[str, Union[str, int]]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "invalid_config", "type": "Dict[str, int]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "valid_config", "type": "Dict[str, int]"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "invalid_config", "type": "Dict[str, str]"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "valid_config", "type": "Dict[str, Union[Dict[str, int], int]]"}, {"lineNumber": 92, "col_offset": 7, "nodeName": "evil", "type": "bool"}, {"lineNumber": 127, "col_offset": 4, "nodeName": "func", "type": "Any"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "schema", "type": "Any"}, {"lineNumber": 142, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 151, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 162, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 8, "col_offset": 18, "nodeName": "thinc", "type": "module"}, {"lineNumber": 9, "col_offset": 11, "nodeName": "create", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "extra", "type": "str"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "extra", "type": "str"}, {"lineNumber": 32, "col_offset": 33, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 40, "col_offset": 7, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 40, "col_offset": 11, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 40, "col_offset": 41, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 40, "col_offset": 56, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 41, "col_offset": 11, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 42, "col_offset": 16, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 65, "col_offset": 46, "nodeName": "valid_config", "type": "Dict[str, int]"}, {"lineNumber": 65, "col_offset": 60, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "validation", "type": "Dict[Any, Any]"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 81, "col_offset": 55, "nodeName": "valid_config", "type": "Dict[str, Union[Dict[str, int], int]]"}, {"lineNumber": 81, "col_offset": 69, "nodeName": "ComplexSchema", "type": "Type[ComplexSchema]"}, {"lineNumber": 91, "col_offset": 20, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 91, "col_offset": 32, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 122, "col_offset": 11, "nodeName": "is_promise", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 122, "col_offset": 34, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "get_constructor", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 127, "col_offset": 39, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 128, "col_offset": 11, "nodeName": "func", "type": "Any"}, {"lineNumber": 128, "col_offset": 19, "nodeName": "catsie_v1", "type": "Any"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "args", "type": "Any"}, {"lineNumber": 131, "col_offset": 10, "nodeName": "kwargs", "type": "Dict[Any, Any]"}, {"lineNumber": 131, "col_offset": 19, "nodeName": "parse_args", "type": "Callable[[Any, Any], Tuple[Any, Dict[Any, Any]]]"}, {"lineNumber": 131, "col_offset": 42, "nodeName": "bad_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 132, "col_offset": 11, "nodeName": "args", "type": "Any"}, {"lineNumber": 133, "col_offset": 11, "nodeName": "kwargs", "type": "Dict[Any, Any]"}, {"lineNumber": 136, "col_offset": 13, "nodeName": "make_promise_schema", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 136, "col_offset": 45, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 137, "col_offset": 21, "nodeName": "__fields__", "type": "Any"}, {"lineNumber": 138, "col_offset": 21, "nodeName": "__fields__", "type": "Any"}, {"lineNumber": 144, "col_offset": 20, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 146, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 146, "col_offset": 12, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 146, "col_offset": 24, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 146, "col_offset": 54, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 146, "col_offset": 62, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 147, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 147, "col_offset": 21, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 148, "col_offset": 11, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 158, "col_offset": 12, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 158, "col_offset": 24, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 158, "col_offset": 54, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 158, "col_offset": 62, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 9, "col_offset": 11, "nodeName": "catalogue", "type": "Any"}, {"lineNumber": 40, "col_offset": 11, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 50, "col_offset": 23, "nodeName": "ValidationError", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 51, "col_offset": 45, "nodeName": "invalid_config", "type": "Dict[str, Union[str, int]]"}, {"lineNumber": 51, "col_offset": 61, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 59, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 59, "col_offset": 23, "nodeName": "ValidationError", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 60, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 60, "col_offset": 15, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 60, "col_offset": 45, "nodeName": "invalid_config", "type": "Dict[str, int]"}, {"lineNumber": 60, "col_offset": 61, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 69, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 69, "col_offset": 23, "nodeName": "ValidationError", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 70, "col_offset": 15, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 70, "col_offset": 45, "nodeName": "invalid_config", "type": "Dict[str, str]"}, {"lineNumber": 70, "col_offset": 61, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 82, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 83, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 122, "col_offset": 11, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 123, "col_offset": 15, "nodeName": "is_promise", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 124, "col_offset": 15, "nodeName": "is_promise", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 131, "col_offset": 19, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 136, "col_offset": 13, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 137, "col_offset": 21, "nodeName": "schema", "type": "Any"}, {"lineNumber": 138, "col_offset": 21, "nodeName": "schema", "type": "Any"}, {"lineNumber": 146, "col_offset": 24, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 158, "col_offset": 24, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 170, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "ValidationError", "type": "Any"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 171, "col_offset": 16, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 171, "col_offset": 58, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 171, "col_offset": 66, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 172, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 173, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 173, "col_offset": 23, "nodeName": "ValidationError", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 174, "col_offset": 28, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 174, "col_offset": 58, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 174, "col_offset": 66, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 59, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 60, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 69, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 70, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 84, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 86, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 87, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 123, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 124, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 159, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 170, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 171, "col_offset": 28, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 173, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 174, "col_offset": 28, "nodeName": "my_registry", "type": "Type[my_registry]"}]