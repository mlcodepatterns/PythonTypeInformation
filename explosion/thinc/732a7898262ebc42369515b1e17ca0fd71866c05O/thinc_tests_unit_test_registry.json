[{"lineNumber": 39, "col_offset": 0, "nodeName": "test_validate_simple_config", "type": "Callable[[], Any]"}, {"lineNumber": 46, "col_offset": 0, "nodeName": "test_invalidate_simple_config", "type": "Callable[[], Any]"}, {"lineNumber": 52, "col_offset": 0, "nodeName": "test_invalidate_extra_args", "type": "Callable[[], Any]"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "test_fill_defaults_simple_config", "type": "Callable[[], Any]"}, {"lineNumber": 68, "col_offset": 0, "nodeName": "test_fill_recursive_config", "type": "Callable[[], Any]"}, {"lineNumber": 95, "col_offset": 0, "nodeName": "test_is_promise", "type": "Callable[[], Any]"}, {"lineNumber": 101, "col_offset": 0, "nodeName": "test_get_constructor", "type": "Callable[[], Any]"}, {"lineNumber": 106, "col_offset": 0, "nodeName": "test_parse_args", "type": "Callable[[], Any]"}, {"lineNumber": 112, "col_offset": 0, "nodeName": "test_make_promise_schema", "type": "Callable[[], Any]"}, {"lineNumber": 118, "col_offset": 0, "nodeName": "test_validate_promise", "type": "Callable[[], Any]"}, {"lineNumber": 125, "col_offset": 0, "nodeName": "test_fill_validate_promise", "type": "Callable[[], Any]"}, {"lineNumber": 131, "col_offset": 0, "nodeName": "test_fill_invalidate_promise", "type": "Callable[[], Any]"}, {"lineNumber": 140, "col_offset": 0, "nodeName": "test_create_registry", "type": "Callable[[], Any]"}, {"lineNumber": 152, "col_offset": 0, "nodeName": "test_make_from_config_no_schema", "type": "Callable[[], Any]"}, {"lineNumber": 162, "col_offset": 0, "nodeName": "test_make_from_config_base_schema", "type": "Callable[[], Any]"}, {"lineNumber": 254, "col_offset": 0, "nodeName": "test_read_config", "type": "Callable[[], Any]"}, {"lineNumber": 262, "col_offset": 0, "nodeName": "test_optimizer_config", "type": "Callable[[], Any]"}, {"lineNumber": 269, "col_offset": 0, "nodeName": "test_config_to_str", "type": "Callable[[], Any]"}, {"lineNumber": 274, "col_offset": 0, "nodeName": "test_validation_custom_types", "type": "Callable[[], Any]"}, {"lineNumber": 11, "col_offset": 18, "nodeName": "registry", "type": "Type[thinc._registry.registry]"}, {"lineNumber": 15, "col_offset": 22, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 23, "col_offset": 21, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 80, "col_offset": 54, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 87, "col_offset": 0, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 89, "col_offset": 0, "nodeName": "ok_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 90, "col_offset": 0, "nodeName": "bad_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 92, "col_offset": 0, "nodeName": "worst_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 11, "col_offset": 18, "nodeName": "_registry", "type": "module"}, {"lineNumber": 12, "col_offset": 4, "nodeName": "cats", "type": "Any"}, {"lineNumber": 16, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 17, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 24, "col_offset": 14, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "optional", "type": "str"}, {"lineNumber": 25, "col_offset": 14, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "outer_opt", "type": "str"}, {"lineNumber": 33, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "level2_opt", "type": "DefaultsSchema"}, {"lineNumber": 36, "col_offset": 16, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "invalid_config", "type": "Dict[str, Union[str, int]]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "invalid_config", "type": "Dict[str, int]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "valid_config", "type": "Dict[str, int]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "invalid_config", "type": "Dict[str, str]"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "valid_config", "type": "Dict[str, Union[Dict[str, int], int]]"}, {"lineNumber": 81, "col_offset": 7, "nodeName": "evil", "type": "Any"}, {"lineNumber": 102, "col_offset": 4, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "schema", "type": "Any"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 163, "col_offset": 28, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 166, "col_offset": 25, "nodeName": "BaseModel", "type": "Any"}, {"lineNumber": 173, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 255, "col_offset": 4, "nodeName": "byte_string", "type": "bytes"}, {"lineNumber": 256, "col_offset": 4, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 263, "col_offset": 4, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 264, "col_offset": 4, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 265, "col_offset": 4, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 270, "col_offset": 4, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 284, "col_offset": 4, "nodeName": "cfg", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 286, "col_offset": 4, "nodeName": "cfg", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 289, "col_offset": 4, "nodeName": "cfg", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 11, "col_offset": 18, "nodeName": "thinc", "type": "module"}, {"lineNumber": 12, "col_offset": 11, "nodeName": "create", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "extra", "type": "str"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "extra", "type": "str"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 41, "col_offset": 7, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 41, "col_offset": 11, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 41, "col_offset": 41, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 41, "col_offset": 56, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 42, "col_offset": 16, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "simple_config", "type": "Dict[str, int]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 60, "col_offset": 16, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 60, "col_offset": 46, "nodeName": "valid_config", "type": "Dict[str, int]"}, {"lineNumber": 60, "col_offset": 60, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "validation", "type": "Dict[Any, Any]"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 70, "col_offset": 55, "nodeName": "valid_config", "type": "Dict[str, Union[Dict[str, int], int]]"}, {"lineNumber": 70, "col_offset": 69, "nodeName": "ComplexSchema", "type": "Type[ComplexSchema]"}, {"lineNumber": 80, "col_offset": 20, "nodeName": "StrictBool", "type": "Any"}, {"lineNumber": 80, "col_offset": 38, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 96, "col_offset": 11, "nodeName": "is_promise", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 96, "col_offset": 34, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "get_constructor", "type": "Callable[[Any, Dict[str, Any]], Callable[..., Any]]"}, {"lineNumber": 102, "col_offset": 39, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 103, "col_offset": 11, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 103, "col_offset": 19, "nodeName": "catsie_v1", "type": "Any"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "args", "type": "List[Any]"}, {"lineNumber": 107, "col_offset": 10, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 107, "col_offset": 19, "nodeName": "parse_args", "type": "Callable[[Any, Dict[str, Any]], Tuple[List[Any], Dict[str, Any]]]"}, {"lineNumber": 107, "col_offset": 42, "nodeName": "bad_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 108, "col_offset": 11, "nodeName": "args", "type": "List[Any]"}, {"lineNumber": 109, "col_offset": 11, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 113, "col_offset": 13, "nodeName": "make_promise_schema", "type": "Callable[[Any, Dict[str, Any]], Any]"}, {"lineNumber": 113, "col_offset": 45, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 114, "col_offset": 21, "nodeName": "__fields__", "type": "Any"}, {"lineNumber": 115, "col_offset": 21, "nodeName": "__fields__", "type": "Any"}, {"lineNumber": 119, "col_offset": 41, "nodeName": "good_catsie", "type": "Dict[str, Union[bool, str]]"}, {"lineNumber": 120, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 120, "col_offset": 24, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 120, "col_offset": 54, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 120, "col_offset": 62, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 121, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 121, "col_offset": 21, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 122, "col_offset": 11, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 127, "col_offset": 4, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 127, "col_offset": 54, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 127, "col_offset": 62, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "create", "type": "Callable[..., None]"}, {"lineNumber": 144, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 144, "col_offset": 19, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 154, "col_offset": 13, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 154, "col_offset": 42, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, str]], int]]"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 167, "col_offset": 13, "nodeName": "PositiveInt", "type": "Any"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 174, "col_offset": 33, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 255, "col_offset": 18, "nodeName": "encode", "type": "Callable[..., bytes]"}, {"lineNumber": 256, "col_offset": 10, "nodeName": "from_bytes", "type": "Callable"}, {"lineNumber": 256, "col_offset": 30, "nodeName": "byte_string", "type": "bytes"}, {"lineNumber": 263, "col_offset": 10, "nodeName": "from_str", "type": "Callable"}, {"lineNumber": 263, "col_offset": 28, "nodeName": "OPTIMIZER_CFG", "type": "str"}, {"lineNumber": 264, "col_offset": 13, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 264, "col_offset": 42, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 265, "col_offset": 16, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 266, "col_offset": 11, "nodeName": "b1", "type": "Any"}, {"lineNumber": 270, "col_offset": 10, "nodeName": "from_str", "type": "Callable"}, {"lineNumber": 270, "col_offset": 28, "nodeName": "OPTIMIZER_CFG", "type": "str"}, {"lineNumber": 282, "col_offset": 4, "nodeName": "create", "type": "Callable[..., None]"}, {"lineNumber": 283, "col_offset": 38, "nodeName": "complex_args", "type": "Callable[..., Any]"}, {"lineNumber": 285, "col_offset": 4, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 12, "col_offset": 11, "nodeName": "catalogue", "type": "Any"}, {"lineNumber": 41, "col_offset": 11, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 48, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 48, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 49, "col_offset": 45, "nodeName": "invalid_config", "type": "Dict[str, Union[str, int]]"}, {"lineNumber": 49, "col_offset": 61, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 54, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 54, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 55, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 55, "col_offset": 45, "nodeName": "invalid_config", "type": "Dict[str, int]"}, {"lineNumber": 55, "col_offset": 61, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 60, "col_offset": 16, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 61, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 62, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 64, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "f", "type": "Dict[Any, Any]"}, {"lineNumber": 65, "col_offset": 11, "nodeName": "v", "type": "Dict[Any, Any]"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 65, "col_offset": 45, "nodeName": "invalid_config", "type": "Dict[str, str]"}, {"lineNumber": 65, "col_offset": 61, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 71, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 96, "col_offset": 11, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "is_promise", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 98, "col_offset": 15, "nodeName": "is_promise", "type": "Callable[[Any, Any], bool]"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 107, "col_offset": 19, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 113, "col_offset": 13, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 114, "col_offset": 21, "nodeName": "schema", "type": "Any"}, {"lineNumber": 115, "col_offset": 21, "nodeName": "schema", "type": "Any"}, {"lineNumber": 120, "col_offset": 24, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 133, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 133, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 134, "col_offset": 28, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 134, "col_offset": 58, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 134, "col_offset": 66, "nodeName": "HelloIntsSchema", "type": "Type[HelloIntsSchema]"}, {"lineNumber": 135, "col_offset": 4, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 136, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 136, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "validated", "type": "Dict[Any, Any]"}, {"lineNumber": 137, "col_offset": 28, "nodeName": "fill_and_validate", "type": "Callable[[Any, Any, Any], Tuple[Dict[Any, Any], Dict[Any, Any]]]"}, {"lineNumber": 137, "col_offset": 58, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Union[bool, str]], int]]"}, {"lineNumber": 137, "col_offset": 66, "nodeName": "DefaultsSchema", "type": "Type[DefaultsSchema]"}, {"lineNumber": 141, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 141, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "create", "type": "Callable[..., None]"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 154, "col_offset": 13, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 155, "col_offset": 11, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 156, "col_offset": 11, "nodeName": "result", "type": "Dict[str, Any]"}, {"lineNumber": 157, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 157, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 159, "col_offset": 37, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, str]], int]]"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "extra", "type": "str"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 174, "col_offset": 53, "nodeName": "TestBaseSchema", "type": "Type[Any]"}, {"lineNumber": 176, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 176, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 178, "col_offset": 37, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 180, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 180, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 182, "col_offset": 37, "nodeName": "config", "type": "Dict[str, Union[Dict[str, Dict[str, Union[bool, str]]], int]]"}, {"lineNumber": 255, "col_offset": 18, "nodeName": "EXAMPLE_CONFIG", "type": "str"}, {"lineNumber": 264, "col_offset": 13, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 266, "col_offset": 11, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 271, "col_offset": 11, "nodeName": "strip", "type": "Callable[..., str]"}, {"lineNumber": 271, "col_offset": 35, "nodeName": "strip", "type": "Callable[..., str]"}, {"lineNumber": 282, "col_offset": 4, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 283, "col_offset": 4, "nodeName": "complex", "type": "Any"}, {"lineNumber": 285, "col_offset": 4, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 285, "col_offset": 44, "nodeName": "cfg", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 287, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 287, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 290, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 290, "col_offset": 23, "nodeName": "ConfigValidationError", "type": "Type[thinc._registry.ConfigValidationError]"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "make_from_config", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 48, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 54, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 64, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 75, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 98, "col_offset": 15, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 128, "col_offset": 11, "nodeName": "filled", "type": "Dict[Any, Any]"}, {"lineNumber": 133, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 134, "col_offset": 28, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 136, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 137, "col_offset": 28, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 141, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 157, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 176, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 178, "col_offset": 57, "nodeName": "TestBaseSchema", "type": "Type[Any]"}, {"lineNumber": 180, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 182, "col_offset": 57, "nodeName": "TestBaseSchema", "type": "Type[Any]"}, {"lineNumber": 256, "col_offset": 10, "nodeName": "Config", "type": "Type[thinc.config.Config]"}, {"lineNumber": 263, "col_offset": 10, "nodeName": "Config", "type": "Type[thinc.config.Config]"}, {"lineNumber": 270, "col_offset": 10, "nodeName": "Config", "type": "Type[thinc.config.Config]"}, {"lineNumber": 271, "col_offset": 35, "nodeName": "OPTIMIZER_CFG", "type": "str"}, {"lineNumber": 278, "col_offset": 19, "nodeName": "constr", "type": "Any"}, {"lineNumber": 283, "col_offset": 4, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 287, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 288, "col_offset": 48, "nodeName": "cfg", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 290, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "my_registry", "type": "Type[my_registry]"}, {"lineNumber": 291, "col_offset": 48, "nodeName": "cfg", "type": "Dict[str, Union[str, int, float]]"}, {"lineNumber": 257, "col_offset": 11, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 258, "col_offset": 11, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 271, "col_offset": 11, "nodeName": "to_str", "type": "Callable[[], str]"}, {"lineNumber": 271, "col_offset": 11, "nodeName": "cfg", "type": "thinc.config.Config"}, {"lineNumber": 259, "col_offset": 11, "nodeName": "cfg", "type": "thinc.config.Config"}]