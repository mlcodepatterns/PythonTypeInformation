[{"lineNumber": 8, "col_offset": 0, "nodeName": "make_tempdir", "type": "Callable[[], Any]"}, {"lineNumber": 15, "col_offset": 0, "nodeName": "get_model", "type": "Callable[..., Any]"}, {"lineNumber": 24, "col_offset": 0, "nodeName": "get_shape", "type": "Callable[[Any], Any]"}, {"lineNumber": 29, "col_offset": 0, "nodeName": "get_data_checker", "type": "Callable[[Any], Any]"}, {"lineNumber": 44, "col_offset": 0, "nodeName": "assert_arrays_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 51, "col_offset": 0, "nodeName": "assert_lists_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 60, "col_offset": 0, "nodeName": "assert_raggeds_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 68, "col_offset": 0, "nodeName": "assert_paddeds_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 80, "col_offset": 0, "nodeName": "assert_padded_data_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 84, "col_offset": 0, "nodeName": "assert_ragged_data_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 10, "col_offset": 4, "nodeName": "d", "type": "pathlib.Path"}, {"lineNumber": 15, "col_offset": 29, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 16, "col_offset": 19, "nodeName": "W_b_input", "type": "Any"}, {"lineNumber": 17, "col_offset": 20, "nodeName": "shape", "type": "Any"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "model", "type": "Any"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "model", "type": "Any"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "W_b_input", "type": "Any"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "Path", "type": "Type[pathlib.Path]"}, {"lineNumber": 11, "col_offset": 10, "nodeName": "d", "type": "pathlib.Path"}, {"lineNumber": 12, "col_offset": 4, "nodeName": "rmtree", "type": "Callable[..., None]"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "W", "type": "Any"}, {"lineNumber": 16, "col_offset": 7, "nodeName": "b", "type": "Any"}, {"lineNumber": 16, "col_offset": 10, "nodeName": "input_", "type": "Any"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "nr_out", "type": "Any"}, {"lineNumber": 17, "col_offset": 12, "nodeName": "nr_in", "type": "Any"}, {"lineNumber": 17, "col_offset": 20, "nodeName": "W", "type": "Any"}, {"lineNumber": 18, "col_offset": 12, "nodeName": "cls", "type": "Any"}, {"lineNumber": 18, "col_offset": 16, "nodeName": "nr_out", "type": "Any"}, {"lineNumber": 18, "col_offset": 24, "nodeName": "nr_in", "type": "Any"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "set_param", "type": "Any"}, {"lineNumber": 19, "col_offset": 25, "nodeName": "W", "type": "Any"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "set_param", "type": "Any"}, {"lineNumber": 20, "col_offset": 25, "nodeName": "b", "type": "Any"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "W", "type": "Any"}, {"lineNumber": 25, "col_offset": 7, "nodeName": "b", "type": "Any"}, {"lineNumber": 25, "col_offset": 10, "nodeName": "input_", "type": "Any"}, {"lineNumber": 30, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 30, "col_offset": 18, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 30, "col_offset": 26, "nodeName": "Ragged", "type": "Type[thinc.types.Ragged]"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "assert_raggeds_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 45, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 52, "col_offset": 22, "nodeName": "X", "type": "Any"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 53, "col_offset": 22, "nodeName": "Y", "type": "Any"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 55, "col_offset": 11, "nodeName": "y", "type": "Any"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 55, "col_offset": 20, "nodeName": "X", "type": "Any"}, {"lineNumber": 55, "col_offset": 23, "nodeName": "Y", "type": "Any"}, {"lineNumber": 61, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 61, "col_offset": 22, "nodeName": "X", "type": "thinc.types.Ragged"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "Ragged", "type": "Type[thinc.types.Ragged]"}, {"lineNumber": 62, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "Y", "type": "thinc.types.Ragged"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "Ragged", "type": "Type[thinc.types.Ragged]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "assert_arrays_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "lengths", "type": "thinc.types.Array1d"}, {"lineNumber": 63, "col_offset": 35, "nodeName": "lengths", "type": "thinc.types.Array1d"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "assert_arrays_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "data", "type": "thinc.types.Array2d"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "data", "type": "thinc.types.Array2d"}, {"lineNumber": 69, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 69, "col_offset": 22, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 69, "col_offset": 25, "nodeName": "Padded", "type": "Type[thinc.types.Padded]"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 70, "col_offset": 22, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "Padded", "type": "Type[thinc.types.Padded]"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "assert_arrays_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 24, "nodeName": "size_at_t", "type": "thinc.types.Array1d"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "size_at_t", "type": "thinc.types.Array1d"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "lengths", "type": "List[int]"}, {"lineNumber": 72, "col_offset": 24, "nodeName": "lengths", "type": "List[int]"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "indices", "type": "List[int]"}, {"lineNumber": 73, "col_offset": 24, "nodeName": "indices", "type": "List[int]"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 74, "col_offset": 27, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 81, "col_offset": 11, "nodeName": "assert_paddeds_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "assert_raggeds_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 10, "col_offset": 13, "nodeName": "mkdtemp", "type": "Callable"}, {"lineNumber": 12, "col_offset": 4, "nodeName": "shutil", "type": "module"}, {"lineNumber": 12, "col_offset": 18, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 12, "col_offset": 22, "nodeName": "d", "type": "pathlib.Path"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "model", "type": "Any"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "model", "type": "Any"}, {"lineNumber": 26, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 26, "col_offset": 28, "nodeName": "shape", "type": "Any"}, {"lineNumber": 26, "col_offset": 40, "nodeName": "shape", "type": "Any"}, {"lineNumber": 32, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 32, "col_offset": 28, "nodeName": "Padded", "type": "Type[thinc.types.Padded]"}, {"lineNumber": 33, "col_offset": 15, "nodeName": "assert_paddeds_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "X", "type": "Any"}, {"lineNumber": 45, "col_offset": 22, "nodeName": "Y", "type": "Any"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 54, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 54, "col_offset": 15, "nodeName": "X", "type": "Any"}, {"lineNumber": 54, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "Y", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "assert_arrays_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 56, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 56, "col_offset": 31, "nodeName": "y", "type": "Any"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "X", "type": "thinc.types.Ragged"}, {"lineNumber": 63, "col_offset": 35, "nodeName": "Y", "type": "thinc.types.Ragged"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "X", "type": "thinc.types.Ragged"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "Y", "type": "thinc.types.Ragged"}, {"lineNumber": 71, "col_offset": 24, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 72, "col_offset": 24, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 73, "col_offset": 24, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "data", "type": "thinc.types.Array3d"}, {"lineNumber": 74, "col_offset": 27, "nodeName": "data", "type": "thinc.types.Array3d"}, {"lineNumber": 75, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 75, "col_offset": 30, "nodeName": "shape", "type": "Any"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 76, "col_offset": 30, "nodeName": "shape", "type": "Any"}, {"lineNumber": 81, "col_offset": 32, "nodeName": "Padded", "type": "Type[thinc.types.Padded]"}, {"lineNumber": 81, "col_offset": 44, "nodeName": "Padded", "type": "Type[thinc.types.Padded]"}, {"lineNumber": 85, "col_offset": 32, "nodeName": "Ragged", "type": "Type[thinc.types.Ragged]"}, {"lineNumber": 85, "col_offset": 44, "nodeName": "Ragged", "type": "Type[thinc.types.Ragged]"}, {"lineNumber": 10, "col_offset": 13, "nodeName": "tempfile", "type": "module"}, {"lineNumber": 26, "col_offset": 11, "nodeName": "input_", "type": "Any"}, {"lineNumber": 26, "col_offset": 28, "nodeName": "W", "type": "Any"}, {"lineNumber": 26, "col_offset": 40, "nodeName": "W", "type": "Any"}, {"lineNumber": 34, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 34, "col_offset": 28, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "assert_lists_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "X", "type": "Any"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "Y", "type": "Any"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 74, "col_offset": 27, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 75, "col_offset": 11, "nodeName": "data", "type": "thinc.types.Array3d"}, {"lineNumber": 75, "col_offset": 30, "nodeName": "data", "type": "thinc.types.Array3d"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "data", "type": "thinc.types.Array3d"}, {"lineNumber": 76, "col_offset": 30, "nodeName": "data", "type": "thinc.types.Array3d"}, {"lineNumber": 81, "col_offset": 40, "nodeName": "X", "type": "Any"}, {"lineNumber": 81, "col_offset": 52, "nodeName": "Y", "type": "Any"}, {"lineNumber": 85, "col_offset": 40, "nodeName": "X", "type": "Any"}, {"lineNumber": 85, "col_offset": 52, "nodeName": "Y", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "assert_padded_data_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 75, "col_offset": 11, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 75, "col_offset": 30, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 76, "col_offset": 11, "nodeName": "X", "type": "thinc.types.Padded"}, {"lineNumber": 76, "col_offset": 30, "nodeName": "Y", "type": "thinc.types.Padded"}, {"lineNumber": 36, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 36, "col_offset": 28, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "assert_ragged_data_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 41, "col_offset": 15, "nodeName": "assert_arrays_match", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 36, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 36, "col_offset": 43, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 38, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 38, "col_offset": 28, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 38, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 38, "col_offset": 43, "nodeName": "inputs", "type": "Any"}]