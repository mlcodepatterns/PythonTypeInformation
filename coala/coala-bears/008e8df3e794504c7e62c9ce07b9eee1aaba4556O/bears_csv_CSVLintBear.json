[{"lineNumber": 14, "col_offset": 4, "nodeName": "LANGUAGES", "type": "Set[str]"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "REQUIREMENTS", "type": "Set[Any]"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "AUTHORS", "type": "Set[str]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "AUTHORS_EMAILS", "type": "Set[str]"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "LICENSE", "type": "str"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "CAN_DETECT", "type": "Set[str]"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "ASCIINEMA_URL", "type": "str"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "regex", "type": "Pattern[str]"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "severity_map", "type": "Dict[str, Any]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "message_dict", "type": "Dict[str, str]"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "compile", "type": "Callable"}, {"lineNumber": 26, "col_offset": 30, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 27, "col_offset": 23, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 28, "col_offset": 22, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 30, "col_offset": 21, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 31, "col_offset": 23, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 32, "col_offset": 26, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 33, "col_offset": 22, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 34, "col_offset": 23, "nodeName": "MAJOR", "type": "Any"}, {"lineNumber": 35, "col_offset": 23, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 37, "col_offset": 27, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 40, "col_offset": 31, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 42, "col_offset": 33, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 43, "col_offset": 21, "nodeName": "NORMAL", "type": "Any"}, {"lineNumber": 44, "col_offset": 30, "nodeName": "INFO", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "INFO", "type": "Any"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "match", "type": "Match[Any]"}, {"lineNumber": 15, "col_offset": 20, "nodeName": "GemRequirement", "type": "Any"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "re", "type": "module"}, {"lineNumber": 26, "col_offset": 30, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 27, "col_offset": 23, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 28, "col_offset": 22, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 30, "col_offset": 21, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 31, "col_offset": 23, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 32, "col_offset": 26, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 33, "col_offset": 22, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 34, "col_offset": 23, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 35, "col_offset": 23, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 37, "col_offset": 27, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 40, "col_offset": 31, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 42, "col_offset": 33, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 43, "col_offset": 21, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 44, "col_offset": 30, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 45, "col_offset": 26, "nodeName": "RESULT_SEVERITY", "type": "Any"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "filename", "type": "Any"}, {"lineNumber": 88, "col_offset": 21, "nodeName": "finditer", "type": "Callable"}, {"lineNumber": 88, "col_offset": 33, "nodeName": "regex", "type": "Any"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "groups", "type": "Dict[str, Any]"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "result_message", "type": "str"}, {"lineNumber": 88, "col_offset": 21, "nodeName": "re", "type": "module"}, {"lineNumber": 88, "col_offset": 33, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 45, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 88, "col_offset": 49, "nodeName": "output", "type": "Any"}, {"lineNumber": 89, "col_offset": 21, "nodeName": "groupdict", "type": "Callable"}, {"lineNumber": 89, "col_offset": 21, "nodeName": "match", "type": "Match[Any]"}, {"lineNumber": 92, "col_offset": 18, "nodeName": "_convert_output_regex_match_to_result", "type": "Any"}, {"lineNumber": 93, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 94, "col_offset": 16, "nodeName": "match", "type": "Match[Any]"}, {"lineNumber": 94, "col_offset": 23, "nodeName": "filename", "type": "Any"}, {"lineNumber": 90, "col_offset": 56, "nodeName": "groups", "type": "Dict[str, Any]"}, {"lineNumber": 92, "col_offset": 18, "nodeName": "self", "type": "Any"}, {"lineNumber": 94, "col_offset": 46, "nodeName": "severity_map", "type": "Any"}, {"lineNumber": 94, "col_offset": 46, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 31, "nodeName": "result_message", "type": "str"}, {"lineNumber": 95, "col_offset": 31, "nodeName": "message_dict", "type": "Any"}, {"lineNumber": 95, "col_offset": 31, "nodeName": "self", "type": "Any"}, {"lineNumber": 95, "col_offset": 49, "nodeName": "groups", "type": "Dict[str, Any]"}]