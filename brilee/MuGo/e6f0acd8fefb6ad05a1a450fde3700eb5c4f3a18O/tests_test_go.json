[{"lineNumber": 16, "col_offset": 0, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 16, "col_offset": 5, "nodeName": "parse_coords", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "test_load_board", "type": "Callable[[Any], Any]"}, {"lineNumber": 24, "col_offset": 4, "nodeName": "test_parsing", "type": "Callable[[Any], Any]"}, {"lineNumber": 27, "col_offset": 4, "nodeName": "test_neighbors", "type": "Callable[[Any], Any]"}, {"lineNumber": 36, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "test_flood_fill", "type": "Callable[[Any], Any]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "test_find_liberties", "type": "Callable[[Any], Any]"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "test_deduce_groups", "type": "Callable[[Any], Any]"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "test_update_groups", "type": "Callable[[Any], Any]"}, {"lineNumber": 16, "col_offset": 5, "nodeName": "go", "type": "module"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 36, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "corner", "type": "Optional[int]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "neighbors", "type": "List[str]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "side", "type": "Optional[int]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "side_neighbors", "type": "List[str]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "stones", "type": "Set[Optional[int]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "expected_liberties", "type": "Set[Optional[int]]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "actual_liberties", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "actual_groups", "type": "Tuple[Any, Any]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "updated_board", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 21, "col_offset": 25, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 21, "col_offset": 41, "nodeName": "MANUAL_EMPTY_BOARD", "type": "str"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 25, "col_offset": 46, "nodeName": "W", "type": "int"}, {"lineNumber": 28, "col_offset": 17, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 38, "col_offset": 16, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "actual_board", "type": "Any"}, {"lineNumber": 60, "col_offset": 22, "nodeName": "_", "type": "Any"}, {"lineNumber": 60, "col_offset": 26, "nodeName": "flood_fill", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 60, "col_offset": 40, "nodeName": "board", "type": "str"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 61, "col_offset": 41, "nodeName": "actual_board", "type": "Any"}, {"lineNumber": 64, "col_offset": 16, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 75, "col_offset": 17, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 77, "col_offset": 27, "nodeName": "find_liberties", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 77, "col_offset": 45, "nodeName": "board", "type": "str"}, {"lineNumber": 77, "col_offset": 52, "nodeName": "stones", "type": "Set[Optional[int]]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 25, "nodeName": "expected_liberties", "type": "Set[Optional[int]]"}, {"lineNumber": 78, "col_offset": 45, "nodeName": "actual_liberties", "type": "Any"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 108, "col_offset": 24, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "board", "type": "str"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 109, "col_offset": 25, "nodeName": "expected_groups", "type": "Tuple[List[go.Group], List[go.Group]]"}, {"lineNumber": 109, "col_offset": 42, "nodeName": "actual_groups", "type": "Tuple[Any, Any]"}, {"lineNumber": 112, "col_offset": 16, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "existing_X_groups", "type": "Any"}, {"lineNumber": 123, "col_offset": 27, "nodeName": "existing_x_groups", "type": "Any"}, {"lineNumber": 123, "col_offset": 47, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 123, "col_offset": 64, "nodeName": "board", "type": "str"}, {"lineNumber": 124, "col_offset": 24, "nodeName": "place_stone", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 124, "col_offset": 39, "nodeName": "board", "type": "str"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "updated_X_groups", "type": "List[Any]"}, {"lineNumber": 125, "col_offset": 26, "nodeName": "updated_x_groups", "type": "List[Any]"}, {"lineNumber": 125, "col_offset": 45, "nodeName": "update_groups", "type": "Callable[[Any, Any, Any, Any], Tuple[List[Any], List[Any]]]"}, {"lineNumber": 125, "col_offset": 62, "nodeName": "updated_board", "type": "Any"}, {"lineNumber": 125, "col_offset": 77, "nodeName": "existing_X_groups", "type": "Any"}, {"lineNumber": 125, "col_offset": 96, "nodeName": "existing_x_groups", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "updated_X_groups", "type": "List[Any]"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "existing_x_groups", "type": "Any"}, {"lineNumber": 130, "col_offset": 44, "nodeName": "updated_x_groups", "type": "List[Any]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 20, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 20, "col_offset": 29, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 20, "col_offset": 47, "nodeName": "W", "type": "int"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 21, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 22, "col_offset": 41, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 25, "col_offset": 25, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 25, "col_offset": 46, "nodeName": "go", "type": "module"}, {"lineNumber": 29, "col_offset": 21, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 29, "col_offset": 43, "nodeName": "c", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 33, "col_offset": 26, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 33, "col_offset": 48, "nodeName": "c", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 38, "col_offset": 16, "nodeName": "go", "type": "module"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 60, "col_offset": 26, "nodeName": "go", "type": "module"}, {"lineNumber": 60, "col_offset": 47, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 64, "col_offset": 16, "nodeName": "go", "type": "module"}, {"lineNumber": 77, "col_offset": 27, "nodeName": "go", "type": "module"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "go", "type": "module"}, {"lineNumber": 108, "col_offset": 24, "nodeName": "go", "type": "module"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 112, "col_offset": 16, "nodeName": "go", "type": "module"}, {"lineNumber": 123, "col_offset": 47, "nodeName": "go", "type": "module"}, {"lineNumber": 124, "col_offset": 24, "nodeName": "go", "type": "module"}, {"lineNumber": 124, "col_offset": 51, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 125, "col_offset": 45, "nodeName": "go", "type": "module"}, {"lineNumber": 125, "col_offset": 115, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 20, "col_offset": 29, "nodeName": "go", "type": "module"}, {"lineNumber": 20, "col_offset": 47, "nodeName": "go", "type": "module"}, {"lineNumber": 20, "col_offset": 55, "nodeName": "W", "type": "int"}, {"lineNumber": 22, "col_offset": 41, "nodeName": "go", "type": "module"}, {"lineNumber": 29, "col_offset": 21, "nodeName": "go", "type": "module"}, {"lineNumber": 29, "col_offset": 36, "nodeName": "c", "type": "Any"}, {"lineNumber": 29, "col_offset": 48, "nodeName": "neighbors", "type": "Callable[[Any], List[Any]]"}, {"lineNumber": 29, "col_offset": 61, "nodeName": "corner", "type": "Optional[int]"}, {"lineNumber": 33, "col_offset": 26, "nodeName": "go", "type": "module"}, {"lineNumber": 33, "col_offset": 41, "nodeName": "c", "type": "Any"}, {"lineNumber": 33, "col_offset": 53, "nodeName": "neighbors", "type": "Callable[[Any], List[Any]]"}, {"lineNumber": 33, "col_offset": 66, "nodeName": "side", "type": "Optional[int]"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 75, "col_offset": 32, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 76, "col_offset": 34, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 76, "col_offset": 44, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 76, "col_offset": 54, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 76, "col_offset": 64, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 126, "col_offset": 44, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 20, "col_offset": 55, "nodeName": "go", "type": "module"}, {"lineNumber": 22, "col_offset": 64, "nodeName": "N", "type": "int"}, {"lineNumber": 25, "col_offset": 34, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 25, "col_offset": 38, "nodeName": "N", "type": "int"}, {"lineNumber": 29, "col_offset": 48, "nodeName": "go", "type": "module"}, {"lineNumber": 30, "col_offset": 35, "nodeName": "n", "type": "str"}, {"lineNumber": 30, "col_offset": 40, "nodeName": "neighbors", "type": "List[str]"}, {"lineNumber": 33, "col_offset": 53, "nodeName": "go", "type": "module"}, {"lineNumber": 34, "col_offset": 35, "nodeName": "n", "type": "str"}, {"lineNumber": 34, "col_offset": 40, "nodeName": "side_neighbors", "type": "List[str]"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "go", "type": "module"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "go", "type": "module"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "go", "type": "module"}, {"lineNumber": 126, "col_offset": 44, "nodeName": "go", "type": "module"}, {"lineNumber": 22, "col_offset": 64, "nodeName": "go", "type": "module"}, {"lineNumber": 25, "col_offset": 38, "nodeName": "go", "type": "module"}, {"lineNumber": 30, "col_offset": 53, "nodeName": "isspace", "type": "Callable[[], bool]"}, {"lineNumber": 34, "col_offset": 58, "nodeName": "isspace", "type": "Callable[[], bool]"}, {"lineNumber": 94, "col_offset": 23, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 95, "col_offset": 26, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 98, "col_offset": 23, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 99, "col_offset": 26, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 103, "col_offset": 23, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 104, "col_offset": 26, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 127, "col_offset": 19, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 128, "col_offset": 22, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 30, "col_offset": 53, "nodeName": "n", "type": "str"}, {"lineNumber": 34, "col_offset": 58, "nodeName": "n", "type": "str"}, {"lineNumber": 94, "col_offset": 28, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 95, "col_offset": 31, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 95, "col_offset": 41, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 95, "col_offset": 51, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 98, "col_offset": 28, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 99, "col_offset": 41, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 99, "col_offset": 51, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 103, "col_offset": 28, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 103, "col_offset": 38, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 104, "col_offset": 31, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 104, "col_offset": 41, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 104, "col_offset": 51, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 127, "col_offset": 34, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 127, "col_offset": 44, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 128, "col_offset": 27, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 128, "col_offset": 37, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 128, "col_offset": 47, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}]