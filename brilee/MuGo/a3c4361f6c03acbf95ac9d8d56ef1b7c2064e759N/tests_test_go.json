[{"lineNumber": 27, "col_offset": 0, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 20, "col_offset": 0, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 26, "col_offset": 5, "nodeName": "parse_coords", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 30, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "test_load_board", "type": "Callable[[Any], Any]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "test_parsing", "type": "Callable[[Any], Any]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "test_neighbors", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "test_flood_fill", "type": "Callable[[Any], Any]"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "test_find_liberties", "type": "Callable[[Any], Any]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "test_deduce_groups", "type": "Callable[[Any], Any]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "test_update_groups", "type": "Callable[[Any], Any]"}, {"lineNumber": 95, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "test_eyeish", "type": "Callable[[Any], Any]"}, {"lineNumber": 102, "col_offset": 4, "nodeName": "test_likely_eye", "type": "Callable[[Any], Any]"}, {"lineNumber": 114, "col_offset": 19, "nodeName": "GoPositionTestCase", "type": "Any"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "test_move", "type": "Callable[[Any], Any]"}, {"lineNumber": 160, "col_offset": 4, "nodeName": "test_move_with_capture", "type": "Callable[[Any], Any]"}, {"lineNumber": 198, "col_offset": 4, "nodeName": "test_ko_move", "type": "Callable[[Any], Any]"}, {"lineNumber": 233, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 234, "col_offset": 4, "nodeName": "test_scoring", "type": "Callable[[Any], Any]"}, {"lineNumber": 6, "col_offset": 0, "nodeName": "set_board_size", "type": "Callable[[Any], None]"}, {"lineNumber": 21, "col_offset": 13, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 26, "col_offset": 5, "nodeName": "go", "type": "module"}, {"lineNumber": 30, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 50, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 95, "col_offset": 22, "nodeName": "unittest", "type": "module"}, {"lineNumber": 233, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 6, "col_offset": 0, "nodeName": "go", "type": "module"}, {"lineNumber": 20, "col_offset": 18, "nodeName": "N", "type": "Any"}, {"lineNumber": 21, "col_offset": 13, "nodeName": "go", "type": "module"}, {"lineNumber": 28, "col_offset": 11, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "corner", "type": "Optional[int]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "neighbors", "type": "List[str]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "side", "type": "Optional[int]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "side_neighbors", "type": "List[str]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "stones", "type": "Set[Optional[int]]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "expected_liberties", "type": "Set[Optional[int]]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "actual_liberties", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "actual_groups", "type": "Tuple[Any, Any]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "updated_board", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "actual_position2", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 257, "col_offset": 12, "nodeName": "expected_score", "type": "float"}, {"lineNumber": 282, "col_offset": 12, "nodeName": "expected_score", "type": "float"}, {"lineNumber": 20, "col_offset": 18, "nodeName": "go", "type": "module"}, {"lineNumber": 24, "col_offset": 6, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "map", "type": "Callable"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 33, "col_offset": 25, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 33, "col_offset": 41, "nodeName": "MANUAL_EMPTY_BOARD", "type": "str"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 37, "col_offset": 35, "nodeName": "W", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 38, "col_offset": 52, "nodeName": "W", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 17, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 15, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "actual_board", "type": "Any"}, {"lineNumber": 56, "col_offset": 22, "nodeName": "_", "type": "Any"}, {"lineNumber": 56, "col_offset": 26, "nodeName": "flood_fill", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 56, "col_offset": 40, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 25, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 57, "col_offset": 41, "nodeName": "actual_board", "type": "Any"}, {"lineNumber": 60, "col_offset": 17, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 61, "col_offset": 29, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 62, "col_offset": 27, "nodeName": "find_liberties", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 62, "col_offset": 45, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 62, "col_offset": 57, "nodeName": "stones", "type": "Set[Optional[int]]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "expected_liberties", "type": "Set[Optional[int]]"}, {"lineNumber": 63, "col_offset": 45, "nodeName": "actual_liberties", "type": "Any"}, {"lineNumber": 82, "col_offset": 24, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 82, "col_offset": 41, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "expected_groups", "type": "Tuple[List[go.Group], List[go.Group]]"}, {"lineNumber": 83, "col_offset": 42, "nodeName": "actual_groups", "type": "Tuple[Any, Any]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "existing_X_groups", "type": "Any"}, {"lineNumber": 86, "col_offset": 27, "nodeName": "existing_O_groups", "type": "Any"}, {"lineNumber": 86, "col_offset": 47, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 86, "col_offset": 64, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "place_stone", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 87, "col_offset": 39, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "updated_X_groups", "type": "List[Any]"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "updated_O_groups", "type": "List[Any]"}, {"lineNumber": 88, "col_offset": 45, "nodeName": "update_groups", "type": "Callable[[Any, Any, Any, Any], Tuple[List[Any], List[Any]]]"}, {"lineNumber": 88, "col_offset": 62, "nodeName": "updated_board", "type": "Any"}, {"lineNumber": 88, "col_offset": 77, "nodeName": "existing_X_groups", "type": "Any"}, {"lineNumber": 88, "col_offset": 96, "nodeName": "existing_O_groups", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "updated_X_groups", "type": "List[Any]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "existing_O_groups", "type": "Any"}, {"lineNumber": 93, "col_offset": 44, "nodeName": "updated_O_groups", "type": "List[Any]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 16, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 131, "col_offset": 28, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 142, "col_offset": 26, "nodeName": "update", "type": "Callable[[Any], Any]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "assertEqualPositions", "type": "Any"}, {"lineNumber": 143, "col_offset": 34, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 143, "col_offset": 51, "nodeName": "expected_position", "type": "go.Position"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 149, "col_offset": 29, "nodeName": "_replace", "type": "Callable"}, {"lineNumber": 157, "col_offset": 27, "nodeName": "update", "type": "Any"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "assertEqualPositions", "type": "Any"}, {"lineNumber": 158, "col_offset": 34, "nodeName": "actual_position2", "type": "Any"}, {"lineNumber": 158, "col_offset": 52, "nodeName": "expected_position2", "type": "go.Position"}, {"lineNumber": 161, "col_offset": 22, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 184, "col_offset": 28, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 195, "col_offset": 26, "nodeName": "update", "type": "Callable[[Any], Any]"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "assertEqualPositions", "type": "Any"}, {"lineNumber": 196, "col_offset": 34, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 196, "col_offset": 51, "nodeName": "expected_position", "type": "go.Position"}, {"lineNumber": 199, "col_offset": 22, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 203, "col_offset": 25, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 214, "col_offset": 25, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 218, "col_offset": 28, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 229, "col_offset": 26, "nodeName": "update", "type": "Callable[[Any], Any]"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "assertEqualPositions", "type": "Any"}, {"lineNumber": 231, "col_offset": 34, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 231, "col_offset": 51, "nodeName": "expected_position", "type": "go.Position"}, {"lineNumber": 235, "col_offset": 20, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 246, "col_offset": 23, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 258, "col_offset": 47, "nodeName": "expected_score", "type": "float"}, {"lineNumber": 260, "col_offset": 20, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 271, "col_offset": 23, "nodeName": "Position", "type": "Type[go.Position]"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 283, "col_offset": 47, "nodeName": "expected_score", "type": "float"}, {"lineNumber": 28, "col_offset": 23, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 32, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 32, "col_offset": 29, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 32, "col_offset": 47, "nodeName": "W", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 33, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 34, "col_offset": 41, "nodeName": "load_board", "type": "Callable[[Any], str]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 37, "col_offset": 35, "nodeName": "go", "type": "module"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "parse_sgf_coords", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 38, "col_offset": 52, "nodeName": "go", "type": "module"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 39, "col_offset": 35, "nodeName": "parse_sgf_coords", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 43, "col_offset": 21, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "c", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 44, "col_offset": 25, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 47, "col_offset": 26, "nodeName": "EMPTY_BOARD", "type": "str"}, {"lineNumber": 47, "col_offset": 48, "nodeName": "c", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "TestGoBoard"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 56, "col_offset": 26, "nodeName": "go", "type": "module"}, {"lineNumber": 56, "col_offset": 52, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 62, "col_offset": 27, "nodeName": "go", "type": "module"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 82, "col_offset": 24, "nodeName": "go", "type": "module"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 86, "col_offset": 47, "nodeName": "go", "type": "module"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "go", "type": "module"}, {"lineNumber": 87, "col_offset": 56, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 88, "col_offset": 45, "nodeName": "go", "type": "module"}, {"lineNumber": 88, "col_offset": 115, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "TestGroupHandling"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "is_eyeish", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 97, "col_offset": 38, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "is_eyeish", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 98, "col_offset": 38, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "is_eyeish", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 99, "col_offset": 38, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "is_eyeish", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 100, "col_offset": 38, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 103, "col_offset": 16, "nodeName": "go", "type": "module"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 109, "col_offset": 25, "nodeName": "is_likely_eye", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 109, "col_offset": 42, "nodeName": "board", "type": "str"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 110, "col_offset": 25, "nodeName": "is_likely_eye", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 110, "col_offset": 42, "nodeName": "board", "type": "str"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 111, "col_offset": 25, "nodeName": "is_likely_eye", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 111, "col_offset": 42, "nodeName": "board", "type": "str"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "self", "type": "TestEyeHandling"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "is_likely_eye", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 112, "col_offset": 42, "nodeName": "board", "type": "str"}, {"lineNumber": 116, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 117, "col_offset": 18, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 131, "col_offset": 28, "nodeName": "go", "type": "module"}, {"lineNumber": 132, "col_offset": 18, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 142, "col_offset": 26, "nodeName": "start_position", "type": "go.Position"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "self", "type": "TestPosition"}, {"lineNumber": 145, "col_offset": 26, "nodeName": "go", "type": "module"}, {"lineNumber": 149, "col_offset": 29, "nodeName": "expected_position", "type": "go.Position"}, {"lineNumber": 150, "col_offset": 18, "nodeName": "expected_board2", "type": "str"}, {"lineNumber": 157, "col_offset": 27, "nodeName": "actual_position", "type": "Any"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "self", "type": "TestPosition"}, {"lineNumber": 161, "col_offset": 22, "nodeName": "go", "type": "module"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 168, "col_offset": 18, "nodeName": "start_board", "type": "str"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 184, "col_offset": 28, "nodeName": "go", "type": "module"}, {"lineNumber": 185, "col_offset": 18, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 195, "col_offset": 26, "nodeName": "start_position", "type": "go.Position"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "self", "type": "TestPosition"}, {"lineNumber": 199, "col_offset": 22, "nodeName": "go", "type": "module"}, {"lineNumber": 203, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 204, "col_offset": 18, "nodeName": "start_board", "type": "str"}, {"lineNumber": 214, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 218, "col_offset": 28, "nodeName": "go", "type": "module"}, {"lineNumber": 219, "col_offset": 18, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 229, "col_offset": 26, "nodeName": "start_position", "type": "go.Position"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "self", "type": "TestPosition"}, {"lineNumber": 235, "col_offset": 20, "nodeName": "go", "type": "module"}, {"lineNumber": 246, "col_offset": 23, "nodeName": "go", "type": "module"}, {"lineNumber": 247, "col_offset": 22, "nodeName": "board", "type": "str"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "self", "type": "TestScoring"}, {"lineNumber": 258, "col_offset": 29, "nodeName": "score", "type": "Callable[[], Any]"}, {"lineNumber": 260, "col_offset": 20, "nodeName": "go", "type": "module"}, {"lineNumber": 271, "col_offset": 23, "nodeName": "go", "type": "module"}, {"lineNumber": 272, "col_offset": 22, "nodeName": "board", "type": "str"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "self", "type": "TestScoring"}, {"lineNumber": 283, "col_offset": 29, "nodeName": "score", "type": "Callable[[], Any]"}, {"lineNumber": 28, "col_offset": 23, "nodeName": "string", "type": "str"}, {"lineNumber": 32, "col_offset": 29, "nodeName": "go", "type": "module"}, {"lineNumber": 32, "col_offset": 47, "nodeName": "go", "type": "module"}, {"lineNumber": 32, "col_offset": 55, "nodeName": "W", "type": "Any"}, {"lineNumber": 34, "col_offset": 41, "nodeName": "go", "type": "module"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 39, "col_offset": 35, "nodeName": "go", "type": "module"}, {"lineNumber": 43, "col_offset": 21, "nodeName": "go", "type": "module"}, {"lineNumber": 43, "col_offset": 36, "nodeName": "c", "type": "Any"}, {"lineNumber": 43, "col_offset": 48, "nodeName": "neighbors", "type": "Callable[[Any], List[Any]]"}, {"lineNumber": 43, "col_offset": 61, "nodeName": "corner", "type": "Optional[int]"}, {"lineNumber": 47, "col_offset": 26, "nodeName": "go", "type": "module"}, {"lineNumber": 47, "col_offset": 41, "nodeName": "c", "type": "Any"}, {"lineNumber": 47, "col_offset": 53, "nodeName": "neighbors", "type": "Callable[[Any], List[Any]]"}, {"lineNumber": 47, "col_offset": 66, "nodeName": "side", "type": "Optional[int]"}, {"lineNumber": 55, "col_offset": 14, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 67, "col_offset": 12, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 89, "col_offset": 44, "nodeName": "Group", "type": "Type[go.Group]"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 97, "col_offset": 50, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 98, "col_offset": 50, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 99, "col_offset": 50, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 100, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 100, "col_offset": 50, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 108, "col_offset": 14, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 109, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 109, "col_offset": 49, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 110, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 110, "col_offset": 49, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 111, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 111, "col_offset": 49, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 112, "col_offset": 25, "nodeName": "go", "type": "module"}, {"lineNumber": 112, "col_offset": 49, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 121, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 121, "col_offset": 36, "nodeName": "TEST_BOARD", "type": "str"}, {"lineNumber": 130, "col_offset": 14, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 136, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 136, "col_offset": 36, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 138, "col_offset": 17, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 148, "col_offset": 14, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 152, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 152, "col_offset": 36, "nodeName": "expected_board2", "type": "str"}, {"lineNumber": 153, "col_offset": 17, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 154, "col_offset": 18, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 161, "col_offset": 36, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 172, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 172, "col_offset": 36, "nodeName": "start_board", "type": "str"}, {"lineNumber": 178, "col_offset": 39, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 189, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 189, "col_offset": 36, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 191, "col_offset": 17, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 202, "col_offset": 14, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 208, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 208, "col_offset": 36, "nodeName": "start_board", "type": "str"}, {"lineNumber": 217, "col_offset": 14, "nodeName": "EMPTY_ROW", "type": "str"}, {"lineNumber": 223, "col_offset": 19, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 223, "col_offset": 36, "nodeName": "expected_board", "type": "str"}, {"lineNumber": 224, "col_offset": 15, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 225, "col_offset": 17, "nodeName": "pc", "type": "Callable[[Any], Optional[int]]"}, {"lineNumber": 251, "col_offset": 23, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 251, "col_offset": 40, "nodeName": "board", "type": "str"}, {"lineNumber": 258, "col_offset": 29, "nodeName": "position", "type": "go.Position"}, {"lineNumber": 276, "col_offset": 23, "nodeName": "deduce_groups", "type": "Callable[[Any], Tuple[Any, Any]]"}, {"lineNumber": 276, "col_offset": 40, "nodeName": "board", "type": "str"}, {"lineNumber": 283, "col_offset": 29, "nodeName": "position", "type": "go.Position"}, {"lineNumber": 32, "col_offset": 55, "nodeName": "go", "type": "module"}, {"lineNumber": 34, "col_offset": 64, "nodeName": "N", "type": "Any"}, {"lineNumber": 43, "col_offset": 48, "nodeName": "go", "type": "module"}, {"lineNumber": 44, "col_offset": 35, "nodeName": "n", "type": "str"}, {"lineNumber": 44, "col_offset": 40, "nodeName": "neighbors", "type": "List[str]"}, {"lineNumber": 47, "col_offset": 53, "nodeName": "go", "type": "module"}, {"lineNumber": 48, "col_offset": 35, "nodeName": "n", "type": "str"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "side_neighbors", "type": "List[str]"}, {"lineNumber": 67, "col_offset": 12, "nodeName": "go", "type": "module"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "go", "type": "module"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "go", "type": "module"}, {"lineNumber": 89, "col_offset": 44, "nodeName": "go", "type": "module"}, {"lineNumber": 121, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 136, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 152, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 172, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 189, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 208, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 223, "col_offset": 19, "nodeName": "go", "type": "module"}, {"lineNumber": 251, "col_offset": 23, "nodeName": "go", "type": "module"}, {"lineNumber": 276, "col_offset": 23, "nodeName": "go", "type": "module"}, {"lineNumber": 34, "col_offset": 64, "nodeName": "go", "type": "module"}, {"lineNumber": 44, "col_offset": 53, "nodeName": "isspace", "type": "Callable[[], bool]"}, {"lineNumber": 48, "col_offset": 58, "nodeName": "isspace", "type": "Callable[[], bool]"}, {"lineNumber": 68, "col_offset": 23, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 73, "col_offset": 26, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 77, "col_offset": 23, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 78, "col_offset": 26, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 90, "col_offset": 19, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "pc_set", "type": "Callable[[Any], Any]"}, {"lineNumber": 44, "col_offset": 53, "nodeName": "n", "type": "str"}, {"lineNumber": 48, "col_offset": 58, "nodeName": "n", "type": "str"}]