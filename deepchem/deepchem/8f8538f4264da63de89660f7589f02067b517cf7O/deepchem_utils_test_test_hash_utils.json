[{"lineNumber": 5, "col_offset": 0, "nodeName": "random_string", "type": "Callable[..., Any]"}, {"lineNumber": 11, "col_offset": 20, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 11, "col_offset": 20, "nodeName": "unittest", "type": "module"}, {"lineNumber": 7, "col_offset": 5, "nodeName": "chars", "type": "None"}, {"lineNumber": 8, "col_offset": 4, "nodeName": "chars", "type": "List[str]"}, {"lineNumber": 9, "col_offset": 9, "nodeName": "join", "type": "Callable"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "power", "type": "int"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "power", "type": "int"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "size", "type": "int"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "feature_dict", "type": "Dict[int, str]"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "hash_function", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "hash_ecfp", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "vector", "type": "Any"}, {"lineNumber": 8, "col_offset": 12, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 9, "col_offset": 17, "nodeName": "choice", "type": "Any"}, {"lineNumber": 9, "col_offset": 34, "nodeName": "chars", "type": "List[str]"}, {"lineNumber": 9, "col_offset": 41, "nodeName": "length", "type": "int"}, {"lineNumber": 14, "col_offset": 10, "nodeName": "_", "type": "int"}, {"lineNumber": 23, "col_offset": 10, "nodeName": "_", "type": "int"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "hash_utils", "type": "module"}, {"lineNumber": 35, "col_offset": 13, "nodeName": "vectorize", "type": "Callable[..., Any]"}, {"lineNumber": 35, "col_offset": 34, "nodeName": "hash_function", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 35, "col_offset": 49, "nodeName": "feature_dict", "type": "Dict[int, str]"}, {"lineNumber": 35, "col_offset": 63, "nodeName": "size", "type": "int"}, {"lineNumber": 36, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 9, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 14, "col_offset": 15, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "string", "type": "str"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "string_hash", "type": "Any"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "string1", "type": "str"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "string2", "type": "str"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "pair_hash", "type": "Any"}, {"lineNumber": 35, "col_offset": 13, "nodeName": "hash_utils", "type": "module"}, {"lineNumber": 36, "col_offset": 11, "nodeName": "vector", "type": "Any"}, {"lineNumber": 36, "col_offset": 28, "nodeName": "size", "type": "int"}, {"lineNumber": 37, "col_offset": 11, "nodeName": "count_nonzero", "type": "Any"}, {"lineNumber": 37, "col_offset": 28, "nodeName": "vector", "type": "Any"}, {"lineNumber": 37, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 37, "col_offset": 43, "nodeName": "feature_dict", "type": "Dict[int, str]"}, {"lineNumber": 8, "col_offset": 17, "nodeName": "ascii_letters", "type": "str"}, {"lineNumber": 8, "col_offset": 40, "nodeName": "ascii_letters", "type": "str"}, {"lineNumber": 9, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 15, "col_offset": 17, "nodeName": "random_string", "type": "Callable[..., Any]"}, {"lineNumber": 16, "col_offset": 22, "nodeName": "hash_ecfp", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 16, "col_offset": 43, "nodeName": "string", "type": "str"}, {"lineNumber": 16, "col_offset": 51, "nodeName": "power", "type": "int"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 17, "col_offset": 30, "nodeName": "string_hash", "type": "Any"}, {"lineNumber": 17, "col_offset": 43, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "assertLess", "type": "Callable[..., None]"}, {"lineNumber": 18, "col_offset": 24, "nodeName": "string_hash", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "assertGreaterEqual", "type": "Callable[..., None]"}, {"lineNumber": 19, "col_offset": 32, "nodeName": "string_hash", "type": "Any"}, {"lineNumber": 24, "col_offset": 18, "nodeName": "random_string", "type": "Callable[..., Any]"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "random_string", "type": "Callable[..., Any]"}, {"lineNumber": 26, "col_offset": 20, "nodeName": "hash_ecfp_pair", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 26, "col_offset": 66, "nodeName": "power", "type": "int"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 27, "col_offset": 30, "nodeName": "pair_hash", "type": "Any"}, {"lineNumber": 27, "col_offset": 41, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "assertLess", "type": "Callable[..., None]"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "pair_hash", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "assertGreaterEqual", "type": "Callable[..., None]"}, {"lineNumber": 29, "col_offset": 32, "nodeName": "pair_hash", "type": "Any"}, {"lineNumber": 37, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 8, "col_offset": 17, "nodeName": "string", "type": "module"}, {"lineNumber": 8, "col_offset": 40, "nodeName": "string", "type": "module"}, {"lineNumber": 16, "col_offset": 22, "nodeName": "hash_utils", "type": "module"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "self", "type": "TestHashUtils"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "self", "type": "TestHashUtils"}, {"lineNumber": 18, "col_offset": 40, "nodeName": "power", "type": "int"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "TestHashUtils"}, {"lineNumber": 26, "col_offset": 20, "nodeName": "hash_utils", "type": "module"}, {"lineNumber": 26, "col_offset": 47, "nodeName": "string1", "type": "str"}, {"lineNumber": 26, "col_offset": 56, "nodeName": "string2", "type": "str"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "TestHashUtils"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "TestHashUtils"}, {"lineNumber": 28, "col_offset": 38, "nodeName": "power", "type": "int"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "TestHashUtils"}]