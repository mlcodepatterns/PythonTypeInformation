[{"lineNumber": 21, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 67, "col_offset": 33, "nodeName": "ComplexFeaturizer", "type": "Type[deepchem.feat.base_classes.ComplexFeaturizer]"}, {"lineNumber": 131, "col_offset": 31, "nodeName": "ComplexFeaturizer", "type": "Type[deepchem.feat.base_classes.ComplexFeaturizer]"}, {"lineNumber": 21, "col_offset": 9, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 21, "col_offset": 27, "nodeName": "__name__", "type": "str"}, {"lineNumber": 52, "col_offset": 2, "nodeName": "contacts", "type": "Any"}, {"lineNumber": 55, "col_offset": 2, "nodeName": "frag1_atoms", "type": "Set[int]"}, {"lineNumber": 57, "col_offset": 2, "nodeName": "frag2_atoms", "type": "Set[int]"}, {"lineNumber": 29, "col_offset": 29, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 21, "col_offset": 9, "nodeName": "logging", "type": "module"}, {"lineNumber": 29, "col_offset": 17, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 49, "col_offset": 5, "nodeName": "pairwise_distances", "type": "numpy.ndarray"}, {"lineNumber": 52, "col_offset": 13, "nodeName": "nonzero", "type": "Any"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 59, "col_offset": 20, "nodeName": "compute_all_ecfp", "type": "Callable[..., Dict[int, str]]"}, {"lineNumber": 61, "col_offset": 20, "nodeName": "compute_all_ecfp", "type": "Callable[..., Dict[int, str]]"}, {"lineNumber": 64, "col_offset": 10, "nodeName": "frag1_ecfp_dict", "type": "Dict[int, str]"}, {"lineNumber": 64, "col_offset": 27, "nodeName": "frag2_ecfp_dict", "type": "Dict[int, str]"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 92, "col_offset": 18, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "radius", "type": "int"}, {"lineNumber": 93, "col_offset": 18, "nodeName": "radius", "type": "int"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "size", "type": "int"}, {"lineNumber": 94, "col_offset": 16, "nodeName": "size", "type": "int"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "pairwise_features", "type": "List[numpy.ndarray]"}, {"lineNumber": 127, "col_offset": 4, "nodeName": "pairwise_features", "type": "Any"}, {"lineNumber": 128, "col_offset": 11, "nodeName": "pairwise_features", "type": "Any"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "radius", "type": "int"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "radius", "type": "int"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "size", "type": "int"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "size", "type": "int"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "box_width", "type": "float"}, {"lineNumber": 177, "col_offset": 21, "nodeName": "box_width", "type": "float"}, {"lineNumber": 178, "col_offset": 4, "nodeName": "voxel_width", "type": "float"}, {"lineNumber": 178, "col_offset": 23, "nodeName": "voxel_width", "type": "float"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "voxels_per_edge", "type": "int"}, {"lineNumber": 180, "col_offset": 4, "nodeName": "flatten", "type": "bool"}, {"lineNumber": 180, "col_offset": 19, "nodeName": "flatten", "type": "bool"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "pairwise_features", "type": "List[Any]"}, {"lineNumber": 199, "col_offset": 4, "nodeName": "centroid", "type": "numpy.ndarray"}, {"lineNumber": 223, "col_offset": 7, "nodeName": "flatten", "type": "bool"}, {"lineNumber": 52, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 52, "col_offset": 25, "nodeName": "pairwise_distances", "type": "numpy.ndarray"}, {"lineNumber": 52, "col_offset": 46, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 60, "col_offset": 6, "nodeName": "frag1", "type": "Tuple[Any, ...]"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "frag1_atoms", "type": "Set[int]"}, {"lineNumber": 60, "col_offset": 44, "nodeName": "ecfp_degree", "type": "int"}, {"lineNumber": 62, "col_offset": 6, "nodeName": "frag2", "type": "Tuple[Any, ...]"}, {"lineNumber": 62, "col_offset": 24, "nodeName": "frag2_atoms", "type": "Set[int]"}, {"lineNumber": 62, "col_offset": 44, "nodeName": "ecfp_degree", "type": "int"}, {"lineNumber": 81, "col_offset": 29, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 81, "col_offset": 50, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 81, "col_offset": 65, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "self", "type": "ContactCircularFingerprint"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "self", "type": "ContactCircularFingerprint"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "self", "type": "ContactCircularFingerprint"}, {"lineNumber": 106, "col_offset": 6, "nodeName": "fragments", "type": "List[Tuple[numpy.ndarray, Any]]"}, {"lineNumber": 108, "col_offset": 11, "nodeName": "MoleculeLoadException", "type": "Type[deepchem.utils.fragment_utils.MoleculeLoadException]"}, {"lineNumber": 113, "col_offset": 9, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 113, "col_offset": 16, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 113, "col_offset": 26, "nodeName": "combinations", "type": "Callable"}, {"lineNumber": 113, "col_offset": 49, "nodeName": "fragments", "type": "List[Tuple[numpy.ndarray, Any]]"}, {"lineNumber": 115, "col_offset": 6, "nodeName": "distances", "type": "numpy.ndarray"}, {"lineNumber": 125, "col_offset": 6, "nodeName": "pairwise_features", "type": "List[numpy.ndarray]"}, {"lineNumber": 125, "col_offset": 27, "nodeName": "vector", "type": "List[numpy.ndarray]"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 127, "col_offset": 39, "nodeName": "pairwise_features", "type": "List[numpy.ndarray]"}, {"lineNumber": 155, "col_offset": 24, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 178, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 179, "col_offset": 27, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 180, "col_offset": 4, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 192, "col_offset": 6, "nodeName": "fragments", "type": "List[Tuple[numpy.ndarray, Any]]"}, {"lineNumber": 194, "col_offset": 11, "nodeName": "MoleculeLoadException", "type": "Type[deepchem.utils.fragment_utils.MoleculeLoadException]"}, {"lineNumber": 199, "col_offset": 15, "nodeName": "compute_contact_centroid", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 199, "col_offset": 40, "nodeName": "fragments", "type": "List[Tuple[numpy.ndarray, Any]]"}, {"lineNumber": 200, "col_offset": 9, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 200, "col_offset": 16, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "combinations", "type": "Callable"}, {"lineNumber": 200, "col_offset": 49, "nodeName": "fragments", "type": "List[Tuple[numpy.ndarray, Any]]"}, {"lineNumber": 201, "col_offset": 6, "nodeName": "distances", "type": "numpy.ndarray"}, {"lineNumber": 202, "col_offset": 6, "nodeName": "frag1_xyz", "type": "numpy.ndarray"}, {"lineNumber": 203, "col_offset": 6, "nodeName": "frag2_xyz", "type": "numpy.ndarray"}, {"lineNumber": 204, "col_offset": 6, "nodeName": "xyzs", "type": "List[numpy.ndarray]"}, {"lineNumber": 223, "col_offset": 7, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 55, "col_offset": 25, "nodeName": "c", "type": "Any"}, {"lineNumber": 55, "col_offset": 32, "nodeName": "c", "type": "Any"}, {"lineNumber": 57, "col_offset": 21, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 57, "col_offset": 25, "nodeName": "c", "type": "Any"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "c", "type": "Any"}, {"lineNumber": 29, "col_offset": 35, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 29, "col_offset": 51, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 96, "col_offset": 32, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 106, "col_offset": 18, "nodeName": "load_complex", "type": "Callable[..., List[Tuple[numpy.ndarray, Any]]]"}, {"lineNumber": 106, "col_offset": 31, "nodeName": "complex", "type": "Tuple[str, str]"}, {"lineNumber": 113, "col_offset": 26, "nodeName": "itertools", "type": "module"}, {"lineNumber": 115, "col_offset": 18, "nodeName": "compute_pairwise_distances", "type": "Callable[[numpy.ndarray, numpy.ndarray], numpy.ndarray]"}, {"lineNumber": 127, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 179, "col_offset": 31, "nodeName": "box_width", "type": "float"}, {"lineNumber": 179, "col_offset": 48, "nodeName": "voxel_width", "type": "float"}, {"lineNumber": 192, "col_offset": 18, "nodeName": "load_complex", "type": "Callable[..., List[Tuple[numpy.ndarray, Any]]]"}, {"lineNumber": 192, "col_offset": 31, "nodeName": "complex", "type": "Any"}, {"lineNumber": 199, "col_offset": 58, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 200, "col_offset": 26, "nodeName": "itertools", "type": "module"}, {"lineNumber": 201, "col_offset": 18, "nodeName": "compute_pairwise_distances", "type": "Callable[[numpy.ndarray, numpy.ndarray], numpy.ndarray]"}, {"lineNumber": 202, "col_offset": 18, "nodeName": "subtract_centroid", "type": "Callable[[numpy.ndarray, numpy.ndarray], numpy.ndarray]"}, {"lineNumber": 202, "col_offset": 46, "nodeName": "centroid", "type": "numpy.ndarray"}, {"lineNumber": 203, "col_offset": 18, "nodeName": "subtract_centroid", "type": "Callable[[numpy.ndarray, numpy.ndarray], numpy.ndarray]"}, {"lineNumber": 203, "col_offset": 46, "nodeName": "centroid", "type": "numpy.ndarray"}, {"lineNumber": 204, "col_offset": 14, "nodeName": "frag1_xyz", "type": "numpy.ndarray"}, {"lineNumber": 204, "col_offset": 25, "nodeName": "frag2_xyz", "type": "numpy.ndarray"}, {"lineNumber": 205, "col_offset": 6, "nodeName": "append", "type": "Callable"}, {"lineNumber": 224, "col_offset": 13, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 230, "col_offset": 13, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 230, "col_offset": 28, "nodeName": "pairwise_features", "type": "List[Any]"}, {"lineNumber": 55, "col_offset": 37, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 57, "col_offset": 37, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 109, "col_offset": 6, "nodeName": "warning", "type": "Callable[..., None]"}, {"lineNumber": 115, "col_offset": 45, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 115, "col_offset": 55, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 118, "col_offset": 14, "nodeName": "ecfp_dict", "type": "Dict[int, str]"}, {"lineNumber": 179, "col_offset": 31, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 179, "col_offset": 48, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 195, "col_offset": 6, "nodeName": "warning", "type": "Callable[..., None]"}, {"lineNumber": 199, "col_offset": 58, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 201, "col_offset": 45, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 201, "col_offset": 55, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 202, "col_offset": 36, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 203, "col_offset": 36, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 205, "col_offset": 6, "nodeName": "pairwise_features", "type": "List[Any]"}, {"lineNumber": 206, "col_offset": 10, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 224, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 230, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 29, "col_offset": 40, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 29, "col_offset": 45, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 29, "col_offset": 56, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 29, "col_offset": 61, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 96, "col_offset": 38, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 96, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 109, "col_offset": 6, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 118, "col_offset": 27, "nodeName": "featurize_contacts_ecfp", "type": "Callable[..., Tuple[Dict[int, str], Dict[int, str]]]"}, {"lineNumber": 119, "col_offset": 14, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 120, "col_offset": 14, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 121, "col_offset": 14, "nodeName": "distances", "type": "numpy.ndarray"}, {"lineNumber": 195, "col_offset": 6, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 225, "col_offset": 11, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 225, "col_offset": 34, "nodeName": "features", "type": "Any"}, {"lineNumber": 225, "col_offset": 46, "nodeName": "pairwise_features", "type": "List[Any]"}, {"lineNumber": 55, "col_offset": 37, "nodeName": "contacts", "type": "Any"}, {"lineNumber": 57, "col_offset": 37, "nodeName": "contacts", "type": "Any"}, {"lineNumber": 122, "col_offset": 21, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 123, "col_offset": 26, "nodeName": "radius", "type": "int"}, {"lineNumber": 225, "col_offset": 11, "nodeName": "features", "type": "Any"}, {"lineNumber": 122, "col_offset": 21, "nodeName": "self", "type": "ContactCircularFingerprint"}, {"lineNumber": 123, "col_offset": 26, "nodeName": "self", "type": "ContactCircularFingerprint"}, {"lineNumber": 214, "col_offset": 29, "nodeName": "size", "type": "int"}, {"lineNumber": 214, "col_offset": 44, "nodeName": "xyz", "type": "numpy.ndarray"}, {"lineNumber": 214, "col_offset": 49, "nodeName": "ecfp_dict", "type": "Dict[int, str]"}, {"lineNumber": 214, "col_offset": 62, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 215, "col_offset": 22, "nodeName": "xyzs", "type": "List[numpy.ndarray]"}, {"lineNumber": 214, "col_offset": 29, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 216, "col_offset": 22, "nodeName": "featurize_contacts_ecfp", "type": "Callable[..., Tuple[Dict[int, str], Dict[int, str]]]"}, {"lineNumber": 217, "col_offset": 26, "nodeName": "frag1", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 218, "col_offset": 26, "nodeName": "frag2", "type": "Tuple[numpy.ndarray, Any]"}, {"lineNumber": 219, "col_offset": 26, "nodeName": "distances", "type": "numpy.ndarray"}, {"lineNumber": 220, "col_offset": 33, "nodeName": "cutoff", "type": "float"}, {"lineNumber": 221, "col_offset": 38, "nodeName": "radius", "type": "int"}, {"lineNumber": 220, "col_offset": 33, "nodeName": "self", "type": "ContactCircularVoxelizer"}, {"lineNumber": 221, "col_offset": 38, "nodeName": "self", "type": "ContactCircularVoxelizer"}]