[{"lineNumber": 43, "col_offset": 0, "nodeName": "test_input_type", "type": "Callable[[], Any]"}, {"lineNumber": 57, "col_offset": 0, "nodeName": "test_partial_fit", "type": "Callable[..., Any]"}, {"lineNumber": 72, "col_offset": 0, "nodeName": "test_get_feature_names", "type": "Callable[..., Any]"}, {"lineNumber": 82, "col_offset": 0, "nodeName": "test_overflow_error", "type": "Callable[[], Any]"}, {"lineNumber": 90, "col_offset": 0, "nodeName": "profile_encoder", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 14, "col_offset": 4, "nodeName": "X_txt", "type": "Any"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "X", "type": "Any"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "n_components", "type": "int"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 23, "col_offset": 4, "nodeName": "y", "type": "Any"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "l1_norm_W", "type": "Any"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "y2", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "X", "type": "numpy.ndarray"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "X_enc_array", "type": "Any"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "X", "type": "List[str]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "X_enc_list", "type": "Any"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "X_txt", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "X", "type": "Any"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "X_enc", "type": "Any"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "X_enc_partial", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "X_txt", "type": "Any"}, {"lineNumber": 74, "col_offset": 4, "nodeName": "X", "type": "Any"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "topic_labels", "type": "Any"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "r", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "X", "type": "Any"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "employee_salaries", "type": "Any"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "data", "type": "Any"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "X", "type": "Any"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "t0", "type": "float"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "y", "type": "Any"}, {"lineNumber": 102, "col_offset": 4, "nodeName": "eta", "type": "float"}, {"lineNumber": 103, "col_offset": 11, "nodeName": "eta", "type": "float"}, {"lineNumber": 106, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "_", "type": "int"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "_", "type": "int"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "X_txt", "type": "Any"}, {"lineNumber": 18, "col_offset": 14, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "fit", "type": "Callable"}, {"lineNumber": 22, "col_offset": 16, "nodeName": "X", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "transform", "type": "Callable[[Any], Any]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "X", "type": "Any"}, {"lineNumber": 24, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 24, "col_offset": 49, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 24, "col_offset": 53, "nodeName": "shape", "type": "Any"}, {"lineNumber": 25, "col_offset": 29, "nodeName": "n_components", "type": "int"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "sum", "type": "Any"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "assert_array_almost_equal", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "l1_norm_W", "type": "Any"}, {"lineNumber": 33, "col_offset": 14, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "fit", "type": "Callable"}, {"lineNumber": 37, "col_offset": 16, "nodeName": "X", "type": "Any"}, {"lineNumber": 38, "col_offset": 9, "nodeName": "transform", "type": "Callable[[Any], Any]"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "X", "type": "Any"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 39, "col_offset": 34, "nodeName": "y", "type": "Any"}, {"lineNumber": 39, "col_offset": 37, "nodeName": "y2", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 46, "col_offset": 10, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 47, "col_offset": 18, "nodeName": "fit_transform", "type": "Any"}, {"lineNumber": 47, "col_offset": 36, "nodeName": "X", "type": "numpy.ndarray"}, {"lineNumber": 50, "col_offset": 10, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "fit_transform", "type": "Any"}, {"lineNumber": 51, "col_offset": 35, "nodeName": "X", "type": "List[str]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 53, "col_offset": 34, "nodeName": "X_enc_array", "type": "Any"}, {"lineNumber": 53, "col_offset": 47, "nodeName": "X_enc_list", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "X_txt", "type": "Any"}, {"lineNumber": 61, "col_offset": 10, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "fit_transform", "type": "Any"}, {"lineNumber": 62, "col_offset": 30, "nodeName": "X", "type": "Any"}, {"lineNumber": 64, "col_offset": 10, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "partial_fit", "type": "Callable"}, {"lineNumber": 65, "col_offset": 20, "nodeName": "X", "type": "Any"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "transform", "type": "Callable[[Any], Any]"}, {"lineNumber": 66, "col_offset": 34, "nodeName": "X", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 68, "col_offset": 34, "nodeName": "X_enc", "type": "Any"}, {"lineNumber": 68, "col_offset": 41, "nodeName": "X_enc_partial", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "X_txt", "type": "Any"}, {"lineNumber": 75, "col_offset": 10, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "fit", "type": "Callable"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "X", "type": "Any"}, {"lineNumber": 77, "col_offset": 19, "nodeName": "get_feature_names", "type": "Callable[..., Any]"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "n_components", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "RandomState", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "astype", "type": "Any"}, {"lineNumber": 84, "col_offset": 51, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 85, "col_offset": 10, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "fit", "type": "Callable"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "X", "type": "Any"}, {"lineNumber": 94, "col_offset": 24, "nodeName": "fetch_employee_salaries", "type": "Callable[[], Any]"}, {"lineNumber": 95, "col_offset": 11, "nodeName": "employee_salaries", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 97, "col_offset": 9, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 98, "col_offset": 14, "nodeName": "Encoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "fit", "type": "Callable"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "X", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "transform", "type": "Callable[[Any], Any]"}, {"lineNumber": 100, "col_offset": 26, "nodeName": "X", "type": "Any"}, {"lineNumber": 101, "col_offset": 11, "nodeName": "shape", "type": "Any"}, {"lineNumber": 102, "col_offset": 24, "nodeName": "t0", "type": "float"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "test_gap_encoder", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "test_input_type", "type": "Callable[[], Any]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "test_partial_fit", "type": "Callable[..., Any]"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "test_get_feature_names", "type": "Callable[..., Any]"}, {"lineNumber": 118, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 120, "col_offset": 4, "nodeName": "test_overflow_error", "type": "Callable[[], Any]"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 127, "col_offset": 13, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 14, "col_offset": 12, "nodeName": "fetch_20newsgroups", "type": "Any"}, {"lineNumber": 15, "col_offset": 15, "nodeName": "n_samples", "type": "Any"}, {"lineNumber": 19, "col_offset": 21, "nodeName": "n_components", "type": "int"}, {"lineNumber": 19, "col_offset": 43, "nodeName": "hashing", "type": "Any"}, {"lineNumber": 19, "col_offset": 57, "nodeName": "init", "type": "Any"}, {"lineNumber": 20, "col_offset": 17, "nodeName": "analyzer", "type": "Any"}, {"lineNumber": 20, "col_offset": 37, "nodeName": "add_words", "type": "Any"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 24, "col_offset": 11, "nodeName": "y", "type": "Any"}, {"lineNumber": 24, "col_offset": 23, "nodeName": "n_samples", "type": "Any"}, {"lineNumber": 24, "col_offset": 34, "nodeName": "n_components", "type": "int"}, {"lineNumber": 24, "col_offset": 53, "nodeName": "y", "type": "Any"}, {"lineNumber": 25, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "ones", "type": "Any"}, {"lineNumber": 30, "col_offset": 27, "nodeName": "n_components", "type": "int"}, {"lineNumber": 34, "col_offset": 21, "nodeName": "n_components", "type": "int"}, {"lineNumber": 34, "col_offset": 43, "nodeName": "hashing", "type": "Any"}, {"lineNumber": 34, "col_offset": 57, "nodeName": "init", "type": "Any"}, {"lineNumber": 35, "col_offset": 17, "nodeName": "analyzer", "type": "Any"}, {"lineNumber": 35, "col_offset": 37, "nodeName": "add_words", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 38, "col_offset": 9, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 47, "col_offset": 18, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "fetch_20newsgroups", "type": "Any"}, {"lineNumber": 59, "col_offset": 15, "nodeName": "n_samples", "type": "int"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "n_samples", "type": "int"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "fetch_20newsgroups", "type": "Any"}, {"lineNumber": 74, "col_offset": 15, "nodeName": "n_samples", "type": "int"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 77, "col_offset": 19, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 79, "col_offset": 15, "nodeName": "topic_labels", "type": "Any"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "random", "type": "Any"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "enc", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 94, "col_offset": 24, "nodeName": "datasets", "type": "module"}, {"lineNumber": 97, "col_offset": 9, "nodeName": "time", "type": "module"}, {"lineNumber": 98, "col_offset": 44, "nodeName": "init", "type": "str"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 101, "col_offset": 11, "nodeName": "y", "type": "Any"}, {"lineNumber": 102, "col_offset": 10, "nodeName": "time", "type": "Callable[[], float]"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "abs", "type": "Any"}, {"lineNumber": 28, "col_offset": 23, "nodeName": "W_", "type": "Any"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "randint", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 101, "col_offset": 27, "nodeName": "X", "type": "Any"}, {"lineNumber": 102, "col_offset": 10, "nodeName": "time", "type": "module"}, {"lineNumber": 125, "col_offset": 14, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 129, "col_offset": 14, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "y", "type": "Any"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 28, "col_offset": 23, "nodeName": "encoder", "type": "dirty_cat.gap_encoder.GapEncoder"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "r", "type": "Any"}, {"lineNumber": 125, "col_offset": 37, "nodeName": "profile_encoder", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 126, "col_offset": 12, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}, {"lineNumber": 129, "col_offset": 37, "nodeName": "profile_encoder", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "GapEncoder", "type": "Type[dirty_cat.gap_encoder.GapEncoder]"}]