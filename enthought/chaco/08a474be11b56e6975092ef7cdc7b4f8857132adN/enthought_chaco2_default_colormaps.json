[{"lineNumber": 33, "col_offset": 0, "nodeName": "autumn", "type": "Callable[..., Any]"}, {"lineNumber": 43, "col_offset": 0, "nodeName": "bone", "type": "Callable[..., Any]"}, {"lineNumber": 52, "col_offset": 0, "nodeName": "cool", "type": "Callable[..., Any]"}, {"lineNumber": 61, "col_offset": 0, "nodeName": "copper", "type": "Callable[..., Any]"}, {"lineNumber": 70, "col_offset": 0, "nodeName": "flag", "type": "Callable[..., Any]"}, {"lineNumber": 165, "col_offset": 0, "nodeName": "gray", "type": "Callable[..., Any]"}, {"lineNumber": 174, "col_offset": 0, "nodeName": "yarg", "type": "Callable[..., Any]"}, {"lineNumber": 183, "col_offset": 0, "nodeName": "hot", "type": "Callable[..., Any]"}, {"lineNumber": 193, "col_offset": 0, "nodeName": "hsv", "type": "Callable[..., Any]"}, {"lineNumber": 212, "col_offset": 0, "nodeName": "jet", "type": "Callable[..., Any]"}, {"lineNumber": 224, "col_offset": 0, "nodeName": "pink", "type": "Callable[..., Any]"}, {"lineNumber": 326, "col_offset": 0, "nodeName": "prism", "type": "Callable[..., Any]"}, {"lineNumber": 402, "col_offset": 0, "nodeName": "spring", "type": "Callable[..., Any]"}, {"lineNumber": 411, "col_offset": 0, "nodeName": "summer", "type": "Callable[..., Any]"}, {"lineNumber": 420, "col_offset": 0, "nodeName": "winter", "type": "Callable[..., Any]"}, {"lineNumber": 429, "col_offset": 0, "nodeName": "cw1_004", "type": "Callable[..., Any]"}, {"lineNumber": 439, "col_offset": 0, "nodeName": "cw1_005", "type": "Callable[..., Any]"}, {"lineNumber": 447, "col_offset": 0, "nodeName": "cw1_006", "type": "Callable[..., Any]"}, {"lineNumber": 456, "col_offset": 0, "nodeName": "cw1_028", "type": "Callable[..., Any]"}, {"lineNumber": 465, "col_offset": 0, "nodeName": "gmt_drywet", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 0, "nodeName": "color_map_functions", "type": "List[Callable[..., Any]]"}, {"lineNumber": 502, "col_offset": 0, "nodeName": "color_map_dict", "type": "Dict[Callable[..., Any], str]"}, {"lineNumber": 503, "col_offset": 4, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 503, "col_offset": 12, "nodeName": "color_map_functions", "type": "List[Callable[..., Any]]"}, {"lineNumber": 506, "col_offset": 0, "nodeName": "color_map_name_dict", "type": "Dict[str, Callable[..., Any]]"}, {"lineNumber": 507, "col_offset": 4, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 507, "col_offset": 12, "nodeName": "color_map_functions", "type": "List[Callable[..., Any]]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 168, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 186, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 196, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 215, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, int, int], Tuple[float, int, int], Tuple[float, int, int], Tuple[float, float, float]]]"}, {"lineNumber": 227, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 329, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 405, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 414, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 423, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[int, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 432, "col_offset": 4, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 441, "col_offset": 4, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 450, "col_offset": 4, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 459, "col_offset": 4, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 468, "col_offset": 4, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 498, "col_offset": 23, "nodeName": "jet", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 28, "nodeName": "autumn", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 36, "nodeName": "bone", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 42, "nodeName": "cool", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 48, "nodeName": "copper", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 56, "nodeName": "flag", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 62, "nodeName": "gray", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 68, "nodeName": "yarg", "type": "Callable[..., Any]"}, {"lineNumber": 498, "col_offset": 74, "nodeName": "hot", "type": "Callable[..., Any]"}, {"lineNumber": 499, "col_offset": 23, "nodeName": "hsv", "type": "Callable[..., Any]"}, {"lineNumber": 499, "col_offset": 28, "nodeName": "pink", "type": "Callable[..., Any]"}, {"lineNumber": 499, "col_offset": 34, "nodeName": "prism", "type": "Callable[..., Any]"}, {"lineNumber": 499, "col_offset": 41, "nodeName": "spring", "type": "Callable[..., Any]"}, {"lineNumber": 499, "col_offset": 49, "nodeName": "summer", "type": "Callable[..., Any]"}, {"lineNumber": 499, "col_offset": 57, "nodeName": "winter", "type": "Callable[..., Any]"}, {"lineNumber": 500, "col_offset": 23, "nodeName": "cw1_004", "type": "Callable[..., Any]"}, {"lineNumber": 500, "col_offset": 32, "nodeName": "cw1_005", "type": "Callable[..., Any]"}, {"lineNumber": 500, "col_offset": 41, "nodeName": "cw1_006", "type": "Callable[..., Any]"}, {"lineNumber": 500, "col_offset": 50, "nodeName": "cw1_028", "type": "Callable[..., Any]"}, {"lineNumber": 500, "col_offset": 59, "nodeName": "gmt_drywet", "type": "Callable[..., Any]"}, {"lineNumber": 504, "col_offset": 27, "nodeName": "__name__", "type": "str"}, {"lineNumber": 508, "col_offset": 41, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 40, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 40, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 50, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 50, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 59, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 59, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 68, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 163, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 163, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 172, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 172, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 181, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 181, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 191, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 191, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 210, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 210, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 222, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 222, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, int, int], Tuple[float, int, int], Tuple[float, int, int], Tuple[float, float, float]]]"}, {"lineNumber": 324, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 324, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 400, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 400, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 409, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 409, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 418, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 418, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 427, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 427, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Union[Tuple[Tuple[float, float, float], Tuple[int, float, float]], Tuple[Tuple[float, float, float], Tuple[float, float, float]]]]"}, {"lineNumber": 432, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 437, "col_offset": 11, "nodeName": "from_palette_array", "type": "Any"}, {"lineNumber": 437, "col_offset": 42, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 441, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 445, "col_offset": 11, "nodeName": "from_palette_array", "type": "Any"}, {"lineNumber": 445, "col_offset": 42, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 450, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 454, "col_offset": 11, "nodeName": "from_palette_array", "type": "Any"}, {"lineNumber": 454, "col_offset": 42, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 459, "col_offset": 13, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 463, "col_offset": 11, "nodeName": "from_palette_array", "type": "Any"}, {"lineNumber": 463, "col_offset": 42, "nodeName": "colors", "type": "numpy.ndarray"}, {"lineNumber": 492, "col_offset": 11, "nodeName": "from_segment_map", "type": "Any"}, {"lineNumber": 492, "col_offset": 40, "nodeName": "_data", "type": "Dict[str, Tuple[Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float], Tuple[float, float, float]]]"}, {"lineNumber": 504, "col_offset": 4, "nodeName": "color_map_dict", "type": "Dict[Callable[..., Any], str]"}, {"lineNumber": 504, "col_offset": 27, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 508, "col_offset": 4, "nodeName": "color_map_name_dict", "type": "Dict[str, Callable[..., Any]]"}, {"lineNumber": 40, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 40, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 50, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 50, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 59, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 59, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 68, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 163, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 163, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 172, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 172, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 181, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 181, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 191, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 191, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 210, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 210, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 222, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 222, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 324, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 324, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 400, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 400, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 409, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 409, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 418, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 418, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 427, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 427, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 437, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 437, "col_offset": 56, "nodeName": "range", "type": "Any"}, {"lineNumber": 445, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 445, "col_offset": 56, "nodeName": "range", "type": "Any"}, {"lineNumber": 454, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 454, "col_offset": 56, "nodeName": "range", "type": "Any"}, {"lineNumber": 463, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 463, "col_offset": 56, "nodeName": "range", "type": "Any"}, {"lineNumber": 492, "col_offset": 11, "nodeName": "ColorMapper", "type": "Any"}, {"lineNumber": 492, "col_offset": 53, "nodeName": "range", "type": "Any"}, {"lineNumber": 504, "col_offset": 19, "nodeName": "func", "type": "Callable[..., Any]"}, {"lineNumber": 508, "col_offset": 24, "nodeName": "__name__", "type": "str"}, {"lineNumber": 508, "col_offset": 24, "nodeName": "func", "type": "Callable[..., Any]"}]