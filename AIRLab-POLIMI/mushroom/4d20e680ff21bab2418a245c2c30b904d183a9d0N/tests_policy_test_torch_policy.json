[{"lineNumber": 10, "col_offset": 0, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "test_torch_policy", "type": "Callable[[], Any]"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "test_gaussian_torch_policy", "type": "Callable[[], Any]"}, {"lineNumber": 77, "col_offset": 0, "nodeName": "test_boltzmann_torch_policy", "type": "Callable[[], Any]"}, {"lineNumber": 19, "col_offset": 14, "nodeName": "Module", "type": "Any"}, {"lineNumber": 19, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "state", "type": "Any"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "action", "type": "Any"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "action_test", "type": "numpy.ndarray"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "p_sa", "type": "Any"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "p_sa_test", "type": "float"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "entropy_test", "type": "float"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "beta", "type": "mushroom_rl.utils.parameters.Parameter"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.BoltzmannTorchPolicy"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "state", "type": "Any"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "action", "type": "Any"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "action_test", "type": "numpy.ndarray"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "p_sa", "type": "Any"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "p_sa_test", "type": "float"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "states", "type": "Any"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "entropy_test", "type": "float"}, {"lineNumber": 13, "col_offset": 11, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "n_input", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "n_output", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "_h1", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "_h2", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "_h3", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "features1", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "features2", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 42, "col_offset": 15, "nodeName": "a", "type": "Any"}, {"lineNumber": 46, "col_offset": 10, "nodeName": "TorchPolicy", "type": "Type[mushroom_rl.policy.torch_policy.TorchPolicy]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 47, "col_offset": 27, "nodeName": "draw_action_t", "type": "Callable[[Any], Any]"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "log_prob_t", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "entropy_t", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "distribution_t", "type": "Callable[[Any], Any]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 51, "col_offset": 27, "nodeName": "set_weights", "type": "Callable[[Any], Any]"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 52, "col_offset": 27, "nodeName": "get_weights", "type": "Callable[[], Any]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 53, "col_offset": 27, "nodeName": "parameters", "type": "Callable[[], Any]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "reset", "type": "Callable[[], None]"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "manual_seed", "type": "Any"}, {"lineNumber": 61, "col_offset": 9, "nodeName": "GaussianTorchPolicy", "type": "Type[mushroom_rl.policy.torch_policy.GaussianTorchPolicy]"}, {"lineNumber": 61, "col_offset": 29, "nodeName": "Network", "type": "Type[Network]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "rand", "type": "Any"}, {"lineNumber": 64, "col_offset": 13, "nodeName": "draw_action", "type": "Callable[[Any], Any]"}, {"lineNumber": 64, "col_offset": 28, "nodeName": "state", "type": "Any"}, {"lineNumber": 65, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "action", "type": "Any"}, {"lineNumber": 66, "col_offset": 31, "nodeName": "action_test", "type": "numpy.ndarray"}, {"lineNumber": 68, "col_offset": 11, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 68, "col_offset": 14, "nodeName": "state", "type": "Any"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "action", "type": "Any"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 70, "col_offset": 23, "nodeName": "p_sa", "type": "Any"}, {"lineNumber": 70, "col_offset": 29, "nodeName": "p_sa_test", "type": "float"}, {"lineNumber": 72, "col_offset": 14, "nodeName": "entropy", "type": "Callable[..., Any]"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "entropy_test", "type": "float"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "manual_seed", "type": "Any"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "Parameter", "type": "Type[mushroom_rl.utils.parameters.Parameter]"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "BoltzmannTorchPolicy", "type": "Type[mushroom_rl.policy.torch_policy.BoltzmannTorchPolicy]"}, {"lineNumber": 81, "col_offset": 30, "nodeName": "Network", "type": "Type[Network]"}, {"lineNumber": 81, "col_offset": 51, "nodeName": "beta", "type": "mushroom_rl.utils.parameters.Parameter"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "rand", "type": "Any"}, {"lineNumber": 84, "col_offset": 13, "nodeName": "draw_action", "type": "Callable[[Any], Any]"}, {"lineNumber": 84, "col_offset": 28, "nodeName": "state", "type": "Any"}, {"lineNumber": 85, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 86, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 86, "col_offset": 23, "nodeName": "action", "type": "Any"}, {"lineNumber": 86, "col_offset": 31, "nodeName": "action_test", "type": "numpy.ndarray"}, {"lineNumber": 88, "col_offset": 11, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.BoltzmannTorchPolicy"}, {"lineNumber": 88, "col_offset": 14, "nodeName": "state", "type": "Any"}, {"lineNumber": 88, "col_offset": 21, "nodeName": "action", "type": "Any"}, {"lineNumber": 90, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 90, "col_offset": 23, "nodeName": "p_sa", "type": "Any"}, {"lineNumber": 90, "col_offset": 29, "nodeName": "p_sa_test", "type": "float"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "rand", "type": "Any"}, {"lineNumber": 93, "col_offset": 14, "nodeName": "entropy", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "states", "type": "Any"}, {"lineNumber": 95, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 95, "col_offset": 23, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 95, "col_offset": 32, "nodeName": "entropy_test", "type": "float"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 23, "col_offset": 18, "nodeName": "input_shape", "type": "Any"}, {"lineNumber": 24, "col_offset": 19, "nodeName": "output_shape", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "self", "type": "Network"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "n_input", "type": "Any"}, {"lineNumber": 26, "col_offset": 38, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "Network"}, {"lineNumber": 27, "col_offset": 19, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 27, "col_offset": 29, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 27, "col_offset": 41, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "Network"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 28, "col_offset": 29, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 28, "col_offset": 41, "nodeName": "n_output", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "xavier_uniform_", "type": "Any"}, {"lineNumber": 30, "col_offset": 32, "nodeName": "weight", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "xavier_uniform_", "type": "Any"}, {"lineNumber": 32, "col_offset": 32, "nodeName": "weight", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "xavier_uniform_", "type": "Any"}, {"lineNumber": 34, "col_offset": 32, "nodeName": "weight", "type": "Any"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "_h3", "type": "Any"}, {"lineNumber": 40, "col_offset": 21, "nodeName": "features2", "type": "Any"}, {"lineNumber": 47, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 51, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 52, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 53, "col_offset": 27, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "tmp", "type": "mushroom_rl.policy.torch_policy.TorchPolicy"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "torch", "type": "Any"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 64, "col_offset": 13, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 65, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 70, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 72, "col_offset": 14, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "torch", "type": "Any"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 84, "col_offset": 13, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.BoltzmannTorchPolicy"}, {"lineNumber": 85, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 86, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 90, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 93, "col_offset": 14, "nodeName": "pi", "type": "mushroom_rl.policy.torch_policy.BoltzmannTorchPolicy"}, {"lineNumber": 95, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 12, "col_offset": 11, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "nn", "type": "Any"}, {"lineNumber": 27, "col_offset": 19, "nodeName": "nn", "type": "Any"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "nn", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 30, "col_offset": 32, "nodeName": "_h1", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 32, "col_offset": 32, "nodeName": "_h2", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 34, "col_offset": 32, "nodeName": "_h3", "type": "Any"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 38, "col_offset": 31, "nodeName": "_h1", "type": "Any"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 39, "col_offset": 31, "nodeName": "_h2", "type": "Any"}, {"lineNumber": 39, "col_offset": 40, "nodeName": "features1", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "self", "type": "Network"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "Network", "type": "Type[Network]"}, {"lineNumber": 21, "col_offset": 23, "nodeName": "self", "type": "Network"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "nn", "type": "Any"}, {"lineNumber": 30, "col_offset": 32, "nodeName": "self", "type": "Network"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "calculate_gain", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "nn", "type": "Any"}, {"lineNumber": 32, "col_offset": 32, "nodeName": "self", "type": "Network"}, {"lineNumber": 33, "col_offset": 37, "nodeName": "calculate_gain", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "nn", "type": "Any"}, {"lineNumber": 34, "col_offset": 32, "nodeName": "self", "type": "Network"}, {"lineNumber": 35, "col_offset": 37, "nodeName": "calculate_gain", "type": "Any"}, {"lineNumber": 38, "col_offset": 31, "nodeName": "self", "type": "Network"}, {"lineNumber": 38, "col_offset": 40, "nodeName": "float", "type": "Any"}, {"lineNumber": 39, "col_offset": 31, "nodeName": "self", "type": "Network"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "init", "type": "Any"}, {"lineNumber": 33, "col_offset": 37, "nodeName": "init", "type": "Any"}, {"lineNumber": 35, "col_offset": 37, "nodeName": "init", "type": "Any"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 33, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 35, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 38, "col_offset": 40, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 38, "col_offset": 54, "nodeName": "state", "type": "Any"}, {"lineNumber": 38, "col_offset": 40, "nodeName": "torch", "type": "Any"}]