[{"lineNumber": 18, "col_offset": 16, "nodeName": "Policy", "type": "Type[mushroom_rl.policy.policy.Policy]"}, {"lineNumber": 204, "col_offset": 10, "nodeName": "DeepAC", "type": "Type[mushroom_rl.algorithms.actor_critic.deep_actor_critic.deep_actor_critic.DeepAC]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "_mu_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 45, "col_offset": 32, "nodeName": "mu_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "_sigma_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 46, "col_offset": 35, "nodeName": "sigma_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "_delta_a", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "_central_a", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "_log_std_min", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "_log_std_max", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "_eps_log_prob", "type": "float"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 58, "col_offset": 11, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 73, "col_offset": 14, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "dist", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "a_raw", "type": "Any"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "a_true", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "compute_log_prob", "type": "bool"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "mu", "type": "Any"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "log_sigma", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "log_sigma", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "mu_weights", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "sigma_weights", "type": "Any"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "mu_weights", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "sigma_weights", "type": "Any"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "_critic_fit_params", "type": "Union[Dict[nothing, nothing], Any]"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "_batch_size", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "_warmup_transitions", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "_tau", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "target_critic_params", "type": "Any"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "actor_mu_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "actor_sigma_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "policy", "type": "SACPolicy"}, {"lineNumber": 284, "col_offset": 8, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 286, "col_offset": 11, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "_alpha_optim", "type": "Any"}, {"lineNumber": 293, "col_offset": 8, "nodeName": "policy_parameters", "type": "itertools.chain[nothing]"}, {"lineNumber": 313, "col_offset": 11, "nodeName": "initialized", "type": "Any"}, {"lineNumber": 333, "col_offset": 8, "nodeName": "q_0", "type": "Any"}, {"lineNumber": 335, "col_offset": 8, "nodeName": "q_1", "type": "Any"}, {"lineNumber": 338, "col_offset": 8, "nodeName": "q", "type": "Any"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "alpha_loss", "type": "Any"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "q", "type": "Any"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "q", "type": "Any"}, {"lineNumber": 367, "col_offset": 15, "nodeName": "q", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 48, "col_offset": 24, "nodeName": "to_float_tensor", "type": "Callable[..., Any]"}, {"lineNumber": 48, "col_offset": 62, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 49, "col_offset": 26, "nodeName": "to_float_tensor", "type": "Callable[..., Any]"}, {"lineNumber": 49, "col_offset": 64, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 51, "col_offset": 28, "nodeName": "to_parameter", "type": "Callable"}, {"lineNumber": 51, "col_offset": 41, "nodeName": "log_std_min", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 52, "col_offset": 28, "nodeName": "to_parameter", "type": "Callable"}, {"lineNumber": 52, "col_offset": 41, "nodeName": "log_std_max", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "model", "type": "Any"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "_delta_a", "type": "Any"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "_central_a", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "_add_save_attr", "type": "Callable[..., None]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 91, "col_offset": 11, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "compute_action_and_log_prob_t", "type": "Callable[..., Any]"}, {"lineNumber": 91, "col_offset": 57, "nodeName": "state", "type": "Any"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "distribution", "type": "Callable[[Any], Any]"}, {"lineNumber": 109, "col_offset": 33, "nodeName": "state", "type": "Any"}, {"lineNumber": 110, "col_offset": 16, "nodeName": "rsample", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 111, "col_offset": 23, "nodeName": "a_raw", "type": "Any"}, {"lineNumber": 112, "col_offset": 37, "nodeName": "_central_a", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 116, "col_offset": 12, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 119, "col_offset": 19, "nodeName": "a_true", "type": "Any"}, {"lineNumber": 133, "col_offset": 13, "nodeName": "predict", "type": "Any"}, {"lineNumber": 133, "col_offset": 43, "nodeName": "state", "type": "Any"}, {"lineNumber": 134, "col_offset": 20, "nodeName": "predict", "type": "Any"}, {"lineNumber": 134, "col_offset": 53, "nodeName": "state", "type": "Any"}, {"lineNumber": 136, "col_offset": 20, "nodeName": "clamp", "type": "Any"}, {"lineNumber": 136, "col_offset": 32, "nodeName": "log_sigma", "type": "Any"}, {"lineNumber": 137, "col_offset": 15, "nodeName": "Normal", "type": "Any"}, {"lineNumber": 137, "col_offset": 42, "nodeName": "mu", "type": "Any"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "item", "type": "Any"}, {"lineNumber": 165, "col_offset": 21, "nodeName": "weights", "type": "Any"}, {"lineNumber": 166, "col_offset": 24, "nodeName": "weights", "type": "Any"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "set_weights", "type": "Any"}, {"lineNumber": 168, "col_offset": 42, "nodeName": "mu_weights", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "set_weights", "type": "Any"}, {"lineNumber": 169, "col_offset": 45, "nodeName": "sigma_weights", "type": "Any"}, {"lineNumber": 179, "col_offset": 21, "nodeName": "get_weights", "type": "Any"}, {"lineNumber": 180, "col_offset": 24, "nodeName": "get_weights", "type": "Any"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "concatenate", "type": "Any"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "model", "type": "Any"}, {"lineNumber": 200, "col_offset": 15, "nodeName": "chain", "type": "Type[itertools.chain[Any]]"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 245, "col_offset": 75, "nodeName": "critic_fit_params", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 247, "col_offset": 27, "nodeName": "to_parameter", "type": "Callable"}, {"lineNumber": 247, "col_offset": 40, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 248, "col_offset": 35, "nodeName": "to_parameter", "type": "Callable"}, {"lineNumber": 248, "col_offset": 48, "nodeName": "warmup_transitions", "type": "Any"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 249, "col_offset": 20, "nodeName": "to_parameter", "type": "Callable"}, {"lineNumber": 249, "col_offset": 33, "nodeName": "tau", "type": "Any"}, {"lineNumber": 251, "col_offset": 11, "nodeName": "target_entropy", "type": "Any"}, {"lineNumber": 252, "col_offset": 12, "nodeName": "_target_entropy", "type": "Any"}, {"lineNumber": 254, "col_offset": 12, "nodeName": "_target_entropy", "type": "Any"}, {"lineNumber": 254, "col_offset": 35, "nodeName": "target_entropy", "type": "Any"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 256, "col_offset": 30, "nodeName": "ReplayMemory", "type": "Type[mushroom_rl.utils.replay_memory.ReplayMemory]"}, {"lineNumber": 256, "col_offset": 43, "nodeName": "initial_replay_size", "type": "Any"}, {"lineNumber": 256, "col_offset": 64, "nodeName": "max_replay_size", "type": "Any"}, {"lineNumber": 263, "col_offset": 31, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 263, "col_offset": 40, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 264, "col_offset": 36, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 264, "col_offset": 46, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 266, "col_offset": 43, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 266, "col_offset": 53, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 269, "col_offset": 32, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 269, "col_offset": 42, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 271, "col_offset": 35, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 271, "col_offset": 45, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 274, "col_offset": 17, "nodeName": "SACPolicy", "type": "Type[SACPolicy]"}, {"lineNumber": 274, "col_offset": 27, "nodeName": "actor_mu_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 275, "col_offset": 27, "nodeName": "actor_sigma_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 276, "col_offset": 27, "nodeName": "low", "type": "Any"}, {"lineNumber": 277, "col_offset": 27, "nodeName": "high", "type": "Any"}, {"lineNumber": 278, "col_offset": 27, "nodeName": "log_std_min", "type": "Any"}, {"lineNumber": 279, "col_offset": 27, "nodeName": "log_std_max", "type": "Any"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "_init_target", "type": "Callable[[Mapping[int, Any], Union[Sized, Mapping[int, Any]]], None]"}, {"lineNumber": 281, "col_offset": 26, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 282, "col_offset": 26, "nodeName": "_target_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 284, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 284, "col_offset": 26, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 286, "col_offset": 11, "nodeName": "policy", "type": "SACPolicy"}, {"lineNumber": 287, "col_offset": 12, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 291, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 291, "col_offset": 28, "nodeName": "Adam", "type": "Any"}, {"lineNumber": 293, "col_offset": 28, "nodeName": "chain", "type": "Type[itertools.chain[Any]]"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "_add_save_attr", "type": "Callable[..., None]"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "__init__", "type": "Callable[[Any, Any, Union[Container[Any], Mapping[str, Union[Callable[..., Any], Mapping[Any, Any]]]], Iterable[Any]], None]"}, {"lineNumber": 309, "col_offset": 25, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 309, "col_offset": 35, "nodeName": "policy", "type": "SACPolicy"}, {"lineNumber": 309, "col_offset": 43, "nodeName": "actor_optimizer", "type": "Any"}, {"lineNumber": 309, "col_offset": 60, "nodeName": "policy_parameters", "type": "itertools.chain[nothing]"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "add", "type": "Callable[[Any], None]"}, {"lineNumber": 312, "col_offset": 32, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 313, "col_offset": 11, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 323, "col_offset": 12, "nodeName": "q_next", "type": "Any"}, {"lineNumber": 324, "col_offset": 12, "nodeName": "q", "type": "Any"}, {"lineNumber": 333, "col_offset": 14, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 333, "col_offset": 40, "nodeName": "state", "type": "Any"}, {"lineNumber": 333, "col_offset": 47, "nodeName": "action_new", "type": "Any"}, {"lineNumber": 335, "col_offset": 14, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 335, "col_offset": 40, "nodeName": "state", "type": "Any"}, {"lineNumber": 335, "col_offset": 47, "nodeName": "action_new", "type": "Any"}, {"lineNumber": 338, "col_offset": 12, "nodeName": "min", "type": "Any"}, {"lineNumber": 338, "col_offset": 22, "nodeName": "q_0", "type": "Any"}, {"lineNumber": 338, "col_offset": 27, "nodeName": "q_1", "type": "Any"}, {"lineNumber": 340, "col_offset": 16, "nodeName": "mean", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "zero_grad", "type": "Any"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "step", "type": "Any"}, {"lineNumber": 361, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 361, "col_offset": 11, "nodeName": "log_prob_next", "type": "Any"}, {"lineNumber": 361, "col_offset": 27, "nodeName": "compute_action_and_log_prob", "type": "Any"}, {"lineNumber": 361, "col_offset": 67, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 365, "col_offset": 17, "nodeName": "absorbing", "type": "Any"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "_update_optimizer_parameters", "type": "Callable[[Iterable[Any]], None]"}, {"lineNumber": 374, "col_offset": 15, "nodeName": "exp", "type": "Any"}, {"lineNumber": 378, "col_offset": 15, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 48, "col_offset": 62, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 49, "col_offset": 64, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "_mu_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 110, "col_offset": 16, "nodeName": "dist", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 112, "col_offset": 17, "nodeName": "a", "type": "Any"}, {"lineNumber": 112, "col_offset": 21, "nodeName": "_delta_a", "type": "Any"}, {"lineNumber": 112, "col_offset": 37, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 115, "col_offset": 23, "nodeName": "sum", "type": "Any"}, {"lineNumber": 116, "col_offset": 24, "nodeName": "sum", "type": "Any"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "a_true", "type": "Any"}, {"lineNumber": 117, "col_offset": 27, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 133, "col_offset": 13, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 134, "col_offset": 20, "nodeName": "_sigma_approximator", "type": "Any"}, {"lineNumber": 136, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 136, "col_offset": 43, "nodeName": "_log_std_min", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 136, "col_offset": 64, "nodeName": "_log_std_max", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 137, "col_offset": 15, "nodeName": "distributions", "type": "Any"}, {"lineNumber": 137, "col_offset": 46, "nodeName": "exp", "type": "Any"}, {"lineNumber": 165, "col_offset": 30, "nodeName": "weights_size", "type": "Any"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "weights_size", "type": "Any"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "_sigma_approximator", "type": "Any"}, {"lineNumber": 179, "col_offset": 21, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 180, "col_offset": 24, "nodeName": "_sigma_approximator", "type": "Any"}, {"lineNumber": 182, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 182, "col_offset": 31, "nodeName": "mu_weights", "type": "Any"}, {"lineNumber": 182, "col_offset": 43, "nodeName": "sigma_weights", "type": "Any"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 245, "col_offset": 44, "nodeName": "critic_fit_params", "type": "Any"}, {"lineNumber": 245, "col_offset": 34, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 252, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 254, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 258, "col_offset": 25, "nodeName": "keys", "type": "Any"}, {"lineNumber": 261, "col_offset": 12, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 265, "col_offset": 48, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 267, "col_offset": 55, "nodeName": "target_critic_params", "type": "Any"}, {"lineNumber": 270, "col_offset": 44, "nodeName": "actor_mu_params", "type": "Any"}, {"lineNumber": 272, "col_offset": 47, "nodeName": "actor_sigma_params", "type": "Any"}, {"lineNumber": 276, "col_offset": 27, "nodeName": "action_space", "type": "Any"}, {"lineNumber": 277, "col_offset": 27, "nodeName": "action_space", "type": "Any"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 281, "col_offset": 26, "nodeName": "self", "type": "SAC"}, {"lineNumber": 282, "col_offset": 26, "nodeName": "self", "type": "SAC"}, {"lineNumber": 284, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 284, "col_offset": 49, "nodeName": "float32", "type": "Any"}, {"lineNumber": 287, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 287, "col_offset": 30, "nodeName": "requires_grad_", "type": "Any"}, {"lineNumber": 289, "col_offset": 12, "nodeName": "requires_grad_", "type": "Any"}, {"lineNumber": 291, "col_offset": 28, "nodeName": "optim", "type": "Any"}, {"lineNumber": 291, "col_offset": 40, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 291, "col_offset": 61, "nodeName": "lr_alpha", "type": "Any"}, {"lineNumber": 293, "col_offset": 34, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 294, "col_offset": 34, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 313, "col_offset": 11, "nodeName": "self", "type": "SAC"}, {"lineNumber": 314, "col_offset": 12, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 314, "col_offset": 19, "nodeName": "action", "type": "numpy.ndarray"}, {"lineNumber": 314, "col_offset": 27, "nodeName": "reward", "type": "numpy.ndarray"}, {"lineNumber": 314, "col_offset": 35, "nodeName": "next_state", "type": "numpy.ndarray"}, {"lineNumber": 314, "col_offset": 47, "nodeName": "absorbing", "type": "numpy.ndarray"}, {"lineNumber": 314, "col_offset": 58, "nodeName": "_", "type": "numpy.ndarray"}, {"lineNumber": 315, "col_offset": 16, "nodeName": "get", "type": "Callable[[Any], Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]]"}, {"lineNumber": 317, "col_offset": 15, "nodeName": "size", "type": "Any"}, {"lineNumber": 319, "col_offset": 16, "nodeName": "loss", "type": "Any"}, {"lineNumber": 323, "col_offset": 21, "nodeName": "_next_q", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 323, "col_offset": 34, "nodeName": "next_state", "type": "numpy.ndarray"}, {"lineNumber": 323, "col_offset": 46, "nodeName": "absorbing", "type": "numpy.ndarray"}, {"lineNumber": 324, "col_offset": 16, "nodeName": "reward", "type": "numpy.ndarray"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "fit", "type": "Callable[..., None]"}, {"lineNumber": 326, "col_offset": 42, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 326, "col_offset": 49, "nodeName": "action", "type": "numpy.ndarray"}, {"lineNumber": 326, "col_offset": 57, "nodeName": "q", "type": "Any"}, {"lineNumber": 329, "col_offset": 12, "nodeName": "_update_target", "type": "Callable[[Mapping[int, Any], Union[Sized, Mapping[int, Any]]], None]"}, {"lineNumber": 329, "col_offset": 32, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 330, "col_offset": 32, "nodeName": "_target_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 333, "col_offset": 14, "nodeName": "self", "type": "SAC"}, {"lineNumber": 335, "col_offset": 14, "nodeName": "self", "type": "SAC"}, {"lineNumber": 338, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "mean", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "_alpha_optim", "type": "Any"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "alpha_loss", "type": "Any"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "_alpha_optim", "type": "Any"}, {"lineNumber": 361, "col_offset": 27, "nodeName": "policy", "type": "Any"}, {"lineNumber": 363, "col_offset": 12, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 364, "col_offset": 12, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 364, "col_offset": 24, "nodeName": "a", "type": "Any"}, {"lineNumber": 364, "col_offset": 47, "nodeName": "_alpha_np", "type": "Any"}, {"lineNumber": 364, "col_offset": 64, "nodeName": "log_prob_next", "type": "Any"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 370, "col_offset": 42, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 374, "col_offset": 15, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 48, "col_offset": 46, "nodeName": "max_a", "type": "Any"}, {"lineNumber": 48, "col_offset": 54, "nodeName": "min_a", "type": "Any"}, {"lineNumber": 49, "col_offset": 48, "nodeName": "max_a", "type": "Any"}, {"lineNumber": 49, "col_offset": 56, "nodeName": "min_a", "type": "Any"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "_delta_a", "type": "Any"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "_central_a", "type": "Any"}, {"lineNumber": 112, "col_offset": 21, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 133, "col_offset": 13, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 134, "col_offset": 20, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 136, "col_offset": 43, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 136, "col_offset": 64, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 137, "col_offset": 15, "nodeName": "torch", "type": "Any"}, {"lineNumber": 137, "col_offset": 46, "nodeName": "log_sigma", "type": "Any"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 165, "col_offset": 30, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 179, "col_offset": 21, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 180, "col_offset": 24, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "network", "type": "Any"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "network", "type": "Any"}, {"lineNumber": 252, "col_offset": 36, "nodeName": "astype", "type": "Any"}, {"lineNumber": 252, "col_offset": 80, "nodeName": "float32", "type": "Any"}, {"lineNumber": 258, "col_offset": 25, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 259, "col_offset": 19, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 276, "col_offset": 27, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 277, "col_offset": 27, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 284, "col_offset": 49, "nodeName": "torch", "type": "Any"}, {"lineNumber": 289, "col_offset": 12, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 291, "col_offset": 40, "nodeName": "self", "type": "SAC"}, {"lineNumber": 293, "col_offset": 34, "nodeName": "network", "type": "Any"}, {"lineNumber": 294, "col_offset": 34, "nodeName": "network", "type": "Any"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 312, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 315, "col_offset": 16, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 315, "col_offset": 40, "nodeName": "_batch_size", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 317, "col_offset": 15, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 317, "col_offset": 42, "nodeName": "_warmup_transitions", "type": "Union[mushroom_rl.utils.parameters.Parameter, Any]"}, {"lineNumber": 318, "col_offset": 16, "nodeName": "action_new", "type": "Any"}, {"lineNumber": 318, "col_offset": 28, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 318, "col_offset": 39, "nodeName": "compute_action_and_log_prob_t", "type": "Any"}, {"lineNumber": 318, "col_offset": 81, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 319, "col_offset": 23, "nodeName": "_loss", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 319, "col_offset": 34, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 319, "col_offset": 41, "nodeName": "action_new", "type": "Any"}, {"lineNumber": 319, "col_offset": 53, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 320, "col_offset": 16, "nodeName": "_optimize_actor_parameters", "type": "Callable[[Any], None]"}, {"lineNumber": 320, "col_offset": 48, "nodeName": "loss", "type": "Any"}, {"lineNumber": 321, "col_offset": 16, "nodeName": "_update_alpha", "type": "Callable[[Any], Any]"}, {"lineNumber": 323, "col_offset": 21, "nodeName": "self", "type": "SAC"}, {"lineNumber": 324, "col_offset": 25, "nodeName": "gamma", "type": "Any"}, {"lineNumber": 324, "col_offset": 47, "nodeName": "q_next", "type": "Any"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 327, "col_offset": 44, "nodeName": "_critic_fit_params", "type": "Union[Dict[nothing, nothing], Any]"}, {"lineNumber": 329, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 329, "col_offset": 32, "nodeName": "self", "type": "SAC"}, {"lineNumber": 330, "col_offset": 32, "nodeName": "self", "type": "SAC"}, {"lineNumber": 340, "col_offset": 41, "nodeName": "q", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "self", "type": "SAC"}, {"lineNumber": 361, "col_offset": 27, "nodeName": "self", "type": "SAC"}, {"lineNumber": 363, "col_offset": 12, "nodeName": "_target_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 364, "col_offset": 47, "nodeName": "self", "type": "SAC"}, {"lineNumber": 370, "col_offset": 42, "nodeName": "policy", "type": "Any"}, {"lineNumber": 374, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 378, "col_offset": 15, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 115, "col_offset": 23, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 115, "col_offset": 37, "nodeName": "a_raw", "type": "Any"}, {"lineNumber": 116, "col_offset": 24, "nodeName": "log", "type": "Any"}, {"lineNumber": 165, "col_offset": 30, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "model", "type": "Any"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "model", "type": "Any"}, {"lineNumber": 252, "col_offset": 80, "nodeName": "np", "type": "module"}, {"lineNumber": 287, "col_offset": 30, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 289, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 293, "col_offset": 34, "nodeName": "model", "type": "Any"}, {"lineNumber": 294, "col_offset": 34, "nodeName": "model", "type": "Any"}, {"lineNumber": 315, "col_offset": 16, "nodeName": "self", "type": "SAC"}, {"lineNumber": 315, "col_offset": 40, "nodeName": "self", "type": "SAC"}, {"lineNumber": 317, "col_offset": 15, "nodeName": "self", "type": "SAC"}, {"lineNumber": 317, "col_offset": 42, "nodeName": "self", "type": "SAC"}, {"lineNumber": 318, "col_offset": 39, "nodeName": "policy", "type": "Any"}, {"lineNumber": 319, "col_offset": 23, "nodeName": "self", "type": "SAC"}, {"lineNumber": 320, "col_offset": 16, "nodeName": "self", "type": "SAC"}, {"lineNumber": 321, "col_offset": 16, "nodeName": "self", "type": "SAC"}, {"lineNumber": 321, "col_offset": 35, "nodeName": "detach", "type": "Any"}, {"lineNumber": 324, "col_offset": 25, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 327, "col_offset": 44, "nodeName": "self", "type": "SAC"}, {"lineNumber": 340, "col_offset": 16, "nodeName": "_alpha", "type": "Any"}, {"lineNumber": 340, "col_offset": 30, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 363, "col_offset": 12, "nodeName": "self", "type": "SAC"}, {"lineNumber": 370, "col_offset": 42, "nodeName": "self", "type": "SAC"}, {"lineNumber": 115, "col_offset": 23, "nodeName": "dist", "type": "Any"}, {"lineNumber": 116, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 116, "col_offset": 50, "nodeName": "_eps_log_prob", "type": "float"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "cpu", "type": "Any"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "_mu_approximator", "type": "Any"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "_sigma_approximator", "type": "Any"}, {"lineNumber": 252, "col_offset": 36, "nodeName": "prod", "type": "Any"}, {"lineNumber": 252, "col_offset": 44, "nodeName": "shape", "type": "Any"}, {"lineNumber": 287, "col_offset": 30, "nodeName": "_log_alpha", "type": "Any"}, {"lineNumber": 293, "col_offset": 34, "nodeName": "actor_mu_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 294, "col_offset": 34, "nodeName": "actor_sigma_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 318, "col_offset": 39, "nodeName": "self", "type": "SAC"}, {"lineNumber": 321, "col_offset": 35, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 324, "col_offset": 25, "nodeName": "self", "type": "SAC"}, {"lineNumber": 340, "col_offset": 16, "nodeName": "self", "type": "SAC"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "self", "type": "SAC"}, {"lineNumber": 343, "col_offset": 43, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 343, "col_offset": 54, "nodeName": "_target_entropy", "type": "Any"}, {"lineNumber": 378, "col_offset": 15, "nodeName": "detach", "type": "Any"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "detach", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "detach", "type": "Any"}, {"lineNumber": 116, "col_offset": 50, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 200, "col_offset": 21, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 201, "col_offset": 21, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 252, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 252, "col_offset": 44, "nodeName": "action_space", "type": "Any"}, {"lineNumber": 287, "col_offset": 30, "nodeName": "self", "type": "SAC"}, {"lineNumber": 343, "col_offset": 54, "nodeName": "self", "type": "SAC"}, {"lineNumber": 378, "col_offset": 15, "nodeName": "_alpha", "type": "Any"}, {"lineNumber": 76, "col_offset": 15, "nodeName": "compute_action_and_log_prob_t", "type": "Callable[..., Any]"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "state", "type": "Any"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "a", "type": "Any"}, {"lineNumber": 92, "col_offset": 41, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 116, "col_offset": 39, "nodeName": "pow", "type": "Any"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "detach", "type": "Any"}, {"lineNumber": 252, "col_offset": 44, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 378, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 76, "col_offset": 15, "nodeName": "self", "type": "SACPolicy"}, {"lineNumber": 116, "col_offset": 39, "nodeName": "a", "type": "Any"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "mean", "type": "Any"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "torch", "type": "Any"}, {"lineNumber": 151, "col_offset": 26, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 151, "col_offset": 26, "nodeName": "distribution", "type": "Callable[[Any], Any]"}, {"lineNumber": 151, "col_offset": 44, "nodeName": "state", "type": "Any"}, {"lineNumber": 151, "col_offset": 26, "nodeName": "self", "type": "SACPolicy"}]