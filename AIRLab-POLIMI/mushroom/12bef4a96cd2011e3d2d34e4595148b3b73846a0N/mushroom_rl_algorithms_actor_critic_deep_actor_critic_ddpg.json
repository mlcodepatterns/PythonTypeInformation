[{"lineNumber": 12, "col_offset": 11, "nodeName": "DeepAC", "type": "Type[mushroom_rl.algorithms.actor_critic.deep_actor_critic.deep_actor_critic.DeepAC]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "_critic_fit_params", "type": "Union[Dict[nothing, nothing], Any]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "_batch_size", "type": "Any"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "batch_size", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "_tau", "type": "Any"}, {"lineNumber": 50, "col_offset": 20, "nodeName": "tau", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "_policy_delay", "type": "Any"}, {"lineNumber": 51, "col_offset": 29, "nodeName": "policy_delay", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "_fit_count", "type": "int"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "target_critic_params", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "target_actor_params", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "policy", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "policy_parameters", "type": "Any"}, {"lineNumber": 93, "col_offset": 11, "nodeName": "initialized", "type": "Any"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "action", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "q", "type": "Any"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "q", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "q", "type": "Any"}, {"lineNumber": 138, "col_offset": 15, "nodeName": "q", "type": "Any"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "_actor_approximator", "type": "Any"}, {"lineNumber": 141, "col_offset": 35, "nodeName": "_approximator", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 47, "col_offset": 75, "nodeName": "critic_fit_params", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 54, "col_offset": 30, "nodeName": "ReplayMemory", "type": "Type[mushroom_rl.utils.replay_memory.ReplayMemory]"}, {"lineNumber": 54, "col_offset": 43, "nodeName": "initial_replay_size", "type": "Any"}, {"lineNumber": 54, "col_offset": 64, "nodeName": "max_replay_size", "type": "Any"}, {"lineNumber": 56, "col_offset": 31, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 56, "col_offset": 40, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 57, "col_offset": 36, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 57, "col_offset": 46, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 59, "col_offset": 43, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 59, "col_offset": 53, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 62, "col_offset": 30, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 62, "col_offset": 39, "nodeName": "actor_params", "type": "Any"}, {"lineNumber": 63, "col_offset": 35, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 63, "col_offset": 45, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 65, "col_offset": 42, "nodeName": "Regressor", "type": "Type[mushroom_rl.approximators.regressor.Regressor]"}, {"lineNumber": 65, "col_offset": 52, "nodeName": "TorchApproximator", "type": "Type[mushroom_rl.approximators.parametric.torch_approximator.TorchApproximator]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "_init_target", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "_target_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "_init_target", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 70, "col_offset": 26, "nodeName": "_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 71, "col_offset": 26, "nodeName": "_target_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 73, "col_offset": 17, "nodeName": "policy_class", "type": "Any"}, {"lineNumber": 73, "col_offset": 30, "nodeName": "_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "_add_save_attr", "type": "Callable[..., None]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "__init__", "type": "Callable[[Any, Any, Any, Any], None]"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 89, "col_offset": 35, "nodeName": "policy", "type": "Any"}, {"lineNumber": 89, "col_offset": 43, "nodeName": "actor_optimizer", "type": "Any"}, {"lineNumber": 89, "col_offset": 60, "nodeName": "policy_parameters", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "add", "type": "Callable[[Any], None]"}, {"lineNumber": 92, "col_offset": 32, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 93, "col_offset": 11, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "q_next", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "q", "type": "Any"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "_fit_count", "type": "int"}, {"lineNumber": 115, "col_offset": 17, "nodeName": "_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 115, "col_offset": 42, "nodeName": "state", "type": "Any"}, {"lineNumber": 116, "col_offset": 12, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 116, "col_offset": 38, "nodeName": "state", "type": "Any"}, {"lineNumber": 116, "col_offset": 45, "nodeName": "action", "type": "Any"}, {"lineNumber": 133, "col_offset": 12, "nodeName": "_target_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 133, "col_offset": 44, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 135, "col_offset": 53, "nodeName": "next_state", "type": "Any"}, {"lineNumber": 135, "col_offset": 65, "nodeName": "a", "type": "Any"}, {"lineNumber": 136, "col_offset": 17, "nodeName": "absorbing", "type": "Any"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 141, "col_offset": 35, "nodeName": "policy", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "_update_optimizer_parameters", "type": "Callable[[Any], None]"}, {"lineNumber": 47, "col_offset": 44, "nodeName": "critic_fit_params", "type": "Any"}, {"lineNumber": 47, "col_offset": 34, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 58, "col_offset": 48, "nodeName": "critic_params", "type": "Any"}, {"lineNumber": 60, "col_offset": 55, "nodeName": "target_critic_params", "type": "Any"}, {"lineNumber": 64, "col_offset": 47, "nodeName": "actor_params", "type": "Any"}, {"lineNumber": 66, "col_offset": 54, "nodeName": "target_actor_params", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 69, "col_offset": 26, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 70, "col_offset": 26, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 71, "col_offset": 26, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 73, "col_offset": 30, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 73, "col_offset": 58, "nodeName": "policy_params", "type": "Any"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "network", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 93, "col_offset": 11, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 94, "col_offset": 19, "nodeName": "action", "type": "numpy.ndarray"}, {"lineNumber": 94, "col_offset": 27, "nodeName": "reward", "type": "numpy.ndarray"}, {"lineNumber": 94, "col_offset": 35, "nodeName": "next_state", "type": "numpy.ndarray"}, {"lineNumber": 94, "col_offset": 47, "nodeName": "absorbing", "type": "numpy.ndarray"}, {"lineNumber": 94, "col_offset": 58, "nodeName": "_", "type": "numpy.ndarray"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "get", "type": "Callable[[Any], Tuple[numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray, numpy.ndarray]]"}, {"lineNumber": 95, "col_offset": 40, "nodeName": "_batch_size", "type": "Any"}, {"lineNumber": 97, "col_offset": 21, "nodeName": "_next_q", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 97, "col_offset": 34, "nodeName": "next_state", "type": "numpy.ndarray"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "absorbing", "type": "numpy.ndarray"}, {"lineNumber": 98, "col_offset": 16, "nodeName": "reward", "type": "numpy.ndarray"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "fit", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 42, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 100, "col_offset": 49, "nodeName": "action", "type": "numpy.ndarray"}, {"lineNumber": 100, "col_offset": 57, "nodeName": "q", "type": "Any"}, {"lineNumber": 104, "col_offset": 16, "nodeName": "loss", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "_update_target", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 107, "col_offset": 32, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 108, "col_offset": 32, "nodeName": "_target_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 109, "col_offset": 12, "nodeName": "_update_target", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 109, "col_offset": 32, "nodeName": "_actor_approximator", "type": "Any"}, {"lineNumber": 110, "col_offset": 32, "nodeName": "_target_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 115, "col_offset": 17, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 116, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 118, "col_offset": 16, "nodeName": "mean", "type": "Any"}, {"lineNumber": 133, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "_target_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 141, "col_offset": 35, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "model", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "_replay_memory", "type": "mushroom_rl.utils.replay_memory.ReplayMemory"}, {"lineNumber": 95, "col_offset": 40, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 97, "col_offset": 21, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "gamma", "type": "Any"}, {"lineNumber": 98, "col_offset": 47, "nodeName": "q_next", "type": "Any"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "_critic_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 101, "col_offset": 44, "nodeName": "_critic_fit_params", "type": "Union[Dict[nothing, nothing], Any]"}, {"lineNumber": 103, "col_offset": 15, "nodeName": "_fit_count", "type": "int"}, {"lineNumber": 103, "col_offset": 33, "nodeName": "_policy_delay", "type": "Any"}, {"lineNumber": 104, "col_offset": 23, "nodeName": "_loss", "type": "Callable[[Any], Any]"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "state", "type": "numpy.ndarray"}, {"lineNumber": 105, "col_offset": 16, "nodeName": "_optimize_actor_parameters", "type": "Callable[[Any], None]"}, {"lineNumber": 105, "col_offset": 48, "nodeName": "loss", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 107, "col_offset": 32, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 108, "col_offset": 32, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 109, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 109, "col_offset": 32, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 110, "col_offset": 32, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 118, "col_offset": 16, "nodeName": "q", "type": "Any"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "network", "type": "Any"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "_actor_approximator", "type": "mushroom_rl.approximators.regressor.Regressor"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "mdp_info", "type": "Any"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 101, "col_offset": 44, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 103, "col_offset": 15, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 103, "col_offset": 33, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 104, "col_offset": 23, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 105, "col_offset": 16, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "model", "type": "Any"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 98, "col_offset": 25, "nodeName": "self", "type": "DDPG"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "_actor_approximator", "type": "Any"}, {"lineNumber": 142, "col_offset": 42, "nodeName": "self", "type": "DDPG"}]