[{"lineNumber": 9, "col_offset": 0, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 44, "col_offset": 0, "nodeName": "test_torch_policy", "type": "Callable[[], Any]"}, {"lineNumber": 57, "col_offset": 0, "nodeName": "test_gaussian_torch_policy", "type": "Callable[[], Any]"}, {"lineNumber": 18, "col_offset": 14, "nodeName": "Module", "type": "Any"}, {"lineNumber": 18, "col_offset": 14, "nodeName": "nn", "type": "Any"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "use_cuda", "type": "Any"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "pi", "type": "mushroom.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "state", "type": "Any"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "action", "type": "Any"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "action_test", "type": "numpy.ndarray"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "p_sa", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "p_sa_test", "type": "float"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "entropy_test", "type": "float"}, {"lineNumber": 12, "col_offset": 11, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "n_input", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "n_output", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "_h1", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "_h2", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "_h3", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "features1", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "features2", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 41, "col_offset": 15, "nodeName": "a", "type": "Any"}, {"lineNumber": 45, "col_offset": 10, "nodeName": "TorchPolicy", "type": "Type[mushroom.policy.torch_policy.TorchPolicy]"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "draw_action_t", "type": "Callable[[Any], Any]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 47, "col_offset": 27, "nodeName": "log_prob_t", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "entropy_t", "type": "Callable[..., Any]"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "distribution_t", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "set_weights", "type": "Callable[[Any], Any]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 51, "col_offset": 27, "nodeName": "get_weights", "type": "Callable[[], Any]"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "abstract_method_tester", "type": "Callable[..., Any]"}, {"lineNumber": 52, "col_offset": 27, "nodeName": "parameters", "type": "Callable[[], Any]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "reset", "type": "Callable[[], None]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "seed", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "manual_seed", "type": "Any"}, {"lineNumber": 60, "col_offset": 9, "nodeName": "GaussianTorchPolicy", "type": "Type[mushroom.policy.torch_policy.GaussianTorchPolicy]"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "Network", "type": "Type[Network]"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "rand", "type": "Any"}, {"lineNumber": 63, "col_offset": 13, "nodeName": "draw_action", "type": "Callable[[Any], Any]"}, {"lineNumber": 63, "col_offset": 28, "nodeName": "state", "type": "Any"}, {"lineNumber": 64, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 65, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 65, "col_offset": 23, "nodeName": "action", "type": "Any"}, {"lineNumber": 65, "col_offset": 31, "nodeName": "action_test", "type": "numpy.ndarray"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "pi", "type": "mushroom.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 67, "col_offset": 14, "nodeName": "state", "type": "Any"}, {"lineNumber": 67, "col_offset": 21, "nodeName": "action", "type": "Any"}, {"lineNumber": 69, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 69, "col_offset": 23, "nodeName": "p_sa", "type": "Any"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "p_sa_test", "type": "float"}, {"lineNumber": 71, "col_offset": 14, "nodeName": "entropy", "type": "Callable[..., Any]"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "allclose", "type": "Any"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "entropy", "type": "Any"}, {"lineNumber": 73, "col_offset": 32, "nodeName": "entropy_test", "type": "float"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 22, "col_offset": 18, "nodeName": "input_shape", "type": "Any"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "output_shape", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "Network"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 25, "col_offset": 29, "nodeName": "n_input", "type": "Any"}, {"lineNumber": 25, "col_offset": 38, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "self", "type": "Network"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 26, "col_offset": 41, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "Network"}, {"lineNumber": 27, "col_offset": 19, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 27, "col_offset": 29, "nodeName": "n_features", "type": "Any"}, {"lineNumber": 27, "col_offset": 41, "nodeName": "n_output", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "xavier_uniform_", "type": "Any"}, {"lineNumber": 29, "col_offset": 32, "nodeName": "weight", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "xavier_uniform_", "type": "Any"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "weight", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "xavier_uniform_", "type": "Any"}, {"lineNumber": 33, "col_offset": 32, "nodeName": "weight", "type": "Any"}, {"lineNumber": 37, "col_offset": 20, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "tanh", "type": "Any"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "_h3", "type": "Any"}, {"lineNumber": 39, "col_offset": 21, "nodeName": "features2", "type": "Any"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 47, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 51, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 52, "col_offset": 27, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "tmp", "type": "mushroom.policy.torch_policy.TorchPolicy"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "random", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "torch", "type": "Any"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 63, "col_offset": 13, "nodeName": "pi", "type": "mushroom.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 64, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 65, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 69, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 14, "nodeName": "pi", "type": "mushroom.policy.torch_policy.GaussianTorchPolicy"}, {"lineNumber": 73, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 11, "col_offset": 11, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "nn", "type": "Any"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "nn", "type": "Any"}, {"lineNumber": 27, "col_offset": 19, "nodeName": "nn", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 29, "col_offset": 32, "nodeName": "_h1", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "_h2", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 33, "col_offset": 32, "nodeName": "_h3", "type": "Any"}, {"lineNumber": 37, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 37, "col_offset": 31, "nodeName": "_h1", "type": "Any"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 38, "col_offset": 31, "nodeName": "_h2", "type": "Any"}, {"lineNumber": 38, "col_offset": 40, "nodeName": "features1", "type": "Any"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "self", "type": "Network"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 20, "col_offset": 14, "nodeName": "Network", "type": "Type[Network]"}, {"lineNumber": 20, "col_offset": 23, "nodeName": "self", "type": "Network"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "nn", "type": "Any"}, {"lineNumber": 29, "col_offset": 32, "nodeName": "self", "type": "Network"}, {"lineNumber": 30, "col_offset": 37, "nodeName": "calculate_gain", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "nn", "type": "Any"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "self", "type": "Network"}, {"lineNumber": 32, "col_offset": 37, "nodeName": "calculate_gain", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "nn", "type": "Any"}, {"lineNumber": 33, "col_offset": 32, "nodeName": "self", "type": "Network"}, {"lineNumber": 34, "col_offset": 37, "nodeName": "calculate_gain", "type": "Any"}, {"lineNumber": 37, "col_offset": 31, "nodeName": "self", "type": "Network"}, {"lineNumber": 37, "col_offset": 40, "nodeName": "float", "type": "Any"}, {"lineNumber": 38, "col_offset": 31, "nodeName": "self", "type": "Network"}, {"lineNumber": 30, "col_offset": 37, "nodeName": "init", "type": "Any"}, {"lineNumber": 32, "col_offset": 37, "nodeName": "init", "type": "Any"}, {"lineNumber": 34, "col_offset": 37, "nodeName": "init", "type": "Any"}, {"lineNumber": 30, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 32, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 34, "col_offset": 37, "nodeName": "nn", "type": "Any"}, {"lineNumber": 37, "col_offset": 40, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 37, "col_offset": 54, "nodeName": "state", "type": "Any"}, {"lineNumber": 37, "col_offset": 40, "nodeName": "torch", "type": "Any"}]