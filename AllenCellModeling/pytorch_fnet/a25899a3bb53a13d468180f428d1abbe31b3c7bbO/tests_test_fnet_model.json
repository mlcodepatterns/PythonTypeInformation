[{"lineNumber": 7, "col_offset": 0, "nodeName": "get_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 16, "col_offset": 20, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "test_move", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "test_save_load", "type": "Callable[[Any], Any]"}, {"lineNumber": 8, "col_offset": 4, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 14, "col_offset": 11, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 16, "col_offset": 20, "nodeName": "unittest", "type": "module"}, {"lineNumber": 68, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 8, "col_offset": 12, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 9, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 9, "col_offset": 18, "nodeName": "x", "type": "Any"}, {"lineNumber": 9, "col_offset": 21, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "y_batch", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "move_start", "type": "Callable[[], Any]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "move_cpu", "type": "Callable[[], Any]"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "move_1", "type": "Callable[[], Any]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "move_023", "type": "Callable[[], Any]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "moves", "type": "List[Callable[[], Any]]"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "move", "type": "Callable[[], Any]"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "moves", "type": "List[Callable[[], Any]]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "path_save", "type": "str"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "loss", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "loss", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "state_model", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "path_save_dir", "type": "str"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "new_model", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "types_loaded", "type": "Set[Any]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "loss", "type": "Any"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 10, "col_offset": 12, "nodeName": "key", "type": "Any"}, {"lineNumber": 10, "col_offset": 17, "nodeName": "val", "type": "Any"}, {"lineNumber": 10, "col_offset": 24, "nodeName": "items", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "add", "type": "Callable"}, {"lineNumber": 18, "col_offset": 21, "nodeName": "Model", "type": "Type[fnet.fnet_model.Model]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 22, "col_offset": 23, "nodeName": "rand", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 30, "col_offset": 17, "nodeName": "move_start", "type": "Callable[[], Any]"}, {"lineNumber": 30, "col_offset": 29, "nodeName": "move_cpu", "type": "Callable[[], Any]"}, {"lineNumber": 30, "col_offset": 39, "nodeName": "move_1", "type": "Callable[[], Any]"}, {"lineNumber": 30, "col_offset": 47, "nodeName": "move_023", "type": "Callable[[], Any]"}, {"lineNumber": 35, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "types_nn", "type": "Set[Any]"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "types_optim", "type": "Set[Any]"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "y_pred_batch", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "to_gpu", "type": "Callable[[Any], None]"}, {"lineNumber": 53, "col_offset": 15, "nodeName": "do_train_iter", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 53, "col_offset": 40, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 53, "col_offset": 54, "nodeName": "y_batch", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "save_state", "type": "Callable[[Any], None]"}, {"lineNumber": 54, "col_offset": 30, "nodeName": "path_save", "type": "str"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "do_train_iter", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 55, "col_offset": 40, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 55, "col_offset": 54, "nodeName": "y_batch", "type": "Any"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "load", "type": "Any"}, {"lineNumber": 58, "col_offset": 33, "nodeName": "path_save", "type": "str"}, {"lineNumber": 59, "col_offset": 16, "nodeName": "get_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 59, "col_offset": 26, "nodeName": "state_model", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "dirname", "type": "Callable"}, {"lineNumber": 63, "col_offset": 40, "nodeName": "path_save", "type": "str"}, {"lineNumber": 64, "col_offset": 20, "nodeName": "load_model_from_dir", "type": "Any"}, {"lineNumber": 64, "col_offset": 45, "nodeName": "path_save_dir", "type": "str"}, {"lineNumber": 65, "col_offset": 23, "nodeName": "get_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "do_train_iter", "type": "Any"}, {"lineNumber": 66, "col_offset": 39, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 66, "col_offset": 53, "nodeName": "y_batch", "type": "Any"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 10, "col_offset": 24, "nodeName": "x", "type": "Any"}, {"lineNumber": 11, "col_offset": 12, "nodeName": "update", "type": "Callable[..., None]"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 13, "col_offset": 18, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 13, "col_offset": 23, "nodeName": "x", "type": "Any"}, {"lineNumber": 18, "col_offset": 21, "nodeName": "fnet_model", "type": "module"}, {"lineNumber": 22, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 27, "col_offset": 28, "nodeName": "to_gpu", "type": "Callable[[Any], None]"}, {"lineNumber": 28, "col_offset": 26, "nodeName": "to_gpu", "type": "Callable[[Any], None]"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "to_gpu", "type": "Callable[[Any], None]"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "move", "type": "Callable[[], Any]"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "gpu_ids", "type": "Any"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "do_train_iter", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 35, "col_offset": 44, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 35, "col_offset": 58, "nodeName": "y_batch", "type": "Any"}, {"lineNumber": 36, "col_offset": 23, "nodeName": "get_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 37, "col_offset": 26, "nodeName": "get_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "predict", "type": "Callable[[Any], Any]"}, {"lineNumber": 38, "col_offset": 46, "nodeName": "x_batch", "type": "Any"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "move", "type": "Callable[[], Any]"}, {"lineNumber": 39, "col_offset": 23, "nodeName": "move_cpu", "type": "Callable[[], Any]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 53, "col_offset": 15, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 53, "col_offset": 40, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 53, "col_offset": 54, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 55, "col_offset": 40, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 55, "col_offset": 54, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "torch", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 60, "col_offset": 51, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 61, "col_offset": 45, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "path", "type": "module"}, {"lineNumber": 64, "col_offset": 20, "nodeName": "fnet", "type": "module"}, {"lineNumber": 65, "col_offset": 33, "nodeName": "get_state", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "new_model", "type": "Any"}, {"lineNumber": 66, "col_offset": 39, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 66, "col_offset": 53, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 11, "col_offset": 12, "nodeName": "types", "type": "Set[Any]"}, {"lineNumber": 11, "col_offset": 25, "nodeName": "get_types", "type": "Callable[[Any], Any]"}, {"lineNumber": 11, "col_offset": 35, "nodeName": "val", "type": "Any"}, {"lineNumber": 18, "col_offset": 21, "nodeName": "fnet", "type": "module"}, {"lineNumber": 27, "col_offset": 28, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 28, "col_offset": 26, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 35, "col_offset": 44, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 35, "col_offset": 58, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "state_dict", "type": "Any"}, {"lineNumber": 37, "col_offset": 36, "nodeName": "state_dict", "type": "Any"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 38, "col_offset": 46, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 40, "col_offset": 16, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 48, "col_offset": 16, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 53, "col_offset": 15, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "os", "type": "module"}, {"lineNumber": 65, "col_offset": 33, "nodeName": "new_model", "type": "Any"}, {"lineNumber": 27, "col_offset": 28, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 28, "col_offset": 26, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "net", "type": "Any"}, {"lineNumber": 37, "col_offset": 36, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 40, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 40, "col_offset": 33, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 40, "col_offset": 59, "nodeName": "types_nn", "type": "Set[Any]"}, {"lineNumber": 41, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 41, "col_offset": 33, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 41, "col_offset": 59, "nodeName": "types_optim", "type": "Set[Any]"}, {"lineNumber": 42, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 42, "col_offset": 32, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 42, "col_offset": 53, "nodeName": "types_nn", "type": "Set[Any]"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 43, "col_offset": 32, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 43, "col_offset": 53, "nodeName": "types_optim", "type": "Set[Any]"}, {"lineNumber": 45, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 45, "col_offset": 32, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 45, "col_offset": 58, "nodeName": "types_nn", "type": "Set[Any]"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 46, "col_offset": 32, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 46, "col_offset": 58, "nodeName": "types_optim", "type": "Set[Any]"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 47, "col_offset": 33, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 47, "col_offset": 54, "nodeName": "types_nn", "type": "Set[Any]"}, {"lineNumber": 48, "col_offset": 16, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 48, "col_offset": 33, "nodeName": "FloatTensor", "type": "Any"}, {"lineNumber": 48, "col_offset": 54, "nodeName": "types_optim", "type": "Set[Any]"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 37, "col_offset": 36, "nodeName": "model", "type": "fnet.fnet_model.Model"}, {"lineNumber": 40, "col_offset": 33, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 41, "col_offset": 33, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 42, "col_offset": 32, "nodeName": "torch", "type": "Any"}, {"lineNumber": 43, "col_offset": 32, "nodeName": "torch", "type": "Any"}, {"lineNumber": 45, "col_offset": 32, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 46, "col_offset": 32, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 47, "col_offset": 33, "nodeName": "torch", "type": "Any"}, {"lineNumber": 48, "col_offset": 33, "nodeName": "torch", "type": "Any"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 37, "col_offset": 36, "nodeName": "self", "type": "TestFnetModel"}, {"lineNumber": 40, "col_offset": 33, "nodeName": "torch", "type": "Any"}, {"lineNumber": 41, "col_offset": 33, "nodeName": "torch", "type": "Any"}, {"lineNumber": 45, "col_offset": 32, "nodeName": "torch", "type": "Any"}, {"lineNumber": 46, "col_offset": 32, "nodeName": "torch", "type": "Any"}]