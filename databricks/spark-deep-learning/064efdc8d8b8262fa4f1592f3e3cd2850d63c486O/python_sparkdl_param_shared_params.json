[{"lineNumber": 35, "col_offset": 0, "nodeName": "keyword_only", "type": "Callable[[Any], Any]"}, {"lineNumber": 53, "col_offset": 18, "nodeName": "Params", "type": "Any"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "setInputCol", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "getInputCol", "type": "Callable[[Any], Any]"}, {"lineNumber": 74, "col_offset": 19, "nodeName": "Params", "type": "Any"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "__init__", "type": "Callable[[Any], Any]"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "setOutputCol", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 92, "col_offset": 4, "nodeName": "getOutputCol", "type": "Callable[[Any], Any]"}, {"lineNumber": 104, "col_offset": 24, "nodeName": "Params", "type": "Any"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "setOutputNodeName", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "getOutputNodeName", "type": "Callable[[Any], Any]"}, {"lineNumber": 117, "col_offset": 18, "nodeName": "Params", "type": "Any"}, {"lineNumber": 130, "col_offset": 4, "nodeName": "setLabelCol", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 133, "col_offset": 4, "nodeName": "getLabelCol", "type": "Callable[[Any], Any]"}, {"lineNumber": 137, "col_offset": 20, "nodeName": "Params", "type": "Any"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "__init__", "type": "Callable[[Any], Any]"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "setModelFile", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "getModelFile", "type": "Callable[[Any], Any]"}, {"lineNumber": 159, "col_offset": 4, "nodeName": "setKerasFitParams", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 162, "col_offset": 4, "nodeName": "getKerasFitParams", "type": "Callable[[Any], Any]"}, {"lineNumber": 166, "col_offset": 24, "nodeName": "Params", "type": "Any"}, {"lineNumber": 172, "col_offset": 4, "nodeName": "__init__", "type": "Callable[[Any], Any]"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "setKerasOptimizer", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 180, "col_offset": 4, "nodeName": "getKerasOptimizer", "type": "Callable[[Any], Any]"}, {"lineNumber": 184, "col_offset": 19, "nodeName": "Params", "type": "Any"}, {"lineNumber": 190, "col_offset": 4, "nodeName": "seKerasLoss", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 193, "col_offset": 4, "nodeName": "getKerasLoss", "type": "Callable[[Any], Any]"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "Params", "type": "Any"}, {"lineNumber": 206, "col_offset": 4, "nodeName": "setOutputMapping", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 209, "col_offset": 4, "nodeName": "getOutputMapping", "type": "Callable[[Any], Any]"}, {"lineNumber": 213, "col_offset": 22, "nodeName": "Params", "type": "Any"}, {"lineNumber": 222, "col_offset": 4, "nodeName": "setInputMapping", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 225, "col_offset": 4, "nodeName": "getInputMapping", "type": "Callable[[Any], Any]"}, {"lineNumber": 229, "col_offset": 22, "nodeName": "Params", "type": "Any"}, {"lineNumber": 238, "col_offset": 4, "nodeName": "__init__", "type": "Callable[[Any], Any]"}, {"lineNumber": 242, "col_offset": 4, "nodeName": "setTFInputGraph", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 245, "col_offset": 4, "nodeName": "getTFInputGraph", "type": "Callable[[Any], Any]"}, {"lineNumber": 249, "col_offset": 19, "nodeName": "Params", "type": "Any"}, {"lineNumber": 263, "col_offset": 4, "nodeName": "setTFHParams", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 266, "col_offset": 4, "nodeName": "getTFHParams", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 11, "nodeName": "wrapper", "type": "Callable[..., Any]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "_input_kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 47, "col_offset": 29, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "Param", "type": "Any"}, {"lineNumber": 79, "col_offset": 16, "nodeName": "Param", "type": "Any"}, {"lineNumber": 106, "col_offset": 21, "nodeName": "Param", "type": "Any"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "Param", "type": "Any"}, {"lineNumber": 142, "col_offset": 16, "nodeName": "Param", "type": "Any"}, {"lineNumber": 146, "col_offset": 21, "nodeName": "Param", "type": "Any"}, {"lineNumber": 168, "col_offset": 21, "nodeName": "Param", "type": "Any"}, {"lineNumber": 186, "col_offset": 16, "nodeName": "Param", "type": "Any"}, {"lineNumber": 201, "col_offset": 20, "nodeName": "Param", "type": "Any"}, {"lineNumber": 217, "col_offset": 19, "nodeName": "Param", "type": "Any"}, {"lineNumber": 233, "col_offset": 19, "nodeName": "Param", "type": "Any"}, {"lineNumber": 253, "col_offset": 16, "nodeName": "Param", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "self", "type": "Any"}, {"lineNumber": 58, "col_offset": 21, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 59, "col_offset": 35, "nodeName": "toString", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "inputCol", "type": "Any"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 80, "col_offset": 36, "nodeName": "toString", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "_setDefault", "type": "Any"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 96, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 96, "col_offset": 33, "nodeName": "outputCol", "type": "Any"}, {"lineNumber": 106, "col_offset": 27, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "toString", "type": "Any"}, {"lineNumber": 111, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 114, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 114, "col_offset": 33, "nodeName": "outputNodeName", "type": "Any"}, {"lineNumber": 126, "col_offset": 21, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 128, "col_offset": 35, "nodeName": "toString", "type": "Any"}, {"lineNumber": 131, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 134, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 134, "col_offset": 33, "nodeName": "labelCol", "type": "Any"}, {"lineNumber": 142, "col_offset": 22, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 144, "col_offset": 36, "nodeName": "toString", "type": "Any"}, {"lineNumber": 146, "col_offset": 27, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "_setDefault", "type": "Any"}, {"lineNumber": 154, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 157, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 157, "col_offset": 33, "nodeName": "modelFile", "type": "Any"}, {"lineNumber": 160, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 163, "col_offset": 33, "nodeName": "kerasFitParams", "type": "Any"}, {"lineNumber": 168, "col_offset": 27, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 170, "col_offset": 41, "nodeName": "toKerasOptimizer", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "_setDefault", "type": "Any"}, {"lineNumber": 178, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 181, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 181, "col_offset": 33, "nodeName": "kerasOptimizer", "type": "Any"}, {"lineNumber": 186, "col_offset": 22, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 188, "col_offset": 36, "nodeName": "toKerasLoss", "type": "Any"}, {"lineNumber": 191, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 194, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 194, "col_offset": 33, "nodeName": "kerasLoss", "type": "Any"}, {"lineNumber": 201, "col_offset": 26, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 204, "col_offset": 40, "nodeName": "asTensorNameToColumnMap", "type": "Any"}, {"lineNumber": 207, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 210, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 210, "col_offset": 33, "nodeName": "outputMapping", "type": "Any"}, {"lineNumber": 217, "col_offset": 25, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 220, "col_offset": 39, "nodeName": "asColumnToTensorNameMap", "type": "Any"}, {"lineNumber": 223, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 226, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 226, "col_offset": 33, "nodeName": "inputMapping", "type": "Any"}, {"lineNumber": 233, "col_offset": 25, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 236, "col_offset": 39, "nodeName": "toTFInputGraph", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "_setDefault", "type": "Any"}, {"lineNumber": 243, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 246, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 246, "col_offset": 33, "nodeName": "tfInputGraph", "type": "Any"}, {"lineNumber": 253, "col_offset": 22, "nodeName": "_dummy", "type": "Any"}, {"lineNumber": 254, "col_offset": 22, "nodeName": "dedent", "type": "Callable"}, {"lineNumber": 261, "col_offset": 36, "nodeName": "toTFHParams", "type": "Any"}, {"lineNumber": 264, "col_offset": 15, "nodeName": "_set", "type": "Any"}, {"lineNumber": 267, "col_offset": 15, "nodeName": "getOrDefault", "type": "Any"}, {"lineNumber": 267, "col_offset": 33, "nodeName": "tfHParams", "type": "Any"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 45, "col_offset": 15, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 46, "col_offset": 18, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 48, "col_offset": 28, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 58, "col_offset": 21, "nodeName": "Params", "type": "Any"}, {"lineNumber": 59, "col_offset": 35, "nodeName": "TypeConverters", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "self", "type": "HasInputCol"}, {"lineNumber": 65, "col_offset": 34, "nodeName": "value", "type": "Any"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "self", "type": "HasInputCol"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "self", "type": "HasInputCol"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "Params", "type": "Any"}, {"lineNumber": 80, "col_offset": 36, "nodeName": "TypeConverters", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "self", "type": "HasOutputCol"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "self", "type": "HasOutputCol"}, {"lineNumber": 90, "col_offset": 35, "nodeName": "value", "type": "Any"}, {"lineNumber": 96, "col_offset": 15, "nodeName": "self", "type": "HasOutputCol"}, {"lineNumber": 96, "col_offset": 33, "nodeName": "self", "type": "HasOutputCol"}, {"lineNumber": 106, "col_offset": 27, "nodeName": "Params", "type": "Any"}, {"lineNumber": 108, "col_offset": 41, "nodeName": "TypeConverters", "type": "Any"}, {"lineNumber": 111, "col_offset": 15, "nodeName": "self", "type": "HasOutputNodeName"}, {"lineNumber": 111, "col_offset": 40, "nodeName": "value", "type": "Any"}, {"lineNumber": 114, "col_offset": 15, "nodeName": "self", "type": "HasOutputNodeName"}, {"lineNumber": 114, "col_offset": 33, "nodeName": "self", "type": "HasOutputNodeName"}, {"lineNumber": 126, "col_offset": 21, "nodeName": "Params", "type": "Any"}, {"lineNumber": 128, "col_offset": 35, "nodeName": "TypeConverters", "type": "Any"}, {"lineNumber": 131, "col_offset": 15, "nodeName": "self", "type": "HasLabelCol"}, {"lineNumber": 131, "col_offset": 34, "nodeName": "value", "type": "Any"}, {"lineNumber": 134, "col_offset": 15, "nodeName": "self", "type": "HasLabelCol"}, {"lineNumber": 134, "col_offset": 33, "nodeName": "self", "type": "HasLabelCol"}, {"lineNumber": 142, "col_offset": 22, "nodeName": "Params", "type": "Any"}, {"lineNumber": 144, "col_offset": 36, "nodeName": "TypeConverters", "type": "Any"}, {"lineNumber": 146, "col_offset": 27, "nodeName": "Params", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 154, "col_offset": 15, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 154, "col_offset": 35, "nodeName": "value", "type": "Any"}, {"lineNumber": 157, "col_offset": 15, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 157, "col_offset": 33, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 160, "col_offset": 15, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 160, "col_offset": 40, "nodeName": "value", "type": "Any"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 163, "col_offset": 33, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 168, "col_offset": 27, "nodeName": "Params", "type": "Any"}, {"lineNumber": 170, "col_offset": 41, "nodeName": "SparkDLTypeConverters", "type": "Any"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "self", "type": "HasKerasOptimizer"}, {"lineNumber": 178, "col_offset": 15, "nodeName": "self", "type": "HasKerasOptimizer"}, {"lineNumber": 178, "col_offset": 40, "nodeName": "value", "type": "Any"}, {"lineNumber": 181, "col_offset": 15, "nodeName": "self", "type": "HasKerasOptimizer"}, {"lineNumber": 181, "col_offset": 33, "nodeName": "self", "type": "HasKerasOptimizer"}, {"lineNumber": 186, "col_offset": 22, "nodeName": "Params", "type": "Any"}, {"lineNumber": 188, "col_offset": 36, "nodeName": "SparkDLTypeConverters", "type": "Any"}, {"lineNumber": 191, "col_offset": 15, "nodeName": "self", "type": "HasKerasLoss"}, {"lineNumber": 191, "col_offset": 35, "nodeName": "value", "type": "Any"}, {"lineNumber": 194, "col_offset": 15, "nodeName": "self", "type": "HasKerasLoss"}, {"lineNumber": 194, "col_offset": 33, "nodeName": "self", "type": "HasKerasLoss"}, {"lineNumber": 201, "col_offset": 26, "nodeName": "Params", "type": "Any"}, {"lineNumber": 204, "col_offset": 40, "nodeName": "SparkDLTypeConverters", "type": "Any"}, {"lineNumber": 207, "col_offset": 15, "nodeName": "self", "type": "HasOutputMapping"}, {"lineNumber": 207, "col_offset": 39, "nodeName": "value", "type": "Any"}, {"lineNumber": 210, "col_offset": 15, "nodeName": "self", "type": "HasOutputMapping"}, {"lineNumber": 210, "col_offset": 33, "nodeName": "self", "type": "HasOutputMapping"}, {"lineNumber": 217, "col_offset": 25, "nodeName": "Params", "type": "Any"}, {"lineNumber": 220, "col_offset": 39, "nodeName": "SparkDLTypeConverters", "type": "Any"}, {"lineNumber": 223, "col_offset": 15, "nodeName": "self", "type": "HasInputMapping"}, {"lineNumber": 223, "col_offset": 38, "nodeName": "value", "type": "Any"}, {"lineNumber": 226, "col_offset": 15, "nodeName": "self", "type": "HasInputMapping"}, {"lineNumber": 226, "col_offset": 33, "nodeName": "self", "type": "HasInputMapping"}, {"lineNumber": 233, "col_offset": 25, "nodeName": "Params", "type": "Any"}, {"lineNumber": 236, "col_offset": 39, "nodeName": "SparkDLTypeConverters", "type": "Any"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "self", "type": "HasTFInputGraph"}, {"lineNumber": 243, "col_offset": 15, "nodeName": "self", "type": "HasTFInputGraph"}, {"lineNumber": 243, "col_offset": 38, "nodeName": "value", "type": "Any"}, {"lineNumber": 246, "col_offset": 15, "nodeName": "self", "type": "HasTFInputGraph"}, {"lineNumber": 246, "col_offset": 33, "nodeName": "self", "type": "HasTFInputGraph"}, {"lineNumber": 253, "col_offset": 22, "nodeName": "Params", "type": "Any"}, {"lineNumber": 254, "col_offset": 22, "nodeName": "textwrap", "type": "module"}, {"lineNumber": 261, "col_offset": 36, "nodeName": "SparkDLTypeConverters", "type": "Any"}, {"lineNumber": 264, "col_offset": 15, "nodeName": "self", "type": "HasTFHParams"}, {"lineNumber": 264, "col_offset": 34, "nodeName": "value", "type": "Any"}, {"lineNumber": 267, "col_offset": 15, "nodeName": "self", "type": "HasTFHParams"}, {"lineNumber": 267, "col_offset": 33, "nodeName": "self", "type": "HasTFHParams"}, {"lineNumber": 46, "col_offset": 68, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 83, "col_offset": 14, "nodeName": "HasOutputCol", "type": "Type[HasOutputCol]"}, {"lineNumber": 83, "col_offset": 28, "nodeName": "self", "type": "HasOutputCol"}, {"lineNumber": 84, "col_offset": 35, "nodeName": "uid", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 150, "col_offset": 14, "nodeName": "HasKerasModel", "type": "Type[HasKerasModel]"}, {"lineNumber": 150, "col_offset": 29, "nodeName": "self", "type": "HasKerasModel"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 173, "col_offset": 14, "nodeName": "HasKerasOptimizer", "type": "Type[HasKerasOptimizer]"}, {"lineNumber": 173, "col_offset": 33, "nodeName": "self", "type": "HasKerasOptimizer"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 239, "col_offset": 14, "nodeName": "HasTFInputGraph", "type": "Type[HasTFInputGraph]"}, {"lineNumber": 239, "col_offset": 31, "nodeName": "self", "type": "HasTFInputGraph"}, {"lineNumber": 46, "col_offset": 68, "nodeName": "func", "type": "Any"}, {"lineNumber": 84, "col_offset": 35, "nodeName": "self", "type": "HasOutputCol"}]