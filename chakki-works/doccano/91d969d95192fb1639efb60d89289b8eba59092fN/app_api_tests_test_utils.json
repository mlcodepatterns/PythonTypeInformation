[{"lineNumber": 13, "col_offset": 22, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 14, "col_offset": 4, "nodeName": "test_extract_label", "type": "Callable[[Any], Any]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "test_exclude_created_labels", "type": "Callable[[Any], Any]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "test_to_serializer_format", "type": "Callable[[Any], Any]"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "test_get_shortkey_without_existing_shortkey", "type": "Callable[[Any], Any]"}, {"lineNumber": 50, "col_offset": 4, "nodeName": "test_get_shortkey_with_existing_shortkey", "type": "Callable[[Any], Any]"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "test_update_saved_labels", "type": "Callable[[Any], Any]"}, {"lineNumber": 67, "col_offset": 32, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "test_extract_unique_labels", "type": "Callable[[Any], Any]"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "test_make_annotations", "type": "Callable[[Any], Any]"}, {"lineNumber": 90, "col_offset": 34, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "test_extract_unique_labels", "type": "Callable[[Any], Any]"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "test_make_annotations", "type": "Callable[[Any], Any]"}, {"lineNumber": 111, "col_offset": 25, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "test_make_annotations", "type": "Callable[[Any], Any]"}, {"lineNumber": 125, "col_offset": 22, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "test_calc_char_offset", "type": "Callable[[Any], Any]"}, {"lineNumber": 142, "col_offset": 22, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "test_parse_mp3", "type": "Callable[[Any], Any]"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "test_parse_unknown", "type": "Callable[[Any], Any]"}, {"lineNumber": 162, "col_offset": 23, "nodeName": "TestCase", "type": "Any"}, {"lineNumber": 163, "col_offset": 4, "nodeName": "test", "type": "Callable[[Any], Any]"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "iterable", "type": "Callable[[], Any]"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "data", "type": "List[Dict[str, List[str]]]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "labels", "type": "List[str]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "created", "type": "Dict[str, Any]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "labels", "type": "List[str]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "created", "type": "Dict[nothing, nothing]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "label", "type": "str"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "created", "type": "Dict[nothing, nothing]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "label", "type": "str"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "created", "type": "Set[Tuple[str, None]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "saved", "type": "Dict[str, Any]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "new", "type": "List[Any]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "labels", "type": "List[List[str]]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "labels", "type": "List[List[str]]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "saved_labels", "type": "Dict[str, Any]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "labels", "type": "List[List[List[Union[int, str]]]]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "labels", "type": "List[List[List[Union[int, str]]]]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "saved_labels", "type": "Dict[str, Any]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "labels", "type": "List[List[str]]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "stream", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "stream", "type": "_io.TextIOWrapper"}, {"lineNumber": 17, "col_offset": 17, "nodeName": "extract_label", "type": "Any"}, {"lineNumber": 17, "col_offset": 43, "nodeName": "data", "type": "List[Dict[str, List[str]]]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 19, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 25, "col_offset": 17, "nodeName": "exclude_created_labels", "type": "Any"}, {"lineNumber": 25, "col_offset": 52, "nodeName": "labels", "type": "List[str]"}, {"lineNumber": 25, "col_offset": 60, "nodeName": "created", "type": "Dict[str, Any]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 27, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 33, "col_offset": 17, "nodeName": "to_serializer_format", "type": "Any"}, {"lineNumber": 33, "col_offset": 50, "nodeName": "labels", "type": "List[str]"}, {"lineNumber": 33, "col_offset": 58, "nodeName": "created", "type": "Dict[nothing, nothing]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "assertIsNone", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "assertIsNotNone", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "assertIsNotNone", "type": "Any"}, {"lineNumber": 46, "col_offset": 17, "nodeName": "get_shortkey", "type": "Any"}, {"lineNumber": 46, "col_offset": 42, "nodeName": "label", "type": "str"}, {"lineNumber": 46, "col_offset": 49, "nodeName": "created", "type": "Dict[nothing, nothing]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 54, "col_offset": 17, "nodeName": "get_shortkey", "type": "Any"}, {"lineNumber": 54, "col_offset": 42, "nodeName": "label", "type": "str"}, {"lineNumber": 54, "col_offset": 49, "nodeName": "created", "type": "Set[Tuple[str, None]]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 56, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 62, "col_offset": 17, "nodeName": "update_saved_labels", "type": "Any"}, {"lineNumber": 62, "col_offset": 49, "nodeName": "saved", "type": "Dict[str, Any]"}, {"lineNumber": 62, "col_offset": 56, "nodeName": "new", "type": "List[Any]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "text_color", "type": "Any"}, {"lineNumber": 71, "col_offset": 17, "nodeName": "extract_unique_labels", "type": "Any"}, {"lineNumber": 71, "col_offset": 61, "nodeName": "labels", "type": "List[List[str]]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assertCountEqual", "type": "Any"}, {"lineNumber": 73, "col_offset": 30, "nodeName": "actual", "type": "Any"}, {"lineNumber": 80, "col_offset": 17, "nodeName": "make_annotations", "type": "Any"}, {"lineNumber": 80, "col_offset": 56, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 80, "col_offset": 62, "nodeName": "labels", "type": "List[List[str]]"}, {"lineNumber": 80, "col_offset": 70, "nodeName": "saved_labels", "type": "Dict[str, Any]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "assertCountEqual", "type": "Any"}, {"lineNumber": 82, "col_offset": 30, "nodeName": "actual", "type": "Any"}, {"lineNumber": 94, "col_offset": 17, "nodeName": "extract_unique_labels", "type": "Any"}, {"lineNumber": 94, "col_offset": 63, "nodeName": "labels", "type": "List[List[List[Union[int, str]]]]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "assertCountEqual", "type": "Any"}, {"lineNumber": 96, "col_offset": 30, "nodeName": "actual", "type": "Any"}, {"lineNumber": 103, "col_offset": 17, "nodeName": "make_annotations", "type": "Any"}, {"lineNumber": 103, "col_offset": 58, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 103, "col_offset": 64, "nodeName": "labels", "type": "List[List[List[Union[int, str]]]]"}, {"lineNumber": 103, "col_offset": 72, "nodeName": "saved_labels", "type": "Dict[str, Any]"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 116, "col_offset": 17, "nodeName": "make_annotations", "type": "Any"}, {"lineNumber": 116, "col_offset": 49, "nodeName": "docs", "type": "List[Any]"}, {"lineNumber": 116, "col_offset": 55, "nodeName": "labels", "type": "List[List[str]]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "BytesIO", "type": "Type[_io.BytesIO]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 136, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "BytesIO", "type": "Type[_io.BytesIO]"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 147, "col_offset": 17, "nodeName": "next", "type": "Callable"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 149, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "BytesIO", "type": "Type[_io.BytesIO]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 169, "col_offset": 17, "nodeName": "iterable_to_io", "type": "Any"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "TextIOWrapper", "type": "Type[_io.TextIOWrapper]"}, {"lineNumber": 170, "col_offset": 34, "nodeName": "stream", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 17, "col_offset": 17, "nodeName": "BaseStorage", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 23, "col_offset": 31, "nodeName": "Label", "type": "Any"}, {"lineNumber": 25, "col_offset": 17, "nodeName": "BaseStorage", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 33, "col_offset": 17, "nodeName": "BaseStorage", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 35, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 46, "col_offset": 17, "nodeName": "BaseStorage", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 54, "col_offset": 17, "nodeName": "BaseStorage", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "Label", "type": "Any"}, {"lineNumber": 60, "col_offset": 15, "nodeName": "Label", "type": "Any"}, {"lineNumber": 62, "col_offset": 17, "nodeName": "BaseStorage", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "self", "type": "TestBaseStorage"}, {"lineNumber": 71, "col_offset": 17, "nodeName": "ClassificationStorage", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "TestClassificationStorage"}, {"lineNumber": 76, "col_offset": 16, "nodeName": "Document", "type": "Any"}, {"lineNumber": 76, "col_offset": 42, "nodeName": "Document", "type": "Any"}, {"lineNumber": 76, "col_offset": 68, "nodeName": "Document", "type": "Any"}, {"lineNumber": 78, "col_offset": 36, "nodeName": "Label", "type": "Any"}, {"lineNumber": 78, "col_offset": 78, "nodeName": "Label", "type": "Any"}, {"lineNumber": 80, "col_offset": 17, "nodeName": "ClassificationStorage", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "self", "type": "TestClassificationStorage"}, {"lineNumber": 94, "col_offset": 17, "nodeName": "SequenceLabelingStorage", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "TestSequenceLabelingStorage"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "Document", "type": "Any"}, {"lineNumber": 99, "col_offset": 42, "nodeName": "Document", "type": "Any"}, {"lineNumber": 101, "col_offset": 31, "nodeName": "Label", "type": "Any"}, {"lineNumber": 101, "col_offset": 63, "nodeName": "Label", "type": "Any"}, {"lineNumber": 103, "col_offset": 17, "nodeName": "SequenceLabelingStorage", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "self", "type": "TestSequenceLabelingStorage"}, {"lineNumber": 113, "col_offset": 16, "nodeName": "Document", "type": "Any"}, {"lineNumber": 113, "col_offset": 42, "nodeName": "Document", "type": "Any"}, {"lineNumber": 116, "col_offset": 17, "nodeName": "Seq2seqStorage", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "self", "type": "TestSeq2seqStorage"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "io", "type": "module"}, {"lineNumber": 134, "col_offset": 17, "nodeName": "next", "type": "Callable"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "self", "type": "TestCoNLLParser"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "io", "type": "module"}, {"lineNumber": 147, "col_offset": 22, "nodeName": "parse", "type": "Any"}, {"lineNumber": 147, "col_offset": 42, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "self", "type": "TestAudioParser"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "io", "type": "module"}, {"lineNumber": 158, "col_offset": 13, "nodeName": "assertRaises", "type": "Any"}, {"lineNumber": 158, "col_offset": 31, "nodeName": "FileParseException", "type": "Any"}, {"lineNumber": 159, "col_offset": 12, "nodeName": "next", "type": "Callable"}, {"lineNumber": 169, "col_offset": 32, "nodeName": "iterable", "type": "Callable[[], Any]"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "io", "type": "module"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "self", "type": "TestIterableToIO"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "readlines", "type": "Callable[..., List[unicode]]"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 37, "col_offset": 26, "nodeName": "actual", "type": "Any"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 39, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 40, "col_offset": 29, "nodeName": "actual", "type": "Any"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "actual", "type": "Any"}, {"lineNumber": 134, "col_offset": 22, "nodeName": "parse", "type": "Any"}, {"lineNumber": 134, "col_offset": 42, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 158, "col_offset": 13, "nodeName": "self", "type": "TestAudioParser"}, {"lineNumber": 159, "col_offset": 17, "nodeName": "parse", "type": "Any"}, {"lineNumber": 159, "col_offset": 37, "nodeName": "f", "type": "_io.BytesIO"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "stream", "type": "_io.TextIOWrapper"}, {"lineNumber": 147, "col_offset": 22, "nodeName": "AudioParser", "type": "Any"}, {"lineNumber": 134, "col_offset": 22, "nodeName": "CoNLLParser", "type": "Any"}, {"lineNumber": 159, "col_offset": 17, "nodeName": "AudioParser", "type": "Any"}]