[{"lineNumber": 9, "col_offset": 0, "nodeName": "get_test_devices", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "get_test_dtypes", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "pytest_generate_tests", "type": "Callable[[Any], Any]"}, {"lineNumber": 84, "col_offset": 0, "nodeName": "pytest_addoption", "type": "Callable[[Any], Any]"}, {"lineNumber": 41, "col_offset": 0, "nodeName": "TEST_DEVICES", "type": "Dict[str, Any]"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "TEST_DTYPES", "type": "Dict[str, Any]"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "DEVICE_DTYPE_BLACKLIST", "type": "Set[Tuple[str, str]]"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "device", "type": "Any"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "devices", "type": "Dict[str, Any]"}, {"lineNumber": 23, "col_offset": 11, "nodeName": "devices", "type": "Dict[str, Any]"}, {"lineNumber": 9, "col_offset": 26, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 32, "col_offset": 4, "nodeName": "dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "float16", "type": "Any"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "float32", "type": "Any"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "float64", "type": "Any"}, {"lineNumber": 36, "col_offset": 11, "nodeName": "dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 26, "col_offset": 25, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 41, "col_offset": 14, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 41, "col_offset": 40, "nodeName": "get_test_devices", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 42, "col_offset": 13, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 42, "col_offset": 38, "nodeName": "get_test_dtypes", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "torch", "type": "Any"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "device_names", "type": "None"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "dtype_names", "type": "None"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "devices", "type": "Dict[str, Any]"}, {"lineNumber": 17, "col_offset": 21, "nodeName": "device", "type": "Any"}, {"lineNumber": 18, "col_offset": 7, "nodeName": "is_available", "type": "Any"}, {"lineNumber": 20, "col_offset": 7, "nodeName": "xla_is_available", "type": "Callable[[], bool]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 34, "col_offset": 4, "nodeName": "dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 50, "col_offset": 11, "nodeName": "TEST_DEVICES", "type": "Dict[str, Any]"}, {"lineNumber": 55, "col_offset": 11, "nodeName": "TEST_DTYPES", "type": "Dict[str, Any]"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "fixturenames", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "raw_value", "type": "Any"}, {"lineNumber": 67, "col_offset": 23, "nodeName": "fixturenames", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "raw_value", "type": "Any"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "addoption", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "addoption", "type": "Any"}, {"lineNumber": 17, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 18, "col_offset": 7, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "devices", "type": "Dict[str, Any]"}, {"lineNumber": 19, "col_offset": 26, "nodeName": "device", "type": "Any"}, {"lineNumber": 20, "col_offset": 7, "nodeName": "kornia", "type": "module"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "devices", "type": "Dict[str, Any]"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "xla_device", "type": "Any"}, {"lineNumber": 9, "col_offset": 31, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 9, "col_offset": 36, "nodeName": "device", "type": "Any"}, {"lineNumber": 26, "col_offset": 30, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 26, "col_offset": 35, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 41, "col_offset": 24, "nodeName": "device", "type": "Any"}, {"lineNumber": 42, "col_offset": 18, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 42, "col_offset": 23, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 50, "col_offset": 24, "nodeName": "device_name", "type": "Any"}, {"lineNumber": 55, "col_offset": 23, "nodeName": "dtype_name", "type": "Any"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "metafunc", "type": "Any"}, {"lineNumber": 62, "col_offset": 20, "nodeName": "getoption", "type": "Any"}, {"lineNumber": 63, "col_offset": 11, "nodeName": "raw_value", "type": "Any"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "device_names", "type": "List[str]"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "device_names", "type": "Any"}, {"lineNumber": 67, "col_offset": 23, "nodeName": "metafunc", "type": "Any"}, {"lineNumber": 68, "col_offset": 20, "nodeName": "getoption", "type": "Any"}, {"lineNumber": 69, "col_offset": 11, "nodeName": "raw_value", "type": "Any"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "dtype_names", "type": "List[str]"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "dtype_names", "type": "Any"}, {"lineNumber": 73, "col_offset": 7, "nodeName": "device_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 73, "col_offset": 36, "nodeName": "dtype_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "parametrize", "type": "Any"}, {"lineNumber": 77, "col_offset": 55, "nodeName": "params", "type": "List[Union[Tuple[str, str], Tuple[Any, ...]]]"}, {"lineNumber": 78, "col_offset": 9, "nodeName": "device_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "parser", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "parser", "type": "Any"}, {"lineNumber": 18, "col_offset": 7, "nodeName": "torch", "type": "Any"}, {"lineNumber": 19, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "xm", "type": "Any"}, {"lineNumber": 9, "col_offset": 36, "nodeName": "torch", "type": "Any"}, {"lineNumber": 26, "col_offset": 35, "nodeName": "torch", "type": "Any"}, {"lineNumber": 41, "col_offset": 24, "nodeName": "torch", "type": "Any"}, {"lineNumber": 42, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 62, "col_offset": 20, "nodeName": "config", "type": "Any"}, {"lineNumber": 64, "col_offset": 27, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 66, "col_offset": 27, "nodeName": "split", "type": "Any"}, {"lineNumber": 68, "col_offset": 20, "nodeName": "config", "type": "Any"}, {"lineNumber": 70, "col_offset": 26, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "split", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "metafunc", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "parametrize", "type": "Any"}, {"lineNumber": 79, "col_offset": 44, "nodeName": "device_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 80, "col_offset": 9, "nodeName": "dtype_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 62, "col_offset": 20, "nodeName": "metafunc", "type": "Any"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 66, "col_offset": 27, "nodeName": "raw_value", "type": "Any"}, {"lineNumber": 68, "col_offset": 20, "nodeName": "metafunc", "type": "Any"}, {"lineNumber": 70, "col_offset": 31, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "raw_value", "type": "Any"}, {"lineNumber": 75, "col_offset": 37, "nodeName": "product", "type": "Callable"}, {"lineNumber": 75, "col_offset": 45, "nodeName": "device_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 75, "col_offset": 59, "nodeName": "dtype_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 76, "col_offset": 21, "nodeName": "combo", "type": "Union[Tuple[Any, ...], Tuple[str, str]]"}, {"lineNumber": 76, "col_offset": 34, "nodeName": "DEVICE_DTYPE_BLACKLIST", "type": "Set[Tuple[str, str]]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "metafunc", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "parametrize", "type": "Any"}, {"lineNumber": 81, "col_offset": 43, "nodeName": "dtype_names", "type": "Optional[Union[Any, List[str]]]"}, {"lineNumber": 64, "col_offset": 32, "nodeName": "TEST_DEVICES", "type": "Dict[str, Any]"}, {"lineNumber": 70, "col_offset": 31, "nodeName": "TEST_DTYPES", "type": "Dict[str, Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "metafunc", "type": "Any"}]