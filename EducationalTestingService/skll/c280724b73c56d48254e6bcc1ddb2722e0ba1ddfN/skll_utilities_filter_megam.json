[{"lineNumber": 23, "col_offset": 0, "nodeName": "main", "type": "Callable[..., Any]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 67, "col_offset": 7, "nodeName": "ignorecase", "type": "Any"}, {"lineNumber": 95, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 32, "col_offset": 13, "nodeName": "ArgumentParser", "type": "Type[argparse.ArgumentParser]"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "parse_args", "type": "Callable"}, {"lineNumber": 53, "col_offset": 29, "nodeName": "argv", "type": "None"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "captureWarnings", "type": "Callable[[Optional[bool]], None]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "basicConfig", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 7, "nodeName": "isatty", "type": "Any"}, {"lineNumber": 67, "col_offset": 7, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "stopwords", "type": "Set[Any]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "stopwords", "type": "Set[Any]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "example_id", "type": "Any"}, {"lineNumber": 73, "col_offset": 20, "nodeName": "class_name", "type": "Any"}, {"lineNumber": 73, "col_offset": 32, "nodeName": "feature_dict", "type": "Any"}, {"lineNumber": 73, "col_offset": 48, "nodeName": "_MegaMDictIter", "type": "Any"}, {"lineNumber": 73, "col_offset": 63, "nodeName": "infile", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "first", "type": "bool"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "main", "type": "Callable[..., Any]"}, {"lineNumber": 32, "col_offset": 13, "nodeName": "argparse", "type": "module"}, {"lineNumber": 39, "col_offset": 53, "nodeName": "ArgumentDefaultsHelpFormatter", "type": "Type[argparse.ArgumentDefaultsHelpFormatter]"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "logging", "type": "module"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "logging", "type": "module"}, {"lineNumber": 60, "col_offset": 7, "nodeName": "infile", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 63, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "example_id", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 14, "nodeName": "class_name", "type": "Any"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 78, "col_offset": 21, "nodeName": "value", "type": "Any"}, {"lineNumber": 78, "col_offset": 30, "nodeName": "iteritems", "type": "Callable"}, {"lineNumber": 78, "col_offset": 40, "nodeName": "feature_dict", "type": "Any"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 39, "col_offset": 53, "nodeName": "argparse", "type": "module"}, {"lineNumber": 43, "col_offset": 29, "nodeName": "FileType", "type": "Type[argparse.FileType]"}, {"lineNumber": 52, "col_offset": 32, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 52, "col_offset": 54, "nodeName": "__version__", "type": "str"}, {"lineNumber": 60, "col_offset": 7, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "lower", "type": "Any"}, {"lineNumber": 68, "col_offset": 43, "nodeName": "w", "type": "Any"}, {"lineNumber": 68, "col_offset": 48, "nodeName": "stopwordlist", "type": "Any"}, {"lineNumber": 70, "col_offset": 21, "nodeName": "strip", "type": "Any"}, {"lineNumber": 70, "col_offset": 35, "nodeName": "w", "type": "Any"}, {"lineNumber": 70, "col_offset": 40, "nodeName": "stopwordlist", "type": "Any"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "strip", "type": "Any"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "first", "type": "bool"}, {"lineNumber": 43, "col_offset": 29, "nodeName": "argparse", "type": "module"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "sys", "type": "module"}, {"lineNumber": 68, "col_offset": 48, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 70, "col_offset": 21, "nodeName": "w", "type": "Any"}, {"lineNumber": 70, "col_offset": 40, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 75, "col_offset": 32, "nodeName": "example_id", "type": "Any"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "feature", "type": "Any"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "match", "type": "Callable"}, {"lineNumber": 80, "col_offset": 37, "nodeName": "feature", "type": "Any"}, {"lineNumber": 88, "col_offset": 20, "nodeName": "first", "type": "bool"}, {"lineNumber": 91, "col_offset": 16, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "strip", "type": "Any"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "re", "type": "module"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "keep", "type": "Any"}, {"lineNumber": 91, "col_offset": 22, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 91, "col_offset": 37, "nodeName": "feature", "type": "Any"}, {"lineNumber": 91, "col_offset": 46, "nodeName": "value", "type": "Any"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "w", "type": "Any"}, {"lineNumber": 81, "col_offset": 22, "nodeName": "keep", "type": "Any"}, {"lineNumber": 84, "col_offset": 21, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 81, "col_offset": 22, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 81, "col_offset": 38, "nodeName": "feature", "type": "Any"}, {"lineNumber": 81, "col_offset": 53, "nodeName": "stopwords", "type": "Set[Any]"}, {"lineNumber": 82, "col_offset": 38, "nodeName": "ignorecase", "type": "Any"}, {"lineNumber": 84, "col_offset": 37, "nodeName": "feature", "type": "Any"}, {"lineNumber": 84, "col_offset": 48, "nodeName": "stopwords", "type": "Set[Any]"}, {"lineNumber": 85, "col_offset": 37, "nodeName": "ignorecase", "type": "Any"}, {"lineNumber": 82, "col_offset": 38, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 83, "col_offset": 62, "nodeName": "stopwords", "type": "Set[Any]"}, {"lineNumber": 85, "col_offset": 37, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 86, "col_offset": 57, "nodeName": "stopwords", "type": "Set[Any]"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "lower", "type": "Any"}, {"lineNumber": 86, "col_offset": 38, "nodeName": "lower", "type": "Any"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "feature", "type": "Any"}, {"lineNumber": 86, "col_offset": 38, "nodeName": "feature", "type": "Any"}]