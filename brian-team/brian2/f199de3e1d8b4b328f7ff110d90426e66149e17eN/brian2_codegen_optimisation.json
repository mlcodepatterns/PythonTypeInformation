[{"lineNumber": 30, "col_offset": 0, "nodeName": "evaluate_expr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 43, "col_offset": 0, "nodeName": "expression_complexity", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 47, "col_offset": 0, "nodeName": "optimise_statements", "type": "Callable[..., Any]"}, {"lineNumber": 134, "col_offset": 0, "nodeName": "_replace_with_zero", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 366, "col_offset": 0, "nodeName": "reduced_node", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 396, "col_offset": 0, "nodeName": "cancel_identical_terms", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 440, "col_offset": 0, "nodeName": "collect", "type": "Callable[[Any], Any]"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "defaults_ns", "type": "Dict[str, Any]"}, {"lineNumber": 27, "col_offset": 0, "nodeName": "__all__", "type": "List[str]"}, {"lineNumber": 160, "col_offset": 27, "nodeName": "BrianASTRenderer", "type": "Type[brian2.parsing.bast.BrianASTRenderer]"}, {"lineNumber": 291, "col_offset": 17, "nodeName": "BrianASTRenderer", "type": "Type[brian2.parsing.bast.BrianASTRenderer]"}, {"lineNumber": 23, "col_offset": 14, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 24, "col_offset": 0, "nodeName": "update", "type": "Callable"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "complexity", "type": "Any"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "boolvars", "type": "Dict[Any, Any]"}, {"lineNumber": 82, "col_offset": 4, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 83, "col_offset": 4, "nodeName": "new_vector_statements", "type": "List[Any]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "vector_statements", "type": "Any"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "new_scalar_statements", "type": "Any"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 152, "col_offset": 22, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 157, "col_offset": 11, "nodeName": "zero_node", "type": "Any"}, {"lineNumber": 390, "col_offset": 4, "nodeName": "terms", "type": "Any"}, {"lineNumber": 419, "col_offset": 4, "nodeName": "nr", "type": "brian2.parsing.rendering.NodeRenderer"}, {"lineNumber": 420, "col_offset": 4, "nodeName": "expressions", "type": "Dict[Any, Any]"}, {"lineNumber": 422, "col_offset": 4, "nodeName": "new_primary", "type": "List[Any]"}, {"lineNumber": 423, "col_offset": 4, "nodeName": "inverted_expressions", "type": "Any"}, {"lineNumber": 424, "col_offset": 8, "nodeName": "term", "type": "Any"}, {"lineNumber": 424, "col_offset": 16, "nodeName": "primary", "type": "List[Any]"}, {"lineNumber": 466, "col_offset": 4, "nodeName": "collected", "type": "bool"}, {"lineNumber": 467, "col_offset": 4, "nodeName": "orignode_dtype", "type": "Any"}, {"lineNumber": 467, "col_offset": 21, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 472, "col_offset": 4, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 473, "col_offset": 4, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 496, "col_offset": 4, "nodeName": "x", "type": "Any"}, {"lineNumber": 496, "col_offset": 8, "nodeName": "op_null", "type": "Any"}, {"lineNumber": 498, "col_offset": 4, "nodeName": "remaining_terms_primary", "type": "List[Any]"}, {"lineNumber": 499, "col_offset": 4, "nodeName": "remaining_terms_inverted", "type": "List[Any]"}, {"lineNumber": 500, "col_offset": 8, "nodeName": "term", "type": "Any"}, {"lineNumber": 500, "col_offset": 16, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 505, "col_offset": 8, "nodeName": "term", "type": "Any"}, {"lineNumber": 505, "col_offset": 16, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 516, "col_offset": 4, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 516, "col_offset": 20, "nodeName": "remaining_terms_primary", "type": "List[Any]"}, {"lineNumber": 517, "col_offset": 4, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 517, "col_offset": 21, "nodeName": "remaining_terms_inverted", "type": "List[Any]"}, {"lineNumber": 518, "col_offset": 4, "nodeName": "node", "type": "Optional[_ast.Num]"}, {"lineNumber": 518, "col_offset": 11, "nodeName": "num_node", "type": "Optional[_ast.Num]"}, {"lineNumber": 519, "col_offset": 8, "nodeName": "scalar", "type": "bool"}, {"lineNumber": 540, "col_offset": 4, "nodeName": "collected", "type": "bool"}, {"lineNumber": 541, "col_offset": 11, "nodeName": "node", "type": "Any"}, {"lineNumber": 548, "col_offset": 4, "nodeName": "op_primary", "type": "bool"}, {"lineNumber": 24, "col_offset": 0, "nodeName": "defaults_ns", "type": "Dict[str, Any]"}, {"lineNumber": 24, "col_offset": 19, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "val", "type": "Any"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 82, "col_offset": 17, "nodeName": "Simplifier", "type": "Type[Simplifier]"}, {"lineNumber": 82, "col_offset": 28, "nodeName": "variables", "type": "Any"}, {"lineNumber": 82, "col_offset": 39, "nodeName": "scalar_statements", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "new_expr", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "complexity_std", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "idents", "type": "Set[Any]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "used_boolvars", "type": "List[Any]"}, {"lineNumber": 117, "col_offset": 28, "nodeName": "copy", "type": "Callable"}, {"lineNumber": 117, "col_offset": 38, "nodeName": "scalar_statements", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "expr", "type": "Any"}, {"lineNumber": 118, "col_offset": 14, "nodeName": "name", "type": "str"}, {"lineNumber": 118, "col_offset": 22, "nodeName": "items", "type": "Callable"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "dtype_name", "type": "Any"}, {"lineNumber": 132, "col_offset": 11, "nodeName": "new_scalar_statements", "type": "Any"}, {"lineNumber": 132, "col_offset": 34, "nodeName": "new_vector_statements", "type": "List[Any]"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "zero_node", "type": "Any"}, {"lineNumber": 152, "col_offset": 22, "nodeName": "node", "type": "Any"}, {"lineNumber": 153, "col_offset": 7, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "n", "type": "int"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "n", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assumptions", "type": "List[nothing]"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "assumptions_ns", "type": "Dict[str, Any]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "bast_renderer", "type": "brian2.parsing.bast.BrianASTRenderer"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "expr", "type": "Any"}, {"lineNumber": 201, "col_offset": 11, "nodeName": "evaluated", "type": "bool"}, {"lineNumber": 220, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 228, "col_offset": 8, "nodeName": "left", "type": "Any"}, {"lineNumber": 228, "col_offset": 15, "nodeName": "left", "type": "Any"}, {"lineNumber": 229, "col_offset": 8, "nodeName": "right", "type": "Any"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "right", "type": "Any"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "op", "type": "Any"}, {"lineNumber": 231, "col_offset": 13, "nodeName": "op", "type": "Any"}, {"lineNumber": 288, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "loop_invariants", "type": "collections.OrderedDict[Any, str]"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "loop_invariant_dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "n", "type": "int"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "node_renderer", "type": "brian2.parsing.rendering.NodeRenderer"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "arithmetic_simplifier", "type": "ArithmeticSimplifier"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "scalar_statements", "type": "Any"}, {"lineNumber": 322, "col_offset": 33, "nodeName": "scalar_statements", "type": "Any"}, {"lineNumber": 327, "col_offset": 8, "nodeName": "extra_lio_prefix", "type": "Any"}, {"lineNumber": 327, "col_offset": 32, "nodeName": "extra_lio_prefix", "type": "Any"}, {"lineNumber": 330, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 331, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 332, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 390, "col_offset": 13, "nodeName": "term", "type": "Any"}, {"lineNumber": 393, "col_offset": 11, "nodeName": "reduce", "type": "Callable"}, {"lineNumber": 393, "col_offset": 68, "nodeName": "terms", "type": "Any"}, {"lineNumber": 419, "col_offset": 9, "nodeName": "NodeRenderer", "type": "Type[brian2.parsing.rendering.NodeRenderer]"}, {"lineNumber": 420, "col_offset": 18, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 421, "col_offset": 4, "nodeName": "update", "type": "Callable"}, {"lineNumber": 425, "col_offset": 8, "nodeName": "expr", "type": "Any"}, {"lineNumber": 437, "col_offset": 11, "nodeName": "new_primary", "type": "List[Any]"}, {"lineNumber": 437, "col_offset": 24, "nodeName": "inverted", "type": "List[Any]"}, {"lineNumber": 466, "col_offset": 4, "nodeName": "node", "type": "Any"}, {"lineNumber": 467, "col_offset": 21, "nodeName": "node", "type": "Any"}, {"lineNumber": 469, "col_offset": 7, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 470, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 475, "col_offset": 7, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 476, "col_offset": 8, "nodeName": "op_primary", "type": "Type[_ast.Mult]"}, {"lineNumber": 476, "col_offset": 21, "nodeName": "Mult", "type": "Type[_ast.Mult]"}, {"lineNumber": 477, "col_offset": 8, "nodeName": "op_inverted", "type": "Type[_ast.Div]"}, {"lineNumber": 477, "col_offset": 22, "nodeName": "Div", "type": "Type[_ast.Div]"}, {"lineNumber": 478, "col_offset": 8, "nodeName": "op_null", "type": "Any"}, {"lineNumber": 479, "col_offset": 8, "nodeName": "op_py_primary", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 480, "col_offset": 8, "nodeName": "op_py_inverted", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 489, "col_offset": 7, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 490, "col_offset": 8, "nodeName": "op_null_with_dtype", "type": "int"}, {"lineNumber": 492, "col_offset": 8, "nodeName": "op_null_with_dtype", "type": "Any"}, {"lineNumber": 492, "col_offset": 29, "nodeName": "op_null", "type": "Any"}, {"lineNumber": 494, "col_offset": 4, "nodeName": "collect_commutative", "type": "Callable[..., Any]"}, {"lineNumber": 494, "col_offset": 24, "nodeName": "node", "type": "Any"}, {"lineNumber": 494, "col_offset": 30, "nodeName": "op_primary", "type": "Union[Type[_ast.Add], Type[_ast.Mult]]"}, {"lineNumber": 494, "col_offset": 42, "nodeName": "op_inverted", "type": "Union[Type[_ast.Div], Type[_ast.Sub]]"}, {"lineNumber": 495, "col_offset": 24, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 495, "col_offset": 39, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 512, "col_offset": 7, "nodeName": "x", "type": "Any"}, {"lineNumber": 512, "col_offset": 12, "nodeName": "op_null", "type": "Any"}, {"lineNumber": 513, "col_offset": 8, "nodeName": "num_node", "type": "_ast.Num"}, {"lineNumber": 515, "col_offset": 8, "nodeName": "num_node", "type": "None"}, {"lineNumber": 520, "col_offset": 8, "nodeName": "primary_terms", "type": "List[Any]"}, {"lineNumber": 521, "col_offset": 8, "nodeName": "inverted_terms", "type": "List[Any]"}, {"lineNumber": 526, "col_offset": 8, "nodeName": "prod_primary", "type": "Any"}, {"lineNumber": 527, "col_offset": 8, "nodeName": "prod_inverted", "type": "Any"}, {"lineNumber": 530, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 536, "col_offset": 7, "nodeName": "node", "type": "Any"}, {"lineNumber": 537, "col_offset": 8, "nodeName": "node", "type": "_ast.Num"}, {"lineNumber": 539, "col_offset": 8, "nodeName": "node", "type": "_ast.BinOp"}, {"lineNumber": 540, "col_offset": 4, "nodeName": "node", "type": "Any"}, {"lineNumber": 548, "col_offset": 17, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 548, "col_offset": 38, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 555, "col_offset": 62, "nodeName": "left_exact", "type": "Union[Any, bool]"}, {"lineNumber": 559, "col_offset": 11, "nodeName": "add_to_inverted", "type": "bool"}, {"lineNumber": 566, "col_offset": 63, "nodeName": "right_exact", "type": "Union[bool, Any]"}, {"lineNumber": 23, "col_offset": 20, "nodeName": "k", "type": "str"}, {"lineNumber": 23, "col_offset": 23, "nodeName": "pyfunc", "type": "Any"}, {"lineNumber": 37, "col_offset": 14, "nodeName": "eval", "type": "Callable[..., Any]"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "expr", "type": "Any"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "ns", "type": "Dict[str, Any]"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "val", "type": "Any"}, {"lineNumber": 44, "col_offset": 11, "nodeName": "brian_ast", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 44, "col_offset": 21, "nodeName": "expr", "type": "Any"}, {"lineNumber": 44, "col_offset": 27, "nodeName": "variables", "type": "Any"}, {"lineNumber": 82, "col_offset": 75, "nodeName": "blockname", "type": "Any"}, {"lineNumber": 86, "col_offset": 19, "nodeName": "render_expr", "type": "Callable[[Any], Any]"}, {"lineNumber": 86, "col_offset": 42, "nodeName": "expr", "type": "Any"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "Statement", "type": "Any"}, {"lineNumber": 87, "col_offset": 29, "nodeName": "var", "type": "Any"}, {"lineNumber": 87, "col_offset": 39, "nodeName": "op", "type": "Any"}, {"lineNumber": 87, "col_offset": 48, "nodeName": "new_expr", "type": "Any"}, {"lineNumber": 87, "col_offset": 58, "nodeName": "comment", "type": "Any"}, {"lineNumber": 93, "col_offset": 25, "nodeName": "expression_complexity", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 93, "col_offset": 47, "nodeName": "new_expr", "type": "Any"}, {"lineNumber": 93, "col_offset": 57, "nodeName": "variables", "type": "Any"}, {"lineNumber": 94, "col_offset": 17, "nodeName": "get_identifiers", "type": "Callable[..., Set[Any]]"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "new_expr", "type": "Any"}, {"lineNumber": 95, "col_offset": 25, "nodeName": "var", "type": "Any"}, {"lineNumber": 96, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 96, "col_offset": 15, "nodeName": "used_boolvars", "type": "List[Any]"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "bool_space", "type": "List[List[bool]]"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "expanded_expressions", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "complexities", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 101, "col_offset": 16, "nodeName": "bool_vals", "type": "Tuple[Any, ...]"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "used_boolean_variables", "type": "List[Any]"}, {"lineNumber": 111, "col_offset": 46, "nodeName": "used_boolvars", "type": "List[Any]"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "boolean_simplified_expressions", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 112, "col_offset": 54, "nodeName": "expanded_expressions", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "complexity_std", "type": "Any"}, {"lineNumber": 113, "col_offset": 38, "nodeName": "complexity_std", "type": "Any"}, {"lineNumber": 114, "col_offset": 12, "nodeName": "complexities", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 114, "col_offset": 36, "nodeName": "complexities", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 115, "col_offset": 37, "nodeName": "new_stmt", "type": "Any"}, {"lineNumber": 117, "col_offset": 28, "nodeName": "copy", "type": "module"}, {"lineNumber": 118, "col_offset": 22, "nodeName": "loop_invariants", "type": "collections.OrderedDict[Any, str]"}, {"lineNumber": 119, "col_offset": 21, "nodeName": "loop_invariant_dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 120, "col_offset": 11, "nodeName": "dtype_name", "type": "Any"}, {"lineNumber": 121, "col_offset": 12, "nodeName": "dtype", "type": "Type[bool]"}, {"lineNumber": 121, "col_offset": 20, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 126, "col_offset": 19, "nodeName": "Statement", "type": "Any"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "name", "type": "str"}, {"lineNumber": 126, "col_offset": 41, "nodeName": "expr", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "append", "type": "Any"}, {"lineNumber": 131, "col_offset": 37, "nodeName": "new_stmt", "type": "Any"}, {"lineNumber": 153, "col_offset": 7, "nodeName": "node", "type": "Any"}, {"lineNumber": 154, "col_offset": 8, "nodeName": "zero_node", "type": "Any"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "zero_node", "type": "Any"}, {"lineNumber": 156, "col_offset": 22, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 177, "col_offset": 34, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 177, "col_offset": 40, "nodeName": "variables", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 179, "col_offset": 30, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 179, "col_offset": 35, "nodeName": "defaults_ns", "type": "Dict[str, Any]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 180, "col_offset": 29, "nodeName": "BrianASTRenderer", "type": "Type[brian2.parsing.bast.BrianASTRenderer]"}, {"lineNumber": 180, "col_offset": 46, "nodeName": "variables", "type": "Any"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "node", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "simplified", "type": "bool"}, {"lineNumber": 190, "col_offset": 15, "nodeName": "scalar", "type": "Any"}, {"lineNumber": 191, "col_offset": 19, "nodeName": "node", "type": "Any"}, {"lineNumber": 193, "col_offset": 11, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 194, "col_offset": 19, "nodeName": "node", "type": "Any"}, {"lineNumber": 196, "col_offset": 15, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 197, "col_offset": 19, "nodeName": "node", "type": "Any"}, {"lineNumber": 199, "col_offset": 15, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 199, "col_offset": 42, "nodeName": "node", "type": "Any"}, {"lineNumber": 200, "col_offset": 8, "nodeName": "val", "type": "Any"}, {"lineNumber": 200, "col_offset": 13, "nodeName": "evaluated", "type": "bool"}, {"lineNumber": 200, "col_offset": 25, "nodeName": "evaluate_expr", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 200, "col_offset": 39, "nodeName": "expr", "type": "Any"}, {"lineNumber": 200, "col_offset": 45, "nodeName": "assumptions_ns", "type": "Dict[str, Any]"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 215, "col_offset": 28, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 216, "col_offset": 12, "nodeName": "scalar", "type": "bool"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 217, "col_offset": 32, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "complexity", "type": "int"}, {"lineNumber": 219, "col_offset": 19, "nodeName": "newnode", "type": "Union[_ast.NameConstant, _ast.Num]"}, {"lineNumber": 223, "col_offset": 11, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 228, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 228, "col_offset": 27, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 228, "col_offset": 44, "nodeName": "left", "type": "Any"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "node", "type": "Any"}, {"lineNumber": 229, "col_offset": 29, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 229, "col_offset": 46, "nodeName": "right", "type": "Any"}, {"lineNumber": 230, "col_offset": 15, "nodeName": "render_BinOp", "type": "Callable"}, {"lineNumber": 230, "col_offset": 62, "nodeName": "node", "type": "Any"}, {"lineNumber": 231, "col_offset": 13, "nodeName": "node", "type": "Any"}, {"lineNumber": 233, "col_offset": 11, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 284, "col_offset": 16, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 316, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 316, "col_offset": 34, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 316, "col_offset": 40, "nodeName": "variables", "type": "Any"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 317, "col_offset": 31, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 320, "col_offset": 29, "nodeName": "NodeRenderer", "type": "Type[brian2.parsing.rendering.NodeRenderer]"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 321, "col_offset": 37, "nodeName": "ArithmeticSimplifier", "type": "Type[ArithmeticSimplifier]"}, {"lineNumber": 321, "col_offset": 58, "nodeName": "variables", "type": "Any"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 323, "col_offset": 11, "nodeName": "extra_lio_prefix", "type": "Any"}, {"lineNumber": 324, "col_offset": 12, "nodeName": "extra_lio_prefix", "type": "str"}, {"lineNumber": 325, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 325, "col_offset": 15, "nodeName": "extra_lio_prefix", "type": "Union[str, Any]"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "extra_lio_prefix", "type": "Any"}, {"lineNumber": 327, "col_offset": 8, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 330, "col_offset": 15, "nodeName": "brian_ast", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 330, "col_offset": 25, "nodeName": "expr", "type": "Any"}, {"lineNumber": 330, "col_offset": 31, "nodeName": "variables", "type": "Any"}, {"lineNumber": 331, "col_offset": 15, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 331, "col_offset": 54, "nodeName": "node", "type": "Any"}, {"lineNumber": 332, "col_offset": 15, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 332, "col_offset": 32, "nodeName": "node", "type": "Any"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 333, "col_offset": 46, "nodeName": "node", "type": "Any"}, {"lineNumber": 340, "col_offset": 11, "nodeName": "scalar", "type": "Any"}, {"lineNumber": 341, "col_offset": 12, "nodeName": "expr", "type": "Any"}, {"lineNumber": 356, "col_offset": 12, "nodeName": "newnode", "type": "_ast.Name"}, {"lineNumber": 357, "col_offset": 12, "nodeName": "scalar", "type": "bool"}, {"lineNumber": 358, "col_offset": 12, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 358, "col_offset": 28, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 359, "col_offset": 12, "nodeName": "complexity", "type": "int"}, {"lineNumber": 360, "col_offset": 12, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 360, "col_offset": 32, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 361, "col_offset": 19, "nodeName": "newnode", "type": "_ast.Name"}, {"lineNumber": 363, "col_offset": 15, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 363, "col_offset": 51, "nodeName": "node", "type": "Any"}, {"lineNumber": 390, "col_offset": 22, "nodeName": "term", "type": "Any"}, {"lineNumber": 390, "col_offset": 30, "nodeName": "terms", "type": "List[Any]"}, {"lineNumber": 391, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 391, "col_offset": 15, "nodeName": "terms", "type": "Any"}, {"lineNumber": 421, "col_offset": 4, "nodeName": "expressions", "type": "Dict[Any, Any]"}, {"lineNumber": 421, "col_offset": 23, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 423, "col_offset": 28, "nodeName": "expressions", "type": "Dict[Any, Any]"}, {"lineNumber": 423, "col_offset": 50, "nodeName": "term", "type": "Any"}, {"lineNumber": 423, "col_offset": 58, "nodeName": "inverted", "type": "List[Any]"}, {"lineNumber": 425, "col_offset": 15, "nodeName": "expressions", "type": "Dict[Any, Any]"}, {"lineNumber": 426, "col_offset": 44, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 427, "col_offset": 12, "nodeName": "new_inverted", "type": "List[Any]"}, {"lineNumber": 428, "col_offset": 16, "nodeName": "iterm", "type": "Any"}, {"lineNumber": 428, "col_offset": 25, "nodeName": "inverted", "type": "List[Any]"}, {"lineNumber": 433, "col_offset": 12, "nodeName": "inverted", "type": "List[Any]"}, {"lineNumber": 433, "col_offset": 23, "nodeName": "new_inverted", "type": "List[Any]"}, {"lineNumber": 434, "col_offset": 12, "nodeName": "inverted_expressions", "type": "Any"}, {"lineNumber": 469, "col_offset": 7, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 475, "col_offset": 7, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 476, "col_offset": 21, "nodeName": "ast", "type": "module"}, {"lineNumber": 477, "col_offset": 22, "nodeName": "ast", "type": "module"}, {"lineNumber": 478, "col_offset": 18, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 481, "col_offset": 9, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 482, "col_offset": 8, "nodeName": "op_primary", "type": "Type[_ast.Add]"}, {"lineNumber": 482, "col_offset": 21, "nodeName": "Add", "type": "Type[_ast.Add]"}, {"lineNumber": 483, "col_offset": 8, "nodeName": "op_inverted", "type": "Type[_ast.Sub]"}, {"lineNumber": 483, "col_offset": 22, "nodeName": "Sub", "type": "Type[_ast.Sub]"}, {"lineNumber": 484, "col_offset": 8, "nodeName": "op_null", "type": "Any"}, {"lineNumber": 485, "col_offset": 8, "nodeName": "op_py_primary", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 486, "col_offset": 8, "nodeName": "op_py_inverted", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 488, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 489, "col_offset": 7, "nodeName": "node", "type": "Any"}, {"lineNumber": 490, "col_offset": 29, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 490, "col_offset": 33, "nodeName": "op_null", "type": "Any"}, {"lineNumber": 501, "col_offset": 11, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 502, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 506, "col_offset": 11, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 507, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 513, "col_offset": 19, "nodeName": "Num", "type": "Type[_ast.Num]"}, {"lineNumber": 513, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 520, "col_offset": 25, "nodeName": "term", "type": "Any"}, {"lineNumber": 521, "col_offset": 26, "nodeName": "term", "type": "Any"}, {"lineNumber": 522, "col_offset": 40, "nodeName": "cancel_identical_terms", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 522, "col_offset": 63, "nodeName": "primary_terms", "type": "List[Any]"}, {"lineNumber": 523, "col_offset": 63, "nodeName": "inverted_terms", "type": "List[Any]"}, {"lineNumber": 526, "col_offset": 23, "nodeName": "reduced_node", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 526, "col_offset": 36, "nodeName": "primary_terms", "type": "List[Any]"}, {"lineNumber": 526, "col_offset": 51, "nodeName": "op_primary", "type": "Union[Type[_ast.Add], Type[_ast.Mult]]"}, {"lineNumber": 527, "col_offset": 24, "nodeName": "reduced_node", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 527, "col_offset": 37, "nodeName": "inverted_terms", "type": "List[Any]"}, {"lineNumber": 527, "col_offset": 53, "nodeName": "op_primary", "type": "Union[Type[_ast.Add], Type[_ast.Mult]]"}, {"lineNumber": 530, "col_offset": 15, "nodeName": "reduced_node", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 530, "col_offset": 50, "nodeName": "op_primary", "type": "Union[Type[_ast.Add], Type[_ast.Mult]]"}, {"lineNumber": 531, "col_offset": 11, "nodeName": "prod_inverted", "type": "Any"}, {"lineNumber": 534, "col_offset": 12, "nodeName": "node", "type": "_ast.BinOp"}, {"lineNumber": 537, "col_offset": 15, "nodeName": "Num", "type": "Type[_ast.Num]"}, {"lineNumber": 537, "col_offset": 23, "nodeName": "op_null_with_dtype", "type": "Any"}, {"lineNumber": 538, "col_offset": 7, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 538, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 539, "col_offset": 15, "nodeName": "BinOp", "type": "Type[_ast.BinOp]"}, {"lineNumber": 539, "col_offset": 68, "nodeName": "node", "type": "Any"}, {"lineNumber": 548, "col_offset": 17, "nodeName": "op", "type": "Any"}, {"lineNumber": 552, "col_offset": 18, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 554, "col_offset": 8, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 555, "col_offset": 12, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 556, "col_offset": 8, "nodeName": "collect_commutative", "type": "Callable[..., Any]"}, {"lineNumber": 556, "col_offset": 28, "nodeName": "left", "type": "Any"}, {"lineNumber": 556, "col_offset": 39, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 556, "col_offset": 48, "nodeName": "inverted", "type": "Union[Type[_ast.Sub], Type[_ast.Div]]"}, {"lineNumber": 556, "col_offset": 58, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 556, "col_offset": 73, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 563, "col_offset": 19, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 565, "col_offset": 8, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 566, "col_offset": 12, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 567, "col_offset": 11, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 567, "col_offset": 32, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 23, "col_offset": 23, "nodeName": "v", "type": "brian2.core.functions.Function"}, {"lineNumber": 23, "col_offset": 37, "nodeName": "k", "type": "str"}, {"lineNumber": 23, "col_offset": 40, "nodeName": "v", "type": "brian2.core.functions.Function"}, {"lineNumber": 23, "col_offset": 45, "nodeName": "items", "type": "Callable"}, {"lineNumber": 24, "col_offset": 25, "nodeName": "k", "type": "str"}, {"lineNumber": 24, "col_offset": 28, "nodeName": "value", "type": "Any"}, {"lineNumber": 86, "col_offset": 19, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 86, "col_offset": 42, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 87, "col_offset": 29, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 87, "col_offset": 39, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 87, "col_offset": 58, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 88, "col_offset": 35, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 89, "col_offset": 38, "nodeName": "constant", "type": "Any"}, {"lineNumber": 90, "col_offset": 43, "nodeName": "subexpression", "type": "Any"}, {"lineNumber": 91, "col_offset": 36, "nodeName": "scalar", "type": "Any"}, {"lineNumber": 93, "col_offset": 57, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 95, "col_offset": 33, "nodeName": "var", "type": "Any"}, {"lineNumber": 95, "col_offset": 40, "nodeName": "boolvars", "type": "Dict[Any, Any]"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "product", "type": "Callable"}, {"lineNumber": 104, "col_offset": 16, "nodeName": "subs", "type": "Dict[nothing, str]"}, {"lineNumber": 105, "col_offset": 16, "nodeName": "curexpr", "type": "Any"}, {"lineNumber": 106, "col_offset": 16, "nodeName": "curexpr", "type": "Any"}, {"lineNumber": 107, "col_offset": 16, "nodeName": "key", "type": "Tuple[Tuple[nothing, nothing], ...]"}, {"lineNumber": 108, "col_offset": 44, "nodeName": "curexpr", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "new_stmt", "type": "Any"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "new_stmt", "type": "Any"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "new_stmt", "type": "Any"}, {"lineNumber": 114, "col_offset": 12, "nodeName": "new_stmt", "type": "Any"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "new_vector_statements", "type": "List[Any]"}, {"lineNumber": 118, "col_offset": 22, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 119, "col_offset": 21, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 119, "col_offset": 54, "nodeName": "name", "type": "str"}, {"lineNumber": 122, "col_offset": 13, "nodeName": "dtype_name", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "dtype", "type": "Type[int]"}, {"lineNumber": 123, "col_offset": 20, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 125, "col_offset": 20, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 127, "col_offset": 35, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "new_scalar_statements", "type": "Any"}, {"lineNumber": 156, "col_offset": 22, "nodeName": "core", "type": "Any"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "BrianASTRenderer", "type": "Type[brian2.parsing.bast.BrianASTRenderer]"}, {"lineNumber": 186, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 186, "col_offset": 23, "nodeName": "node", "type": "Any"}, {"lineNumber": 187, "col_offset": 19, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 187, "col_offset": 65, "nodeName": "node", "type": "Any"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "node", "type": "Any"}, {"lineNumber": 190, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 193, "col_offset": 11, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 196, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 200, "col_offset": 45, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 202, "col_offset": 15, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 203, "col_offset": 16, "nodeName": "val", "type": "bool"}, {"lineNumber": 213, "col_offset": 15, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 214, "col_offset": 16, "nodeName": "newnode", "type": "_ast.Num"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "newnode", "type": "Union[_ast.NameConstant, _ast.Num]"}, {"lineNumber": 215, "col_offset": 28, "nodeName": "node", "type": "Any"}, {"lineNumber": 216, "col_offset": 12, "nodeName": "newnode", "type": "Union[_ast.NameConstant, _ast.Num]"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "newnode", "type": "Union[_ast.NameConstant, _ast.Num]"}, {"lineNumber": 217, "col_offset": 32, "nodeName": "node", "type": "Any"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "newnode", "type": "Union[_ast.NameConstant, _ast.Num]"}, {"lineNumber": 223, "col_offset": 11, "nodeName": "node", "type": "Any"}, {"lineNumber": 225, "col_offset": 16, "nodeName": "newnode", "type": "Any"}, {"lineNumber": 226, "col_offset": 16, "nodeName": "collected", "type": "bool"}, {"lineNumber": 228, "col_offset": 27, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 228, "col_offset": 44, "nodeName": "node", "type": "Any"}, {"lineNumber": 229, "col_offset": 29, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 229, "col_offset": 46, "nodeName": "node", "type": "Any"}, {"lineNumber": 233, "col_offset": 11, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 246, "col_offset": 13, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 283, "col_offset": 11, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 283, "col_offset": 35, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 284, "col_offset": 28, "nodeName": "left", "type": "Any"}, {"lineNumber": 284, "col_offset": 39, "nodeName": "right", "type": "Any"}, {"lineNumber": 316, "col_offset": 8, "nodeName": "BrianASTRenderer", "type": "Type[brian2.parsing.bast.BrianASTRenderer]"}, {"lineNumber": 326, "col_offset": 31, "nodeName": "extra_lio_prefix", "type": "Union[str, Any]"}, {"lineNumber": 330, "col_offset": 31, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 331, "col_offset": 15, "nodeName": "arithmetic_simplifier", "type": "ArithmeticSimplifier"}, {"lineNumber": 332, "col_offset": 15, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "node_renderer", "type": "brian2.parsing.rendering.NodeRenderer"}, {"lineNumber": 340, "col_offset": 11, "nodeName": "node", "type": "Any"}, {"lineNumber": 340, "col_offset": 27, "nodeName": "complexity", "type": "Any"}, {"lineNumber": 341, "col_offset": 19, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 342, "col_offset": 15, "nodeName": "expr", "type": "Any"}, {"lineNumber": 342, "col_offset": 23, "nodeName": "loop_invariants", "type": "collections.OrderedDict[Any, str]"}, {"lineNumber": 343, "col_offset": 16, "nodeName": "name", "type": "nothing"}, {"lineNumber": 345, "col_offset": 16, "nodeName": "n", "type": "int"}, {"lineNumber": 346, "col_offset": 16, "nodeName": "name", "type": "str"}, {"lineNumber": 347, "col_offset": 45, "nodeName": "name", "type": "str"}, {"lineNumber": 348, "col_offset": 51, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 356, "col_offset": 22, "nodeName": "Name", "type": "Type[_ast.Name]"}, {"lineNumber": 356, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 357, "col_offset": 12, "nodeName": "newnode", "type": "_ast.Name"}, {"lineNumber": 358, "col_offset": 12, "nodeName": "newnode", "type": "_ast.Name"}, {"lineNumber": 358, "col_offset": 28, "nodeName": "node", "type": "Any"}, {"lineNumber": 359, "col_offset": 12, "nodeName": "newnode", "type": "_ast.Name"}, {"lineNumber": 360, "col_offset": 12, "nodeName": "newnode", "type": "_ast.Name"}, {"lineNumber": 360, "col_offset": 32, "nodeName": "node", "type": "Any"}, {"lineNumber": 390, "col_offset": 39, "nodeName": "term", "type": "Any"}, {"lineNumber": 393, "col_offset": 38, "nodeName": "BinOp", "type": "Type[_ast.BinOp]"}, {"lineNumber": 393, "col_offset": 48, "nodeName": "left", "type": "Any"}, {"lineNumber": 393, "col_offset": 60, "nodeName": "right", "type": "Any"}, {"lineNumber": 420, "col_offset": 24, "nodeName": "node", "type": "Any"}, {"lineNumber": 420, "col_offset": 56, "nodeName": "node", "type": "Any"}, {"lineNumber": 420, "col_offset": 64, "nodeName": "primary", "type": "List[Any]"}, {"lineNumber": 423, "col_offset": 40, "nodeName": "term", "type": "Any"}, {"lineNumber": 425, "col_offset": 27, "nodeName": "term", "type": "Any"}, {"lineNumber": 426, "col_offset": 11, "nodeName": "expr", "type": "Any"}, {"lineNumber": 426, "col_offset": 19, "nodeName": "inverted_expressions", "type": "Any"}, {"lineNumber": 426, "col_offset": 44, "nodeName": "term", "type": "Any"}, {"lineNumber": 436, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 436, "col_offset": 31, "nodeName": "term", "type": "Any"}, {"lineNumber": 469, "col_offset": 7, "nodeName": "node", "type": "Any"}, {"lineNumber": 475, "col_offset": 7, "nodeName": "op", "type": "Any"}, {"lineNumber": 478, "col_offset": 18, "nodeName": "core", "type": "Any"}, {"lineNumber": 479, "col_offset": 37, "nodeName": "x", "type": "Any"}, {"lineNumber": 479, "col_offset": 39, "nodeName": "y", "type": "Any"}, {"lineNumber": 480, "col_offset": 38, "nodeName": "x", "type": "Any"}, {"lineNumber": 480, "col_offset": 40, "nodeName": "y", "type": "Any"}, {"lineNumber": 481, "col_offset": 9, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 482, "col_offset": 21, "nodeName": "ast", "type": "module"}, {"lineNumber": 483, "col_offset": 22, "nodeName": "ast", "type": "module"}, {"lineNumber": 484, "col_offset": 18, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 501, "col_offset": 11, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 502, "col_offset": 16, "nodeName": "op_py_primary", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 502, "col_offset": 30, "nodeName": "x", "type": "Any"}, {"lineNumber": 502, "col_offset": 33, "nodeName": "n", "type": "Any"}, {"lineNumber": 504, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 504, "col_offset": 43, "nodeName": "term", "type": "Any"}, {"lineNumber": 506, "col_offset": 11, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 507, "col_offset": 16, "nodeName": "op_py_inverted", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 507, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 507, "col_offset": 34, "nodeName": "n", "type": "Any"}, {"lineNumber": 509, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 509, "col_offset": 44, "nodeName": "term", "type": "Any"}, {"lineNumber": 513, "col_offset": 19, "nodeName": "ast", "type": "module"}, {"lineNumber": 520, "col_offset": 34, "nodeName": "term", "type": "Any"}, {"lineNumber": 520, "col_offset": 42, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 521, "col_offset": 35, "nodeName": "term", "type": "Any"}, {"lineNumber": 521, "col_offset": 43, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 530, "col_offset": 29, "nodeName": "node", "type": "Optional[_ast.Num]"}, {"lineNumber": 530, "col_offset": 35, "nodeName": "prod_primary", "type": "Any"}, {"lineNumber": 532, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 533, "col_offset": 16, "nodeName": "node", "type": "_ast.Num"}, {"lineNumber": 534, "col_offset": 19, "nodeName": "BinOp", "type": "Type[_ast.BinOp]"}, {"lineNumber": 534, "col_offset": 29, "nodeName": "node", "type": "Any"}, {"lineNumber": 534, "col_offset": 50, "nodeName": "prod_inverted", "type": "Any"}, {"lineNumber": 537, "col_offset": 15, "nodeName": "ast", "type": "module"}, {"lineNumber": 538, "col_offset": 34, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 538, "col_offset": 62, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 539, "col_offset": 15, "nodeName": "ast", "type": "module"}, {"lineNumber": 539, "col_offset": 25, "nodeName": "Num", "type": "Type[_ast.Num]"}, {"lineNumber": 539, "col_offset": 33, "nodeName": "op_null_with_dtype", "type": "Any"}, {"lineNumber": 539, "col_offset": 54, "nodeName": "op_primary", "type": "Union[Type[_ast.Add], Type[_ast.Mult]]"}, {"lineNumber": 548, "col_offset": 17, "nodeName": "node", "type": "Any"}, {"lineNumber": 552, "col_offset": 18, "nodeName": "left", "type": "Any"}, {"lineNumber": 553, "col_offset": 21, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 553, "col_offset": 29, "nodeName": "left", "type": "Any"}, {"lineNumber": 553, "col_offset": 50, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 554, "col_offset": 8, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 555, "col_offset": 12, "nodeName": "op", "type": "Any"}, {"lineNumber": 555, "col_offset": 39, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 555, "col_offset": 48, "nodeName": "inverted", "type": "Union[Type[_ast.Sub], Type[_ast.Div]]"}, {"lineNumber": 556, "col_offset": 28, "nodeName": "node", "type": "Any"}, {"lineNumber": 557, "col_offset": 44, "nodeName": "add_to_inverted", "type": "bool"}, {"lineNumber": 560, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 560, "col_offset": 34, "nodeName": "left", "type": "Any"}, {"lineNumber": 562, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 562, "col_offset": 33, "nodeName": "left", "type": "Any"}, {"lineNumber": 563, "col_offset": 19, "nodeName": "right", "type": "Any"}, {"lineNumber": 564, "col_offset": 21, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 564, "col_offset": 29, "nodeName": "right", "type": "Any"}, {"lineNumber": 564, "col_offset": 51, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 565, "col_offset": 8, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 566, "col_offset": 12, "nodeName": "op", "type": "Any"}, {"lineNumber": 566, "col_offset": 40, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 566, "col_offset": 49, "nodeName": "inverted", "type": "Union[Type[_ast.Sub], Type[_ast.Div]]"}, {"lineNumber": 567, "col_offset": 11, "nodeName": "op", "type": "Any"}, {"lineNumber": 568, "col_offset": 12, "nodeName": "collect_commutative", "type": "Callable[..., Any]"}, {"lineNumber": 568, "col_offset": 32, "nodeName": "right", "type": "Any"}, {"lineNumber": 568, "col_offset": 44, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 568, "col_offset": 53, "nodeName": "inverted", "type": "Union[Type[_ast.Sub], Type[_ast.Div]]"}, {"lineNumber": 568, "col_offset": 63, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 568, "col_offset": 78, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 571, "col_offset": 12, "nodeName": "collect_commutative", "type": "Callable[..., Any]"}, {"lineNumber": 571, "col_offset": 32, "nodeName": "right", "type": "Any"}, {"lineNumber": 571, "col_offset": 44, "nodeName": "primary", "type": "Union[Type[_ast.Mult], Type[_ast.Add]]"}, {"lineNumber": 571, "col_offset": 53, "nodeName": "inverted", "type": "Union[Type[_ast.Sub], Type[_ast.Div]]"}, {"lineNumber": 571, "col_offset": 63, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 571, "col_offset": 78, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 574, "col_offset": 36, "nodeName": "op_primary", "type": "bool"}, {"lineNumber": 574, "col_offset": 52, "nodeName": "add_to_inverted", "type": "bool"}, {"lineNumber": 575, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 575, "col_offset": 33, "nodeName": "right", "type": "Any"}, {"lineNumber": 577, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 577, "col_offset": 34, "nodeName": "right", "type": "Any"}, {"lineNumber": 23, "col_offset": 45, "nodeName": "DEFAULT_FUNCTIONS", "type": "Dict[str, brian2.core.functions.Function]"}, {"lineNumber": 24, "col_offset": 28, "nodeName": "v", "type": "brian2.core.functions.SymbolicConstant"}, {"lineNumber": 24, "col_offset": 41, "nodeName": "k", "type": "str"}, {"lineNumber": 24, "col_offset": 44, "nodeName": "v", "type": "brian2.core.functions.SymbolicConstant"}, {"lineNumber": 24, "col_offset": 49, "nodeName": "items", "type": "Callable"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "k", "type": "Any"}, {"lineNumber": 78, "col_offset": 34, "nodeName": "v", "type": "Any"}, {"lineNumber": 78, "col_offset": 39, "nodeName": "items", "type": "Any"}, {"lineNumber": 88, "col_offset": 35, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 89, "col_offset": 38, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 90, "col_offset": 43, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 91, "col_offset": 36, "nodeName": "stmt", "type": "Any"}, {"lineNumber": 95, "col_offset": 52, "nodeName": "var", "type": "Any"}, {"lineNumber": 95, "col_offset": 59, "nodeName": "idents", "type": "Set[Any]"}, {"lineNumber": 98, "col_offset": 44, "nodeName": "var", "type": "Any"}, {"lineNumber": 98, "col_offset": 51, "nodeName": "used_boolvars", "type": "List[Any]"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "itertools", "type": "module"}, {"lineNumber": 101, "col_offset": 48, "nodeName": "bool_space", "type": "List[List[bool]]"}, {"lineNumber": 104, "col_offset": 23, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 105, "col_offset": 26, "nodeName": "word_substitute", "type": "Callable"}, {"lineNumber": 105, "col_offset": 42, "nodeName": "new_expr", "type": "Any"}, {"lineNumber": 105, "col_offset": 52, "nodeName": "subs", "type": "Dict[nothing, str]"}, {"lineNumber": 106, "col_offset": 26, "nodeName": "render_expr", "type": "Callable[[Any], Any]"}, {"lineNumber": 106, "col_offset": 49, "nodeName": "curexpr", "type": "Any"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "expanded_expressions", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 109, "col_offset": 16, "nodeName": "complexities", "type": "Dict[Tuple[Tuple[nothing, nothing], ...], Any]"}, {"lineNumber": 109, "col_offset": 36, "nodeName": "expression_complexity", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 109, "col_offset": 58, "nodeName": "curexpr", "type": "Any"}, {"lineNumber": 109, "col_offset": 67, "nodeName": "variables", "type": "Any"}, {"lineNumber": 125, "col_offset": 20, "nodeName": "core", "type": "Any"}, {"lineNumber": 156, "col_offset": 22, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 193, "col_offset": 11, "nodeName": "node", "type": "Any"}, {"lineNumber": 199, "col_offset": 15, "nodeName": "NodeRenderer", "type": "Type[brian2.parsing.rendering.NodeRenderer]"}, {"lineNumber": 202, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 203, "col_offset": 22, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 203, "col_offset": 27, "nodeName": "val", "type": "Any"}, {"lineNumber": 204, "col_offset": 19, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 204, "col_offset": 27, "nodeName": "ast", "type": "module"}, {"lineNumber": 205, "col_offset": 20, "nodeName": "newnode", "type": "_ast.NameConstant"}, {"lineNumber": 209, "col_offset": 17, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 210, "col_offset": 16, "nodeName": "val", "type": "int"}, {"lineNumber": 212, "col_offset": 16, "nodeName": "val", "type": "Any"}, {"lineNumber": 213, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 214, "col_offset": 26, "nodeName": "Num", "type": "Type[_ast.Num]"}, {"lineNumber": 214, "col_offset": 34, "nodeName": "val", "type": "Any"}, {"lineNumber": 224, "col_offset": 15, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 225, "col_offset": 26, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 226, "col_offset": 16, "nodeName": "newnode", "type": "Any"}, {"lineNumber": 227, "col_offset": 23, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 227, "col_offset": 40, "nodeName": "newnode", "type": "Any"}, {"lineNumber": 230, "col_offset": 15, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 230, "col_offset": 21, "nodeName": "ArithmeticSimplifier", "type": "Type[ArithmeticSimplifier]"}, {"lineNumber": 230, "col_offset": 43, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 233, "col_offset": 11, "nodeName": "op", "type": "Any"}, {"lineNumber": 234, "col_offset": 36, "nodeName": "left", "type": "Any"}, {"lineNumber": 234, "col_offset": 42, "nodeName": "right", "type": "Any"}, {"lineNumber": 235, "col_offset": 36, "nodeName": "right", "type": "Any"}, {"lineNumber": 235, "col_offset": 43, "nodeName": "left", "type": "Any"}, {"lineNumber": 236, "col_offset": 19, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 246, "col_offset": 13, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 248, "col_offset": 19, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 255, "col_offset": 13, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 283, "col_offset": 11, "nodeName": "node", "type": "Any"}, {"lineNumber": 283, "col_offset": 35, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 284, "col_offset": 28, "nodeName": "node", "type": "Any"}, {"lineNumber": 284, "col_offset": 39, "nodeName": "node", "type": "Any"}, {"lineNumber": 285, "col_offset": 19, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 286, "col_offset": 20, "nodeName": "dtype", "type": "str"}, {"lineNumber": 287, "col_offset": 20, "nodeName": "n", "type": "Any"}, {"lineNumber": 331, "col_offset": 15, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 340, "col_offset": 27, "nodeName": "node", "type": "Any"}, {"lineNumber": 341, "col_offset": 19, "nodeName": "node_renderer", "type": "brian2.parsing.rendering.NodeRenderer"}, {"lineNumber": 341, "col_offset": 50, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 341, "col_offset": 89, "nodeName": "node", "type": "Any"}, {"lineNumber": 342, "col_offset": 23, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 343, "col_offset": 23, "nodeName": "loop_invariants", "type": "collections.OrderedDict[Any, str]"}, {"lineNumber": 345, "col_offset": 16, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 347, "col_offset": 16, "nodeName": "loop_invariants", "type": "collections.OrderedDict[Any, str]"}, {"lineNumber": 348, "col_offset": 16, "nodeName": "loop_invariant_dtypes", "type": "Dict[str, Any]"}, {"lineNumber": 348, "col_offset": 51, "nodeName": "node", "type": "Any"}, {"lineNumber": 352, "col_offset": 39, "nodeName": "AuxiliaryVariable", "type": "Type[brian2.core.variables.AuxiliaryVariable]"}, {"lineNumber": 352, "col_offset": 57, "nodeName": "name", "type": "str"}, {"lineNumber": 356, "col_offset": 22, "nodeName": "ast", "type": "module"}, {"lineNumber": 363, "col_offset": 15, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 363, "col_offset": 21, "nodeName": "Simplifier", "type": "Type[Simplifier]"}, {"lineNumber": 363, "col_offset": 33, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 393, "col_offset": 38, "nodeName": "ast", "type": "module"}, {"lineNumber": 393, "col_offset": 54, "nodeName": "op", "type": "Union[Type[_ast.Add], Type[_ast.Mult]]"}, {"lineNumber": 420, "col_offset": 30, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 420, "col_offset": 45, "nodeName": "node", "type": "Any"}, {"lineNumber": 421, "col_offset": 29, "nodeName": "node", "type": "Any"}, {"lineNumber": 421, "col_offset": 61, "nodeName": "node", "type": "Any"}, {"lineNumber": 421, "col_offset": 69, "nodeName": "inverted", "type": "List[Any]"}, {"lineNumber": 429, "col_offset": 41, "nodeName": "expr", "type": "Any"}, {"lineNumber": 430, "col_offset": 19, "nodeName": "expr", "type": "str"}, {"lineNumber": 434, "col_offset": 36, "nodeName": "expressions", "type": "Dict[Any, Any]"}, {"lineNumber": 434, "col_offset": 58, "nodeName": "term", "type": "Any"}, {"lineNumber": 434, "col_offset": 66, "nodeName": "inverted", "type": "List[Any]"}, {"lineNumber": 436, "col_offset": 12, "nodeName": "new_primary", "type": "List[Any]"}, {"lineNumber": 475, "col_offset": 7, "nodeName": "node", "type": "Any"}, {"lineNumber": 478, "col_offset": 18, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 481, "col_offset": 9, "nodeName": "op", "type": "Any"}, {"lineNumber": 484, "col_offset": 18, "nodeName": "core", "type": "Any"}, {"lineNumber": 485, "col_offset": 37, "nodeName": "x", "type": "Any"}, {"lineNumber": 485, "col_offset": 39, "nodeName": "y", "type": "Any"}, {"lineNumber": 486, "col_offset": 38, "nodeName": "x", "type": "Any"}, {"lineNumber": 486, "col_offset": 40, "nodeName": "y", "type": "Any"}, {"lineNumber": 501, "col_offset": 11, "nodeName": "term", "type": "Any"}, {"lineNumber": 502, "col_offset": 33, "nodeName": "term", "type": "Any"}, {"lineNumber": 504, "col_offset": 12, "nodeName": "remaining_terms_primary", "type": "List[Any]"}, {"lineNumber": 506, "col_offset": 11, "nodeName": "term", "type": "Any"}, {"lineNumber": 507, "col_offset": 34, "nodeName": "term", "type": "Any"}, {"lineNumber": 509, "col_offset": 12, "nodeName": "remaining_terms_inverted", "type": "List[Any]"}, {"lineNumber": 520, "col_offset": 59, "nodeName": "scalar", "type": "Any"}, {"lineNumber": 520, "col_offset": 74, "nodeName": "scalar", "type": "bool"}, {"lineNumber": 521, "col_offset": 61, "nodeName": "scalar", "type": "Any"}, {"lineNumber": 521, "col_offset": 76, "nodeName": "scalar", "type": "bool"}, {"lineNumber": 533, "col_offset": 23, "nodeName": "Num", "type": "Type[_ast.Num]"}, {"lineNumber": 533, "col_offset": 31, "nodeName": "op_null_with_dtype", "type": "Any"}, {"lineNumber": 534, "col_offset": 19, "nodeName": "ast", "type": "module"}, {"lineNumber": 534, "col_offset": 35, "nodeName": "op_inverted", "type": "Union[Type[_ast.Div], Type[_ast.Sub]]"}, {"lineNumber": 538, "col_offset": 50, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 538, "col_offset": 78, "nodeName": "orignode_dtype", "type": "Any"}, {"lineNumber": 539, "col_offset": 25, "nodeName": "ast", "type": "module"}, {"lineNumber": 552, "col_offset": 18, "nodeName": "node", "type": "Any"}, {"lineNumber": 553, "col_offset": 29, "nodeName": "node", "type": "Any"}, {"lineNumber": 553, "col_offset": 50, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 554, "col_offset": 8, "nodeName": "left", "type": "Any"}, {"lineNumber": 555, "col_offset": 12, "nodeName": "left", "type": "Any"}, {"lineNumber": 560, "col_offset": 12, "nodeName": "terms_inverted", "type": "Any"}, {"lineNumber": 560, "col_offset": 34, "nodeName": "node", "type": "Any"}, {"lineNumber": 562, "col_offset": 12, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 562, "col_offset": 33, "nodeName": "node", "type": "Any"}, {"lineNumber": 563, "col_offset": 19, "nodeName": "node", "type": "Any"}, {"lineNumber": 564, "col_offset": 29, "nodeName": "node", "type": "Any"}, {"lineNumber": 564, "col_offset": 51, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 565, "col_offset": 8, "nodeName": "right", "type": "Any"}, {"lineNumber": 566, "col_offset": 12, "nodeName": "right", "type": "Any"}, {"lineNumber": 567, "col_offset": 11, "nodeName": "node", "type": "Any"}, {"lineNumber": 568, "col_offset": 32, "nodeName": "node", "type": "Any"}, {"lineNumber": 569, "col_offset": 48, "nodeName": "add_to_inverted", "type": "bool"}, {"lineNumber": 571, "col_offset": 32, "nodeName": "node", "type": "Any"}, {"lineNumber": 574, "col_offset": 16, "nodeName": "add_to_inverted", "type": "bool"}, {"lineNumber": 574, "col_offset": 76, "nodeName": "op_primary", "type": "bool"}, {"lineNumber": 575, "col_offset": 12, "nodeName": "terms_primary", "type": "List[Any]"}, {"lineNumber": 575, "col_offset": 33, "nodeName": "node", "type": "Any"}, {"lineNumber": 577, "col_offset": 12, "nodeName": "terms_inverted", "type": "List[Any]"}, {"lineNumber": 577, "col_offset": 34, "nodeName": "node", "type": "Any"}, {"lineNumber": 24, "col_offset": 49, "nodeName": "DEFAULT_CONSTANTS", "type": "Dict[str, brian2.core.functions.SymbolicConstant]"}, {"lineNumber": 78, "col_offset": 39, "nodeName": "variables", "type": "Any"}, {"lineNumber": 79, "col_offset": 23, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 79, "col_offset": 31, "nodeName": "v", "type": "Any"}, {"lineNumber": 106, "col_offset": 26, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 108, "col_offset": 37, "nodeName": "key", "type": "Tuple[Tuple[nothing, nothing], ...]"}, {"lineNumber": 109, "col_offset": 29, "nodeName": "key", "type": "Tuple[Tuple[nothing, nothing], ...]"}, {"lineNumber": 109, "col_offset": 67, "nodeName": "simplifier", "type": "Simplifier"}, {"lineNumber": 125, "col_offset": 20, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 187, "col_offset": 19, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 187, "col_offset": 25, "nodeName": "ArithmeticSimplifier", "type": "Type[ArithmeticSimplifier]"}, {"lineNumber": 187, "col_offset": 47, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 205, "col_offset": 30, "nodeName": "NameConstant", "type": "Type[_ast.NameConstant]"}, {"lineNumber": 205, "col_offset": 47, "nodeName": "val", "type": "bool"}, {"lineNumber": 209, "col_offset": 17, "nodeName": "node", "type": "Any"}, {"lineNumber": 210, "col_offset": 22, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 210, "col_offset": 26, "nodeName": "val", "type": "Any"}, {"lineNumber": 212, "col_offset": 22, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 212, "col_offset": 53, "nodeName": "val", "type": "Any"}, {"lineNumber": 214, "col_offset": 26, "nodeName": "ast", "type": "module"}, {"lineNumber": 224, "col_offset": 15, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 224, "col_offset": 83, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 224, "col_offset": 91, "nodeName": "node", "type": "Any"}, {"lineNumber": 225, "col_offset": 26, "nodeName": "bast_renderer", "type": "brian2.parsing.bast.BrianASTRenderer"}, {"lineNumber": 225, "col_offset": 57, "nodeName": "collect", "type": "Callable[[Any], Any]"}, {"lineNumber": 225, "col_offset": 65, "nodeName": "node", "type": "Any"}, {"lineNumber": 227, "col_offset": 23, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 236, "col_offset": 19, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 237, "col_offset": 23, "nodeName": "n", "type": "Any"}, {"lineNumber": 239, "col_offset": 27, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 241, "col_offset": 23, "nodeName": "n", "type": "Any"}, {"lineNumber": 246, "col_offset": 13, "nodeName": "op", "type": "Any"}, {"lineNumber": 247, "col_offset": 15, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 247, "col_offset": 52, "nodeName": "n", "type": "Any"}, {"lineNumber": 248, "col_offset": 19, "nodeName": "node", "type": "Any"}, {"lineNumber": 251, "col_offset": 15, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 251, "col_offset": 53, "nodeName": "n", "type": "Any"}, {"lineNumber": 254, "col_offset": 27, "nodeName": "left", "type": "Any"}, {"lineNumber": 255, "col_offset": 13, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 257, "col_offset": 19, "nodeName": "stateless", "type": "Any"}, {"lineNumber": 265, "col_offset": 27, "nodeName": "left", "type": "Any"}, {"lineNumber": 267, "col_offset": 13, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 283, "col_offset": 35, "nodeName": "op", "type": "Any"}, {"lineNumber": 285, "col_offset": 19, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 286, "col_offset": 20, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 287, "col_offset": 20, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 287, "col_offset": 32, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 287, "col_offset": 63, "nodeName": "n", "type": "Any"}, {"lineNumber": 341, "col_offset": 19, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 341, "col_offset": 50, "nodeName": "arithmetic_simplifier", "type": "ArithmeticSimplifier"}, {"lineNumber": 343, "col_offset": 23, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 343, "col_offset": 44, "nodeName": "expr", "type": "Any"}, {"lineNumber": 346, "col_offset": 31, "nodeName": "extra_lio_prefix", "type": "Any"}, {"lineNumber": 346, "col_offset": 53, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 346, "col_offset": 57, "nodeName": "n", "type": "int"}, {"lineNumber": 347, "col_offset": 16, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 347, "col_offset": 37, "nodeName": "expr", "type": "Any"}, {"lineNumber": 348, "col_offset": 16, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 348, "col_offset": 43, "nodeName": "name", "type": "str"}, {"lineNumber": 349, "col_offset": 42, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 350, "col_offset": 42, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 351, "col_offset": 40, "nodeName": "default_float_dtype", "type": "Any"}, {"lineNumber": 351, "col_offset": 72, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 352, "col_offset": 31, "nodeName": "name", "type": "str"}, {"lineNumber": 353, "col_offset": 63, "nodeName": "numpy_dtype", "type": "Any"}, {"lineNumber": 420, "col_offset": 30, "nodeName": "nr", "type": "brian2.parsing.rendering.NodeRenderer"}, {"lineNumber": 421, "col_offset": 35, "nodeName": "render_node", "type": "Callable[[Any], Any]"}, {"lineNumber": 421, "col_offset": 50, "nodeName": "node", "type": "Any"}, {"lineNumber": 429, "col_offset": 19, "nodeName": "expressions", "type": "Dict[Any, Any]"}, {"lineNumber": 432, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 432, "col_offset": 40, "nodeName": "iterm", "type": "Any"}, {"lineNumber": 434, "col_offset": 48, "nodeName": "term", "type": "Any"}, {"lineNumber": 481, "col_offset": 9, "nodeName": "node", "type": "Any"}, {"lineNumber": 484, "col_offset": 18, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 520, "col_offset": 59, "nodeName": "term", "type": "Any"}, {"lineNumber": 521, "col_offset": 61, "nodeName": "term", "type": "Any"}, {"lineNumber": 533, "col_offset": 23, "nodeName": "ast", "type": "module"}, {"lineNumber": 538, "col_offset": 50, "nodeName": "node", "type": "Any"}, {"lineNumber": 553, "col_offset": 50, "nodeName": "op", "type": "Any"}, {"lineNumber": 554, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 555, "col_offset": 12, "nodeName": "node", "type": "Any"}, {"lineNumber": 564, "col_offset": 51, "nodeName": "op", "type": "Any"}, {"lineNumber": 565, "col_offset": 8, "nodeName": "node", "type": "Any"}, {"lineNumber": 566, "col_offset": 12, "nodeName": "node", "type": "Any"}, {"lineNumber": 572, "col_offset": 52, "nodeName": "add_to_inverted", "type": "bool"}, {"lineNumber": 79, "col_offset": 47, "nodeName": "brian_dtype_from_dtype", "type": "Callable[[Any], str]"}, {"lineNumber": 79, "col_offset": 70, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 104, "col_offset": 29, "nodeName": "var", "type": "nothing"}, {"lineNumber": 107, "col_offset": 29, "nodeName": "var", "type": "nothing"}, {"lineNumber": 107, "col_offset": 34, "nodeName": "val", "type": "nothing"}, {"lineNumber": 205, "col_offset": 30, "nodeName": "ast", "type": "module"}, {"lineNumber": 212, "col_offset": 22, "nodeName": "core", "type": "Any"}, {"lineNumber": 224, "col_offset": 15, "nodeName": "op", "type": "Any"}, {"lineNumber": 225, "col_offset": 26, "nodeName": "self", "type": "ArithmeticSimplifier"}, {"lineNumber": 236, "col_offset": 19, "nodeName": "operand", "type": "Any"}, {"lineNumber": 237, "col_offset": 23, "nodeName": "operand", "type": "Any"}, {"lineNumber": 239, "col_offset": 27, "nodeName": "node", "type": "Any"}, {"lineNumber": 241, "col_offset": 23, "nodeName": "operand", "type": "Any"}, {"lineNumber": 244, "col_offset": 35, "nodeName": "other", "type": "Any"}, {"lineNumber": 247, "col_offset": 15, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 247, "col_offset": 52, "nodeName": "left", "type": "Any"}, {"lineNumber": 250, "col_offset": 27, "nodeName": "_replace_with_zero", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 250, "col_offset": 46, "nodeName": "left", "type": "Any"}, {"lineNumber": 250, "col_offset": 52, "nodeName": "node", "type": "Any"}, {"lineNumber": 251, "col_offset": 15, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 251, "col_offset": 53, "nodeName": "right", "type": "Any"}, {"lineNumber": 253, "col_offset": 19, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 253, "col_offset": 51, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 255, "col_offset": 13, "nodeName": "op", "type": "Any"}, {"lineNumber": 256, "col_offset": 15, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 256, "col_offset": 52, "nodeName": "n", "type": "Any"}, {"lineNumber": 257, "col_offset": 19, "nodeName": "node", "type": "Any"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 263, "col_offset": 30, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 264, "col_offset": 20, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 264, "col_offset": 58, "nodeName": "n", "type": "Any"}, {"lineNumber": 267, "col_offset": 13, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 275, "col_offset": 13, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 285, "col_offset": 19, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 287, "col_offset": 32, "nodeName": "core", "type": "Any"}, {"lineNumber": 287, "col_offset": 63, "nodeName": "subnode", "type": "Any"}, {"lineNumber": 341, "col_offset": 50, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 346, "col_offset": 31, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 346, "col_offset": 57, "nodeName": "self", "type": "Simplifier"}, {"lineNumber": 351, "col_offset": 40, "nodeName": "core", "type": "Any"}, {"lineNumber": 351, "col_offset": 72, "nodeName": "node", "type": "Any"}, {"lineNumber": 421, "col_offset": 35, "nodeName": "nr", "type": "brian2.parsing.rendering.NodeRenderer"}, {"lineNumber": 429, "col_offset": 31, "nodeName": "iterm", "type": "Any"}, {"lineNumber": 432, "col_offset": 20, "nodeName": "new_inverted", "type": "List[Any]"}, {"lineNumber": 553, "col_offset": 50, "nodeName": "left", "type": "Any"}, {"lineNumber": 564, "col_offset": 51, "nodeName": "right", "type": "Any"}, {"lineNumber": 79, "col_offset": 70, "nodeName": "v", "type": "Any"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 104, "col_offset": 38, "nodeName": "val", "type": "nothing"}, {"lineNumber": 104, "col_offset": 48, "nodeName": "var", "type": "nothing"}, {"lineNumber": 104, "col_offset": 53, "nodeName": "val", "type": "nothing"}, {"lineNumber": 104, "col_offset": 60, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 104, "col_offset": 64, "nodeName": "used_boolvars", "type": "List[Any]"}, {"lineNumber": 104, "col_offset": 79, "nodeName": "bool_vals", "type": "Tuple[Any, ...]"}, {"lineNumber": 107, "col_offset": 43, "nodeName": "var", "type": "nothing"}, {"lineNumber": 107, "col_offset": 48, "nodeName": "val", "type": "nothing"}, {"lineNumber": 107, "col_offset": 55, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 107, "col_offset": 59, "nodeName": "used_boolvars", "type": "List[Any]"}, {"lineNumber": 107, "col_offset": 74, "nodeName": "bool_vals", "type": "Tuple[Any, ...]"}, {"lineNumber": 212, "col_offset": 22, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 224, "col_offset": 15, "nodeName": "node", "type": "Any"}, {"lineNumber": 240, "col_offset": 35, "nodeName": "_replace_with_zero", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 240, "col_offset": 54, "nodeName": "operand", "type": "Any"}, {"lineNumber": 240, "col_offset": 63, "nodeName": "node", "type": "Any"}, {"lineNumber": 243, "col_offset": 27, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 243, "col_offset": 61, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 247, "col_offset": 15, "nodeName": "left", "type": "Any"}, {"lineNumber": 251, "col_offset": 15, "nodeName": "right", "type": "Any"}, {"lineNumber": 253, "col_offset": 35, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 253, "col_offset": 67, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 256, "col_offset": 15, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 256, "col_offset": 52, "nodeName": "left", "type": "Any"}, {"lineNumber": 259, "col_offset": 27, "nodeName": "_replace_with_zero", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 259, "col_offset": 46, "nodeName": "left", "type": "Any"}, {"lineNumber": 259, "col_offset": 52, "nodeName": "node", "type": "Any"}, {"lineNumber": 263, "col_offset": 16, "nodeName": "left", "type": "Any"}, {"lineNumber": 263, "col_offset": 30, "nodeName": "right", "type": "Any"}, {"lineNumber": 264, "col_offset": 20, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 264, "col_offset": 58, "nodeName": "right", "type": "Any"}, {"lineNumber": 267, "col_offset": 13, "nodeName": "op", "type": "Any"}, {"lineNumber": 268, "col_offset": 36, "nodeName": "left", "type": "Any"}, {"lineNumber": 268, "col_offset": 42, "nodeName": "right", "type": "Any"}, {"lineNumber": 269, "col_offset": 36, "nodeName": "right", "type": "Any"}, {"lineNumber": 269, "col_offset": 43, "nodeName": "left", "type": "Any"}, {"lineNumber": 275, "col_offset": 13, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 287, "col_offset": 32, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 351, "col_offset": 40, "nodeName": "prefs", "type": "brian2.core.preferences.BrianGlobalPreferences"}, {"lineNumber": 553, "col_offset": 50, "nodeName": "node", "type": "Any"}, {"lineNumber": 564, "col_offset": 51, "nodeName": "node", "type": "Any"}, {"lineNumber": 243, "col_offset": 43, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 243, "col_offset": 77, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 253, "col_offset": 35, "nodeName": "right", "type": "Any"}, {"lineNumber": 253, "col_offset": 67, "nodeName": "left", "type": "Any"}, {"lineNumber": 256, "col_offset": 15, "nodeName": "left", "type": "Any"}, {"lineNumber": 264, "col_offset": 20, "nodeName": "right", "type": "Any"}, {"lineNumber": 270, "col_offset": 19, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 270, "col_offset": 59, "nodeName": "n", "type": "Any"}, {"lineNumber": 273, "col_offset": 31, "nodeName": "other", "type": "Any"}, {"lineNumber": 275, "col_offset": 13, "nodeName": "op", "type": "Any"}, {"lineNumber": 276, "col_offset": 15, "nodeName": "__name__", "type": "Any"}, {"lineNumber": 276, "col_offset": 53, "nodeName": "n", "type": "Any"}, {"lineNumber": 279, "col_offset": 27, "nodeName": "left", "type": "Any"}, {"lineNumber": 243, "col_offset": 43, "nodeName": "operand", "type": "Any"}, {"lineNumber": 243, "col_offset": 77, "nodeName": "other", "type": "Any"}, {"lineNumber": 270, "col_offset": 19, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 270, "col_offset": 59, "nodeName": "operand", "type": "Any"}, {"lineNumber": 272, "col_offset": 23, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 272, "col_offset": 55, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 276, "col_offset": 15, "nodeName": "__class__", "type": "Any"}, {"lineNumber": 276, "col_offset": 53, "nodeName": "right", "type": "Any"}, {"lineNumber": 278, "col_offset": 19, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 278, "col_offset": 49, "nodeName": "dtype_hierarchy", "type": "Dict[Union[int, str], Union[int, str]]"}, {"lineNumber": 270, "col_offset": 19, "nodeName": "operand", "type": "Any"}, {"lineNumber": 272, "col_offset": 39, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 272, "col_offset": 71, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 276, "col_offset": 15, "nodeName": "right", "type": "Any"}, {"lineNumber": 278, "col_offset": 35, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 278, "col_offset": 65, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 272, "col_offset": 39, "nodeName": "operand", "type": "Any"}, {"lineNumber": 272, "col_offset": 71, "nodeName": "other", "type": "Any"}, {"lineNumber": 278, "col_offset": 35, "nodeName": "right", "type": "Any"}, {"lineNumber": 278, "col_offset": 65, "nodeName": "left", "type": "Any"}]