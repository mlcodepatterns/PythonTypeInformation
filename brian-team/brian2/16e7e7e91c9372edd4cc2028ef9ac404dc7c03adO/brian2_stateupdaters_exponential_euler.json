[{"lineNumber": 7, "col_offset": 0, "nodeName": "get_conditionally_linear_system", "type": "Callable[[Any], Any]"}, {"lineNumber": 5, "col_offset": 0, "nodeName": "__all__", "type": "List[str]"}, {"lineNumber": 51, "col_offset": 35, "nodeName": "StateUpdateMethod", "type": "Type[brian2.stateupdaters.base.StateUpdateMethod]"}, {"lineNumber": 91, "col_offset": 0, "nodeName": "exponential_euler", "type": "ExponentialEulerStateUpdater"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "diff_eqs", "type": "Any"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "substituted_expressions", "type": "Any"}, {"lineNumber": 27, "col_offset": 4, "nodeName": "coefficients", "type": "Dict[Any, Tuple[Any, Any]]"}, {"lineNumber": 29, "col_offset": 22, "nodeName": "diff_eqs", "type": "Any"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "coefficients", "type": "Dict[Any, Tuple[Any, Any]]"}, {"lineNumber": 91, "col_offset": 20, "nodeName": "ExponentialEulerStateUpdater", "type": "Type[ExponentialEulerStateUpdater]"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "eqs", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "name", "type": "Any"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "expr", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "var", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "wildcard", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "constant_wildcard", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "pattern", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "s_expr", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "matches", "type": "Any"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "is_stochastic", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "system", "type": "Dict[Any, Tuple[Any, Any]]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "code", "type": "List[str]"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "var", "type": "Any"}, {"lineNumber": 86, "col_offset": 19, "nodeName": "system", "type": "Dict[Any, Tuple[Any, Any]]"}, {"lineNumber": 30, "col_offset": 14, "nodeName": "Symbol", "type": "Any"}, {"lineNumber": 30, "col_offset": 24, "nodeName": "name", "type": "Any"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "Wild", "type": "Any"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "Wild", "type": "Any"}, {"lineNumber": 36, "col_offset": 33, "nodeName": "constant_wildcard", "type": "Any"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "collect", "type": "Any"}, {"lineNumber": 39, "col_offset": 54, "nodeName": "var", "type": "Any"}, {"lineNumber": 40, "col_offset": 18, "nodeName": "match", "type": "Any"}, {"lineNumber": 40, "col_offset": 31, "nodeName": "pattern", "type": "Any"}, {"lineNumber": 42, "col_offset": 11, "nodeName": "matches", "type": "Any"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "equations", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "_", "type": "Dict[Any, Tuple[Any, Any]]"}, {"lineNumber": 59, "col_offset": 15, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "get_conditionally_linear_system", "type": "Callable[[Any], Any]"}, {"lineNumber": 65, "col_offset": 49, "nodeName": "equations", "type": "Any"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "var", "type": "Any"}, {"lineNumber": 68, "col_offset": 27, "nodeName": "iteritems", "type": "Any"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "s_var", "type": "Any"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "s_dt", "type": "Any"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "update", "type": "str"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "code", "type": "List[str]"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "code", "type": "List[str]"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "join", "type": "Callable"}, {"lineNumber": 89, "col_offset": 25, "nodeName": "code", "type": "List[str]"}, {"lineNumber": 30, "col_offset": 14, "nodeName": "sp", "type": "Any"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "sp", "type": "Any"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "sp", "type": "Any"}, {"lineNumber": 36, "col_offset": 18, "nodeName": "wildcard", "type": "Any"}, {"lineNumber": 36, "col_offset": 27, "nodeName": "var", "type": "Any"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "sp", "type": "Any"}, {"lineNumber": 39, "col_offset": 28, "nodeName": "expand", "type": "Any"}, {"lineNumber": 40, "col_offset": 18, "nodeName": "s_expr", "type": "Any"}, {"lineNumber": 43, "col_offset": 18, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 46, "col_offset": 30, "nodeName": "simplify", "type": "Any"}, {"lineNumber": 47, "col_offset": 30, "nodeName": "simplify", "type": "Any"}, {"lineNumber": 58, "col_offset": 16, "nodeName": "get_conditionally_linear_system", "type": "Callable[[Any], Any]"}, {"lineNumber": 58, "col_offset": 48, "nodeName": "equations", "type": "Any"}, {"lineNumber": 68, "col_offset": 18, "nodeName": "A", "type": "Any"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "B", "type": "Any"}, {"lineNumber": 68, "col_offset": 27, "nodeName": "system", "type": "Dict[Any, Tuple[Any, Any]]"}, {"lineNumber": 69, "col_offset": 20, "nodeName": "Symbol", "type": "Any"}, {"lineNumber": 69, "col_offset": 30, "nodeName": "var", "type": "Any"}, {"lineNumber": 70, "col_offset": 19, "nodeName": "Symbol", "type": "Any"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "B", "type": "Any"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "BA", "type": "Any"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "BA_name", "type": "str"}, {"lineNumber": 75, "col_offset": 16, "nodeName": "s_BA", "type": "Any"}, {"lineNumber": 76, "col_offset": 16, "nodeName": "code", "type": "List[str]"}, {"lineNumber": 77, "col_offset": 16, "nodeName": "update_expression", "type": "Any"}, {"lineNumber": 79, "col_offset": 16, "nodeName": "update_expression", "type": "Any"}, {"lineNumber": 33, "col_offset": 42, "nodeName": "var", "type": "Any"}, {"lineNumber": 35, "col_offset": 51, "nodeName": "var", "type": "Any"}, {"lineNumber": 39, "col_offset": 28, "nodeName": "sympy_expr", "type": "Any"}, {"lineNumber": 69, "col_offset": 20, "nodeName": "sp", "type": "Any"}, {"lineNumber": 70, "col_offset": 19, "nodeName": "sp", "type": "Any"}, {"lineNumber": 72, "col_offset": 21, "nodeName": "B", "type": "Any"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "A", "type": "Any"}, {"lineNumber": 74, "col_offset": 35, "nodeName": "var", "type": "Any"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "Symbol", "type": "Any"}, {"lineNumber": 75, "col_offset": 33, "nodeName": "BA_name", "type": "str"}, {"lineNumber": 77, "col_offset": 68, "nodeName": "s_BA", "type": "Any"}, {"lineNumber": 79, "col_offset": 36, "nodeName": "s_var", "type": "Any"}, {"lineNumber": 83, "col_offset": 21, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 87, "col_offset": 21, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 39, "col_offset": 28, "nodeName": "expr", "type": "Any"}, {"lineNumber": 45, "col_offset": 30, "nodeName": "s_expr", "type": "Any"}, {"lineNumber": 45, "col_offset": 38, "nodeName": "name", "type": "Any"}, {"lineNumber": 46, "col_offset": 30, "nodeName": "matches", "type": "Any"}, {"lineNumber": 47, "col_offset": 30, "nodeName": "matches", "type": "Any"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "sp", "type": "Any"}, {"lineNumber": 79, "col_offset": 42, "nodeName": "exp", "type": "Any"}, {"lineNumber": 83, "col_offset": 21, "nodeName": "update", "type": "str"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "var", "type": "Any"}, {"lineNumber": 83, "col_offset": 49, "nodeName": "update_expression", "type": "Any"}, {"lineNumber": 87, "col_offset": 49, "nodeName": "var", "type": "Any"}, {"lineNumber": 46, "col_offset": 38, "nodeName": "wildcard", "type": "Any"}, {"lineNumber": 47, "col_offset": 38, "nodeName": "constant_wildcard", "type": "Any"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "BA_name", "type": "str"}, {"lineNumber": 76, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 76, "col_offset": 47, "nodeName": "BA", "type": "Any"}, {"lineNumber": 77, "col_offset": 37, "nodeName": "s_var", "type": "Any"}, {"lineNumber": 77, "col_offset": 45, "nodeName": "s_BA", "type": "Any"}, {"lineNumber": 77, "col_offset": 51, "nodeName": "exp", "type": "Any"}, {"lineNumber": 79, "col_offset": 42, "nodeName": "sp", "type": "Any"}, {"lineNumber": 79, "col_offset": 49, "nodeName": "A", "type": "Any"}, {"lineNumber": 79, "col_offset": 51, "nodeName": "s_dt", "type": "Any"}, {"lineNumber": 77, "col_offset": 51, "nodeName": "sp", "type": "Any"}, {"lineNumber": 77, "col_offset": 58, "nodeName": "A", "type": "Any"}, {"lineNumber": 77, "col_offset": 60, "nodeName": "s_dt", "type": "Any"}]