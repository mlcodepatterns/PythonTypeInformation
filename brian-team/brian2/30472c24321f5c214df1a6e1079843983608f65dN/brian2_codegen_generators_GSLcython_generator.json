[{"lineNumber": 5, "col_offset": 0, "nodeName": "__all__", "type": "List[str]"}, {"lineNumber": 7, "col_offset": 29, "nodeName": "CythonCodeGenerator", "type": "Any"}, {"lineNumber": 53, "col_offset": 15, "nodeName": "code", "type": "Any"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "var", "type": "Any"}, {"lineNumber": 10, "col_offset": 13, "nodeName": "op", "type": "Any"}, {"lineNumber": 10, "col_offset": 17, "nodeName": "expr", "type": "Any"}, {"lineNumber": 10, "col_offset": 23, "nodeName": "comment", "type": "Any"}, {"lineNumber": 10, "col_offset": 34, "nodeName": "var", "type": "Any"}, {"lineNumber": 10, "col_offset": 49, "nodeName": "op", "type": "Any"}, {"lineNumber": 11, "col_offset": 34, "nodeName": "expr", "type": "Any"}, {"lineNumber": 11, "col_offset": 50, "nodeName": "comment", "type": "Any"}, {"lineNumber": 12, "col_offset": 11, "nodeName": "op", "type": "Any"}, {"lineNumber": 15, "col_offset": 12, "nodeName": "op", "type": "str"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "used_boolvars", "type": "Any"}, {"lineNumber": 22, "col_offset": 28, "nodeName": "used_boolean_variables", "type": "Any"}, {"lineNumber": 23, "col_offset": 12, "nodeName": "bool_simp", "type": "Any"}, {"lineNumber": 23, "col_offset": 24, "nodeName": "boolean_simplified_expressions", "type": "Any"}, {"lineNumber": 24, "col_offset": 12, "nodeName": "codelines", "type": "List[str]"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "firstline", "type": "bool"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "code", "type": "str"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "code", "type": "Any"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "comment", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "code", "type": "Any"}, {"lineNumber": 10, "col_offset": 34, "nodeName": "statement", "type": "Any"}, {"lineNumber": 10, "col_offset": 49, "nodeName": "statement", "type": "Any"}, {"lineNumber": 11, "col_offset": 34, "nodeName": "statement", "type": "Any"}, {"lineNumber": 11, "col_offset": 50, "nodeName": "statement", "type": "Any"}, {"lineNumber": 13, "col_offset": 15, "nodeName": "var", "type": "Any"}, {"lineNumber": 13, "col_offset": 26, "nodeName": "variables", "type": "Any"}, {"lineNumber": 19, "col_offset": 12, "nodeName": "used_boolean_variables", "type": "Any"}, {"lineNumber": 19, "col_offset": 61, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 19, "col_offset": 65, "nodeName": "used_boolean_variables", "type": "Any"}, {"lineNumber": 22, "col_offset": 28, "nodeName": "statement", "type": "Any"}, {"lineNumber": 23, "col_offset": 24, "nodeName": "statement", "type": "Any"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "bool_assigns", "type": "Any"}, {"lineNumber": 28, "col_offset": 30, "nodeName": "simp_expr", "type": "Any"}, {"lineNumber": 28, "col_offset": 43, "nodeName": "iteritems", "type": "Any"}, {"lineNumber": 30, "col_offset": 16, "nodeName": "atomics", "type": "List[Union[Any, str]]"}, {"lineNumber": 31, "col_offset": 40, "nodeName": "bool_assigns", "type": "Any"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "firstline", "type": "bool"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "line", "type": "str"}, {"lineNumber": 45, "col_offset": 16, "nodeName": "line", "type": "str"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "firstline", "type": "bool"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "join", "type": "Callable"}, {"lineNumber": 48, "col_offset": 29, "nodeName": "codelines", "type": "List[str]"}, {"lineNumber": 52, "col_offset": 28, "nodeName": "comment", "type": "Any"}, {"lineNumber": 13, "col_offset": 26, "nodeName": "self", "type": "GSLCythonCodeGenerator"}, {"lineNumber": 14, "col_offset": 16, "nodeName": "variables", "type": "Any"}, {"lineNumber": 14, "col_offset": 38, "nodeName": "AuxiliaryVariable", "type": "Type[brian2.core.variables.AuxiliaryVariable]"}, {"lineNumber": 14, "col_offset": 56, "nodeName": "var", "type": "Any"}, {"lineNumber": 19, "col_offset": 12, "nodeName": "statement", "type": "Any"}, {"lineNumber": 19, "col_offset": 65, "nodeName": "statement", "type": "Any"}, {"lineNumber": 21, "col_offset": 20, "nodeName": "brian_dtype_from_dtype", "type": "Any"}, {"lineNumber": 21, "col_offset": 43, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 28, "col_offset": 43, "nodeName": "bool_simp", "type": "Any"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "boolvar", "type": "Any"}, {"lineNumber": 31, "col_offset": 29, "nodeName": "boolval", "type": "Any"}, {"lineNumber": 32, "col_offset": 23, "nodeName": "boolval", "type": "Any"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "line", "type": "str"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 46, "col_offset": 33, "nodeName": "line", "type": "str"}, {"lineNumber": 50, "col_offset": 42, "nodeName": "translate_expression", "type": "Any"}, {"lineNumber": 50, "col_offset": 68, "nodeName": "expr", "type": "Any"}, {"lineNumber": 14, "col_offset": 16, "nodeName": "self", "type": "GSLCythonCodeGenerator"}, {"lineNumber": 14, "col_offset": 31, "nodeName": "var", "type": "Any"}, {"lineNumber": 14, "col_offset": 67, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 21, "col_offset": 43, "nodeName": "statement", "type": "Any"}, {"lineNumber": 45, "col_offset": 47, "nodeName": "translate_expression", "type": "Any"}, {"lineNumber": 45, "col_offset": 73, "nodeName": "simp_expr", "type": "Any"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "codelines", "type": "List[str]"}, {"lineNumber": 50, "col_offset": 31, "nodeName": "op", "type": "Union[str, Any]"}, {"lineNumber": 50, "col_offset": 42, "nodeName": "self", "type": "GSLCythonCodeGenerator"}, {"lineNumber": 14, "col_offset": 67, "nodeName": "statement", "type": "Any"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "append", "type": "Callable"}, {"lineNumber": 33, "col_offset": 39, "nodeName": "boolvar", "type": "Any"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "append", "type": "Callable"}, {"lineNumber": 45, "col_offset": 36, "nodeName": "op", "type": "Union[str, Any]"}, {"lineNumber": 45, "col_offset": 47, "nodeName": "self", "type": "GSLCythonCodeGenerator"}, {"lineNumber": 50, "col_offset": 19, "nodeName": "var", "type": "Any"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "atomics", "type": "List[Union[Any, str]]"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "atomics", "type": "List[Union[Any, str]]"}, {"lineNumber": 35, "col_offset": 46, "nodeName": "boolvar", "type": "Any"}, {"lineNumber": 38, "col_offset": 34, "nodeName": "join", "type": "Callable"}, {"lineNumber": 38, "col_offset": 47, "nodeName": "atomics", "type": "List[Union[Any, str]]"}, {"lineNumber": 45, "col_offset": 24, "nodeName": "var", "type": "Any"}]