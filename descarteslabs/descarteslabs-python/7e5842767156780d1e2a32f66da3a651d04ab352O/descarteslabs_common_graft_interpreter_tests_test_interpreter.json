[{"lineNumber": 8, "col_offset": 22, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 211, "col_offset": 17, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, Union[str, int]]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, str]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, Union[str, List[Any]]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], int]]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "return_value", "type": "int"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "return_value", "type": "int"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, int]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, int]"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, Union[str, List[Any]]]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, Union[str, Any]]"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "graft", "type": "Dict[str, Union[str, Any, int]]"}, {"lineNumber": 11, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 11, "col_offset": 37, "nodeName": "graft", "type": "Dict[str, Union[str, int]]"}, {"lineNumber": 16, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 16, "col_offset": 37, "nodeName": "graft", "type": "Dict[str, str]"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 34, "col_offset": 37, "nodeName": "graft", "type": "Dict[str, Union[str, List[Any]]]"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "json", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 51, "col_offset": 37, "nodeName": "graft", "type": "Any"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 56, "col_offset": 37, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], int]]"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 67, "col_offset": 37, "nodeName": "graft", "type": "Any"}, {"lineNumber": 86, "col_offset": 17, "nodeName": "apply_expr", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 89, "col_offset": 37, "nodeName": "graft", "type": "Dict[str, Union[str, Any, Dict[str, Union[str, List[str], int]], int]]"}, {"lineNumber": 104, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 104, "col_offset": 37, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], float, Dict[str, Union[str, List[str]]], int]]"}, {"lineNumber": 121, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 122, "col_offset": 12, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], int, Dict[str, Union[str, List[str], int]]]]"}, {"lineNumber": 149, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], int, Dict[str, Union[str, Dict[str, Union[str, List[str], int]], List[str]]]]]"}, {"lineNumber": 155, "col_offset": 21, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 166, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 167, "col_offset": 12, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], int]]"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "assert_called_once", "type": "Callable[[], None]"}, {"lineNumber": 178, "col_offset": 21, "nodeName": "Mock", "type": "Type[mock.Mock]"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 199, "col_offset": 15, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 200, "col_offset": 12, "nodeName": "graft", "type": "Dict[str, Union[str, List[str], int, Dict[str, Union[str, List[str]]]]]"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "assert_called_once", "type": "Callable[[], None]"}, {"lineNumber": 261, "col_offset": 22, "nodeName": "invalid_expr", "type": "Any"}, {"lineNumber": 278, "col_offset": 32, "nodeName": "expr", "type": "Any"}, {"lineNumber": 289, "col_offset": 17, "nodeName": "apply_expr", "type": "Any"}, {"lineNumber": 311, "col_offset": 17, "nodeName": "apply_expr", "type": "Any"}, {"lineNumber": 340, "col_offset": 17, "nodeName": "apply_expr", "type": "Any"}, {"lineNumber": 11, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 12, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 16, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 17, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 33, "col_offset": 23, "nodeName": "json", "type": "Any"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 56, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 57, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 57, "col_offset": 26, "nodeName": "func", "type": "Any"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 68, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 104, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 121, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 124, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 149, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 152, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 155, "col_offset": 21, "nodeName": "mock", "type": "module"}, {"lineNumber": 166, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 174, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 178, "col_offset": 21, "nodeName": "mock", "type": "module"}, {"lineNumber": 199, "col_offset": 15, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 207, "col_offset": 15, "nodeName": "func", "type": "Any"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 214, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "GraftSyntaxError", "type": "Any"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 217, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, int]"}, {"lineNumber": 228, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "GraftSyntaxError", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 232, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, int]"}, {"lineNumber": 236, "col_offset": 23, "nodeName": "name", "type": "Any"}, {"lineNumber": 237, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "GraftSyntaxError", "type": "Any"}, {"lineNumber": 262, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "GraftSyntaxError", "type": "Any"}, {"lineNumber": 279, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 280, "col_offset": 12, "nodeName": "GraftNameError", "type": "Any"}, {"lineNumber": 292, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "GraftTypeError", "type": "Any"}, {"lineNumber": 314, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 315, "col_offset": 12, "nodeName": "GraftTypeError", "type": "Any"}, {"lineNumber": 343, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 343, "col_offset": 27, "nodeName": "GraftTypeError", "type": "Any"}, {"lineNumber": 56, "col_offset": 61, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 89, "col_offset": 61, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 104, "col_offset": 61, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 122, "col_offset": 36, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 150, "col_offset": 36, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 150, "col_offset": 57, "nodeName": "truediv", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 169, "col_offset": 23, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "sub", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 171, "col_offset": 30, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 202, "col_offset": 23, "nodeName": "add", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 203, "col_offset": 23, "nodeName": "sub", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 204, "col_offset": 30, "nodeName": "getBaseVal", "type": "mock.Mock"}, {"lineNumber": 214, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 228, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 237, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 241, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 241, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, Union[str, List[Any]]]"}, {"lineNumber": 262, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 265, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 265, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, Union[str, Any]]"}, {"lineNumber": 279, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 280, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 283, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, Union[str, Any, int]]"}, {"lineNumber": 292, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 296, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 296, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, Union[str, Any, Dict[str, Union[str, List[str]]]]]"}, {"lineNumber": 314, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 315, "col_offset": 12, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 320, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 320, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, Union[str, Any, int, Dict[str, Union[str, List[str]]]]]"}, {"lineNumber": 343, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 343, "col_offset": 27, "nodeName": "exceptions", "type": "Any"}, {"lineNumber": 343, "col_offset": 72, "nodeName": "msg", "type": "Any"}, {"lineNumber": 344, "col_offset": 12, "nodeName": "interpret", "type": "Any"}, {"lineNumber": 344, "col_offset": 34, "nodeName": "graft", "type": "Dict[str, Union[str, Any, int, Dict[str, Union[str, List[str]]]]]"}, {"lineNumber": 56, "col_offset": 61, "nodeName": "operator", "type": "module"}, {"lineNumber": 89, "col_offset": 61, "nodeName": "operator", "type": "module"}, {"lineNumber": 104, "col_offset": 61, "nodeName": "operator", "type": "module"}, {"lineNumber": 122, "col_offset": 36, "nodeName": "operator", "type": "module"}, {"lineNumber": 150, "col_offset": 36, "nodeName": "operator", "type": "module"}, {"lineNumber": 150, "col_offset": 57, "nodeName": "operator", "type": "module"}, {"lineNumber": 169, "col_offset": 23, "nodeName": "operator", "type": "module"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "operator", "type": "module"}, {"lineNumber": 202, "col_offset": 23, "nodeName": "operator", "type": "module"}, {"lineNumber": 203, "col_offset": 23, "nodeName": "operator", "type": "module"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 239, "col_offset": 18, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 239, "col_offset": 57, "nodeName": "name", "type": "Any"}, {"lineNumber": 241, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 265, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 280, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 296, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 315, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 316, "col_offset": 18, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 317, "col_offset": 39, "nodeName": "missing", "type": "Any"}, {"lineNumber": 320, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 343, "col_offset": 27, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 344, "col_offset": 12, "nodeName": "interpreter", "type": "Any"}, {"lineNumber": 51, "col_offset": 74, "nodeName": "a", "type": "Any"}, {"lineNumber": 51, "col_offset": 78, "nodeName": "b", "type": "Any"}, {"lineNumber": 317, "col_offset": 23, "nodeName": "plural", "type": "Any"}, {"lineNumber": 283, "col_offset": 68, "nodeName": "x", "type": "Any"}]