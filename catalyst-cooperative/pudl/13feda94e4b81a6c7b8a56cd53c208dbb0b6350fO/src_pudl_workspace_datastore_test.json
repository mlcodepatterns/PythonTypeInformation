[{"lineNumber": 21, "col_offset": 32, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "ZenodoFetcher", "type": "Any"}, {"lineNumber": 82, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 21, "col_offset": 32, "nodeName": "unittest", "type": "module"}, {"lineNumber": 22, "col_offset": 4, "nodeName": "MOCK_DATAPACKAGE", "type": "Dict[str, List[Dict[str, Union[Dict[str, Union[int, str]], str]]]]"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "datastore", "type": "Any"}, {"lineNumber": 82, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 84, "col_offset": 4, "nodeName": "MOCK_EPACEMS_DEPOSITION", "type": "Dict[str, List[Union[Dict[str, str], Dict[str, Union[Dict[str, str], str]]]]]"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "MOCK_EPACEMS_DATAPACKAGE", "type": "Dict[str, List[Dict[str, str]]]"}, {"lineNumber": 102, "col_offset": 4, "nodeName": "PROD_EPACEMS_DOI", "type": "str"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "PROD_EPACEMS_ZEN_ID", "type": "int"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "res", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "_descriptor_cache", "type": "Dict[str, Any]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "fetcher", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "desc", "type": "Any"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 33, "col_offset": 26, "nodeName": "DatapackageDescriptor", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "MOCK_DATAPACKAGE", "type": "Dict[str, List[Dict[str, Union[Dict[str, Union[int, str]], str]]]]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "get_resource_path", "type": "Any"}, {"lineNumber": 51, "col_offset": 14, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "MOCK_DATAPACKAGE", "type": "Dict[str, List[Dict[str, Union[Dict[str, Union[int, str]], str]]]]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "self", "type": "MockableZenodoFetcher"}, {"lineNumber": 79, "col_offset": 33, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 79, "col_offset": 38, "nodeName": "descriptors", "type": "Dict[str, Any]"}, {"lineNumber": 106, "col_offset": 23, "nodeName": "MockableZenodoFetcher", "type": "Type[MockableZenodoFetcher]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 117, "col_offset": 25, "nodeName": "PROD_EPACEMS_DOI", "type": "str"}, {"lineNumber": 122, "col_offset": 18, "nodeName": "ZenodoFetcher", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 123, "col_offset": 22, "nodeName": "GET", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 126, "col_offset": 22, "nodeName": "GET", "type": "Any"}, {"lineNumber": 129, "col_offset": 15, "nodeName": "get_descriptor", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "MOCK_EPACEMS_DATAPACKAGE", "type": "Any"}, {"lineNumber": 130, "col_offset": 56, "nodeName": "datapackage_json", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "get_resource_key", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "add", "type": "Any"}, {"lineNumber": 147, "col_offset": 22, "nodeName": "GET", "type": "Any"}, {"lineNumber": 149, "col_offset": 14, "nodeName": "get_resource", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 151, "col_offset": 34, "nodeName": "res", "type": "Any"}, {"lineNumber": 33, "col_offset": 26, "nodeName": "datastore", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "get_resource_path", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "get_resource_path", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "get_resources", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "loads", "type": "Callable[..., Any]"}, {"lineNumber": 76, "col_offset": 21, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 78, "col_offset": 27, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 117, "col_offset": 25, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 117, "col_offset": 48, "nodeName": "get_doi", "type": "Any"}, {"lineNumber": 122, "col_offset": 18, "nodeName": "datastore", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "responses", "type": "Any"}, {"lineNumber": 123, "col_offset": 22, "nodeName": "responses", "type": "Any"}, {"lineNumber": 125, "col_offset": 17, "nodeName": "MOCK_EPACEMS_DEPOSITION", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "responses", "type": "Any"}, {"lineNumber": 126, "col_offset": 22, "nodeName": "responses", "type": "Any"}, {"lineNumber": 128, "col_offset": 17, "nodeName": "MOCK_EPACEMS_DATAPACKAGE", "type": "Any"}, {"lineNumber": 129, "col_offset": 15, "nodeName": "fetcher", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "self", "type": "Any"}, {"lineNumber": 130, "col_offset": 56, "nodeName": "desc", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 136, "col_offset": 12, "nodeName": "PudlResourceKey", "type": "Any"}, {"lineNumber": 136, "col_offset": 39, "nodeName": "PROD_EPACEMS_DOI", "type": "str"}, {"lineNumber": 137, "col_offset": 12, "nodeName": "get_resource_key", "type": "Any"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "fetcher", "type": "MockableZenodoFetcher"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "responses", "type": "Any"}, {"lineNumber": 147, "col_offset": 22, "nodeName": "responses", "type": "Any"}, {"lineNumber": 149, "col_offset": 14, "nodeName": "fetcher", "type": "Any"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "PudlResourceKey", "type": "Any"}, {"lineNumber": 150, "col_offset": 39, "nodeName": "PROD_EPACEMS_DOI", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 53, "col_offset": 13, "nodeName": "PudlResourceKey", "type": "Any"}, {"lineNumber": 54, "col_offset": 13, "nodeName": "PudlResourceKey", "type": "Any"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "get_resources", "type": "Any"}, {"lineNumber": 57, "col_offset": 13, "nodeName": "PudlResourceKey", "type": "Any"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "get_resources", "type": "Any"}, {"lineNumber": 61, "col_offset": 17, "nodeName": "get_resources", "type": "Any"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "json", "type": "module"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "get_json_string", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "PROD_EPACEMS_DOI", "type": "str"}, {"lineNumber": 117, "col_offset": 48, "nodeName": "fetcher", "type": "MockableZenodoFetcher"}, {"lineNumber": 125, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 128, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 136, "col_offset": 39, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 137, "col_offset": 12, "nodeName": "fetcher", "type": "MockableZenodoFetcher"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 149, "col_offset": 14, "nodeName": "self", "type": "Any"}, {"lineNumber": 150, "col_offset": 39, "nodeName": "self", "type": "Any"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 61, "col_offset": 17, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "descriptor", "type": "Any"}, {"lineNumber": 76, "col_offset": 26, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "DatapackageDescriptor", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 107, "col_offset": 35, "nodeName": "DatapackageDescriptor", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "MOCK_EPACEMS_DATAPACKAGE", "type": "Dict[str, List[Dict[str, str]]]"}, {"lineNumber": 117, "col_offset": 48, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 137, "col_offset": 12, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 61, "col_offset": 17, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "self", "type": "TestDatapackageDescriptor"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "datastore", "type": "Any"}, {"lineNumber": 107, "col_offset": 35, "nodeName": "datastore", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "self", "type": "TestZenodoFetcher"}, {"lineNumber": 110, "col_offset": 20, "nodeName": "PROD_EPACEMS_DOI", "type": "str"}, {"lineNumber": 110, "col_offset": 20, "nodeName": "self", "type": "TestZenodoFetcher"}]