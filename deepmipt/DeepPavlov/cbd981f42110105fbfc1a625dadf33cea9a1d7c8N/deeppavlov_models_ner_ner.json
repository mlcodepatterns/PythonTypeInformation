[{"lineNumber": 29, "col_offset": 10, "nodeName": "SimpleTFModel", "type": "Type[deeppavlov.core.models.tf_model.SimpleTFModel]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "save_path", "type": "Optional[Any]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "load_path", "type": "Optional[Any]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "train_now", "type": "Optional[Any]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "mode", "type": "Optional[Any]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "opt", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "vocabs", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "network_parameter_names", "type": "List[str]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "network_parameters", "type": "Dict[str, Any]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "_net", "type": "deeppavlov.models.ner.network.NerNetwork"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "train_parameters_names", "type": "List[str]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "train_parameters", "type": "Dict[str, Any]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "train_parameters", "type": "Dict[str, Any]"}, {"lineNumber": 55, "col_offset": 32, "nodeName": "train_parameters", "type": "Dict[str, Any]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "opt", "type": "Any"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "opt", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "path", "type": "str"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "path", "type": "str"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "train_now", "type": "Any"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "sample", "type": "List[Any]"}, {"lineNumber": 108, "col_offset": 15, "nodeName": "sample", "type": "List[Any]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "s", "type": "str"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "get", "type": "Callable"}, {"lineNumber": 33, "col_offset": 20, "nodeName": "get", "type": "Callable"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "get", "type": "Callable"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "get", "type": "Callable"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 40, "col_offset": 14, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 40, "col_offset": 23, "nodeName": "kwargs", "type": "Dict[Union[str, Any], Any]"}, {"lineNumber": 41, "col_offset": 17, "nodeName": "pop", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "update", "type": "Any"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "vocabs", "type": "Any"}, {"lineNumber": 45, "col_offset": 34, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 45, "col_offset": 39, "nodeName": "parameters", "type": "Mapping[str, inspect.Parameter]"}, {"lineNumber": 47, "col_offset": 30, "nodeName": "par", "type": "str"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 49, "col_offset": 20, "nodeName": "NerNetwork", "type": "Type[deeppavlov.models.ner.network.NerNetwork]"}, {"lineNumber": 52, "col_offset": 33, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 52, "col_offset": 38, "nodeName": "parameters", "type": "Mapping[str, inspect.Parameter]"}, {"lineNumber": 54, "col_offset": 28, "nodeName": "par", "type": "str"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 60, "col_offset": 11, "nodeName": "load_path", "type": "Any"}, {"lineNumber": 65, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "checkpoint_exists", "type": "Any"}, {"lineNumber": 67, "col_offset": 38, "nodeName": "path", "type": "str"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "save", "type": "Any"}, {"lineNumber": 75, "col_offset": 23, "nodeName": "path", "type": "str"}, {"lineNumber": 79, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "epochs", "type": "Any"}, {"lineNumber": 82, "col_offset": 16, "nodeName": "epoch", "type": "int"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "train_on_batch", "type": "Any"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "batch", "type": "Any"}, {"lineNumber": 97, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 97, "col_offset": 22, "nodeName": "sample", "type": "Any"}, {"lineNumber": 97, "col_offset": 30, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "sample", "type": "Any"}, {"lineNumber": 101, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 101, "col_offset": 22, "nodeName": "sample", "type": "Any"}, {"lineNumber": 101, "col_offset": 30, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "tokenize_reg", "type": "Callable[[Any], List[Any]]"}, {"lineNumber": 107, "col_offset": 30, "nodeName": "utterance", "type": "Any"}, {"lineNumber": 111, "col_offset": 12, "nodeName": "input", "type": "Callable[..., str]"}, {"lineNumber": 112, "col_offset": 21, "nodeName": "infer", "type": "Any"}, {"lineNumber": 112, "col_offset": 32, "nodeName": "s", "type": "str"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 113, "col_offset": 14, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "shutdown", "type": "Any"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "kwargs", "type": "Dict[Union[str, Any], Any]"}, {"lineNumber": 33, "col_offset": 20, "nodeName": "kwargs", "type": "Dict[Union[str, Any], Any]"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "kwargs", "type": "Dict[Union[str, Any], Any]"}, {"lineNumber": 35, "col_offset": 15, "nodeName": "kwargs", "type": "Dict[Union[str, Any], Any]"}, {"lineNumber": 37, "col_offset": 35, "nodeName": "save_path", "type": "Optional[Any]"}, {"lineNumber": 37, "col_offset": 56, "nodeName": "load_path", "type": "Optional[Any]"}, {"lineNumber": 38, "col_offset": 35, "nodeName": "train_now", "type": "Optional[Any]"}, {"lineNumber": 38, "col_offset": 51, "nodeName": "mode", "type": "Optional[Any]"}, {"lineNumber": 41, "col_offset": 17, "nodeName": "opt", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "opt", "type": "Any"}, {"lineNumber": 47, "col_offset": 35, "nodeName": "opt", "type": "Any"}, {"lineNumber": 47, "col_offset": 48, "nodeName": "par", "type": "str"}, {"lineNumber": 47, "col_offset": 55, "nodeName": "network_parameter_names", "type": "List[str]"}, {"lineNumber": 49, "col_offset": 33, "nodeName": "network_parameters", "type": "Dict[str, Any]"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "opt", "type": "Any"}, {"lineNumber": 54, "col_offset": 46, "nodeName": "par", "type": "str"}, {"lineNumber": 54, "col_offset": 53, "nodeName": "train_parameters_names", "type": "List[str]"}, {"lineNumber": 60, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "load", "type": "Any"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "absolute", "type": "Any"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "train", "type": "Any"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "load", "type": "Any"}, {"lineNumber": 69, "col_offset": 27, "nodeName": "path", "type": "str"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "absolute", "type": "Any"}, {"lineNumber": 74, "col_offset": 14, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 74, "col_offset": 44, "nodeName": "path", "type": "str"}, {"lineNumber": 74, "col_offset": 56, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "_net", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "get", "type": "Any"}, {"lineNumber": 81, "col_offset": 44, "nodeName": "default_n_epochs", "type": "Any"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "epochs", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "eval_conll", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "eval_conll", "type": "Any"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "save", "type": "Any"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "load", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "_net", "type": "Any"}, {"lineNumber": 93, "col_offset": 42, "nodeName": "train_parameters", "type": "Any"}, {"lineNumber": 98, "col_offset": 21, "nodeName": "strip", "type": "Any"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 99, "col_offset": 19, "nodeName": "sample", "type": "Any"}, {"lineNumber": 102, "col_offset": 19, "nodeName": "predict_on_batch", "type": "Any"}, {"lineNumber": 102, "col_offset": 46, "nodeName": "sample", "type": "Any"}, {"lineNumber": 112, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "ner", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 45, "col_offset": 39, "nodeName": "signature", "type": "Callable[..., inspect.Signature]"}, {"lineNumber": 45, "col_offset": 57, "nodeName": "__init__", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 39, "nodeName": "par", "type": "str"}, {"lineNumber": 47, "col_offset": 82, "nodeName": "par", "type": "str"}, {"lineNumber": 47, "col_offset": 89, "nodeName": "opt", "type": "Any"}, {"lineNumber": 52, "col_offset": 38, "nodeName": "signature", "type": "Callable[..., inspect.Signature]"}, {"lineNumber": 52, "col_offset": 56, "nodeName": "train_on_batch", "type": "Callable[..., Any]"}, {"lineNumber": 54, "col_offset": 37, "nodeName": "par", "type": "str"}, {"lineNumber": 54, "col_offset": 79, "nodeName": "par", "type": "str"}, {"lineNumber": 54, "col_offset": 86, "nodeName": "opt", "type": "Any"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "load_path", "type": "Any"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "tf", "type": "Any"}, {"lineNumber": 68, "col_offset": 18, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 68, "col_offset": 51, "nodeName": "path", "type": "str"}, {"lineNumber": 68, "col_offset": 63, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "_net", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "save_path", "type": "Any"}, {"lineNumber": 74, "col_offset": 56, "nodeName": "sys", "type": "module"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 47, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "opt", "type": "Any"}, {"lineNumber": 83, "col_offset": 16, "nodeName": "train", "type": "Any"}, {"lineNumber": 83, "col_offset": 32, "nodeName": "data", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "eval_conll", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "_net", "type": "Any"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "iter_all", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "_net", "type": "Any"}, {"lineNumber": 86, "col_offset": 33, "nodeName": "iter_all", "type": "Any"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 89, "col_offset": 46, "nodeName": "stderr", "type": "TextIO"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "_net", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 93, "col_offset": 42, "nodeName": "self", "type": "Any"}, {"lineNumber": 98, "col_offset": 21, "nodeName": "sample", "type": "Any"}, {"lineNumber": 102, "col_offset": 19, "nodeName": "_net", "type": "Any"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "predict_on_batch", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 45, "col_offset": 39, "nodeName": "inspect", "type": "module"}, {"lineNumber": 45, "col_offset": 57, "nodeName": "NerNetwork", "type": "Type[deeppavlov.models.ner.network.NerNetwork]"}, {"lineNumber": 52, "col_offset": 38, "nodeName": "inspect", "type": "module"}, {"lineNumber": 52, "col_offset": 56, "nodeName": "NerNetwork", "type": "Type[deeppavlov.models.ner.network.NerNetwork]"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 68, "col_offset": 63, "nodeName": "sys", "type": "module"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 47, "nodeName": "sys", "type": "module"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "self", "type": "Any"}, {"lineNumber": 83, "col_offset": 16, "nodeName": "_net", "type": "Any"}, {"lineNumber": 83, "col_offset": 40, "nodeName": "train_parameters", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "_net", "type": "Any"}, {"lineNumber": 84, "col_offset": 37, "nodeName": "iter_all", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "data", "type": "Any"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 33, "nodeName": "data", "type": "Any"}, {"lineNumber": 89, "col_offset": 46, "nodeName": "sys", "type": "module"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "_net", "type": "Any"}, {"lineNumber": 83, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 83, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 84, "col_offset": 37, "nodeName": "data", "type": "Any"}, {"lineNumber": 104, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 104, "col_offset": 47, "nodeName": "preprocess_tokenize", "type": "Any"}, {"lineNumber": 104, "col_offset": 72, "nodeName": "sample", "type": "Any"}, {"lineNumber": 104, "col_offset": 47, "nodeName": "self", "type": "Any"}]