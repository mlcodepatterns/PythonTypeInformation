[{"lineNumber": 31, "col_offset": 0, "nodeName": "read_data_by_config", "type": "Callable[[Dict[Any, Any]], Any]"}, {"lineNumber": 61, "col_offset": 0, "nodeName": "get_iterator_from_config", "type": "Callable[[Dict[Any, Any], Dict[Any, Any]], Any]"}, {"lineNumber": 28, "col_offset": 0, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 28, "col_offset": 6, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "__name__", "type": "str"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "dataset_config", "type": "Any"}, {"lineNumber": 35, "col_offset": 7, "nodeName": "dataset_config", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "reader", "type": "Any"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "data_path", "type": "Any"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "iterator_config", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "iterator", "type": "Any"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 80, "col_offset": 7, "nodeName": "download", "type": "bool"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "trainer_class", "type": "Any"}, {"lineNumber": 118, "col_offset": 4, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 120, "col_offset": 7, "nodeName": "to_train", "type": "bool"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "res", "type": "Dict[nothing, nothing]"}, {"lineNumber": 140, "col_offset": 4, "nodeName": "res", "type": "Dict[Any, Any]"}, {"lineNumber": 142, "col_offset": 11, "nodeName": "res", "type": "Dict[Any, Any]"}, {"lineNumber": 76, "col_offset": 65, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 33, "col_offset": 21, "nodeName": "get", "type": "Callable"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "ds_type", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "reader_config", "type": "Dict[Any, Any]"}, {"lineNumber": 48, "col_offset": 11, "nodeName": "KeyError", "type": "Type[KeyError]"}, {"lineNumber": 52, "col_offset": 16, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 53, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 53, "col_offset": 18, "nodeName": "data_path", "type": "Any"}, {"lineNumber": 53, "col_offset": 29, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "data_path", "type": "List[pathlib.Path]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "data_path", "type": "pathlib.Path"}, {"lineNumber": 58, "col_offset": 11, "nodeName": "read", "type": "Any"}, {"lineNumber": 58, "col_offset": 23, "nodeName": "data_path", "type": "Union[List[pathlib.Path], pathlib.Path]"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 61, "col_offset": 49, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 64, "col_offset": 65, "nodeName": "from_params", "type": "Callable[..., deeppavlov.core.models.component.Component]"}, {"lineNumber": 64, "col_offset": 77, "nodeName": "iterator_config", "type": "Any"}, {"lineNumber": 76, "col_offset": 48, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 78, "col_offset": 13, "nodeName": "parse_config", "type": "Callable[[Union[Dict[Any, Any], str, pathlib.Path]], Dict[Any, Any]]"}, {"lineNumber": 78, "col_offset": 26, "nodeName": "config", "type": "Union[pathlib.Path, str, Dict[Any, Any]]"}, {"lineNumber": 83, "col_offset": 7, "nodeName": "to_train", "type": "bool"}, {"lineNumber": 83, "col_offset": 20, "nodeName": "recursive", "type": "bool"}, {"lineNumber": 84, "col_offset": 12, "nodeName": "subconfig", "type": "Any"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "import_packages", "type": "Callable[[List[Any]], None]"}, {"lineNumber": 90, "col_offset": 7, "nodeName": "iterator", "type": "Any"}, {"lineNumber": 99, "col_offset": 22, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "get", "type": "Callable"}, {"lineNumber": 103, "col_offset": 7, "nodeName": "start_epoch_num", "type": "Optional[int]"}, {"lineNumber": 104, "col_offset": 42, "nodeName": "start_epoch_num", "type": "Optional[int]"}, {"lineNumber": 117, "col_offset": 20, "nodeName": "get_model", "type": "Callable[[str], Type[Any]]"}, {"lineNumber": 118, "col_offset": 14, "nodeName": "trainer_class", "type": "Any"}, {"lineNumber": 125, "col_offset": 7, "nodeName": "iterator", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 140, "col_offset": 11, "nodeName": "k", "type": "Any"}, {"lineNumber": 33, "col_offset": 21, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 37, "col_offset": 18, "nodeName": "dataset_config", "type": "Any"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "ds_type", "type": "Any"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "reader", "type": "Dict[str, str]"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "iterator", "type": "Dict[str, str]"}, {"lineNumber": 47, "col_offset": 24, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 51, "col_offset": 13, "nodeName": "get_model", "type": "Callable[[str], Type[Any]]"}, {"lineNumber": 52, "col_offset": 16, "nodeName": "reader_config", "type": "Dict[Any, Any]"}, {"lineNumber": 56, "col_offset": 20, "nodeName": "expand_path", "type": "Callable[[Union[str, pathlib.Path]], pathlib.Path]"}, {"lineNumber": 56, "col_offset": 32, "nodeName": "data_path", "type": "Any"}, {"lineNumber": 58, "col_offset": 11, "nodeName": "reader", "type": "Any"}, {"lineNumber": 58, "col_offset": 36, "nodeName": "reader_config", "type": "Dict[Any, Any]"}, {"lineNumber": 65, "col_offset": 82, "nodeName": "data", "type": "Dict[Any, Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "deep_download", "type": "Callable[[Union[Dict[Any, Any], str, pathlib.Path]], None]"}, {"lineNumber": 81, "col_offset": 22, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "get_all_elems_from_json", "type": "Callable[[Any, Any], List[Any]]"}, {"lineNumber": 88, "col_offset": 20, "nodeName": "get", "type": "Any"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 93, "col_offset": 15, "nodeName": "ConfigError", "type": "Type[deeppavlov.core.common.errors.ConfigError]"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "iterator", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "warning", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 106, "col_offset": 35, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "warning", "type": "Callable[..., None]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 112, "col_offset": 11, "nodeName": "pop", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "pop", "type": "Any"}, {"lineNumber": 117, "col_offset": 30, "nodeName": "pop", "type": "Any"}, {"lineNumber": 118, "col_offset": 28, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 118, "col_offset": 49, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "train", "type": "Any"}, {"lineNumber": 121, "col_offset": 22, "nodeName": "iterator", "type": "Any"}, {"lineNumber": 126, "col_offset": 11, "nodeName": "to_validate", "type": "Optional[bool]"}, {"lineNumber": 137, "col_offset": 14, "nodeName": "evaluate", "type": "Any"}, {"lineNumber": 137, "col_offset": 31, "nodeName": "iterator", "type": "Any"}, {"lineNumber": 137, "col_offset": 41, "nodeName": "evaluation_targets", "type": "Optional[Union[Iterable[str], List[str]]]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "destroy", "type": "Any"}, {"lineNumber": 140, "col_offset": 14, "nodeName": "v", "type": "Any"}, {"lineNumber": 76, "col_offset": 70, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 41, "col_offset": 42, "nodeName": "dataset_config", "type": "Any"}, {"lineNumber": 41, "col_offset": 60, "nodeName": "reader", "type": "Dict[str, str]"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 42, "col_offset": 44, "nodeName": "dataset_config", "type": "Any"}, {"lineNumber": 42, "col_offset": 62, "nodeName": "iterator", "type": "Dict[str, str]"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 47, "col_offset": 29, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 49, "col_offset": 14, "nodeName": "ConfigError", "type": "Type[deeppavlov.core.common.errors.ConfigError]"}, {"lineNumber": 51, "col_offset": 23, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 54, "col_offset": 21, "nodeName": "expand_path", "type": "Callable[[Union[str, pathlib.Path]], pathlib.Path]"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "x", "type": "Any"}, {"lineNumber": 54, "col_offset": 40, "nodeName": "x", "type": "Any"}, {"lineNumber": 54, "col_offset": 45, "nodeName": "data_path", "type": "Any"}, {"lineNumber": 84, "col_offset": 49, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "train_evaluate_model_from_config", "type": "Callable[..., Dict[str, Dict[str, float]]]"}, {"lineNumber": 86, "col_offset": 45, "nodeName": "subconfig", "type": "Any"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "read_data_by_config", "type": "Callable[[Dict[Any, Any]], Any]"}, {"lineNumber": 92, "col_offset": 39, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "to_train", "type": "bool"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "get_iterator_from_config", "type": "Callable[[Dict[Any, Any], Dict[Any, Any]], Any]"}, {"lineNumber": 97, "col_offset": 48, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 97, "col_offset": 56, "nodeName": "data", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 106, "col_offset": 72, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 107, "col_offset": 71, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 112, "col_offset": 11, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 117, "col_offset": 30, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 127, "col_offset": 15, "nodeName": "evaluation_targets", "type": "Optional[Iterable[str]]"}, {"lineNumber": 130, "col_offset": 16, "nodeName": "evaluation_targets", "type": "List[str]"}, {"lineNumber": 131, "col_offset": 19, "nodeName": "to_validate", "type": "Optional[bool]"}, {"lineNumber": 137, "col_offset": 14, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 140, "col_offset": 31, "nodeName": "k", "type": "Any"}, {"lineNumber": 140, "col_offset": 34, "nodeName": "v", "type": "Any"}, {"lineNumber": 140, "col_offset": 39, "nodeName": "items", "type": "Any"}, {"lineNumber": 76, "col_offset": 75, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 44, "col_offset": 28, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 44, "col_offset": 66, "nodeName": "ds_type", "type": "Any"}, {"lineNumber": 51, "col_offset": 23, "nodeName": "reader_config", "type": "Dict[Any, Any]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 88, "col_offset": 20, "nodeName": "get", "type": "Callable"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "warning", "type": "Callable[..., None]"}, {"lineNumber": 128, "col_offset": 16, "nodeName": "warning", "type": "Callable[..., None]"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "warn", "type": "Callable[..., None]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "get_chainer", "type": "Any"}, {"lineNumber": 140, "col_offset": 39, "nodeName": "res", "type": "Any"}, {"lineNumber": 85, "col_offset": 34, "nodeName": "subconfig", "type": "Any"}, {"lineNumber": 88, "col_offset": 20, "nodeName": "config", "type": "Dict[Any, Any]"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "train_config", "type": "Any"}, {"lineNumber": 128, "col_offset": 16, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 132, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "log", "type": "logging.Logger"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "trainer", "type": "Any"}, {"lineNumber": 76, "col_offset": 80, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 76, "col_offset": 85, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 95, "col_offset": 46, "nodeName": "message", "type": "Any"}, {"lineNumber": 132, "col_offset": 20, "nodeName": "evaluation_targets", "type": "List[str]"}, {"lineNumber": 95, "col_offset": 46, "nodeName": "e", "type": "deeppavlov.core.common.errors.ConfigError"}]