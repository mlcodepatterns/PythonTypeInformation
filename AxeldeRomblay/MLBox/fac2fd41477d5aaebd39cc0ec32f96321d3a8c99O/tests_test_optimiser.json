[{"lineNumber": 13, "col_offset": 0, "nodeName": "test_init_optimiser", "type": "Callable[[], Any]"}, {"lineNumber": 24, "col_offset": 0, "nodeName": "test_get_params_optimiser", "type": "Callable[[], Any]"}, {"lineNumber": 36, "col_offset": 0, "nodeName": "test_set_params_optimiser", "type": "Callable[[], Any]"}, {"lineNumber": 55, "col_offset": 0, "nodeName": "test_evaluate", "type": "Callable[[], Any]"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "verbose", "type": "Any"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "dict", "type": "Dict[str, Optional[Union[bool, str, int]]]"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "reader", "type": "mlbox.preprocessing.reader.Reader"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "dict", "type": "Dict[str, Any]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "drift_thresholder", "type": "mlbox.preprocessing.drift_thresholder.Drift_thresholder"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "drift_thresholder", "type": "Dict[str, Any]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "opt", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 14, "col_offset": 38, "nodeName": "record", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 17, "col_offset": 15, "nodeName": "scoring", "type": "Any"}, {"lineNumber": 18, "col_offset": 11, "nodeName": "n_folds", "type": "Any"}, {"lineNumber": 19, "col_offset": 11, "nodeName": "random_state", "type": "Any"}, {"lineNumber": 20, "col_offset": 11, "nodeName": "to_path", "type": "Any"}, {"lineNumber": 21, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 25, "col_offset": 38, "nodeName": "record", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 33, "col_offset": 37, "nodeName": "dict", "type": "Dict[str, Optional[Union[bool, str, int]]]"}, {"lineNumber": 37, "col_offset": 38, "nodeName": "record", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 11, "nodeName": "scoring", "type": "Any"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "n_folds", "type": "Any"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "random_state", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "to_path", "type": "Any"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "verbose", "type": "Any"}, {"lineNumber": 50, "col_offset": 38, "nodeName": "record", "type": "Any"}, {"lineNumber": 56, "col_offset": 13, "nodeName": "Reader", "type": "Type[mlbox.preprocessing.reader.Reader]"}, {"lineNumber": 57, "col_offset": 11, "nodeName": "train_test_split", "type": "Callable[[Any, Any], Dict[str, Any]]"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "Drift_thresholder", "type": "Type[mlbox.preprocessing.drift_thresholder.Drift_thresholder]"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "fit_transform", "type": "Callable"}, {"lineNumber": 61, "col_offset": 56, "nodeName": "dict", "type": "Dict[str, Any]"}, {"lineNumber": 64, "col_offset": 10, "nodeName": "Optimiser", "type": "Type[mlbox.optimisation.optimiser.Optimiser]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "evaluate", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 65, "col_offset": 23, "nodeName": "dict", "type": "Dict[str, Any]"}, {"lineNumber": 14, "col_offset": 9, "nodeName": "warns", "type": "Any"}, {"lineNumber": 14, "col_offset": 22, "nodeName": "UserWarning", "type": "Type[UserWarning]"}, {"lineNumber": 15, "col_offset": 20, "nodeName": "Optimiser", "type": "Type[mlbox.optimisation.optimiser.Optimiser]"}, {"lineNumber": 16, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 16, "col_offset": 15, "nodeName": "record", "type": "Any"}, {"lineNumber": 17, "col_offset": 15, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 18, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 19, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 20, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 25, "col_offset": 9, "nodeName": "warns", "type": "Any"}, {"lineNumber": 25, "col_offset": 22, "nodeName": "UserWarning", "type": "Type[UserWarning]"}, {"lineNumber": 26, "col_offset": 20, "nodeName": "Optimiser", "type": "Type[mlbox.optimisation.optimiser.Optimiser]"}, {"lineNumber": 27, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 27, "col_offset": 15, "nodeName": "record", "type": "Any"}, {"lineNumber": 33, "col_offset": 11, "nodeName": "get_params", "type": "Callable[..., Dict[str, Any]]"}, {"lineNumber": 37, "col_offset": 9, "nodeName": "warns", "type": "Any"}, {"lineNumber": 37, "col_offset": 22, "nodeName": "UserWarning", "type": "Type[UserWarning]"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "Optimiser", "type": "Type[mlbox.optimisation.optimiser.Optimiser]"}, {"lineNumber": 39, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "record", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 41, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 45, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 47, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "warns", "type": "Any"}, {"lineNumber": 50, "col_offset": 22, "nodeName": "UserWarning", "type": "Type[UserWarning]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "record", "type": "Any"}, {"lineNumber": 57, "col_offset": 11, "nodeName": "reader", "type": "mlbox.preprocessing.reader.Reader"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "drift_thresholder", "type": "mlbox.preprocessing.drift_thresholder.Drift_thresholder"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "opt", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 14, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 25, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 33, "col_offset": 11, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}, {"lineNumber": 37, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "optimiser", "type": "mlbox.optimisation.optimiser.Optimiser"}]