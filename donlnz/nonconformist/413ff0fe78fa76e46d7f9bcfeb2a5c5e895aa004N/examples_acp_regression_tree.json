[{"lineNumber": 25, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 27, "col_offset": 0, "nodeName": "idx", "type": "Any"}, {"lineNumber": 28, "col_offset": 0, "nodeName": "train", "type": "Any"}, {"lineNumber": 29, "col_offset": 0, "nodeName": "test", "type": "Any"}, {"lineNumber": 31, "col_offset": 0, "nodeName": "truth", "type": "Any"}, {"lineNumber": 32, "col_offset": 0, "nodeName": "columns", "type": "List[str]"}, {"lineNumber": 33, "col_offset": 0, "nodeName": "significance", "type": "float"}, {"lineNumber": 39, "col_offset": 0, "nodeName": "models", "type": "Dict[str, nonconformist.acp.AggregatedCp]"}, {"lineNumber": 25, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 27, "col_offset": 6, "nodeName": "permutation", "type": "Any"}, {"lineNumber": 27, "col_offset": 28, "nodeName": "size", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "idx", "type": "Any"}, {"lineNumber": 29, "col_offset": 7, "nodeName": "idx", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "target", "type": "Any"}, {"lineNumber": 59, "col_offset": 4, "nodeName": "name", "type": "str"}, {"lineNumber": 59, "col_offset": 10, "nodeName": "model", "type": "nonconformist.acp.AggregatedCp"}, {"lineNumber": 59, "col_offset": 19, "nodeName": "items", "type": "Callable"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "prediction_sign", "type": "Any"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "table", "type": "Any"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "T", "type": "Any"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 27, "col_offset": 6, "nodeName": "random", "type": "Any"}, {"lineNumber": 27, "col_offset": 28, "nodeName": "target", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "test", "type": "Any"}, {"lineNumber": 39, "col_offset": 38, "nodeName": "AggregatedCp", "type": "Type[nonconformist.acp.AggregatedCp]"}, {"lineNumber": 44, "col_offset": 38, "nodeName": "AggregatedCp", "type": "Type[nonconformist.acp.AggregatedCp]"}, {"lineNumber": 49, "col_offset": 38, "nodeName": "AggregatedCp", "type": "Type[nonconformist.acp.AggregatedCp]"}, {"lineNumber": 59, "col_offset": 19, "nodeName": "models", "type": "Dict[str, nonconformist.acp.AggregatedCp]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "fit", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Union[Mapping[Any, Any], Sequence[Any]]]], None]"}, {"lineNumber": 61, "col_offset": 17, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 65, "col_offset": 9, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 65, "col_offset": 22, "nodeName": "table", "type": "Any"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 70, "col_offset": 10, "nodeName": "df", "type": "Any"}, {"lineNumber": 27, "col_offset": 6, "nodeName": "np", "type": "module"}, {"lineNumber": 27, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 28, "col_offset": 13, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 29, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 40, "col_offset": 36, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 43, "col_offset": 36, "nodeName": "RandomSubSampler", "type": "Type[nonconformist.acp.RandomSubSampler]"}, {"lineNumber": 45, "col_offset": 40, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "CrossSampler", "type": "Type[nonconformist.acp.CrossSampler]"}, {"lineNumber": 50, "col_offset": 40, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 53, "col_offset": 40, "nodeName": "BootstrapSampler", "type": "Type[nonconformist.acp.BootstrapSampler]"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "model", "type": "nonconformist.acp.AggregatedCp"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "data", "type": "Any"}, {"lineNumber": 60, "col_offset": 35, "nodeName": "target", "type": "Any"}, {"lineNumber": 61, "col_offset": 17, "nodeName": "model", "type": "nonconformist.acp.AggregatedCp"}, {"lineNumber": 61, "col_offset": 31, "nodeName": "data", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "model", "type": "nonconformist.acp.AggregatedCp"}, {"lineNumber": 62, "col_offset": 36, "nodeName": "data", "type": "Any"}, {"lineNumber": 63, "col_offset": 49, "nodeName": "significance", "type": "float"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 65, "col_offset": 9, "nodeName": "pd", "type": "Any"}, {"lineNumber": 65, "col_offset": 37, "nodeName": "columns", "type": "List[str]"}, {"lineNumber": 66, "col_offset": 10, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 66, "col_offset": 24, "nodeName": "name", "type": "str"}, {"lineNumber": 67, "col_offset": 10, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 41, "col_offset": 40, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 46, "col_offset": 44, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 51, "col_offset": 44, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "data", "type": "Any"}, {"lineNumber": 60, "col_offset": 35, "nodeName": "data", "type": "Any"}, {"lineNumber": 60, "col_offset": 47, "nodeName": "train", "type": "Any"}, {"lineNumber": 61, "col_offset": 31, "nodeName": "data", "type": "Any"}, {"lineNumber": 62, "col_offset": 36, "nodeName": "data", "type": "Any"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "T", "type": "Any"}, {"lineNumber": 64, "col_offset": 42, "nodeName": "truth", "type": "Any"}, {"lineNumber": 67, "col_offset": 34, "nodeName": "reg_mean_errors", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Sequence[Any]], Any], Any]"}, {"lineNumber": 67, "col_offset": 50, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 68, "col_offset": 50, "nodeName": "truth", "type": "Any"}, {"lineNumber": 69, "col_offset": 50, "nodeName": "significance", "type": "float"}, {"lineNumber": 28, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 29, "col_offset": 19, "nodeName": "size", "type": "Any"}, {"lineNumber": 42, "col_offset": 44, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 47, "col_offset": 48, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 52, "col_offset": 48, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "train", "type": "Any"}, {"lineNumber": 61, "col_offset": 41, "nodeName": "test", "type": "Any"}, {"lineNumber": 62, "col_offset": 46, "nodeName": "test", "type": "Any"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "prediction_sign", "type": "Any"}, {"lineNumber": 28, "col_offset": 21, "nodeName": "idx", "type": "Any"}, {"lineNumber": 29, "col_offset": 19, "nodeName": "idx", "type": "Any"}, {"lineNumber": 42, "col_offset": 61, "nodeName": "DecisionTreeRegressor", "type": "Any"}, {"lineNumber": 47, "col_offset": 65, "nodeName": "DecisionTreeRegressor", "type": "Any"}, {"lineNumber": 52, "col_offset": 65, "nodeName": "DecisionTreeRegressor", "type": "Any"}]