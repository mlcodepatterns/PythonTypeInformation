[{"lineNumber": 16, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 21, "col_offset": 0, "nodeName": "idx", "type": "Any"}, {"lineNumber": 22, "col_offset": 0, "nodeName": "train", "type": "Any"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "test", "type": "Any"}, {"lineNumber": 28, "col_offset": 0, "nodeName": "nc_class_params", "type": "Dict[str, Any]"}, {"lineNumber": 32, "col_offset": 0, "nodeName": "rscp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 38, "col_offset": 0, "nodeName": "ccp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 44, "col_offset": 0, "nodeName": "bcp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 55, "col_offset": 0, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 56, "col_offset": 0, "nodeName": "header", "type": "Any"}, {"lineNumber": 57, "col_offset": 0, "nodeName": "table", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "T", "type": "Any"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "df", "type": "Any"}, {"lineNumber": 62, "col_offset": 0, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 63, "col_offset": 0, "nodeName": "header", "type": "Any"}, {"lineNumber": 64, "col_offset": 0, "nodeName": "table", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "T", "type": "Any"}, {"lineNumber": 65, "col_offset": 0, "nodeName": "df", "type": "Any"}, {"lineNumber": 69, "col_offset": 0, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 70, "col_offset": 0, "nodeName": "header", "type": "Any"}, {"lineNumber": 71, "col_offset": 0, "nodeName": "table", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "T", "type": "Any"}, {"lineNumber": 72, "col_offset": 0, "nodeName": "df", "type": "Any"}, {"lineNumber": 16, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 21, "col_offset": 6, "nodeName": "permutation", "type": "Any"}, {"lineNumber": 21, "col_offset": 28, "nodeName": "size", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "idx", "type": "Any"}, {"lineNumber": 23, "col_offset": 7, "nodeName": "idx", "type": "Any"}, {"lineNumber": 28, "col_offset": 34, "nodeName": "DecisionTreeRegressor", "type": "Any"}, {"lineNumber": 29, "col_offset": 31, "nodeName": "absolute_error", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 30, "col_offset": 39, "nodeName": "absolute_error_inverse", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 32, "col_offset": 7, "nodeName": "AggregatedCp", "type": "Type[nonconformist.ensemble.AggregatedCp]"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "IcpRegressor", "type": "Type[nonconformist.regression.IcpRegressor]"}, {"lineNumber": 33, "col_offset": 20, "nodeName": "RegressorNc", "type": "Type[nonconformist.regression.RegressorNc]"}, {"lineNumber": 36, "col_offset": 0, "nodeName": "fit", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Union[Mapping[Any, Any], Sequence[Any]]]], None]"}, {"lineNumber": 38, "col_offset": 6, "nodeName": "AggregatedCp", "type": "Type[nonconformist.ensemble.AggregatedCp]"}, {"lineNumber": 38, "col_offset": 19, "nodeName": "IcpRegressor", "type": "Type[nonconformist.regression.IcpRegressor]"}, {"lineNumber": 39, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.regression.RegressorNc]"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "fit", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Union[Mapping[Any, Any], Sequence[Any]]]], None]"}, {"lineNumber": 44, "col_offset": 6, "nodeName": "AggregatedCp", "type": "Type[nonconformist.ensemble.AggregatedCp]"}, {"lineNumber": 44, "col_offset": 19, "nodeName": "IcpRegressor", "type": "Type[nonconformist.regression.IcpRegressor]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.regression.RegressorNc]"}, {"lineNumber": 48, "col_offset": 0, "nodeName": "fit", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Union[Mapping[Any, Any], Sequence[Any]]]], None]"}, {"lineNumber": 55, "col_offset": 13, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 56, "col_offset": 9, "nodeName": "array", "type": "Any"}, {"lineNumber": 58, "col_offset": 5, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 59, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 6, "nodeName": "df", "type": "Any"}, {"lineNumber": 62, "col_offset": 13, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "array", "type": "Any"}, {"lineNumber": 65, "col_offset": 5, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 66, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 6, "nodeName": "df", "type": "Any"}, {"lineNumber": 69, "col_offset": 13, "nodeName": "predict", "type": "Callable[..., Any]"}, {"lineNumber": 70, "col_offset": 9, "nodeName": "array", "type": "Any"}, {"lineNumber": 72, "col_offset": 5, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 73, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 6, "nodeName": "df", "type": "Any"}, {"lineNumber": 21, "col_offset": 6, "nodeName": "random", "type": "Any"}, {"lineNumber": 21, "col_offset": 28, "nodeName": "target", "type": "Any"}, {"lineNumber": 35, "col_offset": 36, "nodeName": "nc_class_params", "type": "Dict[str, Any]"}, {"lineNumber": 36, "col_offset": 0, "nodeName": "rscp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 36, "col_offset": 9, "nodeName": "data", "type": "Any"}, {"lineNumber": 36, "col_offset": 30, "nodeName": "target", "type": "Any"}, {"lineNumber": 41, "col_offset": 35, "nodeName": "nc_class_params", "type": "Dict[str, Any]"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "ccp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 42, "col_offset": 29, "nodeName": "target", "type": "Any"}, {"lineNumber": 47, "col_offset": 35, "nodeName": "nc_class_params", "type": "Dict[str, Any]"}, {"lineNumber": 48, "col_offset": 0, "nodeName": "bcp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 48, "col_offset": 29, "nodeName": "target", "type": "Any"}, {"lineNumber": 55, "col_offset": 13, "nodeName": "rscp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 55, "col_offset": 26, "nodeName": "data", "type": "Any"}, {"lineNumber": 56, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 58, "col_offset": 5, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 62, "col_offset": 13, "nodeName": "ccp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 65, "col_offset": 5, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 65, "col_offset": 22, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 69, "col_offset": 13, "nodeName": "bcp", "type": "nonconformist.ensemble.AggregatedCp"}, {"lineNumber": 69, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 70, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 72, "col_offset": 5, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 72, "col_offset": 22, "nodeName": "vstack", "type": "Any"}, {"lineNumber": 21, "col_offset": 6, "nodeName": "np", "type": "module"}, {"lineNumber": 21, "col_offset": 28, "nodeName": "data", "type": "Any"}, {"lineNumber": 22, "col_offset": 13, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 23, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 34, "col_offset": 28, "nodeName": "RandomSubSampler", "type": "Type[nonconformist.ensemble.RandomSubSampler]"}, {"lineNumber": 36, "col_offset": 9, "nodeName": "data", "type": "Any"}, {"lineNumber": 36, "col_offset": 30, "nodeName": "data", "type": "Any"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "train", "type": "Any"}, {"lineNumber": 40, "col_offset": 27, "nodeName": "CrossSampler", "type": "Type[nonconformist.ensemble.CrossSampler]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 42, "col_offset": 29, "nodeName": "data", "type": "Any"}, {"lineNumber": 42, "col_offset": 41, "nodeName": "train", "type": "Any"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "BootstrapSampler", "type": "Type[nonconformist.ensemble.BootstrapSampler]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 48, "col_offset": 29, "nodeName": "data", "type": "Any"}, {"lineNumber": 48, "col_offset": 41, "nodeName": "train", "type": "Any"}, {"lineNumber": 55, "col_offset": 26, "nodeName": "data", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "T", "type": "Any"}, {"lineNumber": 58, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 58, "col_offset": 33, "nodeName": "header", "type": "Any"}, {"lineNumber": 58, "col_offset": 41, "nodeName": "table", "type": "Any"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "T", "type": "Any"}, {"lineNumber": 65, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 65, "col_offset": 33, "nodeName": "header", "type": "Any"}, {"lineNumber": 65, "col_offset": 41, "nodeName": "table", "type": "Any"}, {"lineNumber": 69, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "T", "type": "Any"}, {"lineNumber": 72, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 72, "col_offset": 33, "nodeName": "header", "type": "Any"}, {"lineNumber": 72, "col_offset": 41, "nodeName": "table", "type": "Any"}, {"lineNumber": 36, "col_offset": 19, "nodeName": "train", "type": "Any"}, {"lineNumber": 42, "col_offset": 18, "nodeName": "train", "type": "Any"}, {"lineNumber": 48, "col_offset": 18, "nodeName": "train", "type": "Any"}, {"lineNumber": 55, "col_offset": 36, "nodeName": "test", "type": "Any"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 57, "col_offset": 33, "nodeName": "target", "type": "Any"}, {"lineNumber": 62, "col_offset": 35, "nodeName": "test", "type": "Any"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 64, "col_offset": 33, "nodeName": "target", "type": "Any"}, {"lineNumber": 69, "col_offset": 35, "nodeName": "test", "type": "Any"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "prediction", "type": "Any"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "target", "type": "Any"}, {"lineNumber": 22, "col_offset": 21, "nodeName": "size", "type": "Any"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "size", "type": "Any"}, {"lineNumber": 57, "col_offset": 33, "nodeName": "data", "type": "Any"}, {"lineNumber": 57, "col_offset": 45, "nodeName": "test", "type": "Any"}, {"lineNumber": 64, "col_offset": 33, "nodeName": "data", "type": "Any"}, {"lineNumber": 64, "col_offset": 45, "nodeName": "test", "type": "Any"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "data", "type": "Any"}, {"lineNumber": 71, "col_offset": 45, "nodeName": "test", "type": "Any"}, {"lineNumber": 22, "col_offset": 21, "nodeName": "idx", "type": "Any"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "idx", "type": "Any"}]