[{"lineNumber": 30, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 32, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpClassifier"}, {"lineNumber": 34, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.ClassIcpCvHelper"}, {"lineNumber": 36, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 51, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 53, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 55, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 57, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 67, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 73, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 75, "col_offset": 0, "nodeName": "underlying_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 76, "col_offset": 0, "nodeName": "normalizer_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 77, "col_offset": 0, "nodeName": "normalizer", "type": "nonconformist.nc.RegressorNormalizer"}, {"lineNumber": 78, "col_offset": 0, "nodeName": "nc", "type": "nonconformist.nc.RegressorNc"}, {"lineNumber": 80, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 81, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 83, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 93, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 99, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 101, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 103, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 105, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 114, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 120, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 122, "col_offset": 0, "nodeName": "underlying_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 123, "col_offset": 0, "nodeName": "normalizer_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 127, "col_offset": 0, "nodeName": "normalizer", "type": "nonconformist.nc.RegressorNormalizer"}, {"lineNumber": 128, "col_offset": 0, "nodeName": "nc", "type": "nonconformist.nc.RegressorNc"}, {"lineNumber": 130, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 131, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 133, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 142, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 30, "col_offset": 7, "nodeName": "load_iris", "type": "Any"}, {"lineNumber": 32, "col_offset": 6, "nodeName": "IcpClassifier", "type": "Type[nonconformist.icp.IcpClassifier]"}, {"lineNumber": 34, "col_offset": 9, "nodeName": "ClassIcpCvHelper", "type": "Type[nonconformist.evaluation.ClassIcpCvHelper]"}, {"lineNumber": 34, "col_offset": 26, "nodeName": "icp", "type": "nonconformist.icp.IcpClassifier"}, {"lineNumber": 36, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.ClassIcpCvHelper"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 44, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 46, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 51, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 53, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 55, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 55, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 57, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 57, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 58, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 66, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 68, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 75, "col_offset": 19, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 76, "col_offset": 19, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 77, "col_offset": 13, "nodeName": "RegressorNormalizer", "type": "Type[nonconformist.nc.RegressorNormalizer]"}, {"lineNumber": 77, "col_offset": 33, "nodeName": "underlying_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 77, "col_offset": 51, "nodeName": "normalizer_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 78, "col_offset": 5, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 78, "col_offset": 17, "nodeName": "underlying_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 78, "col_offset": 54, "nodeName": "normalizer", "type": "nonconformist.nc.RegressorNormalizer"}, {"lineNumber": 80, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "nc", "type": "nonconformist.nc.RegressorNc"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 81, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 83, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 92, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 93, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 94, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 99, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 101, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 103, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 103, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 105, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 106, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 107, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 113, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 114, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 115, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 120, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 122, "col_offset": 19, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 123, "col_offset": 19, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 127, "col_offset": 13, "nodeName": "RegressorNormalizer", "type": "Type[nonconformist.nc.RegressorNormalizer]"}, {"lineNumber": 127, "col_offset": 33, "nodeName": "underlying_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 127, "col_offset": 51, "nodeName": "normalizer_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 128, "col_offset": 5, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 128, "col_offset": 17, "nodeName": "underlying_model", "type": "nonconformist.base.RegressorAdapter"}, {"lineNumber": 128, "col_offset": 55, "nodeName": "normalizer", "type": "nonconformist.nc.RegressorNormalizer"}, {"lineNumber": 130, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 130, "col_offset": 19, "nodeName": "nc", "type": "nonconformist.nc.RegressorNc"}, {"lineNumber": 131, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 131, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 133, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 133, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 134, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 135, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 141, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 142, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 143, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 32, "col_offset": 20, "nodeName": "ClassifierNc", "type": "Type[nonconformist.nc.ClassifierNc]"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 45, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 46, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 53, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 58, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 67, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 68, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 75, "col_offset": 36, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 76, "col_offset": 36, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 77, "col_offset": 69, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 78, "col_offset": 35, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 84, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 93, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 94, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 106, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 107, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 114, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 115, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 122, "col_offset": 36, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 123, "col_offset": 36, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 127, "col_offset": 69, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 128, "col_offset": 35, "nodeName": "SignErrorErrFunc", "type": "Type[nonconformist.nc.SignErrorErrFunc]"}, {"lineNumber": 134, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 135, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 142, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 143, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 32, "col_offset": 33, "nodeName": "ClassifierAdapter", "type": "Type[nonconformist.base.ClassifierAdapter]"}, {"lineNumber": 33, "col_offset": 33, "nodeName": "MarginErrFunc", "type": "Type[nonconformist.nc.MarginErrFunc]"}, {"lineNumber": 41, "col_offset": 40, "nodeName": "class_mean_errors", "type": "Callable[..., Any]"}, {"lineNumber": 41, "col_offset": 59, "nodeName": "class_avg_c", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 53, "col_offset": 31, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 62, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Sequence[Any]], Any], Any]"}, {"lineNumber": 62, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 88, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Sequence[Any]], Any], Any]"}, {"lineNumber": 88, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 101, "col_offset": 31, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 102, "col_offset": 31, "nodeName": "SignErrorErrFunc", "type": "Type[nonconformist.nc.SignErrorErrFunc]"}, {"lineNumber": 110, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Sequence[Any]], Any], Any]"}, {"lineNumber": 110, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 138, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Mapping[Tuple[Any, ...], Mapping[Any, Any]], Mapping[Any, Sequence[Any]], Any], Any]"}, {"lineNumber": 138, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 32, "col_offset": 51, "nodeName": "RandomForestClassifier", "type": "Any"}, {"lineNumber": 46, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 53, "col_offset": 48, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 68, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 94, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 101, "col_offset": 48, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 115, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 143, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 46, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 68, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 94, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 115, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 143, "col_offset": 6, "nodeName": "scores", "type": "Any"}]