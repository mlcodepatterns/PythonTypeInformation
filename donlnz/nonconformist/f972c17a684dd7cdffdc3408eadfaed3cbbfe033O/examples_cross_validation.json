[{"lineNumber": 31, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 33, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpClassifier"}, {"lineNumber": 35, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.ClassIcpCvHelper"}, {"lineNumber": 37, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 46, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 52, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 54, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 56, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 58, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 68, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 74, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 76, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 79, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 81, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 91, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 97, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 99, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 101, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 103, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 112, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 118, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 120, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 123, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 125, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 134, "col_offset": 0, "nodeName": "scores", "type": "Any"}, {"lineNumber": 31, "col_offset": 7, "nodeName": "load_iris", "type": "Any"}, {"lineNumber": 33, "col_offset": 6, "nodeName": "IcpClassifier", "type": "Type[nonconformist.icp.IcpClassifier]"}, {"lineNumber": 35, "col_offset": 9, "nodeName": "ClassIcpCvHelper", "type": "Type[nonconformist.evaluation.ClassIcpCvHelper]"}, {"lineNumber": 35, "col_offset": 26, "nodeName": "icp", "type": "nonconformist.icp.IcpClassifier"}, {"lineNumber": 37, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.ClassIcpCvHelper"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 45, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 47, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 54, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 56, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 56, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 58, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 58, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 67, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 68, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 69, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 76, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 79, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 79, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 81, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 90, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 91, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 92, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 99, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 101, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 101, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 103, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 103, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 111, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 113, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 118, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 120, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.icp.IcpRegressor]"}, {"lineNumber": 123, "col_offset": 9, "nodeName": "RegIcpCvHelper", "type": "Type[nonconformist.evaluation.RegIcpCvHelper]"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "icp", "type": "nonconformist.icp.IcpRegressor"}, {"lineNumber": 125, "col_offset": 9, "nodeName": "cross_val_score", "type": "Callable[..., Any]"}, {"lineNumber": 125, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.RegIcpCvHelper"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 133, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 134, "col_offset": 9, "nodeName": "drop", "type": "Any"}, {"lineNumber": 135, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 33, "col_offset": 20, "nodeName": "ClassifierNc", "type": "Type[nonconformist.nc.ClassifierNc]"}, {"lineNumber": 38, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 46, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 47, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 54, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 68, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 69, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 76, "col_offset": 19, "nodeName": "NormalizedRegressorNc", "type": "Any"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 83, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 91, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 92, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 99, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.nc.RegressorNc]"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 105, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 112, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 113, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 120, "col_offset": 19, "nodeName": "NormalizedRegressorNc", "type": "Any"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 134, "col_offset": 9, "nodeName": "scores", "type": "Any"}, {"lineNumber": 135, "col_offset": 6, "nodeName": "mean", "type": "Any"}, {"lineNumber": 33, "col_offset": 33, "nodeName": "ClassifierAdapter", "type": "Type[nonconformist.base.ClassifierAdapter]"}, {"lineNumber": 34, "col_offset": 33, "nodeName": "MarginErrFunc", "type": "Type[nonconformist.nc.MarginErrFunc]"}, {"lineNumber": 42, "col_offset": 40, "nodeName": "class_mean_errors", "type": "Callable[..., Any]"}, {"lineNumber": 42, "col_offset": 59, "nodeName": "class_avg_c", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 54, "col_offset": 31, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 55, "col_offset": 31, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 63, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 63, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 76, "col_offset": 41, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 77, "col_offset": 41, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 78, "col_offset": 41, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 86, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 86, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 100, "col_offset": 31, "nodeName": "SignErrorErrFunc", "type": "Type[nonconformist.nc.SignErrorErrFunc]"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 108, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 120, "col_offset": 41, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 121, "col_offset": 41, "nodeName": "RegressorAdapter", "type": "Type[nonconformist.base.RegressorAdapter]"}, {"lineNumber": 122, "col_offset": 41, "nodeName": "AbsErrorErrFunc", "type": "Type[nonconformist.nc.AbsErrorErrFunc]"}, {"lineNumber": 130, "col_offset": 40, "nodeName": "reg_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 130, "col_offset": 57, "nodeName": "reg_median_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 33, "col_offset": 51, "nodeName": "RandomForestClassifier", "type": "Any"}, {"lineNumber": 47, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 54, "col_offset": 48, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 69, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 76, "col_offset": 58, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 77, "col_offset": 58, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 92, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 99, "col_offset": 48, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 113, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 120, "col_offset": 58, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 121, "col_offset": 58, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 135, "col_offset": 6, "nodeName": "groupby", "type": "Any"}, {"lineNumber": 47, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 69, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 92, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 113, "col_offset": 6, "nodeName": "scores", "type": "Any"}, {"lineNumber": 135, "col_offset": 6, "nodeName": "scores", "type": "Any"}]