[{"lineNumber": 29, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 31, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.classification.IcpClassifier"}, {"lineNumber": 32, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpClassCrossValHelper"}, {"lineNumber": 34, "col_offset": 0, "nodeName": "errors", "type": "Any"}, {"lineNumber": 42, "col_offset": 0, "nodeName": "size", "type": "Any"}, {"lineNumber": 55, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 57, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.regression.IcpRegressor"}, {"lineNumber": 60, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpRegCrossValHelper"}, {"lineNumber": 62, "col_offset": 0, "nodeName": "folds", "type": "Any"}, {"lineNumber": 63, "col_offset": 0, "nodeName": "errors", "type": "Any"}, {"lineNumber": 69, "col_offset": 0, "nodeName": "size", "type": "Any"}, {"lineNumber": 82, "col_offset": 0, "nodeName": "data", "type": "Any"}, {"lineNumber": 84, "col_offset": 0, "nodeName": "icp", "type": "nonconformist.regression.IcpRegressor"}, {"lineNumber": 87, "col_offset": 0, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpRegCrossValHelper"}, {"lineNumber": 89, "col_offset": 0, "nodeName": "folds", "type": "Any"}, {"lineNumber": 90, "col_offset": 0, "nodeName": "errors", "type": "Any"}, {"lineNumber": 96, "col_offset": 0, "nodeName": "size", "type": "Any"}, {"lineNumber": 29, "col_offset": 7, "nodeName": "load_iris", "type": "Any"}, {"lineNumber": 31, "col_offset": 6, "nodeName": "IcpClassifier", "type": "Type[nonconformist.classification.IcpClassifier]"}, {"lineNumber": 32, "col_offset": 9, "nodeName": "IcpClassCrossValHelper", "type": "Type[nonconformist.evaluation.IcpClassCrossValHelper]"}, {"lineNumber": 32, "col_offset": 32, "nodeName": "icp", "type": "nonconformist.classification.IcpClassifier"}, {"lineNumber": 34, "col_offset": 9, "nodeName": "cross_val_score", "type": "Any"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpClassCrossValHelper"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 42, "col_offset": 7, "nodeName": "cross_val_score", "type": "Any"}, {"lineNumber": 42, "col_offset": 23, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpClassCrossValHelper"}, {"lineNumber": 43, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 44, "col_offset": 23, "nodeName": "target", "type": "Any"}, {"lineNumber": 48, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 49, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 57, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.regression.IcpRegressor]"}, {"lineNumber": 60, "col_offset": 9, "nodeName": "IcpRegCrossValHelper", "type": "Type[nonconformist.evaluation.IcpRegCrossValHelper]"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "icp", "type": "nonconformist.regression.IcpRegressor"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "KFold", "type": "Any"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "size", "type": "Any"}, {"lineNumber": 63, "col_offset": 9, "nodeName": "cross_val_score", "type": "Any"}, {"lineNumber": 63, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpRegCrossValHelper"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 65, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 69, "col_offset": 7, "nodeName": "cross_val_score", "type": "Any"}, {"lineNumber": 69, "col_offset": 23, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpRegCrossValHelper"}, {"lineNumber": 70, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 71, "col_offset": 23, "nodeName": "target", "type": "Any"}, {"lineNumber": 75, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 77, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 82, "col_offset": 7, "nodeName": "load_diabetes", "type": "Any"}, {"lineNumber": 84, "col_offset": 6, "nodeName": "IcpRegressor", "type": "Type[nonconformist.regression.IcpRegressor]"}, {"lineNumber": 87, "col_offset": 9, "nodeName": "IcpRegCrossValHelper", "type": "Type[nonconformist.evaluation.IcpRegCrossValHelper]"}, {"lineNumber": 87, "col_offset": 30, "nodeName": "icp", "type": "nonconformist.regression.IcpRegressor"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "KFold", "type": "Any"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "size", "type": "Any"}, {"lineNumber": 90, "col_offset": 9, "nodeName": "cross_val_score", "type": "Any"}, {"lineNumber": 90, "col_offset": 25, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpRegCrossValHelper"}, {"lineNumber": 91, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 92, "col_offset": 25, "nodeName": "target", "type": "Any"}, {"lineNumber": 96, "col_offset": 7, "nodeName": "cross_val_score", "type": "Any"}, {"lineNumber": 96, "col_offset": 23, "nodeName": "icp_cv", "type": "nonconformist.evaluation.IcpRegCrossValHelper"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 98, "col_offset": 23, "nodeName": "target", "type": "Any"}, {"lineNumber": 102, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 104, "col_offset": 0, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "PetClassifierNc", "type": "Type[nonconformist.classification.PetClassifierNc]"}, {"lineNumber": 31, "col_offset": 36, "nodeName": "RandomForestClassifier", "type": "Any"}, {"lineNumber": 31, "col_offset": 60, "nodeName": "margin", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 35, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 37, "col_offset": 33, "nodeName": "class_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 43, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 44, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 45, "col_offset": 31, "nodeName": "class_avg_c", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 49, "col_offset": 6, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 50, "col_offset": 6, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.regression.RegressorNc]"}, {"lineNumber": 57, "col_offset": 31, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 58, "col_offset": 31, "nodeName": "absolute_error", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 59, "col_offset": 31, "nodeName": "absolute_error_inverse", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "target", "type": "Any"}, {"lineNumber": 64, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 65, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 66, "col_offset": 33, "nodeName": "reg_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 67, "col_offset": 28, "nodeName": "folds", "type": "Any"}, {"lineNumber": 70, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 71, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 72, "col_offset": 31, "nodeName": "reg_mean_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 73, "col_offset": 26, "nodeName": "folds", "type": "Any"}, {"lineNumber": 76, "col_offset": 6, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 77, "col_offset": 6, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 84, "col_offset": 19, "nodeName": "RegressorNc", "type": "Type[nonconformist.regression.RegressorNc]"}, {"lineNumber": 84, "col_offset": 31, "nodeName": "RandomForestRegressor", "type": "Any"}, {"lineNumber": 85, "col_offset": 31, "nodeName": "signed_error", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 86, "col_offset": 31, "nodeName": "signed_error_inverse", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "target", "type": "Any"}, {"lineNumber": 91, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 92, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "reg_mean_errors", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 94, "col_offset": 28, "nodeName": "folds", "type": "Any"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 98, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "reg_mean_size", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 100, "col_offset": 26, "nodeName": "folds", "type": "Any"}, {"lineNumber": 103, "col_offset": 6, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 104, "col_offset": 6, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 49, "col_offset": 31, "nodeName": "mean", "type": "Any"}, {"lineNumber": 49, "col_offset": 39, "nodeName": "errors", "type": "Any"}, {"lineNumber": 50, "col_offset": 31, "nodeName": "mean", "type": "Any"}, {"lineNumber": 50, "col_offset": 39, "nodeName": "size", "type": "Any"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "data", "type": "Any"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "mean", "type": "Any"}, {"lineNumber": 76, "col_offset": 39, "nodeName": "errors", "type": "Any"}, {"lineNumber": 77, "col_offset": 40, "nodeName": "mean", "type": "Any"}, {"lineNumber": 77, "col_offset": 48, "nodeName": "size", "type": "Any"}, {"lineNumber": 89, "col_offset": 14, "nodeName": "data", "type": "Any"}, {"lineNumber": 103, "col_offset": 31, "nodeName": "mean", "type": "Any"}, {"lineNumber": 103, "col_offset": 39, "nodeName": "errors", "type": "Any"}, {"lineNumber": 104, "col_offset": 40, "nodeName": "mean", "type": "Any"}, {"lineNumber": 104, "col_offset": 48, "nodeName": "size", "type": "Any"}, {"lineNumber": 49, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 50, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 76, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 40, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 104, "col_offset": 40, "nodeName": "np", "type": "module"}]