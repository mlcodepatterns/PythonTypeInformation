[{"lineNumber": 9, "col_offset": 0, "nodeName": "construct_single_q", "type": "Callable[[Any], Any]"}, {"lineNumber": 41, "col_offset": 0, "nodeName": "construct_q", "type": "Callable[[Any], Any]"}, {"lineNumber": 10, "col_offset": 4, "nodeName": "operator", "type": "Any"}, {"lineNumber": 11, "col_offset": 4, "nodeName": "neg", "type": "bool"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "cond", "type": "str"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 35, "col_offset": 7, "nodeName": "neg", "type": "bool"}, {"lineNumber": 38, "col_offset": 11, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "q_list", "type": "List[Any]"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 10, "col_offset": 15, "nodeName": "rule", "type": "Any"}, {"lineNumber": 12, "col_offset": 7, "nodeName": "startswith", "type": "Any"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "neg", "type": "bool"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "operator", "type": "Any"}, {"lineNumber": 28, "col_offset": 7, "nodeName": "cond", "type": "str"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "cond_dict", "type": "Dict[str, Any]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "cond_dict", "type": "Dict[str, Tuple[Any, ...]]"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "Q", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "filters", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 12, "col_offset": 7, "nodeName": "operator", "type": "Any"}, {"lineNumber": 14, "col_offset": 19, "nodeName": "operator", "type": "Any"}, {"lineNumber": 26, "col_offset": 6, "nodeName": "operator", "type": "Any"}, {"lineNumber": 33, "col_offset": 16, "nodeName": "cond_dict", "type": "Union[Dict[str, Tuple[Any, ...]], Dict[str, Any]]"}, {"lineNumber": 36, "col_offset": 17, "nodeName": "q_obj", "type": "Any"}, {"lineNumber": 44, "col_offset": 15, "nodeName": "construct_single_q", "type": "Callable[[Any], Any]"}, {"lineNumber": 44, "col_offset": 34, "nodeName": "filters", "type": "Any"}, {"lineNumber": 46, "col_offset": 14, "nodeName": "construct_q", "type": "Callable[[Any], Any]"}, {"lineNumber": 46, "col_offset": 26, "nodeName": "rule", "type": "Any"}, {"lineNumber": 46, "col_offset": 36, "nodeName": "rule", "type": "Any"}, {"lineNumber": 48, "col_offset": 7, "nodeName": "filters", "type": "Any"}, {"lineNumber": 49, "col_offset": 16, "nodeName": "reduce", "type": "Callable"}, {"lineNumber": 49, "col_offset": 23, "nodeName": "and_", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 49, "col_offset": 38, "nodeName": "q_list", "type": "List[Any]"}, {"lineNumber": 51, "col_offset": 16, "nodeName": "reduce", "type": "Callable"}, {"lineNumber": 51, "col_offset": 23, "nodeName": "or_", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 51, "col_offset": 37, "nodeName": "q_list", "type": "List[Any]"}, {"lineNumber": 29, "col_offset": 21, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 29, "col_offset": 49, "nodeName": "cond", "type": "str"}, {"lineNumber": 29, "col_offset": 56, "nodeName": "rule", "type": "Any"}, {"lineNumber": 31, "col_offset": 21, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 31, "col_offset": 49, "nodeName": "cond", "type": "str"}, {"lineNumber": 31, "col_offset": 56, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 46, "col_offset": 44, "nodeName": "filters", "type": "Any"}, {"lineNumber": 49, "col_offset": 23, "nodeName": "operator", "type": "module"}, {"lineNumber": 51, "col_offset": 23, "nodeName": "operator", "type": "module"}, {"lineNumber": 29, "col_offset": 37, "nodeName": "rule", "type": "Any"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "rule", "type": "Any"}, {"lineNumber": 31, "col_offset": 62, "nodeName": "rule", "type": "Any"}]