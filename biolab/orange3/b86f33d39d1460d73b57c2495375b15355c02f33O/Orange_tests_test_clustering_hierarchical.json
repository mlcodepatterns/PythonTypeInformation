[{"lineNumber": 12, "col_offset": 0, "nodeName": "flatten", "type": "Callable[[Any], Any]"}, {"lineNumber": 16, "col_offset": 23, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "test_mapping", "type": "Callable[[Any], Any]"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "test_order", "type": "Callable[[Any], Any]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "test_prunning", "type": "Callable[[Any], Any]"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "test_form", "type": "Callable[[Any], Any]"}, {"lineNumber": 91, "col_offset": 4, "nodeName": "test_pre_post_order", "type": "Callable[[Any], Any]"}, {"lineNumber": 16, "col_offset": 23, "nodeName": "unittest", "type": "module"}, {"lineNumber": 13, "col_offset": 11, "nodeName": "chain", "type": "Type[itertools.chain[Any]]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "dist", "type": "numpy.ndarray"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "matrix", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "m", "type": "List[Union[List[nothing], List[int]]]"}, {"lineNumber": 33, "col_offset": 17, "nodeName": "m", "type": "List[Union[List[nothing], List[int]]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "matrix", "type": "Orange.misc.distmatrix.DistMatrix"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "items", "type": "List[str]"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "items", "type": "List[str]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "leaves", "type": "List[Any]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "indices", "type": "List[Any]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "post", "type": "List[Any]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "seen", "type": "Set[Any]"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "n", "type": "Any"}, {"lineNumber": 53, "col_offset": 17, "nodeName": "post", "type": "List[Any]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "pre", "type": "List[Any]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "seen", "type": "Set[Any]"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "n", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "pre", "type": "List[Any]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "pruned", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "depths", "type": "Dict[Any, int]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "pruned", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "m", "type": "numpy.ndarray"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "dist", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "dist", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "tree", "type": "Type[Orange.clustering.hierarchical.Tree]"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "Tree", "type": "Type[Orange.clustering.hierarchical.Tree]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "root", "type": "Any"}, {"lineNumber": 13, "col_offset": 18, "nodeName": "seq", "type": "List[Union[List[nothing], List[int]]]"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 32, "col_offset": 17, "nodeName": "squareform", "type": "Callable[..., Any]"}, {"lineNumber": 32, "col_offset": 41, "nodeName": "dist", "type": "numpy.ndarray"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 34, "col_offset": 22, "nodeName": "DistMatrix", "type": "Type[Orange.misc.distmatrix.DistMatrix]"}, {"lineNumber": 34, "col_offset": 45, "nodeName": "matrix", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "matrix", "type": "Orange.misc.distmatrix.DistMatrix"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 37, "col_offset": 23, "nodeName": "dist_matrix_clustering", "type": "Callable[..., Any]"}, {"lineNumber": 37, "col_offset": 59, "nodeName": "matrix", "type": "Orange.misc.distmatrix.DistMatrix"}, {"lineNumber": 40, "col_offset": 17, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "index", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 25, "nodeName": "indices", "type": "List[Any]"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 57, "col_offset": 14, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 64, "col_offset": 17, "nodeName": "prune", "type": "Callable[..., Any]"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "cluster_depths", "type": "Callable[[Any], Dict[Any, int]]"}, {"lineNumber": 65, "col_offset": 45, "nodeName": "pruned", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 68, "col_offset": 17, "nodeName": "prune", "type": "Callable[..., Any]"}, {"lineNumber": 68, "col_offset": 36, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 71, "col_offset": 17, "nodeName": "prune", "type": "Callable[..., Any]"}, {"lineNumber": 71, "col_offset": 36, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 81, "col_offset": 24, "nodeName": "m", "type": "List[List[int]]"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "condensedform", "type": "Callable[..., Any]"}, {"lineNumber": 82, "col_offset": 42, "nodeName": "m", "type": "numpy.ndarray"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 83, "col_offset": 35, "nodeName": "dist", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 85, "col_offset": 57, "nodeName": "m", "type": "numpy.ndarray"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "condensedform", "type": "Callable[..., Any]"}, {"lineNumber": 86, "col_offset": 42, "nodeName": "m", "type": "numpy.ndarray"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 87, "col_offset": 35, "nodeName": "dist", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 89, "col_offset": 57, "nodeName": "m", "type": "numpy.ndarray"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 93, "col_offset": 15, "nodeName": "tree", "type": "Type[Orange.clustering.hierarchical.Tree]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "numpy", "type": "module"}, {"lineNumber": 31, "col_offset": 27, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 31, "col_offset": 51, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 32, "col_offset": 17, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 34, "col_offset": 22, "nodeName": "misc", "type": "module"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 37, "col_offset": 23, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 37, "col_offset": 59, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "leaves", "type": "Callable[..., Any]"}, {"lineNumber": 40, "col_offset": 42, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "value", "type": "Any"}, {"lineNumber": 41, "col_offset": 37, "nodeName": "n", "type": "Any"}, {"lineNumber": 41, "col_offset": 42, "nodeName": "leaves", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 43, "col_offset": 29, "nodeName": "indices", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "items", "type": "List[str]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 44, "col_offset": 25, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 44, "col_offset": 29, "nodeName": "indices", "type": "List[Any]"}, {"lineNumber": 44, "col_offset": 39, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 50, "col_offset": 20, "nodeName": "postorder", "type": "Callable"}, {"lineNumber": 50, "col_offset": 43, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "add", "type": "Callable"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "n", "type": "Any"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "preorder", "type": "Callable"}, {"lineNumber": 57, "col_offset": 41, "nodeName": "cluster", "type": "Any"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "add", "type": "Callable"}, {"lineNumber": 61, "col_offset": 21, "nodeName": "n", "type": "Any"}, {"lineNumber": 64, "col_offset": 17, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 64, "col_offset": 36, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 66, "col_offset": 24, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 68, "col_offset": 17, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 68, "col_offset": 36, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 71, "col_offset": 17, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 71, "col_offset": 36, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "squareform", "type": "Callable[..., Any]"}, {"lineNumber": 85, "col_offset": 36, "nodeName": "dist", "type": "Any"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 87, "col_offset": 41, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "squareform", "type": "Callable[..., Any]"}, {"lineNumber": 89, "col_offset": 36, "nodeName": "dist", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 94, "col_offset": 26, "nodeName": "value", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 96, "col_offset": 26, "nodeName": "value", "type": "Any"}, {"lineNumber": 31, "col_offset": 32, "nodeName": "flatten", "type": "Callable[[Any], Any]"}, {"lineNumber": 31, "col_offset": 40, "nodeName": "m", "type": "List[Union[List[nothing], List[int]]]"}, {"lineNumber": 34, "col_offset": 22, "nodeName": "Orange", "type": "module"}, {"lineNumber": 40, "col_offset": 22, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 40, "col_offset": 42, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "n", "type": "Any"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "matrix", "type": "Orange.misc.distmatrix.DistMatrix"}, {"lineNumber": 44, "col_offset": 43, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 50, "col_offset": 20, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 50, "col_offset": 43, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 54, "col_offset": 28, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "seen", "type": "Set[Any]"}, {"lineNumber": 57, "col_offset": 19, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 57, "col_offset": 41, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 60, "col_offset": 28, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "seen", "type": "Set[Any]"}, {"lineNumber": 69, "col_offset": 24, "nodeName": "height", "type": "Any"}, {"lineNumber": 69, "col_offset": 43, "nodeName": "c", "type": "Any"}, {"lineNumber": 73, "col_offset": 39, "nodeName": "c", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "numpy", "type": "module"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 87, "col_offset": 41, "nodeName": "numpy", "type": "module"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 93, "col_offset": 26, "nodeName": "tree", "type": "Type[Orange.clustering.hierarchical.Tree]"}, {"lineNumber": 93, "col_offset": 37, "nodeName": "tree", "type": "Type[Orange.clustering.hierarchical.Tree]"}, {"lineNumber": 94, "col_offset": 26, "nodeName": "n", "type": "Any"}, {"lineNumber": 94, "col_offset": 38, "nodeName": "n", "type": "Any"}, {"lineNumber": 96, "col_offset": 26, "nodeName": "n", "type": "Any"}, {"lineNumber": 96, "col_offset": 38, "nodeName": "n", "type": "Any"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 44, "col_offset": 49, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 44, "col_offset": 53, "nodeName": "items", "type": "List[str]"}, {"lineNumber": 66, "col_offset": 28, "nodeName": "d", "type": "int"}, {"lineNumber": 66, "col_offset": 39, "nodeName": "d", "type": "int"}, {"lineNumber": 69, "col_offset": 24, "nodeName": "c", "type": "Any"}, {"lineNumber": 69, "col_offset": 48, "nodeName": "preorder", "type": "Callable"}, {"lineNumber": 69, "col_offset": 70, "nodeName": "pruned", "type": "Any"}, {"lineNumber": 73, "col_offset": 24, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 73, "col_offset": 28, "nodeName": "c", "type": "Any"}, {"lineNumber": 73, "col_offset": 44, "nodeName": "preorder", "type": "Callable"}, {"lineNumber": 73, "col_offset": 66, "nodeName": "pruned", "type": "Any"}, {"lineNumber": 94, "col_offset": 43, "nodeName": "postorder", "type": "Callable"}, {"lineNumber": 94, "col_offset": 66, "nodeName": "root", "type": "Any"}, {"lineNumber": 96, "col_offset": 43, "nodeName": "preorder", "type": "Callable"}, {"lineNumber": 96, "col_offset": 65, "nodeName": "root", "type": "Any"}, {"lineNumber": 44, "col_offset": 53, "nodeName": "matrix", "type": "Orange.misc.distmatrix.DistMatrix"}, {"lineNumber": 54, "col_offset": 32, "nodeName": "ch", "type": "Any"}, {"lineNumber": 54, "col_offset": 38, "nodeName": "seen", "type": "Set[Any]"}, {"lineNumber": 54, "col_offset": 47, "nodeName": "ch", "type": "Any"}, {"lineNumber": 54, "col_offset": 53, "nodeName": "branches", "type": "Any"}, {"lineNumber": 60, "col_offset": 32, "nodeName": "ch", "type": "Any"}, {"lineNumber": 60, "col_offset": 42, "nodeName": "seen", "type": "Set[Any]"}, {"lineNumber": 60, "col_offset": 51, "nodeName": "ch", "type": "Any"}, {"lineNumber": 60, "col_offset": 57, "nodeName": "branches", "type": "Any"}, {"lineNumber": 66, "col_offset": 44, "nodeName": "values", "type": "Callable"}, {"lineNumber": 69, "col_offset": 48, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 72, "col_offset": 57, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 72, "col_offset": 61, "nodeName": "cl", "type": "Any"}, {"lineNumber": 73, "col_offset": 44, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 94, "col_offset": 43, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 96, "col_offset": 43, "nodeName": "hierarchical", "type": "module"}, {"lineNumber": 44, "col_offset": 53, "nodeName": "self", "type": "TestHierarchical"}, {"lineNumber": 54, "col_offset": 53, "nodeName": "n", "type": "Any"}, {"lineNumber": 60, "col_offset": 57, "nodeName": "n", "type": "Any"}, {"lineNumber": 66, "col_offset": 44, "nodeName": "depths", "type": "Dict[Any, int]"}]