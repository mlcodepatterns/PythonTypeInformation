[{"lineNumber": 12, "col_offset": 23, "nodeName": "HybridBlock", "type": "Any"}, {"lineNumber": 53, "col_offset": 23, "nodeName": "HybridBlock", "type": "Any"}, {"lineNumber": 95, "col_offset": 21, "nodeName": "HybridBlock", "type": "Any"}, {"lineNumber": 12, "col_offset": 23, "nodeName": "gluon", "type": "Any"}, {"lineNumber": 53, "col_offset": 23, "nodeName": "gluon", "type": "Any"}, {"lineNumber": 95, "col_offset": 21, "nodeName": "gluon", "type": "Any"}, {"lineNumber": 23, "col_offset": 12, "nodeName": "matcher", "type": "Any"}, {"lineNumber": 23, "col_offset": 23, "nodeName": "matchers", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "_matchers", "type": "Any"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "m", "type": "Any"}, {"lineNumber": 26, "col_offset": 17, "nodeName": "matchers", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "matches", "type": "List[Any]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "result", "type": "Any"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "match", "type": "Any"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "result", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "_threshold", "type": "Any"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "threshold", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "_is_ascend", "type": "Any"}, {"lineNumber": 68, "col_offset": 26, "nodeName": "is_ascend", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "_eps", "type": "Any"}, {"lineNumber": 69, "col_offset": 20, "nodeName": "eps", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "pargmax", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "maxs", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "pmax", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "mask", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "new_match", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "result", "type": "Any"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "result", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "_threshold", "type": "Any"}, {"lineNumber": 106, "col_offset": 26, "nodeName": "threshold", "type": "Any"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 112, "col_offset": 15, "nodeName": "match", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "CompositeMatcher"}, {"lineNumber": 25, "col_offset": 25, "nodeName": "HybridSequential", "type": "Any"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "_compose_matches", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "F", "type": "Any"}, {"lineNumber": 31, "col_offset": 40, "nodeName": "matches", "type": "List[Any]"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "matches", "type": "Any"}, {"lineNumber": 48, "col_offset": 21, "nodeName": "matches", "type": "Any"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "result", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "bipartite_matching", "type": "Any"}, {"lineNumber": 80, "col_offset": 45, "nodeName": "x", "type": "Any"}, {"lineNumber": 85, "col_offset": 18, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "max", "type": "Any"}, {"lineNumber": 87, "col_offset": 15, "nodeName": "pick", "type": "Any"}, {"lineNumber": 87, "col_offset": 22, "nodeName": "x", "type": "Any"}, {"lineNumber": 87, "col_offset": 25, "nodeName": "pargmax", "type": "Any"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "broadcast_greater_equal", "type": "Any"}, {"lineNumber": 88, "col_offset": 59, "nodeName": "maxs", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "pick", "type": "Any"}, {"lineNumber": 89, "col_offset": 22, "nodeName": "mask", "type": "Any"}, {"lineNumber": 89, "col_offset": 28, "nodeName": "pargmax", "type": "Any"}, {"lineNumber": 90, "col_offset": 20, "nodeName": "where", "type": "Any"}, {"lineNumber": 90, "col_offset": 38, "nodeName": "pargmax", "type": "Any"}, {"lineNumber": 91, "col_offset": 17, "nodeName": "where", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "self", "type": "MaximumMatcher"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 109, "col_offset": 26, "nodeName": "x", "type": "Any"}, {"lineNumber": 110, "col_offset": 16, "nodeName": "where", "type": "Any"}, {"lineNumber": 110, "col_offset": 71, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 22, "col_offset": 19, "nodeName": "matchers", "type": "Any"}, {"lineNumber": 24, "col_offset": 19, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 24, "col_offset": 30, "nodeName": "matcher", "type": "Any"}, {"lineNumber": 25, "col_offset": 25, "nodeName": "nn", "type": "Any"}, {"lineNumber": 27, "col_offset": 12, "nodeName": "add", "type": "Any"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "m", "type": "Any"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "matcher", "type": "Any"}, {"lineNumber": 30, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 30, "col_offset": 34, "nodeName": "matcher", "type": "Any"}, {"lineNumber": 30, "col_offset": 45, "nodeName": "_matchers", "type": "Any"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "self", "type": "CompositeMatcher"}, {"lineNumber": 49, "col_offset": 21, "nodeName": "where", "type": "Any"}, {"lineNumber": 49, "col_offset": 44, "nodeName": "result", "type": "Any"}, {"lineNumber": 49, "col_offset": 52, "nodeName": "match", "type": "Any"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "contrib", "type": "Any"}, {"lineNumber": 80, "col_offset": 58, "nodeName": "_threshold", "type": "Any"}, {"lineNumber": 81, "col_offset": 55, "nodeName": "_is_ascend", "type": "Any"}, {"lineNumber": 85, "col_offset": 18, "nodeName": "x", "type": "Any"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "x", "type": "Any"}, {"lineNumber": 87, "col_offset": 15, "nodeName": "F", "type": "Any"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "F", "type": "Any"}, {"lineNumber": 88, "col_offset": 41, "nodeName": "pmax", "type": "Any"}, {"lineNumber": 88, "col_offset": 48, "nodeName": "_eps", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "F", "type": "Any"}, {"lineNumber": 90, "col_offset": 20, "nodeName": "F", "type": "Any"}, {"lineNumber": 90, "col_offset": 28, "nodeName": "mask", "type": "Any"}, {"lineNumber": 91, "col_offset": 17, "nodeName": "F", "type": "Any"}, {"lineNumber": 91, "col_offset": 39, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 91, "col_offset": 67, "nodeName": "match", "type": "Any"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "F", "type": "Any"}, {"lineNumber": 110, "col_offset": 16, "nodeName": "F", "type": "Any"}, {"lineNumber": 110, "col_offset": 54, "nodeName": "_threshold", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "CompositeMatcher", "type": "Type[CompositeMatcher]"}, {"lineNumber": 21, "col_offset": 32, "nodeName": "self", "type": "CompositeMatcher"}, {"lineNumber": 24, "col_offset": 40, "nodeName": "Block", "type": "Any"}, {"lineNumber": 24, "col_offset": 53, "nodeName": "HybridBlock", "type": "Any"}, {"lineNumber": 27, "col_offset": 12, "nodeName": "_matchers", "type": "Any"}, {"lineNumber": 30, "col_offset": 45, "nodeName": "self", "type": "CompositeMatcher"}, {"lineNumber": 49, "col_offset": 21, "nodeName": "F", "type": "Any"}, {"lineNumber": 49, "col_offset": 29, "nodeName": "result", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 66, "col_offset": 14, "nodeName": "BipartiteMatcher", "type": "Type[BipartiteMatcher]"}, {"lineNumber": 66, "col_offset": 32, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "F", "type": "Any"}, {"lineNumber": 80, "col_offset": 58, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 81, "col_offset": 55, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 88, "col_offset": 48, "nodeName": "self", "type": "BipartiteMatcher"}, {"lineNumber": 90, "col_offset": 47, "nodeName": "ones_like", "type": "Any"}, {"lineNumber": 90, "col_offset": 59, "nodeName": "pargmax", "type": "Any"}, {"lineNumber": 91, "col_offset": 25, "nodeName": "match", "type": "Any"}, {"lineNumber": 91, "col_offset": 39, "nodeName": "new_match", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 105, "col_offset": 14, "nodeName": "MaximumMatcher", "type": "Type[MaximumMatcher]"}, {"lineNumber": 105, "col_offset": 30, "nodeName": "self", "type": "MaximumMatcher"}, {"lineNumber": 110, "col_offset": 24, "nodeName": "pick", "type": "Any"}, {"lineNumber": 110, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 110, "col_offset": 34, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 110, "col_offset": 54, "nodeName": "self", "type": "MaximumMatcher"}, {"lineNumber": 111, "col_offset": 24, "nodeName": "ones_like", "type": "Any"}, {"lineNumber": 111, "col_offset": 36, "nodeName": "argmax", "type": "Any"}, {"lineNumber": 24, "col_offset": 40, "nodeName": "gluon", "type": "Any"}, {"lineNumber": 24, "col_offset": 53, "nodeName": "gluon", "type": "Any"}, {"lineNumber": 27, "col_offset": 12, "nodeName": "self", "type": "CompositeMatcher"}, {"lineNumber": 90, "col_offset": 47, "nodeName": "F", "type": "Any"}, {"lineNumber": 110, "col_offset": 24, "nodeName": "F", "type": "Any"}, {"lineNumber": 111, "col_offset": 24, "nodeName": "F", "type": "Any"}]