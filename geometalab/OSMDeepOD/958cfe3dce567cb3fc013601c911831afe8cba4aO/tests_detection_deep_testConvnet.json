[{"lineNumber": 7, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 8, "col_offset": 4, "nodeName": "testInitialize_model_is_loaded", "type": "Callable[[Any], Any]"}, {"lineNumber": 14, "col_offset": 4, "nodeName": "test_predict", "type": "Callable[[Any], Any]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "test_to_numpy_array", "type": "Callable[[Any], Any]"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "test_normalize", "type": "Callable[[Any], Any]"}, {"lineNumber": 38, "col_offset": 4, "nodeName": "test_load_test_images", "type": "Callable[[Any], Any]"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "load_test_images", "type": "Callable[[Any], Any]"}, {"lineNumber": 7, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 9, "col_offset": 8, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "result", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "np_arr", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "should_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "np_arr", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "should_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "filenames", "type": "List[str]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "file", "type": "str"}, {"lineNumber": 45, "col_offset": 20, "nodeName": "filenames", "type": "List[str]"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 9, "col_offset": 14, "nodeName": "from_verbose", "type": "Callable"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "initialize", "type": "Callable[[], None]"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "assertIsNotNone", "type": "Callable[..., None]"}, {"lineNumber": 12, "col_offset": 29, "nodeName": "model", "type": "Any"}, {"lineNumber": 15, "col_offset": 17, "nodeName": "load_test_images", "type": "Callable[[], Any]"}, {"lineNumber": 16, "col_offset": 14, "nodeName": "from_verbose", "type": "Callable"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "initialize", "type": "Callable[[], None]"}, {"lineNumber": 18, "col_offset": 17, "nodeName": "predict_crosswalks", "type": "Callable[[Any], Any]"}, {"lineNumber": 18, "col_offset": 40, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 22, "col_offset": 14, "nodeName": "from_verbose", "type": "Callable"}, {"lineNumber": 23, "col_offset": 17, "nodeName": "load_test_images", "type": "Callable[[], Any]"}, {"lineNumber": 24, "col_offset": 17, "nodeName": "_to_numpy_array", "type": "Callable[[Any], Any]"}, {"lineNumber": 24, "col_offset": 37, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "shape", "type": "Any"}, {"lineNumber": 26, "col_offset": 40, "nodeName": "should_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "from_verbose", "type": "Callable"}, {"lineNumber": 30, "col_offset": 17, "nodeName": "load_test_images", "type": "Callable[[], Any]"}, {"lineNumber": 31, "col_offset": 17, "nodeName": "_to_numpy_array", "type": "Callable[[Any], Any]"}, {"lineNumber": 31, "col_offset": 37, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "_normalize", "type": "Callable[[Any], Any]"}, {"lineNumber": 32, "col_offset": 27, "nodeName": "np_arr", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assertEquals", "type": "Callable[..., None]"}, {"lineNumber": 34, "col_offset": 26, "nodeName": "shape", "type": "Any"}, {"lineNumber": 34, "col_offset": 35, "nodeName": "should_shape", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "load_test_images", "type": "Callable[[], Any]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "assertGreater", "type": "Callable[..., None]"}, {"lineNumber": 43, "col_offset": 20, "nodeName": "glob", "type": "Callable"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "img", "type": "Any"}, {"lineNumber": 9, "col_offset": 14, "nodeName": "Convnet", "type": "Type[src.detection.deep.Convnet.Convnet]"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 11, "col_offset": 24, "nodeName": "is_initialized", "type": "Callable[[], bool]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 12, "col_offset": 29, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 15, "col_offset": 17, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 16, "col_offset": 14, "nodeName": "Convnet", "type": "Type[src.detection.deep.Convnet.Convnet]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 18, "col_offset": 17, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 19, "col_offset": 26, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 19, "col_offset": 30, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 19, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 19, "col_offset": 43, "nodeName": "result", "type": "Any"}, {"lineNumber": 22, "col_offset": 14, "nodeName": "Convnet", "type": "Type[src.detection.deep.Convnet.Convnet]"}, {"lineNumber": 23, "col_offset": 17, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 24, "col_offset": 17, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 25, "col_offset": 24, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 25, "col_offset": 28, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "np_arr", "type": "Any"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "Convnet", "type": "Type[src.detection.deep.Convnet.Convnet]"}, {"lineNumber": 30, "col_offset": 17, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 31, "col_offset": 17, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 33, "col_offset": 28, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 34, "col_offset": 26, "nodeName": "x", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "testConvnet"}, {"lineNumber": 40, "col_offset": 27, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 40, "col_offset": 31, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 20, "nodeName": "glob", "type": "module"}, {"lineNumber": 46, "col_offset": 18, "nodeName": "open", "type": "Any"}, {"lineNumber": 46, "col_offset": 29, "nodeName": "file", "type": "str"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 47, "col_offset": 26, "nodeName": "img", "type": "Any"}, {"lineNumber": 11, "col_offset": 24, "nodeName": "net", "type": "src.detection.deep.Convnet.Convnet"}, {"lineNumber": 46, "col_offset": 18, "nodeName": "Image", "type": "Any"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "images", "type": "List[Any]"}, {"lineNumber": 35, "col_offset": 31, "nodeName": "np_arr", "type": "Any"}, {"lineNumber": 35, "col_offset": 53, "nodeName": "x", "type": "Any"}]