[{"lineNumber": 7, "col_offset": 0, "nodeName": "addcsvelt", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 20, "col_offset": 0, "nodeName": "convert_maproulette", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 53, "col_offset": 0, "nodeName": "convert_geojson", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 84, "col_offset": 0, "nodeName": "convert", "type": "Callable[[Any], Any]"}, {"lineNumber": 91, "col_offset": 0, "nodeName": "mainfunc", "type": "Callable[[], Any]"}, {"lineNumber": 8, "col_offset": 4, "nodeName": "build_element", "type": "Callable[[Any], Any]"}, {"lineNumber": 21, "col_offset": 4, "nodeName": "build_element", "type": "Callable[[Any], Any]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "build_element", "type": "Callable[[Any], Any]"}, {"lineNumber": 14, "col_offset": 4, "nodeName": "value", "type": "str"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "output_filename", "type": "Any"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "value", "type": "str"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "output_filename", "type": "str"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "value", "type": "str"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "output_filename", "type": "Any"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "data", "type": "Any"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "data_filename", "type": "Any"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "name", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "conv_func", "type": "Any"}, {"lineNumber": 87, "col_offset": 21, "nodeName": "conversion_funcs", "type": "Any"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 125, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 16, "col_offset": 39, "nodeName": "f", "type": "file"}, {"lineNumber": 43, "col_offset": 15, "nodeName": "element", "type": "Dict[str, Union[Dict[str, Union[str, List[Dict[str, Union[str, Dict[nothing, nothing], Dict[str, Union[str, List[Any]]]]]]]], str]]"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "replace", "type": "Callable"}, {"lineNumber": 49, "col_offset": 39, "nodeName": "f", "type": "file"}, {"lineNumber": 68, "col_offset": 15, "nodeName": "element", "type": "Dict[str, Union[str, Dict[nothing, nothing], Dict[str, Union[str, List[Any]]]]]"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "replace", "type": "Callable"}, {"lineNumber": 80, "col_offset": 39, "nodeName": "f", "type": "file"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "load", "type": "Callable[..., Any]"}, {"lineNumber": 85, "col_offset": 21, "nodeName": "input_file", "type": "Any"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "input_file", "type": "Any"}, {"lineNumber": 87, "col_offset": 21, "nodeName": "args", "type": "Any"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "ArgumentParser", "type": "Type[argparse.ArgumentParser]"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "add_argument", "type": "Callable[..., argparse.Action]"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "set_defaults", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 11, "nodeName": "parse_args", "type": "Callable"}, {"lineNumber": 120, "col_offset": 7, "nodeName": "conversion_funcs", "type": "Any"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "mainfunc", "type": "Callable[[], Any]"}, {"lineNumber": 10, "col_offset": 73, "nodeName": "linesep", "type": "str"}, {"lineNumber": 13, "col_offset": 20, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 14, "col_offset": 35, "nodeName": "linesep", "type": "str"}, {"lineNumber": 14, "col_offset": 48, "nodeName": "join", "type": "Callable"}, {"lineNumber": 14, "col_offset": 56, "nodeName": "elements", "type": "List[str]"}, {"lineNumber": 16, "col_offset": 9, "nodeName": "open", "type": "Callable[..., file]"}, {"lineNumber": 16, "col_offset": 14, "nodeName": "output_filename", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "write", "type": "Callable[[Union[bytearray, str, unicode]], None]"}, {"lineNumber": 17, "col_offset": 16, "nodeName": "value", "type": "str"}, {"lineNumber": 46, "col_offset": 20, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 49, "col_offset": 9, "nodeName": "open", "type": "Callable[..., file]"}, {"lineNumber": 49, "col_offset": 14, "nodeName": "output_filename", "type": "str"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "write", "type": "Callable[[Union[bytearray, str, unicode]], None]"}, {"lineNumber": 50, "col_offset": 16, "nodeName": "value", "type": "str"}, {"lineNumber": 77, "col_offset": 29, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 80, "col_offset": 9, "nodeName": "open", "type": "Callable[..., file]"}, {"lineNumber": 80, "col_offset": 14, "nodeName": "output_filename", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "write", "type": "Callable[[Union[bytearray, str, unicode]], None]"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "value", "type": "str"}, {"lineNumber": 85, "col_offset": 11, "nodeName": "json", "type": "module"}, {"lineNumber": 85, "col_offset": 21, "nodeName": "args", "type": "Any"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "args", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "conv_func", "type": "Any"}, {"lineNumber": 88, "col_offset": 18, "nodeName": "data", "type": "Any"}, {"lineNumber": 88, "col_offset": 24, "nodeName": "data_filename", "type": "Any"}, {"lineNumber": 92, "col_offset": 13, "nodeName": "argparse", "type": "module"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 99, "col_offset": 14, "nodeName": "addcsvelt", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 105, "col_offset": 14, "nodeName": "convert_geojson", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 111, "col_offset": 14, "nodeName": "convert_maproulette", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 115, "col_offset": 13, "nodeName": "file", "type": "Type[file]"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 117, "col_offset": 29, "nodeName": "convert", "type": "Callable[[Any], Any]"}, {"lineNumber": 119, "col_offset": 11, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 120, "col_offset": 7, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "func", "type": "Any"}, {"lineNumber": 121, "col_offset": 18, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "print_help", "type": "Callable[..., None]"}, {"lineNumber": 10, "col_offset": 73, "nodeName": "os", "type": "module"}, {"lineNumber": 13, "col_offset": 33, "nodeName": "json_data", "type": "Any"}, {"lineNumber": 14, "col_offset": 35, "nodeName": "os", "type": "module"}, {"lineNumber": 15, "col_offset": 22, "nodeName": "splitext", "type": "Callable"}, {"lineNumber": 15, "col_offset": 39, "nodeName": "input_filename", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "f", "type": "file"}, {"lineNumber": 41, "col_offset": 30, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 46, "col_offset": 33, "nodeName": "json_data", "type": "Any"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 47, "col_offset": 16, "nodeName": "elements", "type": "List[Dict[str, Union[Dict[str, Union[str, List[Dict[str, Union[str, Dict[nothing, nothing], Dict[str, Union[str, List[Any]]]]]]]], str]]]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "f", "type": "file"}, {"lineNumber": 77, "col_offset": 42, "nodeName": "json_data", "type": "Any"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 78, "col_offset": 16, "nodeName": "outer", "type": "Dict[str, Union[str, List[nothing], List[Dict[str, Union[str, Dict[nothing, nothing], Dict[str, Union[str, List[Any]]]]]]]]"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "splitext", "type": "Callable"}, {"lineNumber": 79, "col_offset": 39, "nodeName": "input_filename", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "f", "type": "file"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "args", "type": "argparse.Namespace"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "parser", "type": "argparse.ArgumentParser"}, {"lineNumber": 10, "col_offset": 43, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 15, "col_offset": 22, "nodeName": "path", "type": "module"}, {"lineNumber": 41, "col_offset": 34, "nodeName": "uuid4", "type": "Callable[[], uuid.UUID]"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "path", "type": "module"}, {"lineNumber": 10, "col_offset": 47, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 15, "col_offset": 22, "nodeName": "os", "type": "module"}, {"lineNumber": 41, "col_offset": 34, "nodeName": "uuid", "type": "module"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 79, "col_offset": 22, "nodeName": "os", "type": "module"}, {"lineNumber": 10, "col_offset": 12, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 34, "col_offset": 36, "nodeName": "crosswalk", "type": "Any"}, {"lineNumber": 35, "col_offset": 36, "nodeName": "crosswalk", "type": "Any"}]