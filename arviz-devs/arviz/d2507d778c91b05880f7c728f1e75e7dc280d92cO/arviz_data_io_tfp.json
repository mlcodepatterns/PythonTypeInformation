[{"lineNumber": 27, "col_offset": 8, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 27, "col_offset": 25, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 36, "col_offset": 24, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "feed_dict", "type": "Any"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "feed_dict", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "posterior_predictive_samples", "type": "Any"}, {"lineNumber": 38, "col_offset": 44, "nodeName": "posterior_predictive_samples", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "posterior_predictive_size", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "posterior_predictive_size", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "observed", "type": "Any"}, {"lineNumber": 40, "col_offset": 24, "nodeName": "observed", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "coords", "type": "Any"}, {"lineNumber": 41, "col_offset": 22, "nodeName": "coords", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "dims", "type": "Any"}, {"lineNumber": 42, "col_offset": 20, "nodeName": "dims", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "tfp", "type": "Any"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "tfp", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "tf", "type": "Any"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "tf", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "ed", "type": "Any"}, {"lineNumber": 50, "col_offset": 18, "nodeName": "ed", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "data", "type": "Dict[Any, Any]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "observed_data", "type": "Dict[str, Any]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "name", "type": "str"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "val_dims", "type": "Optional[Any]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "vals", "type": "Any"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "interceptor", "type": "Callable[..., Any]"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "posterior_preds", "type": "List[List[Any]]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "sample_size", "type": "Any"}, {"lineNumber": 109, "col_offset": 12, "nodeName": "i", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "data", "type": "Dict[str, Any]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "log_likelihood", "type": "List[Any]"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "sample_size", "type": "Any"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "data", "type": "Dict[str, Any]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "dims", "type": "Dict[str, Optional[Any]]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 29, "col_offset": 11, "nodeName": "var_names", "type": "Any"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "var_names", "type": "List[str]"}, {"lineNumber": 31, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "var_names", "type": "Any"}, {"lineNumber": 34, "col_offset": 29, "nodeName": "var_names", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "tf", "type": "Any"}, {"lineNumber": 56, "col_offset": 22, "nodeName": "tf", "type": "Any"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 61, "col_offset": 15, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 61, "col_offset": 27, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "var_names", "type": "Union[List[str], Any]"}, {"lineNumber": 63, "col_offset": 15, "nodeName": "dict_to_dataset", "type": "Any"}, {"lineNumber": 63, "col_offset": 31, "nodeName": "data", "type": "Dict[Any, Any]"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "observed", "type": "Any"}, {"lineNumber": 71, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 71, "col_offset": 22, "nodeName": "observed", "type": "Any"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "Tensor", "type": "Any"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "vals", "type": "Any"}, {"lineNumber": 75, "col_offset": 19, "nodeName": "observed", "type": "Any"}, {"lineNumber": 77, "col_offset": 11, "nodeName": "dims", "type": "Any"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "dims", "type": "Dict[nothing, nothing]"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "dims", "type": "Any"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "dims", "type": "Any"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "get", "type": "Union[Callable, Any]"}, {"lineNumber": 83, "col_offset": 28, "nodeName": "name", "type": "str"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "one_de", "type": "Any"}, {"lineNumber": 84, "col_offset": 28, "nodeName": "vals", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "val_dims", "type": "Any"}, {"lineNumber": 85, "col_offset": 18, "nodeName": "coords", "type": "Any"}, {"lineNumber": 85, "col_offset": 27, "nodeName": "generate_dims_coords", "type": "Any"}, {"lineNumber": 85, "col_offset": 48, "nodeName": "shape", "type": "Any"}, {"lineNumber": 85, "col_offset": 60, "nodeName": "name", "type": "str"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "observed_data", "type": "Dict[str, Any]"}, {"lineNumber": 88, "col_offset": 30, "nodeName": "DataArray", "type": "Any"}, {"lineNumber": 88, "col_offset": 43, "nodeName": "vals", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "name", "type": "Any"}, {"lineNumber": 103, "col_offset": 11, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "shape", "type": "Any"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "arange", "type": "Any"}, {"lineNumber": 109, "col_offset": 30, "nodeName": "sample_size", "type": "Any"}, {"lineNumber": 110, "col_offset": 12, "nodeName": "variables", "type": "Dict[Any, Any]"}, {"lineNumber": 123, "col_offset": 34, "nodeName": "sess", "type": "Any"}, {"lineNumber": 125, "col_offset": 15, "nodeName": "dict_to_dataset", "type": "Any"}, {"lineNumber": 125, "col_offset": 31, "nodeName": "data", "type": "Dict[str, Any]"}, {"lineNumber": 133, "col_offset": 22, "nodeName": "shape", "type": "Any"}, {"lineNumber": 135, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 135, "col_offset": 23, "nodeName": "sample_size", "type": "Any"}, {"lineNumber": 136, "col_offset": 12, "nodeName": "variables", "type": "Dict[Any, Any]"}, {"lineNumber": 144, "col_offset": 11, "nodeName": "dims", "type": "Any"}, {"lineNumber": 145, "col_offset": 12, "nodeName": "coord_name", "type": "Any"}, {"lineNumber": 147, "col_offset": 12, "nodeName": "coord_name", "type": "None"}, {"lineNumber": 148, "col_offset": 34, "nodeName": "coord_name", "type": "Optional[Any]"}, {"lineNumber": 150, "col_offset": 34, "nodeName": "sess", "type": "Any"}, {"lineNumber": 154, "col_offset": 15, "nodeName": "dict_to_dataset", "type": "Any"}, {"lineNumber": 154, "col_offset": 31, "nodeName": "data", "type": "Dict[str, Any]"}, {"lineNumber": 163, "col_offset": 15, "nodeName": "InferenceData", "type": "Any"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 31, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "disable_v2_behavior", "type": "Any"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 61, "col_offset": 37, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "data", "type": "Dict[Any, Any]"}, {"lineNumber": 62, "col_offset": 29, "nodeName": "expand_dims", "type": "Any"}, {"lineNumber": 63, "col_offset": 45, "nodeName": "tfp", "type": "Any"}, {"lineNumber": 63, "col_offset": 62, "nodeName": "coords", "type": "Any"}, {"lineNumber": 63, "col_offset": 80, "nodeName": "dims", "type": "Any"}, {"lineNumber": 67, "col_offset": 11, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 71, "col_offset": 22, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "tf", "type": "Any"}, {"lineNumber": 72, "col_offset": 38, "nodeName": "sess", "type": "Any"}, {"lineNumber": 73, "col_offset": 16, "nodeName": "vals", "type": "Any"}, {"lineNumber": 75, "col_offset": 19, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 77, "col_offset": 11, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "dims", "type": "Union[Dict[nothing, nothing], Any]"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "utils", "type": "Any"}, {"lineNumber": 85, "col_offset": 48, "nodeName": "vals", "type": "Any"}, {"lineNumber": 85, "col_offset": 71, "nodeName": "val_dims", "type": "Optional[Any]"}, {"lineNumber": 85, "col_offset": 88, "nodeName": "coords", "type": "Any"}, {"lineNumber": 88, "col_offset": 22, "nodeName": "name", "type": "str"}, {"lineNumber": 88, "col_offset": 30, "nodeName": "xr", "type": "Any"}, {"lineNumber": 88, "col_offset": 54, "nodeName": "val_dims", "type": "Any"}, {"lineNumber": 88, "col_offset": 71, "nodeName": "coords", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "xr", "type": "Any"}, {"lineNumber": 89, "col_offset": 36, "nodeName": "observed_data", "type": "Dict[str, Any]"}, {"lineNumber": 94, "col_offset": 19, "nodeName": "pop", "type": "Callable"}, {"lineNumber": 95, "col_offset": 15, "nodeName": "name", "type": "Any"}, {"lineNumber": 95, "col_offset": 23, "nodeName": "variables", "type": "Any"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "rv_constructor", "type": "Any"}, {"lineNumber": 103, "col_offset": 11, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 109, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 109, "col_offset": 43, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 111, "col_offset": 16, "nodeName": "var_i", "type": "int"}, {"lineNumber": 111, "col_offset": 23, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 111, "col_offset": 35, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 111, "col_offset": 45, "nodeName": "var_names", "type": "Union[List[str], Any]"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "Session", "type": "Any"}, {"lineNumber": 124, "col_offset": 12, "nodeName": "data", "type": "Dict[str, Any]"}, {"lineNumber": 124, "col_offset": 26, "nodeName": "expand_dims", "type": "Any"}, {"lineNumber": 125, "col_offset": 45, "nodeName": "tfp", "type": "Any"}, {"lineNumber": 125, "col_offset": 62, "nodeName": "coords", "type": "Any"}, {"lineNumber": 125, "col_offset": 80, "nodeName": "dims", "type": "Any"}, {"lineNumber": 129, "col_offset": 11, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 129, "col_offset": 36, "nodeName": "observed", "type": "Any"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "var_i", "type": "int"}, {"lineNumber": 137, "col_offset": 23, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 137, "col_offset": 35, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 137, "col_offset": 45, "nodeName": "var_names", "type": "Union[List[str], Any]"}, {"lineNumber": 144, "col_offset": 11, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "get", "type": "Any"}, {"lineNumber": 150, "col_offset": 13, "nodeName": "Session", "type": "Any"}, {"lineNumber": 151, "col_offset": 37, "nodeName": "expand_dims", "type": "Any"}, {"lineNumber": 154, "col_offset": 45, "nodeName": "tfp", "type": "Any"}, {"lineNumber": 154, "col_offset": 62, "nodeName": "coords", "type": "Any"}, {"lineNumber": 154, "col_offset": 80, "nodeName": "dims", "type": "Dict[str, Optional[Any]]"}, {"lineNumber": 186, "col_offset": 11, "nodeName": "TfpConverter", "type": "Type[TfpConverter]"}, {"lineNumber": 31, "col_offset": 30, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 31, "col_offset": 34, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 32, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "__version__", "type": "Any"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "tf", "type": "Any"}, {"lineNumber": 62, "col_offset": 17, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 62, "col_offset": 29, "nodeName": "utils", "type": "Any"}, {"lineNumber": 62, "col_offset": 47, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 63, "col_offset": 45, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 63, "col_offset": 62, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 63, "col_offset": 80, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 71, "col_offset": 37, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 72, "col_offset": 17, "nodeName": "Session", "type": "Any"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "run", "type": "Any"}, {"lineNumber": 73, "col_offset": 32, "nodeName": "observed", "type": "Any"}, {"lineNumber": 85, "col_offset": 88, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 89, "col_offset": 57, "nodeName": "make_attrs", "type": "Any"}, {"lineNumber": 94, "col_offset": 19, "nodeName": "rv_kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "rv_kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 37, "nodeName": "variables", "type": "Any"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "rv_args", "type": "Tuple[Any, ...]"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "rv_kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 109, "col_offset": 47, "nodeName": "sample_size", "type": "Any"}, {"lineNumber": 109, "col_offset": 61, "nodeName": "posterior_predictive_samples", "type": "Any"}, {"lineNumber": 111, "col_offset": 45, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 112, "col_offset": 16, "nodeName": "variables", "type": "Dict[Any, Any]"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "interception", "type": "Any"}, {"lineNumber": 115, "col_offset": 19, "nodeName": "posterior_predictive_size", "type": "Any"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 124, "col_offset": 26, "nodeName": "utils", "type": "Any"}, {"lineNumber": 124, "col_offset": 44, "nodeName": "run", "type": "Any"}, {"lineNumber": 124, "col_offset": 53, "nodeName": "posterior_preds", "type": "List[List[Any]]"}, {"lineNumber": 125, "col_offset": 45, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 125, "col_offset": 62, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 125, "col_offset": 80, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 129, "col_offset": 11, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 129, "col_offset": 36, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 133, "col_offset": 22, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 137, "col_offset": 45, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "variables", "type": "Dict[Any, Any]"}, {"lineNumber": 140, "col_offset": 17, "nodeName": "interception", "type": "Any"}, {"lineNumber": 141, "col_offset": 16, "nodeName": "append", "type": "Callable"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "dims", "type": "Any"}, {"lineNumber": 150, "col_offset": 13, "nodeName": "tf", "type": "Any"}, {"lineNumber": 151, "col_offset": 37, "nodeName": "utils", "type": "Any"}, {"lineNumber": 152, "col_offset": 16, "nodeName": "run", "type": "Any"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "log_likelihood", "type": "List[Any]"}, {"lineNumber": 154, "col_offset": 45, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 154, "col_offset": 62, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 187, "col_offset": 18, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 188, "col_offset": 18, "nodeName": "var_names", "type": "Any"}, {"lineNumber": 189, "col_offset": 17, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 190, "col_offset": 18, "nodeName": "feed_dict", "type": "Any"}, {"lineNumber": 191, "col_offset": 37, "nodeName": "posterior_predictive_samples", "type": "Any"}, {"lineNumber": 192, "col_offset": 34, "nodeName": "posterior_predictive_size", "type": "Any"}, {"lineNumber": 193, "col_offset": 17, "nodeName": "observed", "type": "Any"}, {"lineNumber": 194, "col_offset": 15, "nodeName": "coords", "type": "Any"}, {"lineNumber": 195, "col_offset": 13, "nodeName": "dims", "type": "Any"}, {"lineNumber": 32, "col_offset": 16, "nodeName": "var_names", "type": "List[str]"}, {"lineNumber": 32, "col_offset": 38, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 32, "col_offset": 55, "nodeName": "i", "type": "int"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "tf", "type": "Any"}, {"lineNumber": 62, "col_offset": 47, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 62, "col_offset": 62, "nodeName": "i", "type": "int"}, {"lineNumber": 72, "col_offset": 17, "nodeName": "tf", "type": "Any"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "sess", "type": "Any"}, {"lineNumber": 73, "col_offset": 32, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 73, "col_offset": 57, "nodeName": "feed_dict", "type": "Any"}, {"lineNumber": 89, "col_offset": 76, "nodeName": "tfp", "type": "Any"}, {"lineNumber": 96, "col_offset": 47, "nodeName": "name", "type": "Any"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 109, "col_offset": 61, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 112, "col_offset": 26, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 112, "col_offset": 38, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 112, "col_offset": 60, "nodeName": "i", "type": "Any"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "ed", "type": "Any"}, {"lineNumber": 114, "col_offset": 38, "nodeName": "_value_setter", "type": "Callable[[Any], Any]"}, {"lineNumber": 114, "col_offset": 57, "nodeName": "variables", "type": "Dict[Any, Any]"}, {"lineNumber": 115, "col_offset": 19, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 116, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 120, "col_offset": 20, "nodeName": "append", "type": "Callable"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 124, "col_offset": 44, "nodeName": "sess", "type": "Any"}, {"lineNumber": 124, "col_offset": 80, "nodeName": "feed_dict", "type": "Any"}, {"lineNumber": 133, "col_offset": 22, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 138, "col_offset": 26, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 138, "col_offset": 38, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 138, "col_offset": 60, "nodeName": "i", "type": "int"}, {"lineNumber": 140, "col_offset": 17, "nodeName": "ed", "type": "Any"}, {"lineNumber": 140, "col_offset": 38, "nodeName": "_value_setter", "type": "Callable[[Any], Any]"}, {"lineNumber": 140, "col_offset": 57, "nodeName": "variables", "type": "Dict[Any, Any]"}, {"lineNumber": 141, "col_offset": 16, "nodeName": "log_likelihood", "type": "List[Any]"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "log_prob", "type": "Any"}, {"lineNumber": 141, "col_offset": 77, "nodeName": "observed", "type": "Any"}, {"lineNumber": 145, "col_offset": 25, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 150, "col_offset": 13, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 152, "col_offset": 16, "nodeName": "sess", "type": "Any"}, {"lineNumber": 152, "col_offset": 51, "nodeName": "feed_dict", "type": "Any"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "posterior_to_xarray", "type": "Callable[[], Any]"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "sample_stats_to_xarray", "type": "Callable[[], Any]"}, {"lineNumber": 167, "col_offset": 40, "nodeName": "posterior_predictive_to_xarray", "type": "Callable[[], Any]"}, {"lineNumber": 168, "col_offset": 33, "nodeName": "observed_data_to_xarray", "type": "Callable[[], Any]"}, {"lineNumber": 32, "col_offset": 16, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 52, "col_offset": 15, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 72, "col_offset": 17, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 73, "col_offset": 57, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 89, "col_offset": 76, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 112, "col_offset": 38, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 112, "col_offset": 53, "nodeName": "var_i", "type": "int"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 114, "col_offset": 38, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 116, "col_offset": 20, "nodeName": "posterior_preds", "type": "List[List[Any]]"}, {"lineNumber": 120, "col_offset": 20, "nodeName": "posterior_preds", "type": "List[List[Any]]"}, {"lineNumber": 120, "col_offset": 43, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 124, "col_offset": 80, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 138, "col_offset": 38, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 138, "col_offset": 53, "nodeName": "var_i", "type": "int"}, {"lineNumber": 140, "col_offset": 17, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 140, "col_offset": 38, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "distribution", "type": "Any"}, {"lineNumber": 141, "col_offset": 77, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 152, "col_offset": 51, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 165, "col_offset": 29, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 167, "col_offset": 40, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 168, "col_offset": 33, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 117, "col_offset": 25, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 117, "col_offset": 45, "nodeName": "_", "type": "int"}, {"lineNumber": 120, "col_offset": 43, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 117, "col_offset": 25, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 117, "col_offset": 50, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 117, "col_offset": 56, "nodeName": "posterior_predictive_size", "type": "Any"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "model_fn", "type": "Any"}, {"lineNumber": 117, "col_offset": 56, "nodeName": "self", "type": "TfpConverter"}, {"lineNumber": 141, "col_offset": 39, "nodeName": "self", "type": "TfpConverter"}]