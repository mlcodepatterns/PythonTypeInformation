[{"lineNumber": 321, "col_offset": 5, "nodeName": "InferenceData", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "data_warmup", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 149, "col_offset": 4, "nodeName": "variables", "type": "Tuple[Optional[Union[str, Iterable[str]]], ...]"}, {"lineNumber": 121, "col_offset": 5, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 194, "col_offset": 4, "nodeName": "warmup_samples", "type": "Dict[str, Any]"}, {"lineNumber": 195, "col_offset": 4, "nodeName": "actual_samples", "type": "Dict[str, Any]"}, {"lineNumber": 174, "col_offset": 5, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 231, "col_offset": 4, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 244, "col_offset": 11, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 208, "col_offset": 5, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 267, "col_offset": 4, "nodeName": "variable_name_to_samples_map", "type": "Dict[Any, numpy.ndarray]"}, {"lineNumber": 272, "col_offset": 11, "nodeName": "variable_name_to_samples_map", "type": "Dict[Any, numpy.ndarray]"}, {"lineNumber": 249, "col_offset": 5, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 301, "col_offset": 4, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 310, "col_offset": 11, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 277, "col_offset": 5, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "prior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 49, "col_offset": 21, "nodeName": "prior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "coords", "type": "Any"}, {"lineNumber": 50, "col_offset": 22, "nodeName": "coords", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "dims", "type": "Any"}, {"lineNumber": 51, "col_offset": 20, "nodeName": "dims", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 53, "col_offset": 33, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "pyjags", "type": "Any"}, {"lineNumber": 57, "col_offset": 22, "nodeName": "pyjags", "type": "Any"}, {"lineNumber": 61, "col_offset": 9, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 78, "col_offset": 37, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 92, "col_offset": 42, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "idata_dict", "type": "Dict[str, Any]"}, {"lineNumber": 120, "col_offset": 23, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 139, "col_offset": 47, "nodeName": "OrderedDict", "type": "Type[collections.OrderedDict[Any, Any]]"}, {"lineNumber": 141, "col_offset": 7, "nodeName": "variables", "type": "Optional[Union[str, Iterable[str]]]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "variables", "type": "List[str]"}, {"lineNumber": 149, "col_offset": 16, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 149, "col_offset": 22, "nodeName": "variables", "type": "Optional[Union[List[Optional[Union[str, Iterable[str]]]], str, Iterable[str], List[str]]]"}, {"lineNumber": 151, "col_offset": 7, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "data", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 160, "col_offset": 11, "nodeName": "warmup", "type": "bool"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "data", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 167, "col_offset": 11, "nodeName": "data", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 167, "col_offset": 17, "nodeName": "data_warmup", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 121, "col_offset": 5, "nodeName": "tp", "type": "module"}, {"lineNumber": 191, "col_offset": 7, "nodeName": "variable_names", "type": "Optional[Tuple[str, ...]]"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "variable_names", "type": "Tuple[str, ...]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 197, "col_offset": 23, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 197, "col_offset": 33, "nodeName": "items", "type": "Callable"}, {"lineNumber": 202, "col_offset": 11, "nodeName": "warmup_samples", "type": "Dict[str, Any]"}, {"lineNumber": 202, "col_offset": 27, "nodeName": "actual_samples", "type": "Dict[str, Any]"}, {"lineNumber": 174, "col_offset": 5, "nodeName": "tp", "type": "module"}, {"lineNumber": 233, "col_offset": 7, "nodeName": "variable_names", "type": "Optional[Tuple[str, ...]]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "variable_names", "type": "Tuple[str, ...]"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 236, "col_offset": 23, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 236, "col_offset": 33, "nodeName": "items", "type": "Callable"}, {"lineNumber": 208, "col_offset": 5, "nodeName": "tp", "type": "module"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "key", "type": "Any"}, {"lineNumber": 269, "col_offset": 13, "nodeName": "value", "type": "Any"}, {"lineNumber": 269, "col_offset": 22, "nodeName": "items", "type": "Any"}, {"lineNumber": 249, "col_offset": 5, "nodeName": "tp", "type": "module"}, {"lineNumber": 303, "col_offset": 8, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 303, "col_offset": 23, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 303, "col_offset": 33, "nodeName": "items", "type": "Callable"}, {"lineNumber": 277, "col_offset": 5, "nodeName": "tp", "type": "module"}, {"lineNumber": 320, "col_offset": 23, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 29, "col_offset": 27, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "posterior_copy", "type": "Dict[Any, Any]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "posterior", "type": "Dict[Any, Any]"}, {"lineNumber": 45, "col_offset": 29, "nodeName": "posterior_copy", "type": "Dict[Any, Any]"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "posterior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 47, "col_offset": 29, "nodeName": "posterior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "log_likelihood", "type": "None"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 52, "col_offset": 84, "nodeName": "save_warmup", "type": "Optional[bool]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "data", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 62, "col_offset": 14, "nodeName": "data_warmup", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "get_draws", "type": "Callable[..., Tuple[Mapping[str, numpy.ndarray], Mapping[str, numpy.ndarray]]]"}, {"lineNumber": 61, "col_offset": 9, "nodeName": "tp", "type": "module"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "_pyjags_samples_to_xarray", "type": "Callable[[Mapping[str, numpy.ndarray]], Tuple[Any, Any]]"}, {"lineNumber": 83, "col_offset": 46, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 78, "col_offset": 37, "nodeName": "tp", "type": "module"}, {"lineNumber": 87, "col_offset": 11, "nodeName": "prior", "type": "Any"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "_pyjags_samples_to_xarray", "type": "Callable[[Mapping[str, numpy.ndarray]], Tuple[Any, Any]]"}, {"lineNumber": 90, "col_offset": 46, "nodeName": "prior", "type": "Any"}, {"lineNumber": 85, "col_offset": 33, "nodeName": "tp", "type": "module"}, {"lineNumber": 94, "col_offset": 11, "nodeName": "log_likelihood", "type": "Any"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "_pyjags_samples_to_xarray", "type": "Callable[[Mapping[str, numpy.ndarray]], Tuple[Any, Any]]"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "log_likelihood", "type": "Any"}, {"lineNumber": 92, "col_offset": 42, "nodeName": "tp", "type": "module"}, {"lineNumber": 103, "col_offset": 22, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 110, "col_offset": 27, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 113, "col_offset": 15, "nodeName": "InferenceData", "type": "Any"}, {"lineNumber": 142, "col_offset": 20, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 143, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 143, "col_offset": 20, "nodeName": "variables", "type": "Optional[Union[str, Iterable[str]]]"}, {"lineNumber": 143, "col_offset": 31, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "variables", "type": "List[Optional[Union[str, Iterable[str]]]]"}, {"lineNumber": 146, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 146, "col_offset": 22, "nodeName": "variables", "type": "Optional[Union[List[Optional[Union[str, Iterable[str]]]], str, Iterable[str], List[str]]]"}, {"lineNumber": 146, "col_offset": 33, "nodeName": "Iterable", "type": "Type[Iterable[Any]]"}, {"lineNumber": 147, "col_offset": 14, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 152, "col_offset": 9, "nodeName": "warmup_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "actual_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 152, "col_offset": 44, "nodeName": "_split_pyjags_dict_in_warmup_and_actual_samples", "type": "Callable[..., Tuple[Mapping[str, numpy.ndarray], Mapping[str, numpy.ndarray]]]"}, {"lineNumber": 158, "col_offset": 15, "nodeName": "_convert_pyjags_dict_to_arviz_dict", "type": "Callable[..., Mapping[str, numpy.ndarray]]"}, {"lineNumber": 161, "col_offset": 12, "nodeName": "data_warmup", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 165, "col_offset": 15, "nodeName": "_convert_pyjags_dict_to_arviz_dict", "type": "Callable[..., Mapping[str, numpy.ndarray]]"}, {"lineNumber": 173, "col_offset": 20, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 192, "col_offset": 25, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 197, "col_offset": 33, "nodeName": "pyjags_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 198, "col_offset": 11, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 198, "col_offset": 28, "nodeName": "variable_names", "type": "Optional[Tuple[str, ...]]"}, {"lineNumber": 207, "col_offset": 20, "nodeName": "Optional", "type": "Any"}, {"lineNumber": 234, "col_offset": 25, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 236, "col_offset": 33, "nodeName": "samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 237, "col_offset": 11, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 237, "col_offset": 28, "nodeName": "variable_names", "type": "Optional[Tuple[str, ...]]"}, {"lineNumber": 238, "col_offset": 40, "nodeName": "shape", "type": "Tuple[int, ...]"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 208, "col_offset": 21, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "variable_name_to_samples_map", "type": "Dict[Any, numpy.ndarray]"}, {"lineNumber": 270, "col_offset": 44, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 249, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 249, "col_offset": 21, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 276, "col_offset": 13, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 303, "col_offset": 33, "nodeName": "samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 304, "col_offset": 11, "nodeName": "ndim", "type": "Any"}, {"lineNumber": 305, "col_offset": 45, "nodeName": "shape", "type": "Tuple[int, ...]"}, {"lineNumber": 306, "col_offset": 12, "nodeName": "chains", "type": "Any"}, {"lineNumber": 308, "col_offset": 8, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 308, "col_offset": 54, "nodeName": "swapaxes", "type": "Any"}, {"lineNumber": 308, "col_offset": 66, "nodeName": "chains", "type": "Any"}, {"lineNumber": 277, "col_offset": 16, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 277, "col_offset": 21, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 33, "col_offset": 11, "nodeName": "log_likelihood", "type": "Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 33, "col_offset": 42, "nodeName": "posterior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 34, "col_offset": 29, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 34, "col_offset": 34, "nodeName": "posterior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 36, "col_offset": 26, "nodeName": "log_likelihood", "type": "Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 37, "col_offset": 16, "nodeName": "log_likelihood", "type": "List[Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]]"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 38, "col_offset": 26, "nodeName": "log_likelihood", "type": "Optional[Union[List[Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]], str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 39, "col_offset": 16, "nodeName": "log_likelihood", "type": "Dict[Any, Any]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 48, "col_offset": 12, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 52, "col_offset": 59, "nodeName": "save_warmup", "type": "Optional[bool]"}, {"lineNumber": 52, "col_offset": 27, "nodeName": "rcParams", "type": "Any"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 63, "col_offset": 27, "nodeName": "pyjags_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 64, "col_offset": 30, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 69, "col_offset": 12, "nodeName": "dict_to_dataset", "type": "Any"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "data", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "dict_to_dataset", "type": "Any"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "data_warmup", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 61, "col_offset": 18, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 61, "col_offset": 34, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 83, "col_offset": 46, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 78, "col_offset": 49, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 87, "col_offset": 11, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 90, "col_offset": 15, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 90, "col_offset": 46, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 85, "col_offset": 45, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 94, "col_offset": 11, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 92, "col_offset": 54, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 103, "col_offset": 22, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 103, "col_offset": 43, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 107, "col_offset": 25, "nodeName": "posterior_to_xarray", "type": "Callable[[], Optional[Tuple[Any, Any]]]"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "prior_to_xarray", "type": "Callable[[], Optional[Tuple[Any, Any]]]"}, {"lineNumber": 109, "col_offset": 30, "nodeName": "log_likelihood_to_xarray", "type": "Callable[[], Optional[Tuple[Any, Any]]]"}, {"lineNumber": 113, "col_offset": 31, "nodeName": "idata_dict", "type": "Dict[str, Any]"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 144, "col_offset": 21, "nodeName": "variables", "type": "Optional[Union[str, Iterable[str]]]"}, {"lineNumber": 153, "col_offset": 27, "nodeName": "pyjags_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 154, "col_offset": 30, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 155, "col_offset": 27, "nodeName": "variables", "type": "Tuple[Optional[Union[str, Iterable[str]]], ...]"}, {"lineNumber": 158, "col_offset": 58, "nodeName": "actual_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 158, "col_offset": 89, "nodeName": "variables", "type": "Tuple[Optional[Union[str, Iterable[str]]], ...]"}, {"lineNumber": 161, "col_offset": 26, "nodeName": "_convert_pyjags_dict_to_arviz_dict", "type": "Callable[..., Mapping[str, numpy.ndarray]]"}, {"lineNumber": 165, "col_offset": 58, "nodeName": "pyjags_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 165, "col_offset": 89, "nodeName": "variables", "type": "Tuple[Optional[Union[str, Iterable[str]]], ...]"}, {"lineNumber": 121, "col_offset": 14, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 121, "col_offset": 43, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 173, "col_offset": 20, "nodeName": "tp", "type": "module"}, {"lineNumber": 192, "col_offset": 31, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 199, "col_offset": 12, "nodeName": "warmup_samples", "type": "Dict[str, Any]"}, {"lineNumber": 199, "col_offset": 44, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 200, "col_offset": 12, "nodeName": "actual_samples", "type": "Dict[str, Any]"}, {"lineNumber": 200, "col_offset": 44, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 174, "col_offset": 14, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 174, "col_offset": 43, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 207, "col_offset": 20, "nodeName": "tp", "type": "module"}, {"lineNumber": 234, "col_offset": 31, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "parameter_dimension", "type": "int"}, {"lineNumber": 238, "col_offset": 33, "nodeName": "_", "type": "int"}, {"lineNumber": 238, "col_offset": 36, "nodeName": "_", "type": "int"}, {"lineNumber": 238, "col_offset": 40, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 239, "col_offset": 15, "nodeName": "parameter_dimension", "type": "int"}, {"lineNumber": 208, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 270, "col_offset": 37, "nodeName": "key", "type": "Any"}, {"lineNumber": 270, "col_offset": 44, "nodeName": "np", "type": "module"}, {"lineNumber": 270, "col_offset": 53, "nodeName": "value", "type": "Any"}, {"lineNumber": 249, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 276, "col_offset": 13, "nodeName": "tp", "type": "module"}, {"lineNumber": 304, "col_offset": 11, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 305, "col_offset": 12, "nodeName": "number_of_chains", "type": "int"}, {"lineNumber": 305, "col_offset": 30, "nodeName": "chain_length", "type": "int"}, {"lineNumber": 305, "col_offset": 45, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 306, "col_offset": 21, "nodeName": "reshape", "type": "Any"}, {"lineNumber": 308, "col_offset": 37, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 308, "col_offset": 54, "nodeName": "np", "type": "module"}, {"lineNumber": 277, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 366, "col_offset": 11, "nodeName": "PyJAGSConverter", "type": "Type[PyJAGSConverter]"}, {"lineNumber": 37, "col_offset": 34, "nodeName": "log_likelihood", "type": "Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 38, "col_offset": 43, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 38, "col_offset": 49, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 39, "col_offset": 34, "nodeName": "name", "type": "Any"}, {"lineNumber": 39, "col_offset": 40, "nodeName": "name", "type": "Any"}, {"lineNumber": 60, "col_offset": 30, "nodeName": "tp", "type": "module"}, {"lineNumber": 64, "col_offset": 30, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 65, "col_offset": 19, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 69, "col_offset": 42, "nodeName": "pyjags", "type": "Any"}, {"lineNumber": 69, "col_offset": 62, "nodeName": "coords", "type": "Any"}, {"lineNumber": 69, "col_offset": 80, "nodeName": "dims", "type": "Any"}, {"lineNumber": 72, "col_offset": 24, "nodeName": "pyjags", "type": "Any"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "coords", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "dims", "type": "Any"}, {"lineNumber": 61, "col_offset": 18, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 61, "col_offset": 34, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 78, "col_offset": 49, "nodeName": "tp", "type": "module"}, {"lineNumber": 85, "col_offset": 45, "nodeName": "tp", "type": "module"}, {"lineNumber": 92, "col_offset": 54, "nodeName": "tp", "type": "module"}, {"lineNumber": 103, "col_offset": 43, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 107, "col_offset": 25, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 109, "col_offset": 30, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "pyjags_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 162, "col_offset": 24, "nodeName": "warmup_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 162, "col_offset": 55, "nodeName": "variables", "type": "Tuple[Optional[Union[str, Iterable[str]]], ...]"}, {"lineNumber": 121, "col_offset": 14, "nodeName": "tp", "type": "module"}, {"lineNumber": 121, "col_offset": 43, "nodeName": "tp", "type": "module"}, {"lineNumber": 173, "col_offset": 32, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 192, "col_offset": 31, "nodeName": "pyjags_samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 199, "col_offset": 27, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 200, "col_offset": 27, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 174, "col_offset": 14, "nodeName": "tp", "type": "module"}, {"lineNumber": 174, "col_offset": 43, "nodeName": "tp", "type": "module"}, {"lineNumber": 207, "col_offset": 32, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 234, "col_offset": 31, "nodeName": "samples", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 240, "col_offset": 16, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 240, "col_offset": 62, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 242, "col_offset": 16, "nodeName": "variable_name_to_samples_map", "type": "Dict[str, Any]"}, {"lineNumber": 242, "col_offset": 62, "nodeName": "swapaxes", "type": "Any"}, {"lineNumber": 242, "col_offset": 74, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 269, "col_offset": 22, "nodeName": "to_dict", "type": "Any"}, {"lineNumber": 276, "col_offset": 24, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 306, "col_offset": 21, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 306, "col_offset": 37, "nodeName": "number_of_chains", "type": "int"}, {"lineNumber": 306, "col_offset": 55, "nodeName": "chain_length", "type": "int"}, {"lineNumber": 367, "col_offset": 18, "nodeName": "posterior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 368, "col_offset": 14, "nodeName": "prior", "type": "Optional[Mapping[str, numpy.ndarray]]"}, {"lineNumber": 369, "col_offset": 23, "nodeName": "log_likelihood", "type": "Optional[Mapping[str, str]]"}, {"lineNumber": 370, "col_offset": 13, "nodeName": "dims", "type": "Any"}, {"lineNumber": 371, "col_offset": 15, "nodeName": "coords", "type": "Any"}, {"lineNumber": 372, "col_offset": 20, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 373, "col_offset": 26, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 39, "col_offset": 49, "nodeName": "name", "type": "Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 39, "col_offset": 57, "nodeName": "log_likelihood", "type": "Optional[Union[List[Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]], str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 43, "col_offset": 20, "nodeName": "obs_var_name", "type": "Any"}, {"lineNumber": 43, "col_offset": 34, "nodeName": "log_like_name", "type": "Any"}, {"lineNumber": 43, "col_offset": 51, "nodeName": "items", "type": "Callable"}, {"lineNumber": 60, "col_offset": 41, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 60, "col_offset": 46, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 69, "col_offset": 42, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 69, "col_offset": 62, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 69, "col_offset": 80, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 72, "col_offset": 24, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 73, "col_offset": 23, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "self", "type": "PyJAGSConverter"}, {"lineNumber": 78, "col_offset": 58, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 78, "col_offset": 74, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 85, "col_offset": 54, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 85, "col_offset": 70, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 92, "col_offset": 63, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 92, "col_offset": 79, "nodeName": "Dataset", "type": "Any"}, {"lineNumber": 121, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 121, "col_offset": 30, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 121, "col_offset": 54, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 121, "col_offset": 59, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 173, "col_offset": 32, "nodeName": "tp", "type": "module"}, {"lineNumber": 199, "col_offset": 55, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 200, "col_offset": 54, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 174, "col_offset": 30, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 174, "col_offset": 54, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 174, "col_offset": 59, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 207, "col_offset": 32, "nodeName": "tp", "type": "module"}, {"lineNumber": 240, "col_offset": 45, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 242, "col_offset": 45, "nodeName": "variable_name", "type": "str"}, {"lineNumber": 242, "col_offset": 62, "nodeName": "np", "type": "module"}, {"lineNumber": 269, "col_offset": 22, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 43, "col_offset": 51, "nodeName": "log_likelihood", "type": "Optional[Union[Dict[Any, Any], List[Optional[Union[str, List[str], Tuple[str, ...], Mapping[str, str]]]], str, List[str], Tuple[str, ...], Mapping[str, str]]]"}, {"lineNumber": 60, "col_offset": 46, "nodeName": "np", "type": "module"}, {"lineNumber": 78, "col_offset": 58, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 78, "col_offset": 74, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 85, "col_offset": 54, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 85, "col_offset": 70, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 92, "col_offset": 63, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 92, "col_offset": 79, "nodeName": "xarray", "type": "Any"}, {"lineNumber": 121, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 121, "col_offset": 59, "nodeName": "np", "type": "module"}, {"lineNumber": 173, "col_offset": 41, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 174, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 174, "col_offset": 59, "nodeName": "np", "type": "module"}, {"lineNumber": 207, "col_offset": 41, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 240, "col_offset": 62, "nodeName": "chains", "type": "numpy.ndarray"}, {"lineNumber": 269, "col_offset": 22, "nodeName": "idata", "type": "Any"}]