[{"lineNumber": 121, "col_offset": 0, "nodeName": "test_dict_to_dataset", "type": "Callable[[], Any]"}, {"lineNumber": 137, "col_offset": 0, "nodeName": "test_convert_to_dataset_idempotent", "type": "Callable[[], Any]"}, {"lineNumber": 143, "col_offset": 0, "nodeName": "test_convert_to_inference_data_idempotent", "type": "Callable[[], Any]"}, {"lineNumber": 149, "col_offset": 0, "nodeName": "test_convert_to_inference_data_from_file", "type": "Callable[[Any], Any]"}, {"lineNumber": 157, "col_offset": 0, "nodeName": "test_convert_to_inference_data_bad", "type": "Callable[[], Any]"}, {"lineNumber": 162, "col_offset": 0, "nodeName": "test_convert_to_dataset_bad", "type": "Callable[[Any], Any]"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "BaseArvizTest", "type": "Any"}, {"lineNumber": 201, "col_offset": 26, "nodeName": "CheckNetCDFUtils", "type": "Type[CheckNetCDFUtils]"}, {"lineNumber": 215, "col_offset": 27, "nodeName": "CheckNetCDFUtils", "type": "Type[CheckNetCDFUtils]"}, {"lineNumber": 249, "col_offset": 28, "nodeName": "CheckNetCDFUtils", "type": "Type[CheckNetCDFUtils]"}, {"lineNumber": 269, "col_offset": 27, "nodeName": "CheckNetCDFUtils", "type": "Type[CheckNetCDFUtils]"}, {"lineNumber": 138, "col_offset": 4, "nodeName": "first", "type": "Any"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "second", "type": "Any"}, {"lineNumber": 144, "col_offset": 4, "nodeName": "first", "type": "Any"}, {"lineNumber": 145, "col_offset": 4, "nodeName": "second", "type": "Any"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "first", "type": "Any"}, {"lineNumber": 151, "col_offset": 4, "nodeName": "filename", "type": "str"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "second", "type": "Any"}, {"lineNumber": 163, "col_offset": 4, "nodeName": "first", "type": "Any"}, {"lineNumber": 164, "col_offset": 4, "nodeName": "filename", "type": "str"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "size", "type": "int"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "coords", "type": "Dict[str, Any]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "dims", "type": "Dict[str, List[str]]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "dims", "type": "Dict[str, List[Optional[str]]]"}, {"lineNumber": 126, "col_offset": 14, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 126, "col_offset": 33, "nodeName": "datadict", "type": "Dict[str, Any]"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 139, "col_offset": 13, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 139, "col_offset": 32, "nodeName": "first", "type": "Any"}, {"lineNumber": 140, "col_offset": 11, "nodeName": "equals", "type": "Any"}, {"lineNumber": 140, "col_offset": 24, "nodeName": "second", "type": "Any"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 145, "col_offset": 13, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 145, "col_offset": 39, "nodeName": "first", "type": "Any"}, {"lineNumber": 146, "col_offset": 11, "nodeName": "equals", "type": "Any"}, {"lineNumber": 146, "col_offset": 28, "nodeName": "foo", "type": "Any"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 151, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "to_netcdf", "type": "Any"}, {"lineNumber": 152, "col_offset": 20, "nodeName": "filename", "type": "str"}, {"lineNumber": 153, "col_offset": 13, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 153, "col_offset": 39, "nodeName": "filename", "type": "str"}, {"lineNumber": 154, "col_offset": 11, "nodeName": "equals", "type": "Any"}, {"lineNumber": 154, "col_offset": 28, "nodeName": "foo", "type": "Any"}, {"lineNumber": 163, "col_offset": 12, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 165, "col_offset": 4, "nodeName": "to_netcdf", "type": "Any"}, {"lineNumber": 165, "col_offset": 20, "nodeName": "filename", "type": "str"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 209, "col_offset": 8, "nodeName": "stan_dict", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "obj", "type": "Dict[Any, Any]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "data", "type": "Any"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 32, "col_offset": 18, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 39, "col_offset": 42, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 44, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 44, "col_offset": 23, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 51, "col_offset": 53, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 65, "col_offset": 18, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 65, "col_offset": 37, "nodeName": "datadict", "type": "Dict[str, Any]"}, {"lineNumber": 76, "col_offset": 18, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 76, "col_offset": 37, "nodeName": "datadict", "type": "Dict[str, Any]"}, {"lineNumber": 93, "col_offset": 18, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 37, "nodeName": "datadict", "type": "Dict[str, Any]"}, {"lineNumber": 110, "col_offset": 18, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 110, "col_offset": 37, "nodeName": "datadict", "type": "Dict[str, Any]"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "randn", "type": "Any"}, {"lineNumber": 124, "col_offset": 13, "nodeName": "randn", "type": "Any"}, {"lineNumber": 129, "col_offset": 11, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 129, "col_offset": 15, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 130, "col_offset": 11, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 130, "col_offset": 15, "nodeName": "coords", "type": "Any"}, {"lineNumber": 132, "col_offset": 11, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "coords", "type": "Any"}, {"lineNumber": 133, "col_offset": 11, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 133, "col_offset": 15, "nodeName": "coords", "type": "Any"}, {"lineNumber": 138, "col_offset": 31, "nodeName": "randn", "type": "Any"}, {"lineNumber": 140, "col_offset": 11, "nodeName": "first", "type": "Any"}, {"lineNumber": 144, "col_offset": 38, "nodeName": "randn", "type": "Any"}, {"lineNumber": 146, "col_offset": 11, "nodeName": "foo", "type": "Any"}, {"lineNumber": 146, "col_offset": 28, "nodeName": "second", "type": "Any"}, {"lineNumber": 150, "col_offset": 38, "nodeName": "randn", "type": "Any"}, {"lineNumber": 151, "col_offset": 19, "nodeName": "join", "type": "Any"}, {"lineNumber": 152, "col_offset": 4, "nodeName": "first", "type": "Any"}, {"lineNumber": 154, "col_offset": 11, "nodeName": "foo", "type": "Any"}, {"lineNumber": 154, "col_offset": 28, "nodeName": "second", "type": "Any"}, {"lineNumber": 158, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 158, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 163, "col_offset": 38, "nodeName": "randn", "type": "Any"}, {"lineNumber": 164, "col_offset": 19, "nodeName": "join", "type": "Any"}, {"lineNumber": 165, "col_offset": 4, "nodeName": "first", "type": "Any"}, {"lineNumber": 166, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 166, "col_offset": 23, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 167, "col_offset": 27, "nodeName": "filename", "type": "str"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "get_inference_data", "type": "Callable[[], Any]"}, {"lineNumber": 179, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 179, "col_offset": 23, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "check_var_names_coords_dims", "type": "Callable[[Any], Any]"}, {"lineNumber": 180, "col_offset": 41, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 183, "col_offset": 15, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 183, "col_offset": 34, "nodeName": "obj", "type": "Any"}, {"lineNumber": 187, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 188, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 190, "col_offset": 15, "nodeName": "shape", "type": "Any"}, {"lineNumber": 193, "col_offset": 15, "nodeName": "convert_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "obj", "type": "Any"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 206, "col_offset": 19, "nodeName": "eight_schools_params", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "draws", "type": "int"}, {"lineNumber": 207, "col_offset": 19, "nodeName": "chains", "type": "int"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 208, "col_offset": 11, "nodeName": "stan_fit", "type": "Any"}, {"lineNumber": 209, "col_offset": 20, "nodeName": "extract", "type": "Any"}, {"lineNumber": 209, "col_offset": 37, "nodeName": "model_pars", "type": "Any"}, {"lineNumber": 210, "col_offset": 8, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 211, "col_offset": 12, "nodeName": "name", "type": "Any"}, {"lineNumber": 211, "col_offset": 18, "nodeName": "vals", "type": "Any"}, {"lineNumber": 211, "col_offset": 26, "nodeName": "items", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 220, "col_offset": 19, "nodeName": "eight_schools_params", "type": "Any"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "draws", "type": "int"}, {"lineNumber": 221, "col_offset": 19, "nodeName": "chains", "type": "int"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 222, "col_offset": 19, "nodeName": "obj", "type": "Any"}, {"lineNumber": 225, "col_offset": 13, "nodeName": "model", "type": "Any"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "prior", "type": "Any"}, {"lineNumber": 227, "col_offset": 12, "nodeName": "posterior_predictive", "type": "Any"}, {"lineNumber": 229, "col_offset": 15, "nodeName": "pymc3_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 238, "col_offset": 25, "nodeName": "get_inference_data", "type": "Callable[[], Any]"}, {"lineNumber": 239, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 239, "col_offset": 23, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 242, "col_offset": 25, "nodeName": "get_inference_data", "type": "Callable[[], Any]"}, {"lineNumber": 243, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 243, "col_offset": 23, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 246, "col_offset": 25, "nodeName": "get_inference_data", "type": "Callable[[], Any]"}, {"lineNumber": 247, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 247, "col_offset": 23, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 254, "col_offset": 19, "nodeName": "eight_schools_params", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "draws", "type": "int"}, {"lineNumber": 255, "col_offset": 19, "nodeName": "chains", "type": "int"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 256, "col_offset": 19, "nodeName": "obj", "type": "Any"}, {"lineNumber": 259, "col_offset": 15, "nodeName": "pystan_to_inference_data", "type": "Callable[..., Any]"}, {"lineNumber": 265, "col_offset": 25, "nodeName": "get_inference_data", "type": "Callable[[], Any]"}, {"lineNumber": 266, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 266, "col_offset": 23, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 274, "col_offset": 19, "nodeName": "eight_schools_params", "type": "Any"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "draws", "type": "int"}, {"lineNumber": 275, "col_offset": 19, "nodeName": "chains", "type": "int"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "model", "type": "Any"}, {"lineNumber": 276, "col_offset": 19, "nodeName": "obj", "type": "Any"}, {"lineNumber": 18, "col_offset": 37, "nodeName": "randn", "type": "Any"}, {"lineNumber": 18, "col_offset": 53, "nodeName": "size", "type": "int"}, {"lineNumber": 19, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 19, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 21, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 21, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "chain", "type": "Any"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "draw", "type": "Any"}, {"lineNumber": 23, "col_offset": 38, "nodeName": "size", "type": "int"}, {"lineNumber": 27, "col_offset": 13, "nodeName": "warns", "type": "Any"}, {"lineNumber": 27, "col_offset": 26, "nodeName": "SyntaxWarning", "type": "Type[SyntaxWarning]"}, {"lineNumber": 28, "col_offset": 12, "nodeName": "convert_to_dataset", "type": "Callable[..., Any]"}, {"lineNumber": 32, "col_offset": 37, "nodeName": "randn", "type": "Any"}, {"lineNumber": 33, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 34, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 36, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 36, "col_offset": 38, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "chain", "type": "Any"}, {"lineNumber": 37, "col_offset": 38, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "draw", "type": "Any"}, {"lineNumber": 38, "col_offset": 37, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 43, "col_offset": 51, "nodeName": "randn", "type": "Any"}, {"lineNumber": 45, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 46, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 46, "col_offset": 24, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 48, "col_offset": 49, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 48, "col_offset": 53, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "chain", "type": "Any"}, {"lineNumber": 49, "col_offset": 49, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "draw", "type": "Any"}, {"lineNumber": 50, "col_offset": 48, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 57, "col_offset": 17, "nodeName": "randn", "type": "Any"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "randn", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "randn", "type": "Any"}, {"lineNumber": 61, "col_offset": 30, "nodeName": "arange", "type": "Any"}, {"lineNumber": 61, "col_offset": 51, "nodeName": "arange", "type": "Any"}, {"lineNumber": 61, "col_offset": 72, "nodeName": "arange", "type": "Any"}, {"lineNumber": 65, "col_offset": 37, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 66, "col_offset": 44, "nodeName": "coords", "type": "Dict[str, Any]"}, {"lineNumber": 67, "col_offset": 42, "nodeName": "dims", "type": "Dict[str, List[str]]"}, {"lineNumber": 68, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 68, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 69, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 69, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 71, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 72, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 73, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 76, "col_offset": 37, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 78, "col_offset": 42, "nodeName": "dims", "type": "Dict[str, List[str]]"}, {"lineNumber": 79, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 79, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 80, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 82, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 84, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 89, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 90, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 91, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 93, "col_offset": 37, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 94, "col_offset": 44, "nodeName": "coords", "type": "Dict[str, Any]"}, {"lineNumber": 96, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 97, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 99, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 100, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 100, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 106, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 107, "col_offset": 19, "nodeName": "arange", "type": "Any"}, {"lineNumber": 108, "col_offset": 24, "nodeName": "arange", "type": "Any"}, {"lineNumber": 110, "col_offset": 37, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 111, "col_offset": 44, "nodeName": "coords", "type": "Dict[str, Any]"}, {"lineNumber": 112, "col_offset": 42, "nodeName": "dims", "type": "Dict[str, List[Optional[str]]]"}, {"lineNumber": 113, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 113, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 114, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 114, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 116, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 116, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 117, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 118, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 118, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 124, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 129, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 130, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "a", "type": "Any"}, {"lineNumber": 133, "col_offset": 15, "nodeName": "b", "type": "Any"}, {"lineNumber": 138, "col_offset": 31, "nodeName": "random", "type": "Any"}, {"lineNumber": 144, "col_offset": 38, "nodeName": "random", "type": "Any"}, {"lineNumber": 146, "col_offset": 11, "nodeName": "first", "type": "Any"}, {"lineNumber": 150, "col_offset": 38, "nodeName": "random", "type": "Any"}, {"lineNumber": 151, "col_offset": 19, "nodeName": "tmpdir", "type": "Any"}, {"lineNumber": 154, "col_offset": 11, "nodeName": "first", "type": "Any"}, {"lineNumber": 158, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 163, "col_offset": 38, "nodeName": "random", "type": "Any"}, {"lineNumber": 164, "col_offset": 19, "nodeName": "tmpdir", "type": "Any"}, {"lineNumber": 166, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 173, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 173, "col_offset": 19, "nodeName": "data_vars", "type": "Any"}, {"lineNumber": 175, "col_offset": 15, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 175, "col_offset": 19, "nodeName": "coords", "type": "Any"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 180, "col_offset": 41, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 183, "col_offset": 34, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 187, "col_offset": 15, "nodeName": "draw", "type": "Any"}, {"lineNumber": 187, "col_offset": 35, "nodeName": "draws", "type": "Any"}, {"lineNumber": 188, "col_offset": 15, "nodeName": "chain", "type": "Any"}, {"lineNumber": 188, "col_offset": 36, "nodeName": "chains", "type": "Any"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "school", "type": "Any"}, {"lineNumber": 190, "col_offset": 15, "nodeName": "theta", "type": "Any"}, {"lineNumber": 190, "col_offset": 36, "nodeName": "chains", "type": "Any"}, {"lineNumber": 190, "col_offset": 49, "nodeName": "draws", "type": "Any"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 207, "col_offset": 19, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 208, "col_offset": 22, "nodeName": "load_cached_models", "type": "Any"}, {"lineNumber": 208, "col_offset": 41, "nodeName": "draws", "type": "int"}, {"lineNumber": 208, "col_offset": 52, "nodeName": "chains", "type": "int"}, {"lineNumber": 209, "col_offset": 20, "nodeName": "stan_fit", "type": "Any"}, {"lineNumber": 209, "col_offset": 37, "nodeName": "stan_fit", "type": "Any"}, {"lineNumber": 211, "col_offset": 26, "nodeName": "stan_dict", "type": "Any"}, {"lineNumber": 212, "col_offset": 12, "nodeName": "obj", "type": "Dict[Any, Any]"}, {"lineNumber": 212, "col_offset": 28, "nodeName": "swapaxes", "type": "Any"}, {"lineNumber": 212, "col_offset": 40, "nodeName": "vals", "type": "Any"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 221, "col_offset": 19, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 222, "col_offset": 19, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 222, "col_offset": 29, "nodeName": "load_cached_models", "type": "Any"}, {"lineNumber": 222, "col_offset": 48, "nodeName": "draws", "type": "int"}, {"lineNumber": 222, "col_offset": 59, "nodeName": "chains", "type": "int"}, {"lineNumber": 225, "col_offset": 13, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 226, "col_offset": 20, "nodeName": "sample_prior_predictive", "type": "Any"}, {"lineNumber": 227, "col_offset": 35, "nodeName": "sample_posterior_predictive", "type": "Any"}, {"lineNumber": 227, "col_offset": 66, "nodeName": "obj", "type": "Any"}, {"lineNumber": 230, "col_offset": 18, "nodeName": "obj", "type": "Any"}, {"lineNumber": 231, "col_offset": 18, "nodeName": "prior", "type": "Any"}, {"lineNumber": 232, "col_offset": 33, "nodeName": "posterior_predictive", "type": "Any"}, {"lineNumber": 238, "col_offset": 25, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 242, "col_offset": 25, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 246, "col_offset": 25, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 255, "col_offset": 19, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 256, "col_offset": 19, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 256, "col_offset": 29, "nodeName": "load_cached_models", "type": "Any"}, {"lineNumber": 256, "col_offset": 48, "nodeName": "draws", "type": "int"}, {"lineNumber": 256, "col_offset": 59, "nodeName": "chains", "type": "int"}, {"lineNumber": 260, "col_offset": 16, "nodeName": "obj", "type": "Any"}, {"lineNumber": 265, "col_offset": 25, "nodeName": "self", "type": "TestPyStanNetCDFUtils"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 275, "col_offset": 19, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 276, "col_offset": 19, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "load_cached_models", "type": "Any"}, {"lineNumber": 276, "col_offset": 48, "nodeName": "draws", "type": "int"}, {"lineNumber": 276, "col_offset": 59, "nodeName": "chains", "type": "int"}, {"lineNumber": 18, "col_offset": 37, "nodeName": "random", "type": "Any"}, {"lineNumber": 19, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 21, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 23, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 27, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 28, "col_offset": 31, "nodeName": "randn", "type": "Any"}, {"lineNumber": 32, "col_offset": 37, "nodeName": "random", "type": "Any"}, {"lineNumber": 32, "col_offset": 54, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 36, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 43, "col_offset": 51, "nodeName": "random", "type": "Any"}, {"lineNumber": 43, "col_offset": 68, "nodeName": "shape", "type": "Tuple[int, int, int, int, int]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "foo", "type": "Any"}, {"lineNumber": 46, "col_offset": 24, "nodeName": "foo", "type": "Any"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "foo", "type": "Any"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "foo", "type": "Any"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "foo", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "foo", "type": "Any"}, {"lineNumber": 57, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 61, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 61, "col_offset": 51, "nodeName": "np", "type": "module"}, {"lineNumber": 61, "col_offset": 72, "nodeName": "np", "type": "module"}, {"lineNumber": 66, "col_offset": 44, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 67, "col_offset": 42, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 68, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 69, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "a", "type": "Any"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "b", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "c", "type": "Any"}, {"lineNumber": 78, "col_offset": 42, "nodeName": "self", "type": "TestConvertToDataset"}, {"lineNumber": 79, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 80, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 82, "col_offset": 19, "nodeName": "a", "type": "Any"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "b", "type": "Any"}, {"lineNumber": 84, "col_offset": 19, "nodeName": "c", "type": "Any"}, {"lineNumber": 89, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 90, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 91, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 96, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 99, "col_offset": 19, "nodeName": "a", "type": "Any"}, {"lineNumber": 100, "col_offset": 19, "nodeName": "b", "type": "Any"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "c", "type": "Any"}, {"lineNumber": 106, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 107, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 108, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 113, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 114, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 116, "col_offset": 19, "nodeName": "a", "type": "Any"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "b", "type": "Any"}, {"lineNumber": 118, "col_offset": 19, "nodeName": "c", "type": "Any"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 124, "col_offset": 13, "nodeName": "np", "type": "module"}, {"lineNumber": 127, "col_offset": 46, "nodeName": "arange", "type": "Any"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 133, "col_offset": 15, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 138, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 144, "col_offset": 38, "nodeName": "np", "type": "module"}, {"lineNumber": 150, "col_offset": 38, "nodeName": "np", "type": "module"}, {"lineNumber": 163, "col_offset": 38, "nodeName": "np", "type": "module"}, {"lineNumber": 173, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 175, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 187, "col_offset": 15, "nodeName": "data", "type": "Any"}, {"lineNumber": 187, "col_offset": 35, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 188, "col_offset": 15, "nodeName": "data", "type": "Any"}, {"lineNumber": 188, "col_offset": 36, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 189, "col_offset": 15, "nodeName": "data", "type": "Any"}, {"lineNumber": 189, "col_offset": 37, "nodeName": "data", "type": "Any"}, {"lineNumber": 190, "col_offset": 15, "nodeName": "data", "type": "Any"}, {"lineNumber": 190, "col_offset": 36, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 190, "col_offset": 49, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 190, "col_offset": 61, "nodeName": "data", "type": "Any"}, {"lineNumber": 208, "col_offset": 41, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 208, "col_offset": 52, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 212, "col_offset": 12, "nodeName": "cls", "type": "Type[TestDictNetCDFUtils]"}, {"lineNumber": 212, "col_offset": 20, "nodeName": "name", "type": "Any"}, {"lineNumber": 212, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 222, "col_offset": 48, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 222, "col_offset": 59, "nodeName": "cls", "type": "Type[TestPyMC3NetCDFUtils]"}, {"lineNumber": 226, "col_offset": 20, "nodeName": "pm", "type": "Any"}, {"lineNumber": 227, "col_offset": 35, "nodeName": "pm", "type": "Any"}, {"lineNumber": 227, "col_offset": 66, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 230, "col_offset": 18, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 256, "col_offset": 48, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 256, "col_offset": 59, "nodeName": "cls", "type": "Type[TestPyStanNetCDFUtils]"}, {"lineNumber": 260, "col_offset": 16, "nodeName": "self", "type": "TestPyStanNetCDFUtils"}, {"lineNumber": 276, "col_offset": 48, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 276, "col_offset": 59, "nodeName": "cls", "type": "Type[TestNumpyNetCDFUtils]"}, {"lineNumber": 18, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 28, "col_offset": 31, "nodeName": "random", "type": "Any"}, {"lineNumber": 32, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 39, "col_offset": 23, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 43, "col_offset": 51, "nodeName": "np", "type": "module"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 46, "col_offset": 24, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 48, "col_offset": 19, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 49, "col_offset": 15, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 50, "col_offset": 15, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "inference_data", "type": "Any"}, {"lineNumber": 51, "col_offset": 34, "nodeName": "var_name", "type": "Any"}, {"lineNumber": 57, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 72, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 73, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 82, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 84, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 99, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 100, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 101, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 116, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 118, "col_offset": 19, "nodeName": "dataset", "type": "Any"}, {"lineNumber": 127, "col_offset": 46, "nodeName": "np", "type": "module"}, {"lineNumber": 184, "col_offset": 52, "nodeName": "arange", "type": "Any"}, {"lineNumber": 189, "col_offset": 37, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 190, "col_offset": 61, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 196, "col_offset": 30, "nodeName": "arange", "type": "Any"}, {"lineNumber": 233, "col_offset": 30, "nodeName": "arange", "type": "Any"}, {"lineNumber": 261, "col_offset": 30, "nodeName": "arange", "type": "Any"}, {"lineNumber": 28, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 184, "col_offset": 52, "nodeName": "np", "type": "module"}, {"lineNumber": 184, "col_offset": 62, "nodeName": "data", "type": "Any"}, {"lineNumber": 196, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 196, "col_offset": 40, "nodeName": "data", "type": "Any"}, {"lineNumber": 233, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 233, "col_offset": 40, "nodeName": "data", "type": "Any"}, {"lineNumber": 261, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 261, "col_offset": 40, "nodeName": "data", "type": "Any"}, {"lineNumber": 184, "col_offset": 62, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 196, "col_offset": 40, "nodeName": "self", "type": "CheckNetCDFUtils"}, {"lineNumber": 233, "col_offset": 40, "nodeName": "self", "type": "TestPyMC3NetCDFUtils"}, {"lineNumber": 261, "col_offset": 40, "nodeName": "self", "type": "TestPyStanNetCDFUtils"}]