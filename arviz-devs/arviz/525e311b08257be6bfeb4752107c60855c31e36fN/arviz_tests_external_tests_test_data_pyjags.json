[{"lineNumber": 15, "col_offset": 0, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 20, "col_offset": 0, "nodeName": "PYJAGS_PRIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 23, "col_offset": 0, "nodeName": "PARAMETERS", "type": "Tuple[str, str, str]"}, {"lineNumber": 24, "col_offset": 0, "nodeName": "VARIABLES", "type": "Tuple[str, ...]"}, {"lineNumber": 26, "col_offset": 0, "nodeName": "NUMBER_OF_WARMUP_SAMPLES", "type": "int"}, {"lineNumber": 27, "col_offset": 0, "nodeName": "NUMBER_OF_POST_WARMUP_SAMPLES", "type": "int"}, {"lineNumber": 32, "col_offset": 5, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 24, "col_offset": 12, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "key", "type": "Any"}, {"lineNumber": 16, "col_offset": 9, "nodeName": "randn", "type": "Any"}, {"lineNumber": 17, "col_offset": 11, "nodeName": "randn", "type": "Any"}, {"lineNumber": 18, "col_offset": 16, "nodeName": "randn", "type": "Any"}, {"lineNumber": 20, "col_offset": 26, "nodeName": "randn", "type": "Any"}, {"lineNumber": 20, "col_offset": 60, "nodeName": "randn", "type": "Any"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "arviz_samples_dict_from_pyjags_samples_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "pyjags_dict_from_arviz_dict_from_pyjags_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "arviz_samples_dict_from_pyjags_samples_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "arviz_inference_data_from_pyjags_samples_dict", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "arviz_dict_from_idata_from_pyjags_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "arviz_inference_data_from_pyjags_samples_dict", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "arviz_dict_from_idata_from_pyjags_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "pyjags_dict_from_arviz_idata", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "arviz_inference_data_from_pyjags_samples_dict", "type": "Any"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "posterior_warmup_prefix", "type": "str"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "prior_warmup_prefix", "type": "str"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "test_dict", "type": "Dict[str, List[str]]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "fails", "type": "List[Union[str, Tuple[str, str]]]"}, {"lineNumber": 16, "col_offset": 9, "nodeName": "random", "type": "Any"}, {"lineNumber": 17, "col_offset": 11, "nodeName": "random", "type": "Any"}, {"lineNumber": 18, "col_offset": 16, "nodeName": "random", "type": "Any"}, {"lineNumber": 20, "col_offset": 26, "nodeName": "random", "type": "Any"}, {"lineNumber": 20, "col_offset": 60, "nodeName": "random", "type": "Any"}, {"lineNumber": 24, "col_offset": 18, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 24, "col_offset": 23, "nodeName": "PARAMETERS", "type": "Tuple[str, str, str]"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 31, "col_offset": 52, "nodeName": "Mapping", "type": "Any"}, {"lineNumber": 33, "col_offset": 7, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "dict_1", "type": "Mapping[Any, numpy.ndarray]"}, {"lineNumber": 46, "col_offset": 54, "nodeName": "_convert_pyjags_dict_to_arviz_dict", "type": "Callable[..., Mapping[str, numpy.ndarray]]"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 50, "col_offset": 55, "nodeName": "_convert_arviz_dict_to_pyjags_dict", "type": "Callable[[Mapping[str, numpy.ndarray]], Mapping[str, numpy.ndarray]]"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "arviz_samples_dict_from_pyjags_samples_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 54, "col_offset": 15, "nodeName": "verify_equality_of_numpy_values_dictionaries", "type": "Callable[[Mapping[Any, numpy.ndarray], Mapping[Any, numpy.ndarray]], bool]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "pyjags_dict_from_arviz_dict_from_pyjags_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 60, "col_offset": 54, "nodeName": "_convert_pyjags_dict_to_arviz_dict", "type": "Callable[..., Mapping[str, numpy.ndarray]]"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 64, "col_offset": 56, "nodeName": "from_pyjags", "type": "Any"}, {"lineNumber": 64, "col_offset": 68, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 65, "col_offset": 49, "nodeName": "_extract_arviz_dict_from_inference_data", "type": "Callable[[Any], Mapping[str, numpy.ndarray]]"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "arviz_inference_data_from_pyjags_samples_dict", "type": "Any"}, {"lineNumber": 69, "col_offset": 15, "nodeName": "verify_equality_of_numpy_values_dictionaries", "type": "Callable[[Mapping[Any, numpy.ndarray], Mapping[Any, numpy.ndarray]], bool]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "arviz_samples_dict_from_pyjags_samples_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "arviz_dict_from_idata_from_pyjags_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 75, "col_offset": 56, "nodeName": "from_pyjags", "type": "Any"}, {"lineNumber": 75, "col_offset": 68, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 76, "col_offset": 49, "nodeName": "_extract_arviz_dict_from_inference_data", "type": "Callable[[Any], Mapping[str, numpy.ndarray]]"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "arviz_inference_data_from_pyjags_samples_dict", "type": "Any"}, {"lineNumber": 80, "col_offset": 39, "nodeName": "_convert_arviz_dict_to_pyjags_dict", "type": "Callable[[Mapping[str, numpy.ndarray]], Mapping[str, numpy.ndarray]]"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "arviz_dict_from_idata_from_pyjags_dict", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 84, "col_offset": 15, "nodeName": "verify_equality_of_numpy_values_dictionaries", "type": "Callable[[Mapping[Any, numpy.ndarray], Mapping[Any, numpy.ndarray]], bool]"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "PYJAGS_POSTERIOR_DICT", "type": "Dict[str, Any]"}, {"lineNumber": 85, "col_offset": 35, "nodeName": "pyjags_dict_from_arviz_idata", "type": "Mapping[str, numpy.ndarray]"}, {"lineNumber": 92, "col_offset": 90, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 93, "col_offset": 56, "nodeName": "from_pyjags", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 116, "col_offset": 16, "nodeName": "check_multiple_attrs", "type": "Callable[[Dict[str, List[str]], Any], List[Union[str, Tuple[str, str]]]]"}, {"lineNumber": 116, "col_offset": 37, "nodeName": "test_dict", "type": "Dict[str, List[str]]"}, {"lineNumber": 116, "col_offset": 48, "nodeName": "arviz_inference_data_from_pyjags_samples_dict", "type": "Any"}, {"lineNumber": 117, "col_offset": 19, "nodeName": "fails", "type": "List[Union[str, Tuple[str, str]]]"}, {"lineNumber": 16, "col_offset": 9, "nodeName": "np", "type": "module"}, {"lineNumber": 17, "col_offset": 11, "nodeName": "np", "type": "module"}, {"lineNumber": 18, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 20, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 20, "col_offset": 60, "nodeName": "np", "type": "module"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "tp", "type": "module"}, {"lineNumber": 31, "col_offset": 52, "nodeName": "tp", "type": "module"}, {"lineNumber": 33, "col_offset": 7, "nodeName": "dict_1", "type": "Mapping[Any, numpy.ndarray]"}, {"lineNumber": 33, "col_offset": 24, "nodeName": "dict_2", "type": "Mapping[Any, numpy.ndarray]"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "all", "type": "Any"}, {"lineNumber": 94, "col_offset": 22, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 95, "col_offset": 18, "nodeName": "prior", "type": "Any"}, {"lineNumber": 97, "col_offset": 24, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 98, "col_offset": 30, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 101, "col_offset": 18, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 104, "col_offset": 18, "nodeName": "save_warmup", "type": "Any"}, {"lineNumber": 31, "col_offset": 23, "nodeName": "Any", "type": "Any"}, {"lineNumber": 31, "col_offset": 31, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 31, "col_offset": 63, "nodeName": "Any", "type": "Any"}, {"lineNumber": 31, "col_offset": 71, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "np", "type": "module"}, {"lineNumber": 101, "col_offset": 34, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 101, "col_offset": 60, "nodeName": "posterior", "type": "Any"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "warmup_iterations", "type": "int"}, {"lineNumber": 104, "col_offset": 60, "nodeName": "prior", "type": "Any"}, {"lineNumber": 31, "col_offset": 23, "nodeName": "tp", "type": "module"}, {"lineNumber": 31, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 31, "col_offset": 63, "nodeName": "tp", "type": "module"}, {"lineNumber": 31, "col_offset": 71, "nodeName": "np", "type": "module"}, {"lineNumber": 37, "col_offset": 22, "nodeName": "dict_1", "type": "Mapping[Any, numpy.ndarray]"}, {"lineNumber": 37, "col_offset": 37, "nodeName": "dict_2", "type": "Mapping[Any, numpy.ndarray]"}, {"lineNumber": 37, "col_offset": 29, "nodeName": "key", "type": "Any"}, {"lineNumber": 37, "col_offset": 44, "nodeName": "key", "type": "Any"}]