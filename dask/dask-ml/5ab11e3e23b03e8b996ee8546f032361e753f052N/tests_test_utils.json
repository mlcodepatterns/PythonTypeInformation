[{"lineNumber": 23, "col_offset": 0, "nodeName": "assert_estimator_equal", "type": "Callable[..., Any]"}, {"lineNumber": 54, "col_offset": 0, "nodeName": "_assert_eq", "type": "Callable[..., Any]"}, {"lineNumber": 69, "col_offset": 0, "nodeName": "test_slice_columns", "type": "Callable[[], Any]"}, {"lineNumber": 79, "col_offset": 0, "nodeName": "test_handle_zeros_in_scale", "type": "Callable[[], Any]"}, {"lineNumber": 87, "col_offset": 0, "nodeName": "test_assert_estimator_passes", "type": "Callable[[], Any]"}, {"lineNumber": 93, "col_offset": 0, "nodeName": "test_assert_estimator_different_attributes", "type": "Callable[[], Any]"}, {"lineNumber": 100, "col_offset": 0, "nodeName": "test_assert_estimator_different_scalers", "type": "Callable[[], Any]"}, {"lineNumber": 14, "col_offset": 0, "nodeName": "df", "type": "Any"}, {"lineNumber": 15, "col_offset": 0, "nodeName": "s", "type": "Any"}, {"lineNumber": 16, "col_offset": 0, "nodeName": "a", "type": "Any"}, {"lineNumber": 19, "col_offset": 0, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 20, "col_offset": 0, "nodeName": "Bar", "type": "Type[`namedtuple-Bar-a_-b_-d_-e_`]"}, {"lineNumber": 14, "col_offset": 5, "nodeName": "from_pandas", "type": "Any"}, {"lineNumber": 14, "col_offset": 20, "nodeName": "T", "type": "Any"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "from_pandas", "type": "Any"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "from_array", "type": "Any"}, {"lineNumber": 17, "col_offset": 0, "nodeName": "X", "type": "Any"}, {"lineNumber": 17, "col_offset": 3, "nodeName": "y", "type": "Any"}, {"lineNumber": 17, "col_offset": 7, "nodeName": "make_classification", "type": "Callable[..., Any]"}, {"lineNumber": 19, "col_offset": 6, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 20, "col_offset": 6, "nodeName": "namedtuple", "type": "Callable[..., Type[Any]]"}, {"lineNumber": 35, "col_offset": 4, "nodeName": "left_attrs", "type": "List[str]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "right_attrs", "type": "List[str]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "attr", "type": "str"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "array_types", "type": "Tuple[Type[numpy.ndarray], Any]"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "frame_types", "type": "Tuple[Any, Any]"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "columns", "type": "List[int]"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "df2", "type": "Any"}, {"lineNumber": 72, "col_offset": 4, "nodeName": "X2", "type": "Any"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "s2", "type": "Any"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "a2", "type": "Any"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 94, "col_offset": 4, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "r", "type": "`namedtuple-Bar-a_-b_-d_-e_`"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 102, "col_offset": 4, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 14, "col_offset": 5, "nodeName": "dd", "type": "Any"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "dd", "type": "Any"}, {"lineNumber": 15, "col_offset": 19, "nodeName": "Series", "type": "Any"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "da", "type": "Any"}, {"lineNumber": 16, "col_offset": 18, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 35, "col_offset": 18, "nodeName": "x", "type": "str"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "x", "type": "str"}, {"lineNumber": 39, "col_offset": 7, "nodeName": "exclude", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "exclude", "type": "Set[nothing]"}, {"lineNumber": 48, "col_offset": 34, "nodeName": "exclude", "type": "Union[Set[Any], Set[nothing]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "l", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "r", "type": "Any"}, {"lineNumber": 55, "col_offset": 19, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 55, "col_offset": 31, "nodeName": "Array", "type": "Any"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "NDFrame", "type": "Any"}, {"lineNumber": 56, "col_offset": 44, "nodeName": "_Frame", "type": "Any"}, {"lineNumber": 57, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 57, "col_offset": 18, "nodeName": "l", "type": "Any"}, {"lineNumber": 57, "col_offset": 21, "nodeName": "array_types", "type": "Tuple[Type[numpy.ndarray], Any]"}, {"lineNumber": 71, "col_offset": 10, "nodeName": "slice_columns", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 24, "nodeName": "df", "type": "Any"}, {"lineNumber": 71, "col_offset": 28, "nodeName": "columns", "type": "List[int]"}, {"lineNumber": 72, "col_offset": 9, "nodeName": "slice_columns", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 72, "col_offset": 23, "nodeName": "X", "type": "Any"}, {"lineNumber": 72, "col_offset": 26, "nodeName": "columns", "type": "List[int]"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "columns", "type": "List[int]"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "assert_eq_df", "type": "Any"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "assert_eq_ar", "type": "Any"}, {"lineNumber": 80, "col_offset": 9, "nodeName": "handle_zeros_in_scale", "type": "Callable[[Any], Any]"}, {"lineNumber": 80, "col_offset": 31, "nodeName": "s", "type": "Any"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "handle_zeros_in_scale", "type": "Callable[[Any], Any]"}, {"lineNumber": 81, "col_offset": 31, "nodeName": "a", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "assert_estimator_equal", "type": "Callable[..., Any]"}, {"lineNumber": 90, "col_offset": 27, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 90, "col_offset": 30, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "Bar", "type": "Type[`namedtuple-Bar-a_-b_-d_-e_`]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 112, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 123, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "Foo", "type": "Type[`namedtuple-Foo-a_-b_-c_-d_`]"}, {"lineNumber": 14, "col_offset": 20, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 15, "col_offset": 19, "nodeName": "pd", "type": "Any"}, {"lineNumber": 16, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "x", "type": "str"}, {"lineNumber": 37, "col_offset": 25, "nodeName": "x", "type": "str"}, {"lineNumber": 40, "col_offset": 18, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 41, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 41, "col_offset": 20, "nodeName": "exclude", "type": "Any"}, {"lineNumber": 41, "col_offset": 29, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "exclude", "type": "Set[Any]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "exclude", "type": "Set[Any]"}, {"lineNumber": 46, "col_offset": 30, "nodeName": "exclude", "type": "Union[Set[Any], Set[nothing]]"}, {"lineNumber": 46, "col_offset": 61, "nodeName": "exclude", "type": "Union[Set[Any], Set[nothing]]"}, {"lineNumber": 48, "col_offset": 16, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "left_attrs", "type": "List[str]"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 49, "col_offset": 20, "nodeName": "left", "type": "Any"}, {"lineNumber": 49, "col_offset": 26, "nodeName": "attr", "type": "str"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 50, "col_offset": 20, "nodeName": "right", "type": "Any"}, {"lineNumber": 50, "col_offset": 27, "nodeName": "attr", "type": "str"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "_assert_eq", "type": "Callable[..., Any]"}, {"lineNumber": 51, "col_offset": 19, "nodeName": "l", "type": "Any"}, {"lineNumber": 51, "col_offset": 22, "nodeName": "r", "type": "Any"}, {"lineNumber": 55, "col_offset": 19, "nodeName": "np", "type": "module"}, {"lineNumber": 55, "col_offset": 31, "nodeName": "da", "type": "Any"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "generic", "type": "Any"}, {"lineNumber": 56, "col_offset": 44, "nodeName": "dd", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "assert_eq_ar", "type": "Any"}, {"lineNumber": 58, "col_offset": 21, "nodeName": "l", "type": "Any"}, {"lineNumber": 58, "col_offset": 24, "nodeName": "r", "type": "Any"}, {"lineNumber": 59, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 59, "col_offset": 20, "nodeName": "l", "type": "Any"}, {"lineNumber": 59, "col_offset": 23, "nodeName": "frame_types", "type": "Tuple[Any, Any]"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "columns", "type": "Any"}, {"lineNumber": 75, "col_offset": 17, "nodeName": "compute", "type": "Any"}, {"lineNumber": 75, "col_offset": 40, "nodeName": "compute", "type": "Any"}, {"lineNumber": 76, "col_offset": 17, "nodeName": "compute", "type": "Any"}, {"lineNumber": 76, "col_offset": 30, "nodeName": "compute", "type": "Any"}, {"lineNumber": 83, "col_offset": 11, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 84, "col_offset": 11, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 96, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 96, "col_offset": 23, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assert_estimator_equal", "type": "Callable[..., Any]"}, {"lineNumber": 97, "col_offset": 31, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 97, "col_offset": 34, "nodeName": "r", "type": "`namedtuple-Bar-a_-b_-d_-e_`"}, {"lineNumber": 103, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 103, "col_offset": 23, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 104, "col_offset": 8, "nodeName": "assert_estimator_equal", "type": "Callable[..., Any]"}, {"lineNumber": 104, "col_offset": 31, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 104, "col_offset": 34, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 113, "col_offset": 21, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 114, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 114, "col_offset": 23, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "assert_estimator_equal", "type": "Callable[..., Any]"}, {"lineNumber": 115, "col_offset": 31, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 115, "col_offset": 34, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 124, "col_offset": 21, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 125, "col_offset": 9, "nodeName": "raises", "type": "Any"}, {"lineNumber": 125, "col_offset": 23, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "assert_estimator_equal", "type": "Callable[..., Any]"}, {"lineNumber": 126, "col_offset": 31, "nodeName": "l", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 126, "col_offset": 34, "nodeName": "r", "type": "`namedtuple-Foo-a_-b_-c_-d_`"}, {"lineNumber": 14, "col_offset": 20, "nodeName": "pd", "type": "Any"}, {"lineNumber": 35, "col_offset": 29, "nodeName": "dir", "type": "Callable[..., List[str]]"}, {"lineNumber": 35, "col_offset": 33, "nodeName": "left", "type": "Any"}, {"lineNumber": 37, "col_offset": 30, "nodeName": "dir", "type": "Callable[..., List[str]]"}, {"lineNumber": 37, "col_offset": 34, "nodeName": "right", "type": "Any"}, {"lineNumber": 42, "col_offset": 19, "nodeName": "exclude", "type": "Any"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 44, "col_offset": 22, "nodeName": "exclude", "type": "Any"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "left_attrs", "type": "List[str]"}, {"lineNumber": 46, "col_offset": 42, "nodeName": "set", "type": "Type[Set[Any]]"}, {"lineNumber": 46, "col_offset": 46, "nodeName": "right_attrs", "type": "List[str]"}, {"lineNumber": 51, "col_offset": 27, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "core", "type": "Any"}, {"lineNumber": 58, "col_offset": 29, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "assert_eq_df", "type": "Any"}, {"lineNumber": 60, "col_offset": 21, "nodeName": "l", "type": "Any"}, {"lineNumber": 60, "col_offset": 24, "nodeName": "r", "type": "Any"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "df2", "type": "Any"}, {"lineNumber": 75, "col_offset": 40, "nodeName": "df2", "type": "Any"}, {"lineNumber": 76, "col_offset": 17, "nodeName": "X", "type": "Any"}, {"lineNumber": 76, "col_offset": 30, "nodeName": "X2", "type": "Any"}, {"lineNumber": 83, "col_offset": 16, "nodeName": "compute", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "compute", "type": "Any"}, {"lineNumber": 96, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 103, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 113, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 114, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 124, "col_offset": 21, "nodeName": "pd", "type": "Any"}, {"lineNumber": 125, "col_offset": 9, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 35, "col_offset": 42, "nodeName": "endswith", "type": "Callable[..., bool]"}, {"lineNumber": 37, "col_offset": 44, "nodeName": "endswith", "type": "Callable[..., bool]"}, {"lineNumber": 56, "col_offset": 19, "nodeName": "pd", "type": "Any"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 61, "col_offset": 10, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 61, "col_offset": 21, "nodeName": "l", "type": "Any"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "Sequence", "type": "Type[Sequence[Any]]"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "any", "type": "Callable[[Any], bool]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "a", "type": "Any"}, {"lineNumber": 63, "col_offset": 15, "nodeName": "b", "type": "Any"}, {"lineNumber": 63, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 63, "col_offset": 24, "nodeName": "l", "type": "Any"}, {"lineNumber": 63, "col_offset": 27, "nodeName": "r", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "l", "type": "Any"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "r", "type": "Any"}, {"lineNumber": 75, "col_offset": 17, "nodeName": "df", "type": "Any"}, {"lineNumber": 83, "col_offset": 16, "nodeName": "s2", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "a2", "type": "Any"}, {"lineNumber": 14, "col_offset": 36, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 35, "col_offset": 42, "nodeName": "x", "type": "str"}, {"lineNumber": 36, "col_offset": 26, "nodeName": "startswith", "type": "Callable[..., bool]"}, {"lineNumber": 37, "col_offset": 44, "nodeName": "x", "type": "str"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "startswith", "type": "Callable[..., bool]"}, {"lineNumber": 64, "col_offset": 12, "nodeName": "_assert_eq", "type": "Callable[..., Any]"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "a", "type": "Any"}, {"lineNumber": 64, "col_offset": 26, "nodeName": "b", "type": "Any"}, {"lineNumber": 75, "col_offset": 20, "nodeName": "columns", "type": "List[int]"}, {"lineNumber": 36, "col_offset": 26, "nodeName": "x", "type": "str"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "x", "type": "str"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 62, "col_offset": 27, "nodeName": "x", "type": "Any"}, {"lineNumber": 62, "col_offset": 61, "nodeName": "x", "type": "Any"}, {"lineNumber": 62, "col_offset": 66, "nodeName": "l", "type": "Any"}, {"lineNumber": 64, "col_offset": 31, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 62, "col_offset": 30, "nodeName": "array_types", "type": "Tuple[Type[numpy.ndarray], Any]"}, {"lineNumber": 62, "col_offset": 44, "nodeName": "frame_types", "type": "Tuple[Any, Any]"}]