[{"lineNumber": 8, "col_offset": 0, "nodeName": "data", "type": "Callable[[], Any]"}, {"lineNumber": 27, "col_offset": 0, "nodeName": "test_filters_one", "type": "Callable[[Any], Any]"}, {"lineNumber": 38, "col_offset": 0, "nodeName": "test_filters_both", "type": "Callable[[Any], Any]"}, {"lineNumber": 47, "col_offset": 0, "nodeName": "test_no_filters", "type": "Callable[[Any], Any]"}, {"lineNumber": 56, "col_offset": 0, "nodeName": "test_one_filters", "type": "Callable[[Any], Any]"}, {"lineNumber": 65, "col_offset": 0, "nodeName": "test_num_lines", "type": "Callable[[], Any]"}, {"lineNumber": 79, "col_offset": 0, "nodeName": "test_num_lines_closes_file", "type": "Callable[[], Any]"}, {"lineNumber": 10, "col_offset": 4, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 11, "col_offset": 4, "nodeName": "words", "type": "List[str]"}, {"lineNumber": 28, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "gold", "type": "Any"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 39, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 40, "col_offset": 4, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 49, "col_offset": 4, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 57, "col_offset": 25, "nodeName": "data", "type": "Any"}, {"lineNumber": 58, "col_offset": 4, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 66, "col_offset": 4, "nodeName": "gold", "type": "int"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "file_name", "type": "str"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "gold", "type": "int"}, {"lineNumber": 81, "col_offset": 4, "nodeName": "file_name", "type": "str"}, {"lineNumber": 24, "col_offset": 11, "nodeName": "keys", "type": "List[str]"}, {"lineNumber": 24, "col_offset": 17, "nodeName": "words", "type": "List[str]"}, {"lineNumber": 24, "col_offset": 24, "nodeName": "vocab", "type": "Dict[str, Dict[str, int]]"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "keys", "type": "Any"}, {"lineNumber": 28, "col_offset": 10, "nodeName": "words", "type": "Any"}, {"lineNumber": 28, "col_offset": 17, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 29, "col_offset": 11, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 29, "col_offset": 20, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "_filter_vocab", "type": "Any"}, {"lineNumber": 31, "col_offset": 26, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 31, "col_offset": 33, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 39, "col_offset": 4, "nodeName": "keys", "type": "Any"}, {"lineNumber": 39, "col_offset": 10, "nodeName": "words", "type": "Any"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "fromkeys", "type": "Callable"}, {"lineNumber": 40, "col_offset": 26, "nodeName": "keys", "type": "Any"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "_filter_vocab", "type": "Any"}, {"lineNumber": 41, "col_offset": 26, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 41, "col_offset": 33, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "keys", "type": "Any"}, {"lineNumber": 48, "col_offset": 10, "nodeName": "words", "type": "Any"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "fromkeys", "type": "Callable"}, {"lineNumber": 49, "col_offset": 26, "nodeName": "keys", "type": "Any"}, {"lineNumber": 50, "col_offset": 44, "nodeName": "filt_mock", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "return_value", "type": "List[Tuple[str, int]]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "assert_not_called", "type": "Any"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "keys", "type": "Any"}, {"lineNumber": 57, "col_offset": 10, "nodeName": "words", "type": "Any"}, {"lineNumber": 57, "col_offset": 17, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 59, "col_offset": 44, "nodeName": "filt_mock", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "return_value", "type": "List[Tuple[str, int]]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "assert_called_once", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "randint", "type": "Callable[[int, int], int]"}, {"lineNumber": 68, "col_offset": 49, "nodeName": "open_patch", "type": "Any"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "iter_mock", "type": "mock.MagicMock"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "return_value", "type": "mock.MagicMock"}, {"lineNumber": 71, "col_offset": 43, "nodeName": "iter_mock", "type": "mock.MagicMock"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "return_value", "type": "range"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "return_value", "type": "mock.MagicMock"}, {"lineNumber": 73, "col_offset": 34, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "lines", "type": "Any"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "randint", "type": "Callable[[int, int], int]"}, {"lineNumber": 82, "col_offset": 49, "nodeName": "open_patch", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "iter_mock", "type": "mock.MagicMock"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "return_value", "type": "mock.MagicMock"}, {"lineNumber": 85, "col_offset": 43, "nodeName": "iter_mock", "type": "mock.MagicMock"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "return_value", "type": "range"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "return_value", "type": "mock.MagicMock"}, {"lineNumber": 87, "col_offset": 34, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "lines", "type": "Any"}, {"lineNumber": 30, "col_offset": 13, "nodeName": "keys", "type": "Any"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "keys", "type": "Any"}, {"lineNumber": 32, "col_offset": 22, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 33, "col_offset": 22, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 34, "col_offset": 18, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 35, "col_offset": 11, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 35, "col_offset": 29, "nodeName": "gold", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 50, "col_offset": 9, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "filt_mock", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "_filter_vocab", "type": "Any"}, {"lineNumber": 52, "col_offset": 26, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 52, "col_offset": 33, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "filt_mock", "type": "Any"}, {"lineNumber": 58, "col_offset": 13, "nodeName": "keys", "type": "Any"}, {"lineNumber": 58, "col_offset": 26, "nodeName": "keys", "type": "Any"}, {"lineNumber": 59, "col_offset": 9, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "filt_mock", "type": "Any"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "_filter_vocab", "type": "Any"}, {"lineNumber": 61, "col_offset": 26, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 61, "col_offset": 33, "nodeName": "min_f", "type": "Dict[Any, int]"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "filt_mock", "type": "Any"}, {"lineNumber": 66, "col_offset": 11, "nodeName": "random", "type": "module"}, {"lineNumber": 68, "col_offset": 9, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 69, "col_offset": 20, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 70, "col_offset": 20, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "__enter__", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "__iter__", "type": "Any"}, {"lineNumber": 72, "col_offset": 42, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 72, "col_offset": 48, "nodeName": "gold", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "open_patch", "type": "Any"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "num_lines", "type": "Any"}, {"lineNumber": 74, "col_offset": 26, "nodeName": "file_name", "type": "str"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "lines", "type": "Any"}, {"lineNumber": 75, "col_offset": 24, "nodeName": "gold", "type": "int"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 76, "col_offset": 43, "nodeName": "file_name", "type": "str"}, {"lineNumber": 80, "col_offset": 11, "nodeName": "random", "type": "module"}, {"lineNumber": 82, "col_offset": 9, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 83, "col_offset": 20, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 84, "col_offset": 20, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "__enter__", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "__iter__", "type": "Any"}, {"lineNumber": 86, "col_offset": 42, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 86, "col_offset": 48, "nodeName": "gold", "type": "int"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "open_patch", "type": "Any"}, {"lineNumber": 88, "col_offset": 16, "nodeName": "num_lines", "type": "Any"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "file_name", "type": "str"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "assert_called_once", "type": "Any"}, {"lineNumber": 42, "col_offset": 22, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 42, "col_offset": 52, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 43, "col_offset": 22, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 43, "col_offset": 52, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 44, "col_offset": 18, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 44, "col_offset": 44, "nodeName": "vocab", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "iter_mock", "type": "mock.MagicMock"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "open_patch", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "iter_mock", "type": "mock.MagicMock"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "__exit__", "type": "Any"}, {"lineNumber": 32, "col_offset": 28, "nodeName": "keys", "type": "Any"}, {"lineNumber": 33, "col_offset": 28, "nodeName": "keys", "type": "Any"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "keys", "type": "Any"}, {"lineNumber": 35, "col_offset": 17, "nodeName": "keys", "type": "Any"}, {"lineNumber": 35, "col_offset": 34, "nodeName": "keys", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "file_mock", "type": "mock.MagicMock"}, {"lineNumber": 42, "col_offset": 28, "nodeName": "keys", "type": "Any"}, {"lineNumber": 42, "col_offset": 58, "nodeName": "keys", "type": "Any"}, {"lineNumber": 43, "col_offset": 28, "nodeName": "keys", "type": "Any"}, {"lineNumber": 43, "col_offset": 58, "nodeName": "keys", "type": "Any"}, {"lineNumber": 44, "col_offset": 24, "nodeName": "keys", "type": "Any"}, {"lineNumber": 44, "col_offset": 50, "nodeName": "keys", "type": "Any"}]