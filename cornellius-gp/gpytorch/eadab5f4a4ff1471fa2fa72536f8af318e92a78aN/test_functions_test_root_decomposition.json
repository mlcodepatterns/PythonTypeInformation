[{"lineNumber": 13, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 13, "col_offset": 28, "nodeName": "unittest", "type": "module"}, {"lineNumber": 56, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "mat_var_clone", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "root", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "root", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 16, "col_offset": 12, "nodeName": "rng_state", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 25, "col_offset": 23, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 25, "col_offset": 36, "nodeName": "mat", "type": "List[List[float]]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "requires_grad_", "type": "Any"}, {"lineNumber": 29, "col_offset": 11, "nodeName": "hasattr", "type": "Callable[[Any, str], bool]"}, {"lineNumber": 29, "col_offset": 19, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "root_decomposition", "type": "Any"}, {"lineNumber": 35, "col_offset": 14, "nodeName": "matmul", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 15, "nodeName": "root_inv_decomposition", "type": "Any"}, {"lineNumber": 46, "col_offset": 14, "nodeName": "matmul", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "inverse", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "backward", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 16, "col_offset": 12, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 16, "col_offset": 29, "nodeName": "get_rng_state", "type": "Any"}, {"lineNumber": 17, "col_offset": 12, "nodeName": "manual_seed", "type": "Any"}, {"lineNumber": 25, "col_offset": 23, "nodeName": "torch", "type": "Any"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "set_rng_state", "type": "Any"}, {"lineNumber": 30, "col_offset": 32, "nodeName": "rng_state", "type": "Any"}, {"lineNumber": 35, "col_offset": 14, "nodeName": "root", "type": "Any"}, {"lineNumber": 35, "col_offset": 26, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 36, "col_offset": 24, "nodeName": "approx_equal", "type": "Callable[..., Any]"}, {"lineNumber": 36, "col_offset": 37, "nodeName": "res", "type": "Any"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 41, "col_offset": 24, "nodeName": "approx_equal", "type": "Callable[..., Any]"}, {"lineNumber": 41, "col_offset": 37, "nodeName": "grad", "type": "Any"}, {"lineNumber": 41, "col_offset": 56, "nodeName": "grad", "type": "Any"}, {"lineNumber": 46, "col_offset": 14, "nodeName": "root", "type": "Any"}, {"lineNumber": 46, "col_offset": 26, "nodeName": "transpose", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "mat_var_clone", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 48, "col_offset": 24, "nodeName": "approx_equal", "type": "Callable[..., Any]"}, {"lineNumber": 48, "col_offset": 37, "nodeName": "res", "type": "Any"}, {"lineNumber": 48, "col_offset": 42, "nodeName": "actual", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 53, "col_offset": 24, "nodeName": "approx_equal", "type": "Callable[..., Any]"}, {"lineNumber": 53, "col_offset": 37, "nodeName": "grad", "type": "Any"}, {"lineNumber": 53, "col_offset": 56, "nodeName": "grad", "type": "Any"}, {"lineNumber": 15, "col_offset": 11, "nodeName": "getenv", "type": "Callable"}, {"lineNumber": 15, "col_offset": 47, "nodeName": "lower", "type": "Callable[[], str]"}, {"lineNumber": 16, "col_offset": 29, "nodeName": "torch", "type": "Any"}, {"lineNumber": 17, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "detach", "type": "Any"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 30, "col_offset": 32, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "NonLazyTensor", "type": "Type[gpytorch.lazy.non_lazy_tensor.NonLazyTensor]"}, {"lineNumber": 34, "col_offset": 29, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 35, "col_offset": 26, "nodeName": "root", "type": "Any"}, {"lineNumber": 36, "col_offset": 42, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "trace", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "trace", "type": "Any"}, {"lineNumber": 41, "col_offset": 37, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 41, "col_offset": 56, "nodeName": "mat_var_clone", "type": "Any"}, {"lineNumber": 45, "col_offset": 15, "nodeName": "NonLazyTensor", "type": "Type[gpytorch.lazy.non_lazy_tensor.NonLazyTensor]"}, {"lineNumber": 45, "col_offset": 29, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 46, "col_offset": 26, "nodeName": "root", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "trace", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "trace", "type": "Any"}, {"lineNumber": 53, "col_offset": 37, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 53, "col_offset": 56, "nodeName": "mat_var_clone", "type": "Any"}, {"lineNumber": 15, "col_offset": 11, "nodeName": "os", "type": "module"}, {"lineNumber": 34, "col_offset": 29, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "mat_var_clone", "type": "Any"}, {"lineNumber": 41, "col_offset": 37, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 41, "col_offset": 56, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 45, "col_offset": 29, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "actual", "type": "Any"}, {"lineNumber": 53, "col_offset": 37, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 53, "col_offset": 56, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 15, "col_offset": 47, "nodeName": "getenv", "type": "Callable"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "clone", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "TestRootDecomposition"}, {"lineNumber": 15, "col_offset": 47, "nodeName": "os", "type": "module"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "mat_var", "type": "Any"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "self", "type": "TestRootDecomposition"}]