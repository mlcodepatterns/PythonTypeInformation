[{"lineNumber": 3, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 3, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 43, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "s", "type": "str"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "min", "type": "int"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "half", "type": "int"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "max", "type": "int"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "min", "type": "int"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "half", "type": "int"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "max", "type": "int"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 6, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 9, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 27, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 29, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 30, "col_offset": 15, "nodeName": "min", "type": "int"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "half", "type": "int"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "max", "type": "int"}, {"lineNumber": 36, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 38, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 39, "col_offset": 15, "nodeName": "min", "type": "int"}, {"lineNumber": 40, "col_offset": 15, "nodeName": "half", "type": "int"}, {"lineNumber": 41, "col_offset": 15, "nodeName": "max", "type": "int"}, {"lineNumber": 44, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 6, "col_offset": 8, "nodeName": "self", "type": "TestStringMethods"}, {"lineNumber": 6, "col_offset": 25, "nodeName": "upper", "type": "Callable[[], str]"}, {"lineNumber": 9, "col_offset": 8, "nodeName": "self", "type": "TestStringMethods"}, {"lineNumber": 9, "col_offset": 24, "nodeName": "isupper", "type": "Callable[[], bool]"}, {"lineNumber": 10, "col_offset": 8, "nodeName": "self", "type": "TestStringMethods"}, {"lineNumber": 10, "col_offset": 25, "nodeName": "isupper", "type": "Callable[[], bool]"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "self", "type": "TestStringMethods"}, {"lineNumber": 14, "col_offset": 25, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 16, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 16, "col_offset": 31, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 17, "col_offset": 12, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 36, "col_offset": 28, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 37, "col_offset": 30, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 38, "col_offset": 30, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 14, "col_offset": 25, "nodeName": "s", "type": "str"}, {"lineNumber": 16, "col_offset": 13, "nodeName": "self", "type": "TestStringMethods"}, {"lineNumber": 17, "col_offset": 12, "nodeName": "s", "type": "str"}]