[{"lineNumber": 15, "col_offset": 0, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 22, "col_offset": 20, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 49, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 94, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 110, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 139, "col_offset": 21, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 148, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 19, "col_offset": 11, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 22, "col_offset": 20, "nodeName": "unittest", "type": "module"}, {"lineNumber": 49, "col_offset": 22, "nodeName": "unittest", "type": "module"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "unittest", "type": "module"}, {"lineNumber": 94, "col_offset": 17, "nodeName": "unittest", "type": "module"}, {"lineNumber": 110, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 139, "col_offset": 21, "nodeName": "unittest", "type": "module"}, {"lineNumber": 148, "col_offset": 19, "nodeName": "unittest", "type": "module"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "l", "type": "List[List[int]]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "min", "type": "int"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "half", "type": "int"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "max", "type": "int"}, {"lineNumber": 121, "col_offset": 8, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "min", "type": "int"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "half", "type": "int"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "max", "type": "int"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "min", "type": "int"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "half", "type": "int"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "max", "type": "int"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "d1", "type": "Dict[str, int]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "d2", "type": "Dict[Union[str, int], Union[int, str]]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "res", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "g", "type": "Generator[Dict[Any, Any], Any, None]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "l", "type": "List[Dict[Any, Any]]"}, {"lineNumber": 18, "col_offset": 6, "nodeName": "marker_index", "type": "int"}, {"lineNumber": 25, "col_offset": 14, "nodeName": "linear_bin", "type": "Callable[..., Any]"}, {"lineNumber": 31, "col_offset": 14, "nodeName": "linear_bin", "type": "Callable[..., Any]"}, {"lineNumber": 36, "col_offset": 14, "nodeName": "linear_bin", "type": "Callable[..., Any]"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 53, "col_offset": 14, "nodeName": "linear_unbin", "type": "Callable[..., Any]"}, {"lineNumber": 53, "col_offset": 27, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 54, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 57, "col_offset": 12, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 58, "col_offset": 14, "nodeName": "linear_unbin", "type": "Callable[..., Any]"}, {"lineNumber": 58, "col_offset": 27, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 59, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 63, "col_offset": 14, "nodeName": "linear_unbin", "type": "Callable[..., Any]"}, {"lineNumber": 63, "col_offset": 27, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 64, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 67, "col_offset": 14, "nodeName": "linear_unbin", "type": "Callable[..., Any]"}, {"lineNumber": 68, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 79, "col_offset": 14, "nodeName": "bin_Y", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 79, "col_offset": 20, "nodeName": "l", "type": "List[int]"}, {"lineNumber": 98, "col_offset": 14, "nodeName": "unbin_Y", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 98, "col_offset": 22, "nodeName": "l", "type": "List[List[int]]"}, {"lineNumber": 113, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 114, "col_offset": 15, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 115, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 116, "col_offset": 15, "nodeName": "min", "type": "int"}, {"lineNumber": 117, "col_offset": 15, "nodeName": "half", "type": "int"}, {"lineNumber": 118, "col_offset": 15, "nodeName": "max", "type": "int"}, {"lineNumber": 122, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 123, "col_offset": 15, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 124, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 125, "col_offset": 15, "nodeName": "min", "type": "int"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "half", "type": "int"}, {"lineNumber": 127, "col_offset": 15, "nodeName": "max", "type": "int"}, {"lineNumber": 131, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 132, "col_offset": 15, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 133, "col_offset": 14, "nodeName": "map_range", "type": "Callable[[Any, Any, Any, Any, Any], int]"}, {"lineNumber": 134, "col_offset": 15, "nodeName": "min", "type": "int"}, {"lineNumber": 135, "col_offset": 15, "nodeName": "half", "type": "int"}, {"lineNumber": 136, "col_offset": 15, "nodeName": "max", "type": "int"}, {"lineNumber": 144, "col_offset": 14, "nodeName": "merge_two_dicts", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 144, "col_offset": 30, "nodeName": "d1", "type": "Dict[str, int]"}, {"lineNumber": 144, "col_offset": 34, "nodeName": "d2", "type": "Dict[Union[str, int], Union[int, str]]"}, {"lineNumber": 146, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "param_gen", "type": "Callable[[Any], Generator[Dict[Any, Any], Any, None]]"}, {"lineNumber": 152, "col_offset": 14, "nodeName": "x", "type": "Dict[Any, Any]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "assertCountEqual", "type": "Callable[..., None]"}, {"lineNumber": 159, "col_offset": 30, "nodeName": "expected", "type": "List[Dict[str, str]]"}, {"lineNumber": 159, "col_offset": 40, "nodeName": "l", "type": "List[Dict[Any, Any]]"}, {"lineNumber": 26, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 27, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 32, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 33, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "res", "type": "Any"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 41, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 41, "col_offset": 27, "nodeName": "IndexError", "type": "Type[IndexError]"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "linear_bin", "type": "Callable[..., Any]"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 45, "col_offset": 27, "nodeName": "TypeError", "type": "Type[TypeError]"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "linear_bin", "type": "Callable[..., Any]"}, {"lineNumber": 71, "col_offset": 13, "nodeName": "raises", "type": "Any"}, {"lineNumber": 71, "col_offset": 27, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "linear_unbin", "type": "Callable[..., Any]"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 87, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 88, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 92, "col_offset": 15, "nodeName": "sum", "type": "Callable"}, {"lineNumber": 97, "col_offset": 14, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 97, "col_offset": 30, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "create_lbin", "type": "Callable[[Any], Any]"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 104, "col_offset": 15, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 122, "col_offset": 28, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 123, "col_offset": 30, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 124, "col_offset": 30, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 131, "col_offset": 28, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 132, "col_offset": 30, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 133, "col_offset": 30, "nodeName": "ranges", "type": "Tuple[int, int, int, int]"}, {"lineNumber": 152, "col_offset": 20, "nodeName": "x", "type": "Dict[Any, Any]"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "g", "type": "Generator[Dict[Any, Any], Any, None]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "self", "type": "TestParamGen"}, {"lineNumber": 27, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 38, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 41, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 45, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 71, "col_offset": 13, "nodeName": "pytest", "type": "Any"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 91, "col_offset": 15, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 87, "col_offset": 19, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 88, "col_offset": 19, "nodeName": "res", "type": "numpy.ndarray"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "res", "type": "numpy.ndarray"}]