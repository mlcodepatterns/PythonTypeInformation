[{"lineNumber": 13, "col_offset": 37, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 13, "col_offset": 37, "nodeName": "unittest", "type": "module"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "in_size", "type": "int"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "out2_size", "type": "int"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 34, "col_offset": 13, "nodeName": "xp", "type": "Any"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "in_size", "type": "int"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 105, "col_offset": 13, "nodeName": "xp", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 21, "col_offset": 14, "nodeName": "StatelessRecurrentBranched", "type": "Any"}, {"lineNumber": 31, "col_offset": 11, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 34, "col_offset": 13, "nodeName": "par", "type": "Any"}, {"lineNumber": 42, "col_offset": 32, "nodeName": "n_step_forward", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 44, "col_offset": 30, "nodeName": "concat_out", "type": "Any"}, {"lineNumber": 44, "col_offset": 42, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 30, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 50, "col_offset": 41, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 44, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 56, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 65, "col_offset": 30, "nodeName": "n_step_forward", "type": "Any"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 30, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 67, "col_offset": 41, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 71, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "_test_n_step_forward", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "_test_n_step_forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 96, "col_offset": 14, "nodeName": "StatelessRecurrentBranched", "type": "Any"}, {"lineNumber": 102, "col_offset": 11, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 105, "col_offset": 13, "nodeName": "par", "type": "Any"}, {"lineNumber": 110, "col_offset": 23, "nodeName": "transpose_sequence", "type": "Any"}, {"lineNumber": 110, "col_offset": 44, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 112, "col_offset": 30, "nodeName": "n_step_forward", "type": "Any"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "nomask_out", "type": "Any"}, {"lineNumber": 120, "col_offset": 20, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 120, "col_offset": 32, "nodeName": "no_mask_forward_twice", "type": "Callable[[], Any]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 124, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 131, "col_offset": 35, "nodeName": "array", "type": "Any"}, {"lineNumber": 131, "col_offset": 54, "nodeName": "array", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 132, "col_offset": 44, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 136, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 136, "col_offset": 37, "nodeName": "array", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 138, "col_offset": 37, "nodeName": "array", "type": "Any"}, {"lineNumber": 143, "col_offset": 12, "nodeName": "rs", "type": "Any"}, {"lineNumber": 145, "col_offset": 8, "nodeName": "mask0_out", "type": "Any"}, {"lineNumber": 145, "col_offset": 19, "nodeName": "mask0_rs", "type": "Any"}, {"lineNumber": 145, "col_offset": 30, "nodeName": "mask0_forward_twice", "type": "Callable[[], Any]"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 170, "col_offset": 12, "nodeName": "rs", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "mask1_out", "type": "Any"}, {"lineNumber": 172, "col_offset": 19, "nodeName": "mask1_rs", "type": "Any"}, {"lineNumber": 172, "col_offset": 30, "nodeName": "mask1_forward_twice", "type": "Callable[[], Any]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 197, "col_offset": 12, "nodeName": "rs", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "mask01_out", "type": "Any"}, {"lineNumber": 199, "col_offset": 20, "nodeName": "mask01_rs", "type": "Any"}, {"lineNumber": 199, "col_offset": 32, "nodeName": "mask01_forward_twice", "type": "Callable[[], Any]"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "rs0", "type": "Any"}, {"lineNumber": 227, "col_offset": 12, "nodeName": "rs1", "type": "Any"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "getcon_out", "type": "Any"}, {"lineNumber": 230, "col_offset": 20, "nodeName": "getcon_rs", "type": "Any"}, {"lineNumber": 230, "col_offset": 32, "nodeName": "get_and_concat_rs_forward", "type": "Callable[[], Any]"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "_test_mask_recurrent_state_at", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "_test_mask_recurrent_state_at", "type": "Callable[[Any], Any]"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "NStepLSTM", "type": "Any"}, {"lineNumber": 22, "col_offset": 27, "nodeName": "in_size", "type": "int"}, {"lineNumber": 22, "col_offset": 36, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 23, "col_offset": 12, "nodeName": "StatelessRecurrentSequential", "type": "Type[chainerrl.links.stateless_recurrent_sequential.StatelessRecurrentSequential]"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "StatelessRecurrentSequential", "type": "Type[chainerrl.links.stateless_recurrent_sequential.StatelessRecurrentSequential]"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "use", "type": "Any"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "astype", "type": "Any"}, {"lineNumber": 37, "col_offset": 63, "nodeName": "float32", "type": "Any"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "astype", "type": "Any"}, {"lineNumber": 38, "col_offset": 63, "nodeName": "float32", "type": "Any"}, {"lineNumber": 42, "col_offset": 32, "nodeName": "par", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 45, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 45, "col_offset": 29, "nodeName": "concat_out", "type": "Any"}, {"lineNumber": 45, "col_offset": 42, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 45, "col_offset": 46, "nodeName": "par", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 46, "col_offset": 50, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 47, "col_offset": 50, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 48, "col_offset": 50, "nodeName": "out2_size", "type": "int"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 51, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 51, "col_offset": 29, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 51, "col_offset": 41, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 51, "col_offset": 45, "nodeName": "par", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 52, "col_offset": 30, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 55, "col_offset": 65, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 56, "col_offset": 65, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 58, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 59, "col_offset": 65, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 65, "col_offset": 30, "nodeName": "par", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 68, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 68, "col_offset": 29, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 68, "col_offset": 41, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 68, "col_offset": 45, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 69, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 69, "col_offset": 44, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 69, "col_offset": 48, "nodeName": "par", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 70, "col_offset": 44, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 70, "col_offset": 48, "nodeName": "par", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 71, "col_offset": 52, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 72, "col_offset": 52, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 73, "col_offset": 52, "nodeName": "out2_size", "type": "int"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 74, "col_offset": 52, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 75, "col_offset": 52, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 76, "col_offset": 52, "nodeName": "out2_size", "type": "int"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "NStepGRU", "type": "Any"}, {"lineNumber": 97, "col_offset": 26, "nodeName": "in_size", "type": "int"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "out0_size", "type": "int"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "StatelessRecurrentSequential", "type": "Type[chainerrl.links.stateless_recurrent_sequential.StatelessRecurrentSequential]"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "use", "type": "Any"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "astype", "type": "Any"}, {"lineNumber": 107, "col_offset": 63, "nodeName": "float32", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "astype", "type": "Any"}, {"lineNumber": 108, "col_offset": 63, "nodeName": "float32", "type": "Any"}, {"lineNumber": 110, "col_offset": 23, "nodeName": "F", "type": "Any"}, {"lineNumber": 112, "col_offset": 30, "nodeName": "par", "type": "Any"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 117, "col_offset": 15, "nodeName": "rs", "type": "Any"}, {"lineNumber": 117, "col_offset": 20, "nodeName": "par", "type": "Any"}, {"lineNumber": 118, "col_offset": 19, "nodeName": "par", "type": "Any"}, {"lineNumber": 118, "col_offset": 40, "nodeName": "rs", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 132, "col_offset": 30, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 133, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 134, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 142, "col_offset": 15, "nodeName": "rs", "type": "Any"}, {"lineNumber": 142, "col_offset": 20, "nodeName": "par", "type": "Any"}, {"lineNumber": 143, "col_offset": 17, "nodeName": "mask_recurrent_state_at", "type": "Any"}, {"lineNumber": 143, "col_offset": 45, "nodeName": "rs", "type": "Any"}, {"lineNumber": 144, "col_offset": 19, "nodeName": "par", "type": "Any"}, {"lineNumber": 144, "col_offset": 40, "nodeName": "rs", "type": "Any"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 147, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 157, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 157, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 158, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 163, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 169, "col_offset": 15, "nodeName": "rs", "type": "Any"}, {"lineNumber": 169, "col_offset": 20, "nodeName": "par", "type": "Any"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "mask_recurrent_state_at", "type": "Any"}, {"lineNumber": 170, "col_offset": 45, "nodeName": "rs", "type": "Any"}, {"lineNumber": 171, "col_offset": 19, "nodeName": "par", "type": "Any"}, {"lineNumber": 171, "col_offset": 40, "nodeName": "rs", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 178, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 178, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 185, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 186, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 188, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 188, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 189, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 196, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 196, "col_offset": 15, "nodeName": "rs", "type": "Any"}, {"lineNumber": 196, "col_offset": 20, "nodeName": "par", "type": "Any"}, {"lineNumber": 197, "col_offset": 17, "nodeName": "mask_recurrent_state_at", "type": "Any"}, {"lineNumber": 197, "col_offset": 45, "nodeName": "rs", "type": "Any"}, {"lineNumber": 198, "col_offset": 19, "nodeName": "par", "type": "Any"}, {"lineNumber": 198, "col_offset": 40, "nodeName": "rs", "type": "Any"}, {"lineNumber": 201, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 201, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 202, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 206, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 206, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 212, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 212, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 213, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 217, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 217, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 225, "col_offset": 15, "nodeName": "rs", "type": "Any"}, {"lineNumber": 225, "col_offset": 20, "nodeName": "par", "type": "Any"}, {"lineNumber": 226, "col_offset": 18, "nodeName": "get_recurrent_state_at", "type": "Any"}, {"lineNumber": 226, "col_offset": 45, "nodeName": "rs", "type": "Any"}, {"lineNumber": 227, "col_offset": 18, "nodeName": "get_recurrent_state_at", "type": "Any"}, {"lineNumber": 227, "col_offset": 45, "nodeName": "rs", "type": "Any"}, {"lineNumber": 228, "col_offset": 24, "nodeName": "concatenate_recurrent_states", "type": "Any"}, {"lineNumber": 229, "col_offset": 19, "nodeName": "par", "type": "Any"}, {"lineNumber": 229, "col_offset": 40, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 234, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 237, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 242, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 243, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 246, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 247, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 22, "col_offset": 12, "nodeName": "L", "type": "Any"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "NStepRNNReLU", "type": "Any"}, {"lineNumber": 24, "col_offset": 34, "nodeName": "in_size", "type": "int"}, {"lineNumber": 24, "col_offset": 43, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 27, "col_offset": 16, "nodeName": "Linear", "type": "Any"}, {"lineNumber": 27, "col_offset": 25, "nodeName": "in_size", "type": "int"}, {"lineNumber": 27, "col_offset": 34, "nodeName": "out2_size", "type": "int"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "par", "type": "Any"}, {"lineNumber": 37, "col_offset": 63, "nodeName": "np", "type": "module"}, {"lineNumber": 38, "col_offset": 63, "nodeName": "np", "type": "module"}, {"lineNumber": 46, "col_offset": 25, "nodeName": "concat_out", "type": "Any"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "concat_out", "type": "Any"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "concat_out", "type": "Any"}, {"lineNumber": 54, "col_offset": 29, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 55, "col_offset": 52, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 55, "col_offset": 56, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 56, "col_offset": 52, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 56, "col_offset": 56, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 58, "col_offset": 29, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 59, "col_offset": 52, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 59, "col_offset": 56, "nodeName": "seqs_x", "type": "List[Any]"}, {"lineNumber": 61, "col_offset": 29, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 70, "col_offset": 29, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "concat", "type": "Any"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "concat", "type": "Any"}, {"lineNumber": 82, "col_offset": 21, "nodeName": "concat_out", "type": "Any"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "L", "type": "Any"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "NStepLSTM", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "in_size", "type": "int"}, {"lineNumber": 99, "col_offset": 40, "nodeName": "out1_size", "type": "int"}, {"lineNumber": 104, "col_offset": 12, "nodeName": "par", "type": "Any"}, {"lineNumber": 107, "col_offset": 63, "nodeName": "np", "type": "module"}, {"lineNumber": 108, "col_offset": 63, "nodeName": "np", "type": "module"}, {"lineNumber": 117, "col_offset": 24, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 118, "col_offset": 23, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 124, "col_offset": 12, "nodeName": "nomask_out", "type": "Any"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "nomask_out", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 131, "col_offset": 35, "nodeName": "nstep_rs", "type": "Any"}, {"lineNumber": 131, "col_offset": 54, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 133, "col_offset": 29, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 142, "col_offset": 24, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 143, "col_offset": 17, "nodeName": "par", "type": "Any"}, {"lineNumber": 144, "col_offset": 23, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 149, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 150, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 157, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 158, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 160, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 162, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 169, "col_offset": 24, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 170, "col_offset": 17, "nodeName": "par", "type": "Any"}, {"lineNumber": 171, "col_offset": 23, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 178, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 180, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 181, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 188, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 189, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 190, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 191, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 196, "col_offset": 24, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 197, "col_offset": 17, "nodeName": "par", "type": "Any"}, {"lineNumber": 198, "col_offset": 23, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 201, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 202, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 203, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 204, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 206, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 209, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 212, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 213, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 214, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 217, "col_offset": 13, "nodeName": "self", "type": "TestStatelessRecurrentBranched"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 219, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 220, "col_offset": 16, "nodeName": "array", "type": "Any"}, {"lineNumber": 225, "col_offset": 24, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 226, "col_offset": 18, "nodeName": "par", "type": "Any"}, {"lineNumber": 227, "col_offset": 18, "nodeName": "par", "type": "Any"}, {"lineNumber": 228, "col_offset": 24, "nodeName": "par", "type": "Any"}, {"lineNumber": 228, "col_offset": 58, "nodeName": "rs0", "type": "Any"}, {"lineNumber": 228, "col_offset": 63, "nodeName": "rs1", "type": "Any"}, {"lineNumber": 229, "col_offset": 23, "nodeName": "transposed_x", "type": "Any"}, {"lineNumber": 232, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "xp", "type": "Any"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "L", "type": "Any"}, {"lineNumber": 27, "col_offset": 16, "nodeName": "L", "type": "Any"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "get_device_from_id", "type": "Any"}, {"lineNumber": 32, "col_offset": 44, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 55, "col_offset": 25, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 56, "col_offset": 25, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "concat_rs", "type": "Any"}, {"lineNumber": 71, "col_offset": 25, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 76, "col_offset": 25, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "F", "type": "Any"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "F", "type": "Any"}, {"lineNumber": 99, "col_offset": 16, "nodeName": "L", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "get_device_from_id", "type": "Any"}, {"lineNumber": 103, "col_offset": 44, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 134, "col_offset": 29, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "mask0_out", "type": "Any"}, {"lineNumber": 158, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 163, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "mask0_out", "type": "Any"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "mask1_out", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 185, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 186, "col_offset": 12, "nodeName": "mask1_out", "type": "Any"}, {"lineNumber": 189, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 202, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 213, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 218, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 234, "col_offset": 12, "nodeName": "getcon_out", "type": "Any"}, {"lineNumber": 237, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 238, "col_offset": 12, "nodeName": "getcon_out", "type": "Any"}, {"lineNumber": 242, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 243, "col_offset": 12, "nodeName": "getcon_out", "type": "Any"}, {"lineNumber": 246, "col_offset": 12, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 247, "col_offset": 12, "nodeName": "getcon_out", "type": "Any"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 80, "col_offset": 22, "nodeName": "concat", "type": "Any"}, {"lineNumber": 81, "col_offset": 26, "nodeName": "seq_out", "type": "Any"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "split_out", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "random", "type": "Any"}, {"lineNumber": 136, "col_offset": 12, "nodeName": "nstep_rs", "type": "Any"}, {"lineNumber": 136, "col_offset": 37, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "nstep_rs", "type": "Any"}, {"lineNumber": 138, "col_offset": 37, "nodeName": "nomask_rs", "type": "Any"}, {"lineNumber": 149, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 150, "col_offset": 16, "nodeName": "mask0_out", "type": "Any"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 160, "col_offset": 16, "nodeName": "mask0_out", "type": "Any"}, {"lineNumber": 180, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 181, "col_offset": 16, "nodeName": "mask1_out", "type": "Any"}, {"lineNumber": 190, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 191, "col_offset": 16, "nodeName": "mask1_out", "type": "Any"}, {"lineNumber": 203, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 204, "col_offset": 16, "nodeName": "mask01_out", "type": "Any"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 209, "col_offset": 16, "nodeName": "mask01_out", "type": "Any"}, {"lineNumber": 214, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 215, "col_offset": 16, "nodeName": "mask01_out", "type": "Any"}, {"lineNumber": 219, "col_offset": 16, "nodeName": "nstep_out", "type": "Any"}, {"lineNumber": 220, "col_offset": 16, "nodeName": "mask01_out", "type": "Any"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "chainer", "type": "Any"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 37, "col_offset": 46, "nodeName": "in_size", "type": "int"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 38, "col_offset": 46, "nodeName": "in_size", "type": "int"}, {"lineNumber": 80, "col_offset": 22, "nodeName": "F", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "chainer", "type": "Any"}, {"lineNumber": 107, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 107, "col_offset": 46, "nodeName": "in_size", "type": "int"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "xp", "type": "Any"}, {"lineNumber": 108, "col_offset": 46, "nodeName": "in_size", "type": "int"}]