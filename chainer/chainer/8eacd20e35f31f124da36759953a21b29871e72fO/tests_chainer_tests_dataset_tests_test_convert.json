[{"lineNumber": 329, "col_offset": 0, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 13, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "get_arrays_to_concat", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "check_device", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 27, "col_offset": 4, "nodeName": "check_concat_arrays", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "test_concat_arrays_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "test_concat_arrays_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 46, "col_offset": 4, "nodeName": "test_concat_arrays_numpy_to_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "test_concat_arrays_chainerx_native", "type": "Callable[[Any], Any]"}, {"lineNumber": 63, "col_offset": 4, "nodeName": "test_concat_arrays_numpy_to_chainerx_device", "type": "Callable[[Any], Any]"}, {"lineNumber": 69, "col_offset": 4, "nodeName": "get_tuple_arrays_to_concat", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 73, "col_offset": 4, "nodeName": "check_concat_tuples", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "test_concat_tuples_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "test_concat_tuples_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "test_concat_tuples_numpy_to_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "test_concat_tuples_chainerx_native", "type": "Callable[[Any], Any]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "test_concat_tuples_numpy_to_chainerx_device", "type": "Callable[[Any], Any]"}, {"lineNumber": 118, "col_offset": 4, "nodeName": "get_dict_arrays_to_concat", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "check_concat_dicts", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "test_concat_dicts_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 140, "col_offset": 4, "nodeName": "test_concat_dicts_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 145, "col_offset": 4, "nodeName": "test_concat_dicts_numpy_to_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 150, "col_offset": 4, "nodeName": "test_concat_dicts_chainerx_native", "type": "Callable[[Any], Any]"}, {"lineNumber": 162, "col_offset": 4, "nodeName": "test_concat_dicts_numpy_to_chainerx_device", "type": "Callable[[Any], Any]"}, {"lineNumber": 170, "col_offset": 36, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 172, "col_offset": 4, "nodeName": "check_concat_arrays_padding", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 190, "col_offset": 4, "nodeName": "test_concat_arrays_padding_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 193, "col_offset": 4, "nodeName": "test_concat_arrays_padding_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "check_concat_tuples_padding", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 229, "col_offset": 4, "nodeName": "test_concat_tuples_padding_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "test_concat_tuples_padding_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "check_concat_dicts_padding", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 270, "col_offset": 4, "nodeName": "test_concat_dicts_padding_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 273, "col_offset": 4, "nodeName": "test_concat_dicts_padding_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 283, "col_offset": 41, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 288, "col_offset": 4, "nodeName": "check_device", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 295, "col_offset": 4, "nodeName": "check_concat_arrays", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 310, "col_offset": 4, "nodeName": "test_concat_arrays_cpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 319, "col_offset": 4, "nodeName": "test_concat_arrays_gpu", "type": "Callable[[Any], Any]"}, {"lineNumber": 340, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 342, "col_offset": 4, "nodeName": "test_to_device", "type": "Callable[[Any], Any]"}, {"lineNumber": 358, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 360, "col_offset": 4, "nodeName": "test_to_device", "type": "Callable[[Any], Any]"}, {"lineNumber": 379, "col_offset": 27, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 381, "col_offset": 4, "nodeName": "test_to_device", "type": "Callable[[Any], Any]"}, {"lineNumber": 13, "col_offset": 25, "nodeName": "unittest", "type": "module"}, {"lineNumber": 170, "col_offset": 36, "nodeName": "unittest", "type": "module"}, {"lineNumber": 283, "col_offset": 41, "nodeName": "unittest", "type": "module"}, {"lineNumber": 285, "col_offset": 4, "nodeName": "int_arrays", "type": "List[int]"}, {"lineNumber": 286, "col_offset": 4, "nodeName": "float_arrays", "type": "List[float]"}, {"lineNumber": 330, "col_offset": 7, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 340, "col_offset": 22, "nodeName": "unittest", "type": "module"}, {"lineNumber": 358, "col_offset": 22, "nodeName": "unittest", "type": "module"}, {"lineNumber": 379, "col_offset": 27, "nodeName": "unittest", "type": "module"}, {"lineNumber": 392, "col_offset": 0, "nodeName": "run_module", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 392, "col_offset": 19, "nodeName": "__name__", "type": "str"}, {"lineNumber": 392, "col_offset": 29, "nodeName": "__file__", "type": "str"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "np_arrays", "type": "List[Any]"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "np_array", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "device", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "device", "type": "Any"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "key", "type": "Any"}, {"lineNumber": 127, "col_offset": 19, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 152, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 164, "col_offset": 8, "nodeName": "device", "type": "Any"}, {"lineNumber": 165, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 203, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 210, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 212, "col_offset": 8, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 250, "col_offset": 12, "nodeName": "d", "type": "Dict[str, Any]"}, {"lineNumber": 250, "col_offset": 17, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 253, "col_offset": 8, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "array", "type": "Any"}, {"lineNumber": 311, "col_offset": 12, "nodeName": "device", "type": "Optional[int]"}, {"lineNumber": 331, "col_offset": 15, "nodeName": "cupy", "type": "Any"}, {"lineNumber": 333, "col_offset": 15, "nodeName": "numpy", "type": "module"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "src_xp", "type": "Any"}, {"lineNumber": 344, "col_offset": 8, "nodeName": "dst_xp", "type": "Any"}, {"lineNumber": 345, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 346, "col_offset": 8, "nodeName": "y", "type": "Any"}, {"lineNumber": 362, "col_offset": 8, "nodeName": "src_xp", "type": "Any"}, {"lineNumber": 363, "col_offset": 8, "nodeName": "dst_xp", "type": "Any"}, {"lineNumber": 364, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "y", "type": "Any"}, {"lineNumber": 383, "col_offset": 8, "nodeName": "src_xp", "type": "Any"}, {"lineNumber": 384, "col_offset": 8, "nodeName": "dst_xp", "type": "Any"}, {"lineNumber": 385, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 386, "col_offset": 8, "nodeName": "y", "type": "Any"}, {"lineNumber": 392, "col_offset": 0, "nodeName": "testing", "type": "module"}, {"lineNumber": 22, "col_offset": 11, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 22, "col_offset": 22, "nodeName": "array", "type": "Any"}, {"lineNumber": 22, "col_offset": 29, "nodeName": "ndarray", "type": "Type[chainerx.ndarray]"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 28, "col_offset": 40, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 28, "col_offset": 48, "nodeName": "device", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 29, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "check_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 31, "col_offset": 26, "nodeName": "array", "type": "Any"}, {"lineNumber": 31, "col_offset": 33, "nodeName": "expected_device", "type": "Any"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "to_numpy", "type": "Callable[[Any], Any]"}, {"lineNumber": 33, "col_offset": 36, "nodeName": "array", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 34, "col_offset": 15, "nodeName": "y", "type": "Any"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "np_array", "type": "Any"}, {"lineNumber": 34, "col_offset": 34, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "get_arrays_to_concat", "type": "Callable[[Any], Any]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 39, "col_offset": 33, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 39, "col_offset": 47, "nodeName": "DummyDevice", "type": "chainer.backends.cuda.DummyDeviceType"}, {"lineNumber": 43, "col_offset": 17, "nodeName": "get_arrays_to_concat", "type": "Any"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "to_gpu", "type": "Callable[..., Any]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 44, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "get_arrays_to_concat", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 49, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 53, "col_offset": 17, "nodeName": "get_arrays_to_concat", "type": "Any"}, {"lineNumber": 53, "col_offset": 43, "nodeName": "to_chainerx", "type": "Callable[..., Any]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "get_arrays_to_concat", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 61, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 66, "col_offset": 17, "nodeName": "get_arrays_to_concat", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 67, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 67, "col_offset": 41, "nodeName": "device", "type": "Any"}, {"lineNumber": 67, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 74, "col_offset": 17, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 74, "col_offset": 41, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 74, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 17, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "shape", "type": "Tuple[Any, ...]"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "arr", "type": "Any"}, {"lineNumber": 87, "col_offset": 17, "nodeName": "get_tuple_arrays_to_concat", "type": "Callable[[Any], Any]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "check_concat_tuples", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 88, "col_offset": 33, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 88, "col_offset": 47, "nodeName": "DummyDevice", "type": "chainer.backends.cuda.DummyDeviceType"}, {"lineNumber": 92, "col_offset": 17, "nodeName": "get_tuple_arrays_to_concat", "type": "Any"}, {"lineNumber": 92, "col_offset": 49, "nodeName": "to_gpu", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "check_concat_tuples", "type": "Any"}, {"lineNumber": 93, "col_offset": 33, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "get_tuple_arrays_to_concat", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "check_concat_tuples", "type": "Any"}, {"lineNumber": 98, "col_offset": 33, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "get_tuple_arrays_to_concat", "type": "Any"}, {"lineNumber": 102, "col_offset": 49, "nodeName": "to_chainerx", "type": "Callable[..., Any]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "check_concat_tuples", "type": "Any"}, {"lineNumber": 103, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 108, "col_offset": 17, "nodeName": "get_tuple_arrays_to_concat", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "check_concat_tuples", "type": "Any"}, {"lineNumber": 110, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 115, "col_offset": 17, "nodeName": "get_tuple_arrays_to_concat", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "check_concat_tuples", "type": "Any"}, {"lineNumber": 116, "col_offset": 33, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 116, "col_offset": 41, "nodeName": "device", "type": "Any"}, {"lineNumber": 116, "col_offset": 49, "nodeName": "device", "type": "Any"}, {"lineNumber": 125, "col_offset": 17, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 125, "col_offset": 41, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 125, "col_offset": 48, "nodeName": "device", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "shape", "type": "Tuple[Any, ...]"}, {"lineNumber": 132, "col_offset": 12, "nodeName": "arr", "type": "Any"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "get_dict_arrays_to_concat", "type": "Callable[[Any], Any]"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "check_concat_dicts", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 138, "col_offset": 32, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 138, "col_offset": 45, "nodeName": "DummyDevice", "type": "chainer.backends.cuda.DummyDeviceType"}, {"lineNumber": 142, "col_offset": 16, "nodeName": "get_dict_arrays_to_concat", "type": "Any"}, {"lineNumber": 142, "col_offset": 47, "nodeName": "to_gpu", "type": "Callable[..., Any]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "check_concat_dicts", "type": "Any"}, {"lineNumber": 143, "col_offset": 32, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "get_dict_arrays_to_concat", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "check_concat_dicts", "type": "Any"}, {"lineNumber": 148, "col_offset": 32, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 152, "col_offset": 17, "nodeName": "get_dict_arrays_to_concat", "type": "Any"}, {"lineNumber": 152, "col_offset": 48, "nodeName": "to_chainerx", "type": "Callable[..., Any]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "check_concat_dicts", "type": "Any"}, {"lineNumber": 153, "col_offset": 32, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 158, "col_offset": 17, "nodeName": "get_dict_arrays_to_concat", "type": "Any"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "check_concat_dicts", "type": "Any"}, {"lineNumber": 160, "col_offset": 32, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 165, "col_offset": 17, "nodeName": "get_dict_arrays_to_concat", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "check_concat_dicts", "type": "Any"}, {"lineNumber": 166, "col_offset": 32, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 166, "col_offset": 40, "nodeName": "device", "type": "Any"}, {"lineNumber": 166, "col_offset": 48, "nodeName": "device", "type": "Any"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 176, "col_offset": 40, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 181, "col_offset": 16, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 181, "col_offset": 28, "nodeName": "array", "type": "Any"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "check_concat_arrays_padding", "type": "Callable[[Any], Any]"}, {"lineNumber": 191, "col_offset": 41, "nodeName": "numpy", "type": "module"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "check_concat_arrays_padding", "type": "Any"}, {"lineNumber": 195, "col_offset": 41, "nodeName": "cupy", "type": "Any"}, {"lineNumber": 203, "col_offset": 17, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 203, "col_offset": 41, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 205, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 206, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 210, "col_offset": 17, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 212, "col_offset": 17, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "check_concat_tuples_padding", "type": "Callable[[Any], Any]"}, {"lineNumber": 230, "col_offset": 41, "nodeName": "numpy", "type": "module"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "check_concat_tuples_padding", "type": "Any"}, {"lineNumber": 234, "col_offset": 41, "nodeName": "cupy", "type": "Any"}, {"lineNumber": 242, "col_offset": 17, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 242, "col_offset": 41, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 243, "col_offset": 27, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 244, "col_offset": 27, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 246, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "check_concat_dicts_padding", "type": "Callable[[Any], Any]"}, {"lineNumber": 271, "col_offset": 40, "nodeName": "numpy", "type": "module"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "check_concat_dicts_padding", "type": "Any"}, {"lineNumber": 275, "col_offset": 40, "nodeName": "cupy", "type": "Any"}, {"lineNumber": 296, "col_offset": 16, "nodeName": "concat_examples", "type": "Callable[..., Any]"}, {"lineNumber": 296, "col_offset": 40, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 296, "col_offset": 48, "nodeName": "device", "type": "Any"}, {"lineNumber": 296, "col_offset": 56, "nodeName": "padding", "type": "Any"}, {"lineNumber": 297, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 297, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 298, "col_offset": 8, "nodeName": "check_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 298, "col_offset": 26, "nodeName": "array", "type": "Any"}, {"lineNumber": 298, "col_offset": 33, "nodeName": "device", "type": "Any"}, {"lineNumber": 300, "col_offset": 12, "nodeName": "x", "type": "Any"}, {"lineNumber": 300, "col_offset": 15, "nodeName": "y", "type": "Any"}, {"lineNumber": 300, "col_offset": 20, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 300, "col_offset": 24, "nodeName": "array", "type": "Any"}, {"lineNumber": 300, "col_offset": 31, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 321, "col_offset": 33, "nodeName": "int_arrays", "type": "Any"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "check_concat_arrays", "type": "Any"}, {"lineNumber": 324, "col_offset": 33, "nodeName": "float_arrays", "type": "Any"}, {"lineNumber": 331, "col_offset": 15, "nodeName": "cuda", "type": "module"}, {"lineNumber": 343, "col_offset": 17, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "src_gpu", "type": "Any"}, {"lineNumber": 344, "col_offset": 17, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 344, "col_offset": 24, "nodeName": "dst_gpu", "type": "Any"}, {"lineNumber": 345, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 346, "col_offset": 12, "nodeName": "to_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 346, "col_offset": 30, "nodeName": "device", "type": "Any"}, {"lineNumber": 346, "col_offset": 43, "nodeName": "x", "type": "Any"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 347, "col_offset": 30, "nodeName": "y", "type": "Any"}, {"lineNumber": 347, "col_offset": 33, "nodeName": "ndarray", "type": "Any"}, {"lineNumber": 362, "col_offset": 17, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 362, "col_offset": 24, "nodeName": "src_gpu", "type": "Any"}, {"lineNumber": 363, "col_offset": 17, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 363, "col_offset": 24, "nodeName": "dst_gpu", "type": "Any"}, {"lineNumber": 364, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 365, "col_offset": 12, "nodeName": "to_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 365, "col_offset": 30, "nodeName": "device", "type": "Any"}, {"lineNumber": 365, "col_offset": 43, "nodeName": "x", "type": "Any"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Any"}, {"lineNumber": 366, "col_offset": 30, "nodeName": "y", "type": "Any"}, {"lineNumber": 366, "col_offset": 33, "nodeName": "ndarray", "type": "Any"}, {"lineNumber": 371, "col_offset": 35, "nodeName": "src_gpu", "type": "Any"}, {"lineNumber": 383, "col_offset": 17, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 383, "col_offset": 24, "nodeName": "src_gpu", "type": "Any"}, {"lineNumber": 384, "col_offset": 17, "nodeName": "get_xp", "type": "Callable[[Any], Any]"}, {"lineNumber": 384, "col_offset": 24, "nodeName": "dst_gpu", "type": "Any"}, {"lineNumber": 385, "col_offset": 12, "nodeName": "array", "type": "Any"}, {"lineNumber": 386, "col_offset": 12, "nodeName": "to_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 386, "col_offset": 30, "nodeName": "device", "type": "Any"}, {"lineNumber": 386, "col_offset": 43, "nodeName": "x", "type": "Any"}, {"lineNumber": 387, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Any"}, {"lineNumber": 387, "col_offset": 30, "nodeName": "y", "type": "Any"}, {"lineNumber": 387, "col_offset": 33, "nodeName": "ndarray", "type": "Any"}, {"lineNumber": 389, "col_offset": 8, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 389, "col_offset": 40, "nodeName": "device", "type": "Any"}, {"lineNumber": 16, "col_offset": 21, "nodeName": "rand", "type": "Any"}, {"lineNumber": 16, "col_offset": 49, "nodeName": "_", "type": "int"}, {"lineNumber": 17, "col_offset": 16, "nodeName": "conv", "type": "Any"}, {"lineNumber": 17, "col_offset": 21, "nodeName": "a", "type": "Any"}, {"lineNumber": 17, "col_offset": 28, "nodeName": "a", "type": "Any"}, {"lineNumber": 17, "col_offset": 33, "nodeName": "np_arrays", "type": "List[Any]"}, {"lineNumber": 22, "col_offset": 29, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "device", "type": "Any"}, {"lineNumber": 23, "col_offset": 35, "nodeName": "expected_device", "type": "Any"}, {"lineNumber": 25, "col_offset": 59, "nodeName": "expected_device", "type": "Any"}, {"lineNumber": 28, "col_offset": 16, "nodeName": "dataset", "type": "module"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 29, "col_offset": 25, "nodeName": "array", "type": "Any"}, {"lineNumber": 29, "col_offset": 55, "nodeName": "shape", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "backend", "type": "module"}, {"lineNumber": 35, "col_offset": 12, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 35, "col_offset": 45, "nodeName": "x", "type": "Any"}, {"lineNumber": 38, "col_offset": 17, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 38, "col_offset": 53, "nodeName": "a", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 39, "col_offset": 47, "nodeName": "cuda", "type": "module"}, {"lineNumber": 43, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 43, "nodeName": "cuda", "type": "module"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 44, "col_offset": 47, "nodeName": "Device", "type": "Any"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 48, "col_offset": 53, "nodeName": "a", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 49, "col_offset": 44, "nodeName": "Device", "type": "Any"}, {"lineNumber": 53, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 43, "nodeName": "backend", "type": "module"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 54, "col_offset": 47, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 61, "col_offset": 47, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 66, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 66, "col_offset": 53, "nodeName": "a", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 20, "nodeName": "_", "type": "int"}, {"lineNumber": 74, "col_offset": 17, "nodeName": "dataset", "type": "module"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 75, "col_offset": 29, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 75, "col_offset": 38, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 76, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 76, "col_offset": 27, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 77, "col_offset": 37, "nodeName": "shape", "type": "Any"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "shape", "type": "Any"}, {"lineNumber": 78, "col_offset": 46, "nodeName": "shape", "type": "Tuple[Any, ...]"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "check_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 80, "col_offset": 41, "nodeName": "expected_device", "type": "Any"}, {"lineNumber": 82, "col_offset": 18, "nodeName": "to_numpy", "type": "Callable[[Any], Any]"}, {"lineNumber": 83, "col_offset": 16, "nodeName": "x", "type": "Any"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "y", "type": "Any"}, {"lineNumber": 83, "col_offset": 24, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 83, "col_offset": 28, "nodeName": "arr", "type": "Any"}, {"lineNumber": 83, "col_offset": 33, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 87, "col_offset": 17, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 87, "col_offset": 59, "nodeName": "a", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 88, "col_offset": 47, "nodeName": "cuda", "type": "module"}, {"lineNumber": 92, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 92, "col_offset": 49, "nodeName": "cuda", "type": "module"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 93, "col_offset": 47, "nodeName": "Device", "type": "Any"}, {"lineNumber": 97, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 97, "col_offset": 59, "nodeName": "a", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 98, "col_offset": 44, "nodeName": "Device", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 49, "nodeName": "backend", "type": "module"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 103, "col_offset": 47, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 108, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 110, "col_offset": 47, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 115, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 115, "col_offset": 59, "nodeName": "a", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 122, "col_offset": 16, "nodeName": "_", "type": "int"}, {"lineNumber": 125, "col_offset": 17, "nodeName": "dataset", "type": "module"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "frozenset", "type": "Type[FrozenSet[Any]]"}, {"lineNumber": 126, "col_offset": 51, "nodeName": "frozenset", "type": "Type[FrozenSet[Any]]"}, {"lineNumber": 128, "col_offset": 36, "nodeName": "shape", "type": "Any"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 129, "col_offset": 29, "nodeName": "shape", "type": "Any"}, {"lineNumber": 129, "col_offset": 48, "nodeName": "shape", "type": "Tuple[Any, ...]"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "check_device", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 130, "col_offset": 43, "nodeName": "expected_device", "type": "Any"}, {"lineNumber": 132, "col_offset": 18, "nodeName": "to_numpy", "type": "Callable[[Any], Any]"}, {"lineNumber": 133, "col_offset": 16, "nodeName": "x", "type": "Any"}, {"lineNumber": 133, "col_offset": 19, "nodeName": "y", "type": "Any"}, {"lineNumber": 133, "col_offset": 24, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 133, "col_offset": 28, "nodeName": "arr", "type": "Any"}, {"lineNumber": 133, "col_offset": 33, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 137, "col_offset": 57, "nodeName": "a", "type": "Any"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 138, "col_offset": 45, "nodeName": "cuda", "type": "module"}, {"lineNumber": 142, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 142, "col_offset": 47, "nodeName": "cuda", "type": "module"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 143, "col_offset": 45, "nodeName": "Device", "type": "Any"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 147, "col_offset": 57, "nodeName": "a", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 148, "col_offset": 42, "nodeName": "Device", "type": "Any"}, {"lineNumber": 152, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 152, "col_offset": 48, "nodeName": "backend", "type": "module"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 153, "col_offset": 46, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 158, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 160, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 160, "col_offset": 46, "nodeName": "get_device", "type": "Any"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 165, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 165, "col_offset": 58, "nodeName": "a", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 173, "col_offset": 18, "nodeName": "rand", "type": "Any"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "rand", "type": "Any"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "rand", "type": "Any"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "dataset", "type": "module"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "array", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 178, "col_offset": 25, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 178, "col_offset": 30, "nodeName": "array", "type": "Any"}, {"lineNumber": 178, "col_offset": 38, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 180, "col_offset": 18, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 180, "col_offset": 30, "nodeName": "a", "type": "Any"}, {"lineNumber": 180, "col_offset": 37, "nodeName": "a", "type": "Any"}, {"lineNumber": 180, "col_offset": 42, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 181, "col_offset": 16, "nodeName": "cuda", "type": "module"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 182, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 182, "col_offset": 59, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 183, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 184, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 185, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 185, "col_offset": 59, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 186, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 187, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 187, "col_offset": 59, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 188, "col_offset": 41, "nodeName": "array", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 195, "col_offset": 41, "nodeName": "cuda", "type": "module"}, {"lineNumber": 203, "col_offset": 17, "nodeName": "dataset", "type": "module"}, {"lineNumber": 204, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 204, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 204, "col_offset": 29, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 207, "col_offset": 25, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 207, "col_offset": 42, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 208, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 208, "col_offset": 25, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 208, "col_offset": 42, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 210, "col_offset": 23, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 210, "col_offset": 27, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 211, "col_offset": 12, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 230, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 234, "col_offset": 41, "nodeName": "cuda", "type": "module"}, {"lineNumber": 242, "col_offset": 17, "nodeName": "dataset", "type": "module"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 247, "col_offset": 25, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 247, "col_offset": 44, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 248, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 248, "col_offset": 25, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 248, "col_offset": 44, "nodeName": "type", "type": "Type[Type[Any]]"}, {"lineNumber": 251, "col_offset": 12, "nodeName": "d", "type": "Dict[str, Any]"}, {"lineNumber": 251, "col_offset": 21, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 252, "col_offset": 12, "nodeName": "d", "type": "Dict[str, Any]"}, {"lineNumber": 252, "col_offset": 21, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 253, "col_offset": 23, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 253, "col_offset": 54, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "self", "type": "TestConcatExamplesWithPadding"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 275, "col_offset": 40, "nodeName": "cuda", "type": "module"}, {"lineNumber": 289, "col_offset": 11, "nodeName": "device", "type": "Any"}, {"lineNumber": 289, "col_offset": 34, "nodeName": "device", "type": "Any"}, {"lineNumber": 290, "col_offset": 12, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 290, "col_offset": 34, "nodeName": "array", "type": "Any"}, {"lineNumber": 290, "col_offset": 41, "nodeName": "ndarray", "type": "Any"}, {"lineNumber": 291, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 291, "col_offset": 29, "nodeName": "id", "type": "Any"}, {"lineNumber": 291, "col_offset": 46, "nodeName": "device", "type": "Any"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 293, "col_offset": 34, "nodeName": "array", "type": "Any"}, {"lineNumber": 293, "col_offset": 41, "nodeName": "ndarray", "type": "Type[numpy.ndarray]"}, {"lineNumber": 296, "col_offset": 16, "nodeName": "dataset", "type": "module"}, {"lineNumber": 296, "col_offset": 56, "nodeName": "self", "type": "Any"}, {"lineNumber": 297, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 297, "col_offset": 25, "nodeName": "array", "type": "Any"}, {"lineNumber": 298, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 301, "col_offset": 46, "nodeName": "numpy", "type": "module"}, {"lineNumber": 312, "col_offset": 12, "nodeName": "check_concat_arrays", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 312, "col_offset": 37, "nodeName": "int_arrays", "type": "List[int]"}, {"lineNumber": 315, "col_offset": 12, "nodeName": "check_concat_arrays", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 315, "col_offset": 37, "nodeName": "float_arrays", "type": "List[float]"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 321, "col_offset": 33, "nodeName": "self", "type": "Any"}, {"lineNumber": 322, "col_offset": 40, "nodeName": "id", "type": "Any"}, {"lineNumber": 323, "col_offset": 47, "nodeName": "int64", "type": "Any"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 324, "col_offset": 33, "nodeName": "self", "type": "Any"}, {"lineNumber": 325, "col_offset": 40, "nodeName": "id", "type": "Any"}, {"lineNumber": 326, "col_offset": 47, "nodeName": "float64", "type": "Any"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 344, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 345, "col_offset": 12, "nodeName": "src_xp", "type": "Any"}, {"lineNumber": 346, "col_offset": 12, "nodeName": "dataset", "type": "module"}, {"lineNumber": 346, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 347, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 347, "col_offset": 33, "nodeName": "dst_xp", "type": "Any"}, {"lineNumber": 362, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 363, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 364, "col_offset": 12, "nodeName": "src_xp", "type": "Any"}, {"lineNumber": 365, "col_offset": 12, "nodeName": "dataset", "type": "module"}, {"lineNumber": 365, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 366, "col_offset": 33, "nodeName": "dst_xp", "type": "Any"}, {"lineNumber": 368, "col_offset": 11, "nodeName": "device", "type": "Any"}, {"lineNumber": 368, "col_offset": 39, "nodeName": "device", "type": "Any"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 369, "col_offset": 44, "nodeName": "device", "type": "Any"}, {"lineNumber": 371, "col_offset": 11, "nodeName": "device", "type": "Any"}, {"lineNumber": 371, "col_offset": 35, "nodeName": "self", "type": "Any"}, {"lineNumber": 372, "col_offset": 12, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 383, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 384, "col_offset": 24, "nodeName": "self", "type": "Any"}, {"lineNumber": 385, "col_offset": 12, "nodeName": "src_xp", "type": "Any"}, {"lineNumber": 386, "col_offset": 12, "nodeName": "dataset", "type": "module"}, {"lineNumber": 386, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 387, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 387, "col_offset": 33, "nodeName": "dst_xp", "type": "Any"}, {"lineNumber": 389, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 389, "col_offset": 25, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 389, "col_offset": 29, "nodeName": "device", "type": "Any"}, {"lineNumber": 389, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 16, "col_offset": 21, "nodeName": "random", "type": "Any"}, {"lineNumber": 16, "col_offset": 54, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 23, "col_offset": 19, "nodeName": "array", "type": "Any"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "get_device_from_array", "type": "Callable[..., Any]"}, {"lineNumber": 25, "col_offset": 49, "nodeName": "array", "type": "Any"}, {"lineNumber": 35, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 35, "col_offset": 48, "nodeName": "to_numpy", "type": "Callable[[Any], Any]"}, {"lineNumber": 35, "col_offset": 65, "nodeName": "y", "type": "Any"}, {"lineNumber": 44, "col_offset": 47, "nodeName": "cuda", "type": "module"}, {"lineNumber": 49, "col_offset": 44, "nodeName": "cuda", "type": "module"}, {"lineNumber": 54, "col_offset": 47, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 60, "col_offset": 22, "nodeName": "to_chainerx", "type": "Callable[..., Any]"}, {"lineNumber": 61, "col_offset": 47, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 71, "col_offset": 25, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 80, "col_offset": 30, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 82, "col_offset": 18, "nodeName": "backend", "type": "module"}, {"lineNumber": 82, "col_offset": 35, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 84, "col_offset": 49, "nodeName": "x", "type": "Any"}, {"lineNumber": 93, "col_offset": 47, "nodeName": "cuda", "type": "module"}, {"lineNumber": 98, "col_offset": 44, "nodeName": "cuda", "type": "module"}, {"lineNumber": 103, "col_offset": 47, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 109, "col_offset": 22, "nodeName": "to_chainerx", "type": "Callable[..., Any]"}, {"lineNumber": 110, "col_offset": 47, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 122, "col_offset": 21, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 126, "col_offset": 35, "nodeName": "keys", "type": "Any"}, {"lineNumber": 126, "col_offset": 61, "nodeName": "keys", "type": "Any"}, {"lineNumber": 129, "col_offset": 12, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "self", "type": "TestConcatExamples"}, {"lineNumber": 130, "col_offset": 30, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 132, "col_offset": 18, "nodeName": "backend", "type": "module"}, {"lineNumber": 132, "col_offset": 35, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 134, "col_offset": 49, "nodeName": "x", "type": "Any"}, {"lineNumber": 143, "col_offset": 45, "nodeName": "cuda", "type": "module"}, {"lineNumber": 148, "col_offset": 42, "nodeName": "cuda", "type": "module"}, {"lineNumber": 153, "col_offset": 46, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 159, "col_offset": 22, "nodeName": "to_chainerx", "type": "Callable[..., Any]"}, {"lineNumber": 160, "col_offset": 46, "nodeName": "chainerx", "type": "module"}, {"lineNumber": 173, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 178, "col_offset": 43, "nodeName": "arrays", "type": "List[Any]"}, {"lineNumber": 180, "col_offset": 18, "nodeName": "cuda", "type": "module"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 183, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 184, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 185, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 188, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 199, "col_offset": 13, "nodeName": "rand", "type": "Any"}, {"lineNumber": 199, "col_offset": 35, "nodeName": "rand", "type": "Any"}, {"lineNumber": 200, "col_offset": 13, "nodeName": "rand", "type": "Any"}, {"lineNumber": 200, "col_offset": 35, "nodeName": "rand", "type": "Any"}, {"lineNumber": 201, "col_offset": 13, "nodeName": "rand", "type": "Any"}, {"lineNumber": 201, "col_offset": 35, "nodeName": "rand", "type": "Any"}, {"lineNumber": 205, "col_offset": 25, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 206, "col_offset": 25, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 207, "col_offset": 30, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 208, "col_offset": 30, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 211, "col_offset": 19, "nodeName": "i", "type": "int"}, {"lineNumber": 211, "col_offset": 24, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 211, "col_offset": 51, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 212, "col_offset": 23, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 212, "col_offset": 35, "nodeName": "array", "type": "Any"}, {"lineNumber": 212, "col_offset": 46, "nodeName": "array", "type": "Any"}, {"lineNumber": 212, "col_offset": 55, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 213, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 213, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 214, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 215, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 216, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 216, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 216, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 217, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 217, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 218, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 218, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 219, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 220, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 220, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 221, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 222, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 223, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 223, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 224, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 225, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 226, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 226, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 226, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 227, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 227, "col_offset": 41, "nodeName": "arrays", "type": "Tuple[Any, ...]"}, {"lineNumber": 238, "col_offset": 18, "nodeName": "rand", "type": "Any"}, {"lineNumber": 238, "col_offset": 45, "nodeName": "rand", "type": "Any"}, {"lineNumber": 239, "col_offset": 18, "nodeName": "rand", "type": "Any"}, {"lineNumber": 239, "col_offset": 45, "nodeName": "rand", "type": "Any"}, {"lineNumber": 240, "col_offset": 18, "nodeName": "rand", "type": "Any"}, {"lineNumber": 240, "col_offset": 45, "nodeName": "rand", "type": "Any"}, {"lineNumber": 245, "col_offset": 25, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 246, "col_offset": 25, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 247, "col_offset": 30, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 248, "col_offset": 30, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 251, "col_offset": 21, "nodeName": "cuda", "type": "module"}, {"lineNumber": 251, "col_offset": 33, "nodeName": "d", "type": "Dict[str, Any]"}, {"lineNumber": 252, "col_offset": 21, "nodeName": "cuda", "type": "module"}, {"lineNumber": 252, "col_offset": 33, "nodeName": "d", "type": "Dict[str, Any]"}, {"lineNumber": 253, "col_offset": 23, "nodeName": "cuda", "type": "module"}, {"lineNumber": 253, "col_offset": 35, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 253, "col_offset": 54, "nodeName": "cuda", "type": "module"}, {"lineNumber": 253, "col_offset": 66, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 254, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 254, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 254, "col_offset": 65, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 255, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 256, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 256, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 257, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 257, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 257, "col_offset": 65, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 258, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 258, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 259, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 259, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 259, "col_offset": 65, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 260, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 261, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 261, "col_offset": 65, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 262, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 263, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 264, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 264, "col_offset": 65, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 265, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 266, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 267, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 267, "col_offset": 65, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 268, "col_offset": 41, "nodeName": "arrays", "type": "Dict[str, Any]"}, {"lineNumber": 290, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 290, "col_offset": 41, "nodeName": "cuda", "type": "module"}, {"lineNumber": 291, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 291, "col_offset": 29, "nodeName": "device", "type": "Any"}, {"lineNumber": 293, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 293, "col_offset": 41, "nodeName": "numpy", "type": "module"}, {"lineNumber": 297, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 297, "col_offset": 43, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 301, "col_offset": 15, "nodeName": "get_array_module", "type": "Callable[..., Any]"}, {"lineNumber": 301, "col_offset": 40, "nodeName": "x", "type": "Any"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 306, "col_offset": 16, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 312, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 312, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 313, "col_offset": 44, "nodeName": "device", "type": "Any"}, {"lineNumber": 314, "col_offset": 51, "nodeName": "int64", "type": "Any"}, {"lineNumber": 315, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 315, "col_offset": 37, "nodeName": "self", "type": "Any"}, {"lineNumber": 316, "col_offset": 44, "nodeName": "device", "type": "Any"}, {"lineNumber": 317, "col_offset": 51, "nodeName": "float64", "type": "Any"}, {"lineNumber": 323, "col_offset": 47, "nodeName": "numpy", "type": "module"}, {"lineNumber": 326, "col_offset": 47, "nodeName": "numpy", "type": "module"}, {"lineNumber": 368, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 368, "col_offset": 39, "nodeName": "self", "type": "Any"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 369, "col_offset": 29, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 369, "col_offset": 33, "nodeName": "device", "type": "Any"}, {"lineNumber": 369, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 371, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 372, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 372, "col_offset": 29, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 372, "col_offset": 33, "nodeName": "device", "type": "Any"}, {"lineNumber": 372, "col_offset": 44, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 372, "col_offset": 48, "nodeName": "device", "type": "Any"}, {"lineNumber": 389, "col_offset": 29, "nodeName": "y", "type": "Any"}, {"lineNumber": 16, "col_offset": 21, "nodeName": "numpy", "type": "module"}, {"lineNumber": 25, "col_offset": 19, "nodeName": "backend", "type": "module"}, {"lineNumber": 29, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 29, "col_offset": 43, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 29, "col_offset": 55, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 35, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 35, "col_offset": 48, "nodeName": "backend", "type": "module"}, {"lineNumber": 60, "col_offset": 22, "nodeName": "backend", "type": "module"}, {"lineNumber": 60, "col_offset": 42, "nodeName": "to_gpu", "type": "Callable[..., Any]"}, {"lineNumber": 60, "col_offset": 54, "nodeName": "a", "type": "Any"}, {"lineNumber": 77, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 77, "col_offset": 25, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 78, "col_offset": 29, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 80, "col_offset": 37, "nodeName": "i", "type": "int"}, {"lineNumber": 82, "col_offset": 42, "nodeName": "i", "type": "int"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 84, "col_offset": 52, "nodeName": "to_numpy", "type": "Callable[[Any], Any]"}, {"lineNumber": 109, "col_offset": 22, "nodeName": "backend", "type": "module"}, {"lineNumber": 109, "col_offset": 42, "nodeName": "to_gpu", "type": "Callable[..., Any]"}, {"lineNumber": 109, "col_offset": 54, "nodeName": "a", "type": "Any"}, {"lineNumber": 126, "col_offset": 35, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 128, "col_offset": 21, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 128, "col_offset": 25, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 129, "col_offset": 29, "nodeName": "arrays", "type": "Any"}, {"lineNumber": 130, "col_offset": 37, "nodeName": "key", "type": "Any"}, {"lineNumber": 132, "col_offset": 42, "nodeName": "key", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 134, "col_offset": 52, "nodeName": "to_numpy", "type": "Callable[[Any], Any]"}, {"lineNumber": 159, "col_offset": 22, "nodeName": "backend", "type": "module"}, {"lineNumber": 159, "col_offset": 42, "nodeName": "to_gpu", "type": "Callable[..., Any]"}, {"lineNumber": 159, "col_offset": 54, "nodeName": "a", "type": "Any"}, {"lineNumber": 173, "col_offset": 18, "nodeName": "xp", "type": "Any"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "xp", "type": "Any"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "xp", "type": "Any"}, {"lineNumber": 199, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 199, "col_offset": 35, "nodeName": "random", "type": "Any"}, {"lineNumber": 200, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 200, "col_offset": 35, "nodeName": "random", "type": "Any"}, {"lineNumber": 201, "col_offset": 13, "nodeName": "random", "type": "Any"}, {"lineNumber": 201, "col_offset": 35, "nodeName": "random", "type": "Any"}, {"lineNumber": 207, "col_offset": 47, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 208, "col_offset": 47, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 211, "col_offset": 24, "nodeName": "cuda", "type": "module"}, {"lineNumber": 211, "col_offset": 51, "nodeName": "cuda", "type": "module"}, {"lineNumber": 212, "col_offset": 23, "nodeName": "cuda", "type": "module"}, {"lineNumber": 238, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 238, "col_offset": 45, "nodeName": "random", "type": "Any"}, {"lineNumber": 239, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 239, "col_offset": 45, "nodeName": "random", "type": "Any"}, {"lineNumber": 240, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 240, "col_offset": 45, "nodeName": "random", "type": "Any"}, {"lineNumber": 247, "col_offset": 49, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 248, "col_offset": 49, "nodeName": "dicts", "type": "List[Dict[str, Any]]"}, {"lineNumber": 291, "col_offset": 29, "nodeName": "array", "type": "Any"}, {"lineNumber": 301, "col_offset": 15, "nodeName": "backend", "type": "module"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 303, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 303, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 304, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 304, "col_offset": 32, "nodeName": "y", "type": "Any"}, {"lineNumber": 306, "col_offset": 16, "nodeName": "testing", "type": "Any"}, {"lineNumber": 307, "col_offset": 20, "nodeName": "to_cpu", "type": "Callable[..., Any]"}, {"lineNumber": 307, "col_offset": 32, "nodeName": "x", "type": "Any"}, {"lineNumber": 308, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 308, "col_offset": 32, "nodeName": "y", "type": "Any"}, {"lineNumber": 314, "col_offset": 51, "nodeName": "numpy", "type": "module"}, {"lineNumber": 317, "col_offset": 51, "nodeName": "numpy", "type": "module"}, {"lineNumber": 322, "col_offset": 40, "nodeName": "Device", "type": "Any"}, {"lineNumber": 325, "col_offset": 40, "nodeName": "Device", "type": "Any"}, {"lineNumber": 369, "col_offset": 33, "nodeName": "y", "type": "Any"}, {"lineNumber": 372, "col_offset": 33, "nodeName": "x", "type": "Any"}, {"lineNumber": 372, "col_offset": 48, "nodeName": "y", "type": "Any"}, {"lineNumber": 60, "col_offset": 42, "nodeName": "cuda", "type": "module"}, {"lineNumber": 77, "col_offset": 37, "nodeName": "tuples", "type": "Any"}, {"lineNumber": 77, "col_offset": 47, "nodeName": "i", "type": "int"}, {"lineNumber": 78, "col_offset": 36, "nodeName": "i", "type": "int"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 84, "col_offset": 52, "nodeName": "backend", "type": "module"}, {"lineNumber": 84, "col_offset": 69, "nodeName": "y", "type": "Any"}, {"lineNumber": 109, "col_offset": 42, "nodeName": "cuda", "type": "module"}, {"lineNumber": 126, "col_offset": 61, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 128, "col_offset": 36, "nodeName": "dicts", "type": "Any"}, {"lineNumber": 128, "col_offset": 45, "nodeName": "key", "type": "Any"}, {"lineNumber": 129, "col_offset": 36, "nodeName": "key", "type": "Any"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 134, "col_offset": 52, "nodeName": "backend", "type": "module"}, {"lineNumber": 134, "col_offset": 69, "nodeName": "y", "type": "Any"}, {"lineNumber": 159, "col_offset": 42, "nodeName": "cuda", "type": "module"}, {"lineNumber": 199, "col_offset": 13, "nodeName": "xp", "type": "Any"}, {"lineNumber": 199, "col_offset": 35, "nodeName": "xp", "type": "Any"}, {"lineNumber": 200, "col_offset": 13, "nodeName": "xp", "type": "Any"}, {"lineNumber": 200, "col_offset": 35, "nodeName": "xp", "type": "Any"}, {"lineNumber": 201, "col_offset": 13, "nodeName": "xp", "type": "Any"}, {"lineNumber": 201, "col_offset": 35, "nodeName": "xp", "type": "Any"}, {"lineNumber": 211, "col_offset": 36, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 211, "col_offset": 63, "nodeName": "tuples", "type": "List[Tuple[Any, Any]]"}, {"lineNumber": 238, "col_offset": 18, "nodeName": "xp", "type": "Any"}, {"lineNumber": 238, "col_offset": 45, "nodeName": "xp", "type": "Any"}, {"lineNumber": 239, "col_offset": 18, "nodeName": "xp", "type": "Any"}, {"lineNumber": 239, "col_offset": 45, "nodeName": "xp", "type": "Any"}, {"lineNumber": 240, "col_offset": 18, "nodeName": "xp", "type": "Any"}, {"lineNumber": 240, "col_offset": 45, "nodeName": "xp", "type": "Any"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 303, "col_offset": 20, "nodeName": "numpy", "type": "module"}, {"lineNumber": 304, "col_offset": 20, "nodeName": "numpy", "type": "module"}, {"lineNumber": 304, "col_offset": 41, "nodeName": "expected_type", "type": "Any"}, {"lineNumber": 306, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 307, "col_offset": 20, "nodeName": "cuda", "type": "module"}, {"lineNumber": 308, "col_offset": 20, "nodeName": "numpy", "type": "module"}, {"lineNumber": 308, "col_offset": 41, "nodeName": "expected_type", "type": "Any"}, {"lineNumber": 322, "col_offset": 40, "nodeName": "cuda", "type": "module"}, {"lineNumber": 325, "col_offset": 40, "nodeName": "cuda", "type": "module"}, {"lineNumber": 84, "col_offset": 71, "nodeName": "i", "type": "int"}, {"lineNumber": 134, "col_offset": 71, "nodeName": "key", "type": "Any"}, {"lineNumber": 211, "col_offset": 43, "nodeName": "i", "type": "int"}, {"lineNumber": 211, "col_offset": 70, "nodeName": "i", "type": "int"}]