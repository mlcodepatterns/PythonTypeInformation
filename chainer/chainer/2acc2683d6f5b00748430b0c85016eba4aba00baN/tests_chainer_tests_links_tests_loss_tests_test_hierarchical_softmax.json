[{"lineNumber": 15, "col_offset": 22, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 38, "col_offset": 36, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 15, "col_offset": 22, "nodeName": "unittest", "type": "module"}, {"lineNumber": 38, "col_offset": 36, "nodeName": "unittest", "type": "module"}, {"lineNumber": 142, "col_offset": 0, "nodeName": "run_module", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 142, "col_offset": 19, "nodeName": "__name__", "type": "str"}, {"lineNumber": 142, "col_offset": 29, "nodeName": "__file__", "type": "str"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "expect", "type": "Tuple[Tuple[str, str], Tuple[Tuple[str, str], str]]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "_config_user", "type": "chainer.configuration._ConfigContext"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "tree", "type": "Tuple[Tuple[int, int], Tuple[Tuple[int, int], int]]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "link", "type": "chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "x", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "t", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "gy", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "W", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "total", "type": "int"}, {"lineNumber": 67, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "x", "type": "numpy.ndarray"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "x", "type": "numpy.ndarray"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "_func", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "g", "type": "Any"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "_func", "type": "Any"}, {"lineNumber": 142, "col_offset": 0, "nodeName": "testing", "type": "module"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "create_huffman_tree", "type": "Callable[[Any], Any]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 25, "col_offset": 25, "nodeName": "expect", "type": "Tuple[Tuple[str, str], Tuple[Tuple[str, str], str]]"}, {"lineNumber": 25, "col_offset": 33, "nodeName": "tree", "type": "Any"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "create_huffman_tree", "type": "Callable[[Any], Any]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 41, "col_offset": 28, "nodeName": "using_config", "type": "Callable[..., chainer.configuration._ConfigContext]"}, {"lineNumber": 41, "col_offset": 58, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "__enter__", "type": "Callable[[], None]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 45, "col_offset": 20, "nodeName": "BinaryHierarchicalSoftmax", "type": "Type[chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax]"}, {"lineNumber": 45, "col_offset": 55, "nodeName": "tree", "type": "Tuple[Tuple[int, int], Tuple[Tuple[int, int], int]]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "cleargrads", "type": "Callable[[], None]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "astype", "type": "Any"}, {"lineNumber": 47, "col_offset": 60, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "astype", "type": "Any"}, {"lineNumber": 48, "col_offset": 44, "nodeName": "int32", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "astype", "type": "Any"}, {"lineNumber": 49, "col_offset": 57, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "copy", "type": "Any"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "float16", "type": "Any"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "check_sum_options", "type": "Dict[str, float]"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "test_forward_options", "type": "Dict[str, float]"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "check_backward_options", "type": "Dict[str, Any]"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "check_sum_options", "type": "Dict[str, float]"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "test_forward_options", "type": "Dict[nothing, nothing]"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "check_backward_options", "type": "Dict[nothing, nothing]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "__exit__", "type": "Any"}, {"lineNumber": 67, "col_offset": 17, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "t", "type": "numpy.ndarray"}, {"lineNumber": 69, "col_offset": 15, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "loss", "type": "Any"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "data", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "total", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 79, "col_offset": 43, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "check_sum", "type": "Any"}, {"lineNumber": 80, "col_offset": 23, "nodeName": "x", "type": "numpy.ndarray"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 85, "col_offset": 43, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "check_sum", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assert_allclose", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "cpu_loss", "type": "Any"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "check_backward", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 12, "nodeName": "f", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 112, "col_offset": 33, "nodeName": "y_grad", "type": "Any"}, {"lineNumber": 112, "col_offset": 41, "nodeName": "W", "type": "Any"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "check_backward", "type": "Any"}, {"lineNumber": 117, "col_offset": 28, "nodeName": "x", "type": "Any"}, {"lineNumber": 117, "col_offset": 36, "nodeName": "t", "type": "Any"}, {"lineNumber": 117, "col_offset": 44, "nodeName": "gy", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "check_backward", "type": "Any"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "link", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 18, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 18, "col_offset": 31, "nodeName": "ValueError", "type": "Type[ValueError]"}, {"lineNumber": 19, "col_offset": 12, "nodeName": "create_huffman_tree", "type": "Callable[[Any], Any]"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "BinaryHierarchicalSoftmax", "type": "Type[chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax]"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "self", "type": "TestHuffmanTree"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "BinaryHierarchicalSoftmax", "type": "Type[chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "TestHuffmanTree"}, {"lineNumber": 41, "col_offset": 28, "nodeName": "chainer", "type": "module"}, {"lineNumber": 41, "col_offset": 58, "nodeName": "self", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "_config_user", "type": "chainer.configuration._ConfigContext"}, {"lineNumber": 45, "col_offset": 20, "nodeName": "links", "type": "module"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "link", "type": "chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax"}, {"lineNumber": 47, "col_offset": 60, "nodeName": "self", "type": "Any"}, {"lineNumber": 48, "col_offset": 44, "nodeName": "numpy", "type": "module"}, {"lineNumber": 49, "col_offset": 57, "nodeName": "self", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "data", "type": "Any"}, {"lineNumber": 53, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 25, "nodeName": "numpy", "type": "module"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 55, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 56, "col_offset": 52, "nodeName": "float64", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "_config_user", "type": "Any"}, {"lineNumber": 68, "col_offset": 16, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "t", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 72, "col_offset": 29, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 72, "col_offset": 41, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "assertEqual", "type": "Any"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "shape", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "exp", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 75, "col_offset": 36, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "total", "type": "Union[Any, int]"}, {"lineNumber": 75, "col_offset": 52, "nodeName": "check_sum_options", "type": "Any"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 79, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 85, "col_offset": 43, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "assert_warns", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 86, "col_offset": 34, "nodeName": "DeprecationWarning", "type": "Type[DeprecationWarning]"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 88, "col_offset": 23, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 88, "col_offset": 35, "nodeName": "x", "type": "numpy.ndarray"}, {"lineNumber": 93, "col_offset": 19, "nodeName": "link", "type": "Any"}, {"lineNumber": 95, "col_offset": 13, "nodeName": "assert_warns", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 95, "col_offset": 34, "nodeName": "DeprecationWarning", "type": "Type[DeprecationWarning]"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "link", "type": "Any"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "testing", "type": "module"}, {"lineNumber": 100, "col_offset": 22, "nodeName": "to_cpu", "type": "Any"}, {"lineNumber": 100, "col_offset": 34, "nodeName": "gpu_loss", "type": "Any"}, {"lineNumber": 100, "col_offset": 47, "nodeName": "test_forward_options", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "codes", "type": "Any"}, {"lineNumber": 109, "col_offset": 19, "nodeName": "link", "type": "Any"}, {"lineNumber": 109, "col_offset": 29, "nodeName": "x", "type": "Any"}, {"lineNumber": 109, "col_offset": 32, "nodeName": "t", "type": "Any"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "gradient_check", "type": "module"}, {"lineNumber": 112, "col_offset": 16, "nodeName": "x_data", "type": "Any"}, {"lineNumber": 112, "col_offset": 24, "nodeName": "t_data", "type": "Any"}, {"lineNumber": 112, "col_offset": 41, "nodeName": "link", "type": "Any"}, {"lineNumber": 113, "col_offset": 36, "nodeName": "check_backward_options", "type": "Any"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 117, "col_offset": 28, "nodeName": "self", "type": "Any"}, {"lineNumber": 117, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 117, "col_offset": 44, "nodeName": "self", "type": "Any"}, {"lineNumber": 122, "col_offset": 13, "nodeName": "assert_warns", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 122, "col_offset": 34, "nodeName": "DeprecationWarning", "type": "Type[DeprecationWarning]"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 124, "col_offset": 28, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 124, "col_offset": 40, "nodeName": "x", "type": "Any"}, {"lineNumber": 125, "col_offset": 28, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 125, "col_offset": 40, "nodeName": "t", "type": "Any"}, {"lineNumber": 126, "col_offset": 28, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 126, "col_offset": 40, "nodeName": "gy", "type": "Any"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 130, "col_offset": 26, "nodeName": "link", "type": "Any"}, {"lineNumber": 131, "col_offset": 13, "nodeName": "assert_warns", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 131, "col_offset": 34, "nodeName": "DeprecationWarning", "type": "Type[DeprecationWarning]"}, {"lineNumber": 132, "col_offset": 12, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 133, "col_offset": 13, "nodeName": "assert_warns", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 133, "col_offset": 34, "nodeName": "DeprecationWarning", "type": "Type[DeprecationWarning]"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "to_cpu", "type": "Any"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 138, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 139, "col_offset": 25, "nodeName": "all", "type": "Any"}, {"lineNumber": 18, "col_offset": 13, "nodeName": "self", "type": "TestHuffmanTree"}, {"lineNumber": 19, "col_offset": 12, "nodeName": "BinaryHierarchicalSoftmax", "type": "Type[chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax]"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "links", "type": "module"}, {"lineNumber": 28, "col_offset": 15, "nodeName": "links", "type": "module"}, {"lineNumber": 31, "col_offset": 45, "nodeName": "tree", "type": "Any"}, {"lineNumber": 32, "col_offset": 45, "nodeName": "tree", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "W", "type": "Any"}, {"lineNumber": 56, "col_offset": 52, "nodeName": "numpy", "type": "module"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 68, "col_offset": 16, "nodeName": "numpy", "type": "module"}, {"lineNumber": 68, "col_offset": 29, "nodeName": "i", "type": "int"}, {"lineNumber": 68, "col_offset": 39, "nodeName": "int32", "type": "Any"}, {"lineNumber": 70, "col_offset": 20, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 70, "col_offset": 32, "nodeName": "t", "type": "numpy.ndarray"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "link", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 72, "col_offset": 29, "nodeName": "loss", "type": "Any"}, {"lineNumber": 72, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 73, "col_offset": 29, "nodeName": "loss", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "numpy", "type": "module"}, {"lineNumber": 75, "col_offset": 52, "nodeName": "self", "type": "Any"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "testing", "type": "module"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "link", "type": "Any"}, {"lineNumber": 88, "col_offset": 23, "nodeName": "cuda", "type": "module"}, {"lineNumber": 93, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 93, "col_offset": 29, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 93, "col_offset": 46, "nodeName": "x", "type": "Any"}, {"lineNumber": 94, "col_offset": 29, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 94, "col_offset": 46, "nodeName": "t", "type": "Any"}, {"lineNumber": 95, "col_offset": 13, "nodeName": "testing", "type": "module"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "link", "type": "Any"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 97, "col_offset": 29, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 98, "col_offset": 29, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 100, "col_offset": 22, "nodeName": "cuda", "type": "module"}, {"lineNumber": 100, "col_offset": 47, "nodeName": "self", "type": "Any"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 107, "col_offset": 29, "nodeName": "float16", "type": "Any"}, {"lineNumber": 107, "col_offset": 47, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 107, "col_offset": 58, "nodeName": "float64", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "_func", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "astype", "type": "Any"}, {"lineNumber": 108, "col_offset": 69, "nodeName": "dtype", "type": "Any"}, {"lineNumber": 109, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 112, "col_offset": 41, "nodeName": "self", "type": "Any"}, {"lineNumber": 113, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 122, "col_offset": 13, "nodeName": "testing", "type": "module"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "link", "type": "Any"}, {"lineNumber": 124, "col_offset": 28, "nodeName": "cuda", "type": "module"}, {"lineNumber": 124, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 125, "col_offset": 28, "nodeName": "cuda", "type": "module"}, {"lineNumber": 125, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 126, "col_offset": 28, "nodeName": "cuda", "type": "module"}, {"lineNumber": 126, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 130, "col_offset": 12, "nodeName": "copy", "type": "module"}, {"lineNumber": 130, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 131, "col_offset": 13, "nodeName": "testing", "type": "module"}, {"lineNumber": 132, "col_offset": 12, "nodeName": "link", "type": "Any"}, {"lineNumber": 133, "col_offset": 13, "nodeName": "testing", "type": "module"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "link", "type": "Any"}, {"lineNumber": 19, "col_offset": 12, "nodeName": "links", "type": "module"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "random", "type": "Any"}, {"lineNumber": 48, "col_offset": 17, "nodeName": "numpy", "type": "module"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "random", "type": "Any"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "link", "type": "chainer.links.loss.hierarchical_softmax.BinaryHierarchicalSoftmax"}, {"lineNumber": 68, "col_offset": 39, "nodeName": "numpy", "type": "module"}, {"lineNumber": 70, "col_offset": 20, "nodeName": "cuda", "type": "module"}, {"lineNumber": 71, "col_offset": 19, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 29, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 71, "col_offset": 46, "nodeName": "x", "type": "Any"}, {"lineNumber": 71, "col_offset": 50, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 71, "col_offset": 67, "nodeName": "t", "type": "Any"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "to_cpu", "type": "Any"}, {"lineNumber": 74, "col_offset": 44, "nodeName": "loss", "type": "Any"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 93, "col_offset": 29, "nodeName": "chainer", "type": "module"}, {"lineNumber": 93, "col_offset": 46, "nodeName": "self", "type": "Any"}, {"lineNumber": 94, "col_offset": 29, "nodeName": "chainer", "type": "module"}, {"lineNumber": 94, "col_offset": 46, "nodeName": "self", "type": "Any"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 97, "col_offset": 29, "nodeName": "chainer", "type": "module"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 97, "col_offset": 58, "nodeName": "x", "type": "Any"}, {"lineNumber": 98, "col_offset": 29, "nodeName": "chainer", "type": "module"}, {"lineNumber": 98, "col_offset": 46, "nodeName": "to_gpu", "type": "Any"}, {"lineNumber": 98, "col_offset": 58, "nodeName": "t", "type": "Any"}, {"lineNumber": 107, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 107, "col_offset": 29, "nodeName": "numpy", "type": "module"}, {"lineNumber": 107, "col_offset": 47, "nodeName": "x", "type": "Any"}, {"lineNumber": 107, "col_offset": 58, "nodeName": "numpy", "type": "module"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "link", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "codes", "type": "Any"}, {"lineNumber": 108, "col_offset": 69, "nodeName": "x", "type": "Any"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 132, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "begins", "type": "Any"}, {"lineNumber": 137, "col_offset": 37, "nodeName": "begins", "type": "Any"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "paths", "type": "Any"}, {"lineNumber": 138, "col_offset": 36, "nodeName": "paths", "type": "Any"}, {"lineNumber": 139, "col_offset": 25, "nodeName": "codes", "type": "Any"}, {"lineNumber": 139, "col_offset": 36, "nodeName": "codes", "type": "Any"}, {"lineNumber": 47, "col_offset": 17, "nodeName": "numpy", "type": "module"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "numpy", "type": "module"}, {"lineNumber": 51, "col_offset": 17, "nodeName": "self", "type": "Any"}, {"lineNumber": 71, "col_offset": 29, "nodeName": "chainer", "type": "module"}, {"lineNumber": 71, "col_offset": 50, "nodeName": "chainer", "type": "module"}, {"lineNumber": 74, "col_offset": 32, "nodeName": "cuda", "type": "module"}, {"lineNumber": 97, "col_offset": 46, "nodeName": "cuda", "type": "module"}, {"lineNumber": 97, "col_offset": 58, "nodeName": "self", "type": "Any"}, {"lineNumber": 98, "col_offset": 46, "nodeName": "cuda", "type": "module"}, {"lineNumber": 98, "col_offset": 58, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "_func", "type": "Any"}, {"lineNumber": 137, "col_offset": 25, "nodeName": "f", "type": "Any"}, {"lineNumber": 137, "col_offset": 37, "nodeName": "g", "type": "Any"}, {"lineNumber": 138, "col_offset": 25, "nodeName": "f", "type": "Any"}, {"lineNumber": 138, "col_offset": 36, "nodeName": "g", "type": "Any"}, {"lineNumber": 139, "col_offset": 25, "nodeName": "f", "type": "Any"}, {"lineNumber": 139, "col_offset": 36, "nodeName": "g", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "link", "type": "Any"}, {"lineNumber": 108, "col_offset": 40, "nodeName": "self", "type": "Any"}]