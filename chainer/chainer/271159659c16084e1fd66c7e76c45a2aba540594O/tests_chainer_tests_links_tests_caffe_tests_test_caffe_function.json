[{"lineNumber": 23, "col_offset": 0, "nodeName": "_iter_init", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 46, "col_offset": 0, "nodeName": "_make_param", "type": "Callable[[Any], Any]"}, {"lineNumber": 52, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 62, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "init_func", "type": "Callable[[Any], Any]"}, {"lineNumber": 69, "col_offset": 32, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 89, "col_offset": 4, "nodeName": "call", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 104, "col_offset": 17, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 124, "col_offset": 4, "nodeName": "test_concat", "type": "Callable[[Any], Any]"}, {"lineNumber": 132, "col_offset": 22, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "test_convolution", "type": "Callable[[Any], Any]"}, {"lineNumber": 185, "col_offset": 24, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 219, "col_offset": 4, "nodeName": "test_deconvolution", "type": "Callable[[Any], Any]"}, {"lineNumber": 238, "col_offset": 15, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 249, "col_offset": 4, "nodeName": "test_data", "type": "Callable[[Any], Any]"}, {"lineNumber": 254, "col_offset": 18, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 274, "col_offset": 4, "nodeName": "test_dropout", "type": "Callable[[Any], Any]"}, {"lineNumber": 282, "col_offset": 23, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 319, "col_offset": 4, "nodeName": "test_linear", "type": "Callable[[Any], Any]"}, {"lineNumber": 332, "col_offset": 27, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 364, "col_offset": 4, "nodeName": "test_linear", "type": "Callable[[Any], Any]"}, {"lineNumber": 376, "col_offset": 33, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 394, "col_offset": 4, "nodeName": "test_linear", "type": "Callable[[Any], Any]"}, {"lineNumber": 399, "col_offset": 37, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 413, "col_offset": 4, "nodeName": "test_linear", "type": "Callable[[Any], Any]"}, {"lineNumber": 418, "col_offset": 14, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 442, "col_offset": 4, "nodeName": "test_lrn", "type": "Callable[[Any], Any]"}, {"lineNumber": 450, "col_offset": 27, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 464, "col_offset": 4, "nodeName": "test_lrn", "type": "Callable[[Any], Any]"}, {"lineNumber": 469, "col_offset": 21, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 495, "col_offset": 4, "nodeName": "test_max_pooling", "type": "Callable[[Any], Any]"}, {"lineNumber": 503, "col_offset": 25, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 526, "col_offset": 4, "nodeName": "test_max_pooling", "type": "Callable[[Any], Any]"}, {"lineNumber": 534, "col_offset": 24, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 555, "col_offset": 4, "nodeName": "test_global_pooling", "type": "Callable[[Any], Any]"}, {"lineNumber": 563, "col_offset": 28, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 577, "col_offset": 4, "nodeName": "test_stochastic_pooling", "type": "Callable[[Any], Any]"}, {"lineNumber": 582, "col_offset": 15, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 602, "col_offset": 4, "nodeName": "test_lrn", "type": "Callable[[Any], Any]"}, {"lineNumber": 609, "col_offset": 20, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 629, "col_offset": 4, "nodeName": "test_lrn", "type": "Callable[[Any], Any]"}, {"lineNumber": 636, "col_offset": 18, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 658, "col_offset": 4, "nodeName": "test_reshape", "type": "Callable[[Any], Any]"}, {"lineNumber": 665, "col_offset": 20, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 701, "col_offset": 4, "nodeName": "test_batchnorm", "type": "Callable[[Any], Any]"}, {"lineNumber": 708, "col_offset": 36, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 744, "col_offset": 4, "nodeName": "test_batchnorm", "type": "Callable[[Any], Any]"}, {"lineNumber": 751, "col_offset": 22, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 771, "col_offset": 4, "nodeName": "test_eltwise_prod", "type": "Callable[[Any], Any]"}, {"lineNumber": 779, "col_offset": 21, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 799, "col_offset": 4, "nodeName": "test_eltwise_sum", "type": "Callable[[Any], Any]"}, {"lineNumber": 807, "col_offset": 26, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 828, "col_offset": 4, "nodeName": "test_eltwise_sum", "type": "Callable[[Any], Any]"}, {"lineNumber": 835, "col_offset": 33, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 857, "col_offset": 4, "nodeName": "test_eltwise_sum", "type": "Callable[[Any], Any]"}, {"lineNumber": 863, "col_offset": 21, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 883, "col_offset": 4, "nodeName": "test_eltwise_max", "type": "Callable[[Any], Any]"}, {"lineNumber": 892, "col_offset": 16, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 912, "col_offset": 4, "nodeName": "test_scale", "type": "Callable[[Any], Any]"}, {"lineNumber": 919, "col_offset": 25, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 947, "col_offset": 4, "nodeName": "test_scale_one_bottom", "type": "Callable[[Any], Any]"}, {"lineNumber": 954, "col_offset": 24, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 983, "col_offset": 4, "nodeName": "test_scale_with_bias", "type": "Callable[[Any], Any]"}, {"lineNumber": 991, "col_offset": 33, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1028, "col_offset": 4, "nodeName": "test_scale_one_bottom_with_bias", "type": "Callable[[Any], Any]"}, {"lineNumber": 1036, "col_offset": 16, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1056, "col_offset": 4, "nodeName": "test_slice", "type": "Callable[[Any], Any]"}, {"lineNumber": 1067, "col_offset": 22, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1087, "col_offset": 4, "nodeName": "test_slice_no_axis", "type": "Callable[[Any], Any]"}, {"lineNumber": 1098, "col_offset": 32, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1115, "col_offset": 4, "nodeName": "test_slice_no_axis_no_slice_dim", "type": "Callable[[Any], Any]"}, {"lineNumber": 1126, "col_offset": 26, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1147, "col_offset": 4, "nodeName": "test_slice_slice_point", "type": "Callable[[Any], Any]"}, {"lineNumber": 1158, "col_offset": 18, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1175, "col_offset": 4, "nodeName": "test_sigmoid", "type": "Callable[[Any], Any]"}, {"lineNumber": 1182, "col_offset": 18, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1199, "col_offset": 4, "nodeName": "test_softmax", "type": "Callable[[Any], Any]"}, {"lineNumber": 1206, "col_offset": 29, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1226, "col_offset": 4, "nodeName": "test_softmax_caffe_engine", "type": "Callable[[Any], Any]"}, {"lineNumber": 1234, "col_offset": 29, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1254, "col_offset": 4, "nodeName": "test_softmax_cuDNN_engine", "type": "Callable[[Any], Any]"}, {"lineNumber": 1262, "col_offset": 29, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 1276, "col_offset": 4, "nodeName": "test_softmax_invalid_axis", "type": "Callable[[Any], Any]"}, {"lineNumber": 1281, "col_offset": 26, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 1298, "col_offset": 4, "nodeName": "test_softmax_with_loss", "type": "Callable[[Any], Any]"}, {"lineNumber": 1305, "col_offset": 37, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 1319, "col_offset": 4, "nodeName": "test_softmax_with_loss_invalid_axis", "type": "Callable[[Any], Any]"}, {"lineNumber": 1324, "col_offset": 16, "nodeName": "TestCaffeFunctionBase", "type": "Type[TestCaffeFunctionBase]"}, {"lineNumber": 1337, "col_offset": 4, "nodeName": "test_split", "type": "Callable[[Any], Any]"}, {"lineNumber": 47, "col_offset": 4, "nodeName": "param", "type": "Any"}, {"lineNumber": 49, "col_offset": 11, "nodeName": "param", "type": "Any"}, {"lineNumber": 52, "col_offset": 28, "nodeName": "unittest", "type": "module"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 107, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 134, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 135, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 136, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 187, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 189, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 256, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 257, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 258, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 284, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 285, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 286, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 334, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 335, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 336, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 420, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 421, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 422, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 471, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 472, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 473, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 505, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 506, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 507, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 536, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 537, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int, int]]"}, {"lineNumber": 538, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int, int]]"}, {"lineNumber": 584, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 585, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 586, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 611, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 612, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 613, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 638, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 639, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 640, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 667, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 668, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 669, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 710, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 711, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 712, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 753, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 754, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 755, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 781, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 782, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 783, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 809, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 810, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 811, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 837, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 838, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 839, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 865, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 866, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 867, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 894, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 895, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 896, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 921, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 922, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 923, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 956, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 957, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 958, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 993, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 994, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 995, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1038, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1039, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1040, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1069, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1070, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1071, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1100, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1101, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1102, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1128, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1129, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1130, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1160, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1161, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1162, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1184, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1185, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1186, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1208, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1209, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1210, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1236, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1237, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1238, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[int, int]]"}, {"lineNumber": 1283, "col_offset": 4, "nodeName": "func_name", "type": "str"}, {"lineNumber": 1284, "col_offset": 4, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 1285, "col_offset": 4, "nodeName": "out_shapes", "type": "List[Tuple[()]]"}, {"lineNumber": 1342, "col_offset": 0, "nodeName": "run_module", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 1342, "col_offset": 19, "nodeName": "__name__", "type": "str"}, {"lineNumber": 1342, "col_offset": 29, "nodeName": "__file__", "type": "str"}, {"lineNumber": 17, "col_offset": 5, "nodeName": "catch_warnings", "type": "Type[warnings.catch_warnings]"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "filterwarnings", "type": "Callable[..., None]"}, {"lineNumber": 24, "col_offset": 7, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 24, "col_offset": 18, "nodeName": "data", "type": "Any"}, {"lineNumber": 24, "col_offset": 24, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "d", "type": "Any"}, {"lineNumber": 25, "col_offset": 17, "nodeName": "data", "type": "Any"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "NetParameter", "type": "Any"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "_iter_init", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "param", "type": "Any"}, {"lineNumber": 48, "col_offset": 22, "nodeName": "data", "type": "Dict[str, List[Dict[str, Union[str, List[str], Dict[str, int]]]]]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "param", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "outs", "type": "List[Any]"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "out_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "outputs", "type": "Tuple[Any, ...]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "ret_value", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "m", "type": "mock.MagicMock"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "patch", "type": "mock._patcher"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "invars", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 91, "col_offset": 21, "nodeName": "in_shapes", "type": "List[Tuple[int, int, int]]"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 94, "col_offset": 22, "nodeName": "invars", "type": "List[Any]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "l1", "type": "Any"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 222, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 222, "col_offset": 12, "nodeName": "l1", "type": "Any"}, {"lineNumber": 224, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 321, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 321, "col_offset": 12, "nodeName": "l1", "type": "Any"}, {"lineNumber": 366, "col_offset": 8, "nodeName": "f", "type": "Any"}, {"lineNumber": 366, "col_offset": 12, "nodeName": "l1", "type": "Any"}, {"lineNumber": 1342, "col_offset": 0, "nodeName": "testing", "type": "module"}, {"lineNumber": 17, "col_offset": 5, "nodeName": "warnings", "type": "module"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "warnings", "type": "module"}, {"lineNumber": 18, "col_offset": 54, "nodeName": "DeprecationWarning", "type": "Type[DeprecationWarning]"}, {"lineNumber": 35, "col_offset": 9, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 35, "col_offset": 20, "nodeName": "data", "type": "Any"}, {"lineNumber": 35, "col_offset": 26, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "caffe_pb", "type": "module"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "_make_param", "type": "Callable[[Any], Any]"}, {"lineNumber": 55, "col_offset": 28, "nodeName": "data", "type": "Dict[str, List[Dict[str, Union[str, List[str], Dict[str, int]]]]]"}, {"lineNumber": 58, "col_offset": 58, "nodeName": "f", "type": "tempfile._TemporaryFileWrapper"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "temp_file_path", "type": "Any"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "name", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "remove", "type": "Callable[[Union[str, unicode]], None]"}, {"lineNumber": 63, "col_offset": 18, "nodeName": "temp_file_path", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "CaffeFunction", "type": "Type[chainer.links.caffe.caffe_function.CaffeFunction]"}, {"lineNumber": 66, "col_offset": 40, "nodeName": "temp_file_path", "type": "Any"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "out_data", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 76, "col_offset": 23, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "outs", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "MagicMock", "type": "Type[mock.MagicMock]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 80, "col_offset": 21, "nodeName": "patch", "type": "mock._patch"}, {"lineNumber": 80, "col_offset": 32, "nodeName": "func_name", "type": "str"}, {"lineNumber": 80, "col_offset": 48, "nodeName": "m", "type": "mock.MagicMock"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 81, "col_offset": 20, "nodeName": "start", "type": "Callable[[], Any]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], Any]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "tearDown", "type": "Callable[[], Any]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "stop", "type": "Callable[[], Any]"}, {"lineNumber": 91, "col_offset": 21, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "actual", "type": "Any"}, {"lineNumber": 100, "col_offset": 20, "nodeName": "expect", "type": "Any"}, {"lineNumber": 100, "col_offset": 30, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 100, "col_offset": 34, "nodeName": "out", "type": "Any"}, {"lineNumber": 100, "col_offset": 39, "nodeName": "outputs", "type": "Tuple[Any, ...]"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 170, "col_offset": 30, "nodeName": "f", "type": "Any"}, {"lineNumber": 170, "col_offset": 33, "nodeName": "Convolution2D", "type": "Type[chainer.links.connection.convolution_2d.Convolution2D]"}, {"lineNumber": 171, "col_offset": 17, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "in_slice", "type": "slice"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "out_slice", "type": "slice"}, {"lineNumber": 174, "col_offset": 12, "nodeName": "w", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 222, "col_offset": 12, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 223, "col_offset": 30, "nodeName": "f", "type": "Any"}, {"lineNumber": 223, "col_offset": 33, "nodeName": "Deconvolution2D", "type": "Type[chainer.links.connection.deconvolution_2d.Deconvolution2D]"}, {"lineNumber": 224, "col_offset": 17, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "in_slice", "type": "slice"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "out_slice", "type": "slice"}, {"lineNumber": 227, "col_offset": 12, "nodeName": "w", "type": "Any"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 321, "col_offset": 12, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 322, "col_offset": 30, "nodeName": "f", "type": "Any"}, {"lineNumber": 322, "col_offset": 33, "nodeName": "Linear", "type": "Type[chainer.links.connection.linear.Linear]"}, {"lineNumber": 323, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 324, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 328, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 366, "col_offset": 12, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 367, "col_offset": 30, "nodeName": "f", "type": "Any"}, {"lineNumber": 367, "col_offset": 33, "nodeName": "Linear", "type": "Type[chainer.links.connection.linear.Linear]"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "data", "type": "Any"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "assertIsNone", "type": "Callable[..., None]"}, {"lineNumber": 370, "col_offset": 26, "nodeName": "b", "type": "Any"}, {"lineNumber": 372, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 443, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 444, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 445, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 446, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 496, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 497, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 498, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 499, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 527, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 528, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 529, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 530, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 556, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 557, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 558, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 559, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 603, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 604, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 605, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 606, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 630, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 631, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 632, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 633, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 659, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 660, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 661, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 662, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 702, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 703, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 704, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 705, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 745, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 746, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 747, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 748, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 772, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 773, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 774, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 775, "col_offset": 8, "nodeName": "assert_has_calls", "type": "Any"}, {"lineNumber": 800, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 801, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 802, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 803, "col_offset": 8, "nodeName": "assert_has_calls", "type": "Any"}, {"lineNumber": 829, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 830, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 831, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 832, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 832, "col_offset": 25, "nodeName": "call_count", "type": "Any"}, {"lineNumber": 858, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 884, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 885, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 886, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 887, "col_offset": 8, "nodeName": "assert_has_calls", "type": "Any"}, {"lineNumber": 913, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 914, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 915, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 916, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 948, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 949, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 950, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 951, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 984, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 985, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 986, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 987, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 988, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1029, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1030, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1031, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 1032, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1033, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1057, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1058, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1059, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1060, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1088, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1089, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1090, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1091, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1116, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1117, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1118, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1119, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1148, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1149, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1150, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1151, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1176, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1177, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1178, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1179, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1200, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1201, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1202, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1203, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1229, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1230, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1231, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1257, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1258, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1259, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1299, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1300, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1301, "col_offset": 8, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 1302, "col_offset": 8, "nodeName": "assert_called_once_with", "type": "Any"}, {"lineNumber": 1338, "col_offset": 8, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1339, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 1339, "col_offset": 25, "nodeName": "split_map", "type": "Dict[Any, Any]"}, {"lineNumber": 26, "col_offset": 15, "nodeName": "hasattr", "type": "Callable[[Any, Union[bytearray, str, unicode]], bool]"}, {"lineNumber": 26, "col_offset": 23, "nodeName": "param", "type": "Any"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "k", "type": "Any"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "d", "type": "Any"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "items", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "setattr", "type": "Callable[[Any, Union[bytearray, str, unicode], Any], None]"}, {"lineNumber": 43, "col_offset": 16, "nodeName": "param", "type": "Any"}, {"lineNumber": 43, "col_offset": 23, "nodeName": "data", "type": "Any"}, {"lineNumber": 55, "col_offset": 28, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 58, "col_offset": 13, "nodeName": "NamedTemporaryFile", "type": "Callable[..., tempfile._TemporaryFileWrapper]"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "f", "type": "tempfile._TemporaryFileWrapper"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "write", "type": "Callable[[Union[str, unicode]], int]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "os", "type": "module"}, {"lineNumber": 63, "col_offset": 18, "nodeName": "self", "type": "TestCaffeFunctionBase"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "caffe", "type": "module"}, {"lineNumber": 66, "col_offset": 40, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "astype", "type": "Any"}, {"lineNumber": 74, "col_offset": 65, "nodeName": "float32", "type": "Any"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 78, "col_offset": 20, "nodeName": "outs", "type": "List[Any]"}, {"lineNumber": 78, "col_offset": 51, "nodeName": "tuple", "type": "Type[Tuple[Any, ...]]"}, {"lineNumber": 78, "col_offset": 57, "nodeName": "outs", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 12, "nodeName": "mock", "type": "module"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "func_name", "type": "str"}, {"lineNumber": 79, "col_offset": 61, "nodeName": "ret_value", "type": "Any"}, {"lineNumber": 80, "col_offset": 21, "nodeName": "mock", "type": "module"}, {"lineNumber": 80, "col_offset": 32, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 81, "col_offset": 20, "nodeName": "patch", "type": "mock._patch"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "patch", "type": "mock._patch"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "astype", "type": "Any"}, {"lineNumber": 92, "col_offset": 61, "nodeName": "float32", "type": "Any"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 96, "col_offset": 13, "nodeName": "using_config", "type": "Callable[..., chainer.configuration._ConfigContext]"}, {"lineNumber": 97, "col_offset": 18, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 99, "col_offset": 29, "nodeName": "out", "type": "Any"}, {"lineNumber": 99, "col_offset": 35, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 99, "col_offset": 39, "nodeName": "outputs", "type": "Tuple[Any, ...]"}, {"lineNumber": 100, "col_offset": 39, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 26, "nodeName": "actual", "type": "Any"}, {"lineNumber": 101, "col_offset": 34, "nodeName": "expect", "type": "Any"}, {"lineNumber": 125, "col_offset": 8, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 126, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 168, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 168, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 170, "col_offset": 33, "nodeName": "links", "type": "module"}, {"lineNumber": 172, "col_offset": 23, "nodeName": "slice", "type": "Type[slice]"}, {"lineNumber": 173, "col_offset": 24, "nodeName": "slice", "type": "Type[slice]"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "data", "type": "Any"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "b", "type": "Any"}, {"lineNumber": 179, "col_offset": 22, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 182, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 221, "col_offset": 8, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 221, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 221, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 222, "col_offset": 12, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 223, "col_offset": 8, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 223, "col_offset": 33, "nodeName": "links", "type": "module"}, {"lineNumber": 225, "col_offset": 23, "nodeName": "slice", "type": "Type[slice]"}, {"lineNumber": 226, "col_offset": 24, "nodeName": "slice", "type": "Type[slice]"}, {"lineNumber": 227, "col_offset": 16, "nodeName": "data", "type": "Any"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "b", "type": "Any"}, {"lineNumber": 232, "col_offset": 22, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 234, "col_offset": 8, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 235, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "self", "type": "TestData"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "self", "type": "TestData"}, {"lineNumber": 251, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 251, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "self", "type": "TestDropout"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "self", "type": "TestDropout"}, {"lineNumber": 276, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "self", "type": "TestDropout"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 320, "col_offset": 8, "nodeName": "self", "type": "TestInnerProduct"}, {"lineNumber": 321, "col_offset": 12, "nodeName": "self", "type": "TestInnerProduct"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "self", "type": "TestInnerProduct"}, {"lineNumber": 322, "col_offset": 33, "nodeName": "links", "type": "module"}, {"lineNumber": 323, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 324, "col_offset": 12, "nodeName": "W", "type": "Any"}, {"lineNumber": 324, "col_offset": 22, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "b", "type": "Any"}, {"lineNumber": 326, "col_offset": 22, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 328, "col_offset": 8, "nodeName": "self", "type": "TestInnerProduct"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 329, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 366, "col_offset": 12, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 367, "col_offset": 8, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 367, "col_offset": 33, "nodeName": "links", "type": "module"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "W", "type": "Any"}, {"lineNumber": 369, "col_offset": 22, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 370, "col_offset": 8, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 370, "col_offset": 26, "nodeName": "f", "type": "Any"}, {"lineNumber": 372, "col_offset": 8, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 373, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 395, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 395, "col_offset": 31, "nodeName": "RuntimeError", "type": "Type[RuntimeError]"}, {"lineNumber": 396, "col_offset": 12, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 414, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 414, "col_offset": 31, "nodeName": "RuntimeError", "type": "Type[RuntimeError]"}, {"lineNumber": 415, "col_offset": 12, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 443, "col_offset": 8, "nodeName": "self", "type": "TestLRN"}, {"lineNumber": 444, "col_offset": 8, "nodeName": "self", "type": "TestLRN"}, {"lineNumber": 444, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 444, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 445, "col_offset": 8, "nodeName": "self", "type": "TestLRN"}, {"lineNumber": 446, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 447, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 465, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 465, "col_offset": 31, "nodeName": "RuntimeError", "type": "Type[RuntimeError]"}, {"lineNumber": 466, "col_offset": 12, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 496, "col_offset": 8, "nodeName": "self", "type": "TestMaxPooling"}, {"lineNumber": 497, "col_offset": 8, "nodeName": "self", "type": "TestMaxPooling"}, {"lineNumber": 497, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 497, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 498, "col_offset": 8, "nodeName": "self", "type": "TestMaxPooling"}, {"lineNumber": 499, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 500, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 527, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 528, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 528, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 528, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 529, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 530, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 531, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 556, "col_offset": 8, "nodeName": "self", "type": "TestGlobalPooling"}, {"lineNumber": 557, "col_offset": 8, "nodeName": "self", "type": "TestGlobalPooling"}, {"lineNumber": 557, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 557, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 558, "col_offset": 8, "nodeName": "self", "type": "TestGlobalPooling"}, {"lineNumber": 559, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 560, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 578, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 578, "col_offset": 31, "nodeName": "RuntimeError", "type": "Type[RuntimeError]"}, {"lineNumber": 579, "col_offset": 12, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 603, "col_offset": 8, "nodeName": "self", "type": "TestReLU"}, {"lineNumber": 604, "col_offset": 8, "nodeName": "self", "type": "TestReLU"}, {"lineNumber": 604, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 604, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 605, "col_offset": 8, "nodeName": "self", "type": "TestReLU"}, {"lineNumber": 606, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 606, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 630, "col_offset": 8, "nodeName": "self", "type": "TestLeakyReLU"}, {"lineNumber": 631, "col_offset": 8, "nodeName": "self", "type": "TestLeakyReLU"}, {"lineNumber": 631, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 631, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 632, "col_offset": 8, "nodeName": "self", "type": "TestLeakyReLU"}, {"lineNumber": 633, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 633, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 659, "col_offset": 8, "nodeName": "self", "type": "TestReshape"}, {"lineNumber": 660, "col_offset": 8, "nodeName": "self", "type": "TestReshape"}, {"lineNumber": 660, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 660, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 661, "col_offset": 8, "nodeName": "self", "type": "TestReshape"}, {"lineNumber": 662, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 662, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 702, "col_offset": 8, "nodeName": "self", "type": "TestBatchNorm"}, {"lineNumber": 703, "col_offset": 8, "nodeName": "self", "type": "TestBatchNorm"}, {"lineNumber": 703, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 703, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 704, "col_offset": 8, "nodeName": "self", "type": "TestBatchNorm"}, {"lineNumber": 705, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 705, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 745, "col_offset": 8, "nodeName": "self", "type": "TestBatchNormUsingGlobalStats"}, {"lineNumber": 746, "col_offset": 8, "nodeName": "self", "type": "TestBatchNormUsingGlobalStats"}, {"lineNumber": 746, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 746, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 747, "col_offset": 8, "nodeName": "self", "type": "TestBatchNormUsingGlobalStats"}, {"lineNumber": 748, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 748, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 772, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 773, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 773, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 773, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 774, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 775, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 800, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 801, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 801, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 801, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 802, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 803, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 829, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSumCoeff"}, {"lineNumber": 830, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSumCoeff"}, {"lineNumber": 830, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 830, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 831, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSumCoeff"}, {"lineNumber": 832, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSumCoeff"}, {"lineNumber": 832, "col_offset": 25, "nodeName": "mock", "type": "Any"}, {"lineNumber": 858, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSumInvalidCoeff"}, {"lineNumber": 859, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 859, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 860, "col_offset": 12, "nodeName": "call", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 884, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 885, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 885, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 885, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 886, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 887, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 913, "col_offset": 8, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 914, "col_offset": 8, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 914, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 914, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 915, "col_offset": 8, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 916, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 916, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 916, "col_offset": 58, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 948, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottom"}, {"lineNumber": 949, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottom"}, {"lineNumber": 949, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 949, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 950, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottom"}, {"lineNumber": 951, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 951, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 984, "col_offset": 8, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 985, "col_offset": 8, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 985, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 985, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 986, "col_offset": 8, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 986, "col_offset": 24, "nodeName": "hasattr", "type": "Callable[[Any, Union[bytearray, str, unicode]], bool]"}, {"lineNumber": 986, "col_offset": 32, "nodeName": "l1", "type": "Any"}, {"lineNumber": 987, "col_offset": 8, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 988, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 988, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 988, "col_offset": 58, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1029, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1030, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1030, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1030, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1031, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1031, "col_offset": 24, "nodeName": "hasattr", "type": "Callable[[Any, Union[bytearray, str, unicode]], bool]"}, {"lineNumber": 1031, "col_offset": 32, "nodeName": "l1", "type": "Any"}, {"lineNumber": 1032, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1033, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1033, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1057, "col_offset": 8, "nodeName": "self", "type": "TestSlice"}, {"lineNumber": 1058, "col_offset": 8, "nodeName": "self", "type": "TestSlice"}, {"lineNumber": 1058, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1058, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1059, "col_offset": 8, "nodeName": "self", "type": "TestSlice"}, {"lineNumber": 1060, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1061, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1088, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxis"}, {"lineNumber": 1089, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxis"}, {"lineNumber": 1089, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1089, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1090, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxis"}, {"lineNumber": 1091, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1092, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1116, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxisNoSliceDim"}, {"lineNumber": 1117, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxisNoSliceDim"}, {"lineNumber": 1117, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1117, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1118, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxisNoSliceDim"}, {"lineNumber": 1119, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1120, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1148, "col_offset": 8, "nodeName": "self", "type": "TestSliceSlicePoint"}, {"lineNumber": 1149, "col_offset": 8, "nodeName": "self", "type": "TestSliceSlicePoint"}, {"lineNumber": 1149, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1149, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1150, "col_offset": 8, "nodeName": "self", "type": "TestSliceSlicePoint"}, {"lineNumber": 1151, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1152, "col_offset": 12, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1176, "col_offset": 8, "nodeName": "self", "type": "TestSigmoid"}, {"lineNumber": 1177, "col_offset": 8, "nodeName": "self", "type": "TestSigmoid"}, {"lineNumber": 1177, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1177, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1178, "col_offset": 8, "nodeName": "self", "type": "TestSigmoid"}, {"lineNumber": 1179, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1179, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1200, "col_offset": 8, "nodeName": "self", "type": "TestSoftmax"}, {"lineNumber": 1201, "col_offset": 8, "nodeName": "self", "type": "TestSoftmax"}, {"lineNumber": 1201, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1201, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1202, "col_offset": 8, "nodeName": "self", "type": "TestSoftmax"}, {"lineNumber": 1203, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1203, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1229, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxCaffeEngine"}, {"lineNumber": 1230, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxCaffeEngine"}, {"lineNumber": 1231, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1231, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1257, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxcuDnnEngine"}, {"lineNumber": 1258, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxcuDnnEngine"}, {"lineNumber": 1259, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1259, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1277, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 1277, "col_offset": 31, "nodeName": "RuntimeError", "type": "Type[RuntimeError]"}, {"lineNumber": 1278, "col_offset": 12, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1299, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxWithLoss"}, {"lineNumber": 1300, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxWithLoss"}, {"lineNumber": 1300, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 1300, "col_offset": 29, "nodeName": "layers", "type": "List[Tuple[Any, List[Any], List[Any]]]"}, {"lineNumber": 1301, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxWithLoss"}, {"lineNumber": 1302, "col_offset": 8, "nodeName": "mock", "type": "Any"}, {"lineNumber": 1302, "col_offset": 42, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 1320, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 1320, "col_offset": 31, "nodeName": "RuntimeError", "type": "Type[RuntimeError]"}, {"lineNumber": 1321, "col_offset": 12, "nodeName": "init_func", "type": "Callable[[], Any]"}, {"lineNumber": 1338, "col_offset": 8, "nodeName": "self", "type": "TestSplit"}, {"lineNumber": 1339, "col_offset": 8, "nodeName": "self", "type": "TestSplit"}, {"lineNumber": 1339, "col_offset": 25, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 27, "col_offset": 16, "nodeName": "append", "type": "Any"}, {"lineNumber": 27, "col_offset": 29, "nodeName": "d", "type": "Any"}, {"lineNumber": 29, "col_offset": 16, "nodeName": "add", "type": "Any"}, {"lineNumber": 30, "col_offset": 19, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 30, "col_offset": 30, "nodeName": "d", "type": "Any"}, {"lineNumber": 33, "col_offset": 32, "nodeName": "d", "type": "Any"}, {"lineNumber": 36, "col_offset": 20, "nodeName": "data", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "isinstance", "type": "Callable[[Any, Union[Type[Any], Tuple[Union[Type[Any], Tuple[Type[Any], ...]], ...]]], bool]"}, {"lineNumber": 37, "col_offset": 26, "nodeName": "d", "type": "Any"}, {"lineNumber": 58, "col_offset": 13, "nodeName": "tempfile", "type": "module"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "f", "type": "tempfile._TemporaryFileWrapper"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "SerializeToString", "type": "Any"}, {"lineNumber": 74, "col_offset": 65, "nodeName": "numpy", "type": "module"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "outs", "type": "List[Any]"}, {"lineNumber": 75, "col_offset": 24, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 75, "col_offset": 41, "nodeName": "out_data", "type": "Any"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 78, "col_offset": 35, "nodeName": "outs", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 32, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 81, "col_offset": 20, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 83, "col_offset": 14, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 83, "col_offset": 41, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 86, "col_offset": 14, "nodeName": "TestCaffeFunctionBaseMock", "type": "Type[TestCaffeFunctionBaseMock]"}, {"lineNumber": 86, "col_offset": 41, "nodeName": "self", "type": "TestCaffeFunctionBaseMock"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "self", "type": "TestCaffeFunctionBaseMock"}, {"lineNumber": 92, "col_offset": 61, "nodeName": "numpy", "type": "module"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "invars", "type": "List[Any]"}, {"lineNumber": 93, "col_offset": 26, "nodeName": "Variable", "type": "Any"}, {"lineNumber": 93, "col_offset": 43, "nodeName": "data", "type": "Any"}, {"lineNumber": 96, "col_offset": 13, "nodeName": "chainer", "type": "module"}, {"lineNumber": 97, "col_offset": 18, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 98, "col_offset": 36, "nodeName": "outputs", "type": "List[str]"}, {"lineNumber": 99, "col_offset": 39, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 101, "col_offset": 12, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 129, "col_offset": 13, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 129, "col_offset": 29, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 168, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 172, "col_offset": 29, "nodeName": "i", "type": "int"}, {"lineNumber": 173, "col_offset": 30, "nodeName": "i", "type": "int"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "W", "type": "Any"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 176, "col_offset": 29, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "f", "type": "Any"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 182, "col_offset": 42, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 221, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 225, "col_offset": 29, "nodeName": "i", "type": "int"}, {"lineNumber": 226, "col_offset": 30, "nodeName": "i", "type": "int"}, {"lineNumber": 227, "col_offset": 16, "nodeName": "W", "type": "Any"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "testing", "type": "Any"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 229, "col_offset": 29, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "f", "type": "Any"}, {"lineNumber": 235, "col_offset": 8, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 235, "col_offset": 42, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 251, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "self", "type": "TestDropout"}, {"lineNumber": 279, "col_offset": 12, "nodeName": "self", "type": "TestDropout"}, {"lineNumber": 323, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 324, "col_offset": 12, "nodeName": "f", "type": "Any"}, {"lineNumber": 324, "col_offset": 22, "nodeName": "numpy", "type": "module"}, {"lineNumber": 324, "col_offset": 64, "nodeName": "float32", "type": "Any"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 326, "col_offset": 12, "nodeName": "f", "type": "Any"}, {"lineNumber": 326, "col_offset": 22, "nodeName": "numpy", "type": "module"}, {"lineNumber": 326, "col_offset": 48, "nodeName": "float32", "type": "Any"}, {"lineNumber": 329, "col_offset": 8, "nodeName": "self", "type": "TestInnerProduct"}, {"lineNumber": 329, "col_offset": 42, "nodeName": "self", "type": "TestInnerProduct"}, {"lineNumber": 368, "col_offset": 8, "nodeName": "numpy", "type": "module"}, {"lineNumber": 369, "col_offset": 12, "nodeName": "f", "type": "Any"}, {"lineNumber": 369, "col_offset": 22, "nodeName": "numpy", "type": "module"}, {"lineNumber": 369, "col_offset": 64, "nodeName": "float32", "type": "Any"}, {"lineNumber": 373, "col_offset": 8, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 373, "col_offset": 42, "nodeName": "self", "type": "TestInnerProductDim4"}, {"lineNumber": 395, "col_offset": 13, "nodeName": "self", "type": "TestInnerProductInvalidDim"}, {"lineNumber": 396, "col_offset": 12, "nodeName": "self", "type": "TestInnerProductInvalidDim"}, {"lineNumber": 414, "col_offset": 13, "nodeName": "self", "type": "TestInnerProductNonDefaultAxis"}, {"lineNumber": 415, "col_offset": 12, "nodeName": "self", "type": "TestInnerProductNonDefaultAxis"}, {"lineNumber": 444, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 446, "col_offset": 8, "nodeName": "self", "type": "TestLRN"}, {"lineNumber": 447, "col_offset": 12, "nodeName": "self", "type": "TestLRN"}, {"lineNumber": 465, "col_offset": 13, "nodeName": "self", "type": "TestLRNWithinChannel"}, {"lineNumber": 466, "col_offset": 12, "nodeName": "self", "type": "TestLRNWithinChannel"}, {"lineNumber": 497, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 499, "col_offset": 8, "nodeName": "self", "type": "TestMaxPooling"}, {"lineNumber": 500, "col_offset": 12, "nodeName": "self", "type": "TestMaxPooling"}, {"lineNumber": 528, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 530, "col_offset": 8, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 531, "col_offset": 12, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 557, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 559, "col_offset": 8, "nodeName": "self", "type": "TestGlobalPooling"}, {"lineNumber": 560, "col_offset": 12, "nodeName": "self", "type": "TestGlobalPooling"}, {"lineNumber": 578, "col_offset": 13, "nodeName": "self", "type": "TestStochasticPooling"}, {"lineNumber": 579, "col_offset": 12, "nodeName": "self", "type": "TestStochasticPooling"}, {"lineNumber": 604, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 606, "col_offset": 8, "nodeName": "self", "type": "TestReLU"}, {"lineNumber": 606, "col_offset": 42, "nodeName": "self", "type": "TestReLU"}, {"lineNumber": 631, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 633, "col_offset": 8, "nodeName": "self", "type": "TestLeakyReLU"}, {"lineNumber": 633, "col_offset": 42, "nodeName": "self", "type": "TestLeakyReLU"}, {"lineNumber": 660, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 662, "col_offset": 8, "nodeName": "self", "type": "TestReshape"}, {"lineNumber": 662, "col_offset": 42, "nodeName": "self", "type": "TestReshape"}, {"lineNumber": 703, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 705, "col_offset": 8, "nodeName": "self", "type": "TestBatchNorm"}, {"lineNumber": 705, "col_offset": 42, "nodeName": "self", "type": "TestBatchNorm"}, {"lineNumber": 746, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 748, "col_offset": 8, "nodeName": "self", "type": "TestBatchNormUsingGlobalStats"}, {"lineNumber": 748, "col_offset": 42, "nodeName": "self", "type": "TestBatchNormUsingGlobalStats"}, {"lineNumber": 773, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 775, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 775, "col_offset": 36, "nodeName": "call", "type": "Any"}, {"lineNumber": 776, "col_offset": 36, "nodeName": "call", "type": "Any"}, {"lineNumber": 801, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 803, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 803, "col_offset": 36, "nodeName": "call", "type": "Any"}, {"lineNumber": 804, "col_offset": 36, "nodeName": "call", "type": "Any"}, {"lineNumber": 830, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 832, "col_offset": 25, "nodeName": "self", "type": "TestEltwiseSumCoeff"}, {"lineNumber": 859, "col_offset": 13, "nodeName": "self", "type": "TestEltwiseSumInvalidCoeff"}, {"lineNumber": 860, "col_offset": 12, "nodeName": "self", "type": "TestEltwiseSumInvalidCoeff"}, {"lineNumber": 885, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 887, "col_offset": 8, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 888, "col_offset": 13, "nodeName": "call", "type": "Any"}, {"lineNumber": 889, "col_offset": 13, "nodeName": "call", "type": "Any"}, {"lineNumber": 914, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 916, "col_offset": 8, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 916, "col_offset": 42, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 916, "col_offset": 58, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 949, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 951, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottom"}, {"lineNumber": 951, "col_offset": 42, "nodeName": "self", "type": "TestScaleOneBottom"}, {"lineNumber": 985, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 986, "col_offset": 32, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 988, "col_offset": 8, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 988, "col_offset": 42, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 988, "col_offset": 58, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 1030, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1031, "col_offset": 32, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1033, "col_offset": 8, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1033, "col_offset": 42, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1058, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1060, "col_offset": 8, "nodeName": "self", "type": "TestSlice"}, {"lineNumber": 1061, "col_offset": 12, "nodeName": "self", "type": "TestSlice"}, {"lineNumber": 1089, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1091, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxis"}, {"lineNumber": 1092, "col_offset": 12, "nodeName": "self", "type": "TestSliceNoAxis"}, {"lineNumber": 1117, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1119, "col_offset": 8, "nodeName": "self", "type": "TestSliceNoAxisNoSliceDim"}, {"lineNumber": 1120, "col_offset": 12, "nodeName": "self", "type": "TestSliceNoAxisNoSliceDim"}, {"lineNumber": 1149, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1151, "col_offset": 8, "nodeName": "self", "type": "TestSliceSlicePoint"}, {"lineNumber": 1152, "col_offset": 12, "nodeName": "self", "type": "TestSliceSlicePoint"}, {"lineNumber": 1177, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1179, "col_offset": 8, "nodeName": "self", "type": "TestSigmoid"}, {"lineNumber": 1179, "col_offset": 42, "nodeName": "self", "type": "TestSigmoid"}, {"lineNumber": 1201, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1203, "col_offset": 8, "nodeName": "self", "type": "TestSoftmax"}, {"lineNumber": 1203, "col_offset": 42, "nodeName": "self", "type": "TestSoftmax"}, {"lineNumber": 1231, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxCaffeEngine"}, {"lineNumber": 1231, "col_offset": 42, "nodeName": "self", "type": "TestSoftmaxCaffeEngine"}, {"lineNumber": 1259, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxcuDnnEngine"}, {"lineNumber": 1259, "col_offset": 42, "nodeName": "self", "type": "TestSoftmaxcuDnnEngine"}, {"lineNumber": 1277, "col_offset": 13, "nodeName": "self", "type": "TestSoftmaxInvalidAxis"}, {"lineNumber": 1278, "col_offset": 12, "nodeName": "self", "type": "TestSoftmaxInvalidAxis"}, {"lineNumber": 1300, "col_offset": 29, "nodeName": "func", "type": "chainer.links.caffe.caffe_function.CaffeFunction"}, {"lineNumber": 1302, "col_offset": 8, "nodeName": "self", "type": "TestSoftmaxWithLoss"}, {"lineNumber": 1302, "col_offset": 42, "nodeName": "self", "type": "TestSoftmaxWithLoss"}, {"lineNumber": 1320, "col_offset": 13, "nodeName": "self", "type": "TestSoftmaxWithLossInvalidAxis"}, {"lineNumber": 1321, "col_offset": 12, "nodeName": "self", "type": "TestSoftmaxWithLossInvalidAxis"}, {"lineNumber": 1339, "col_offset": 25, "nodeName": "self", "type": "TestSplit"}, {"lineNumber": 27, "col_offset": 16, "nodeName": "param", "type": "Any"}, {"lineNumber": 29, "col_offset": 16, "nodeName": "param", "type": "Any"}, {"lineNumber": 30, "col_offset": 34, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 30, "col_offset": 40, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 31, "col_offset": 20, "nodeName": "_iter_init", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 31, "col_offset": 42, "nodeName": "d", "type": "Any"}, {"lineNumber": 33, "col_offset": 20, "nodeName": "param", "type": "Any"}, {"lineNumber": 37, "col_offset": 30, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 37, "col_offset": 36, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 38, "col_offset": 16, "nodeName": "_iter_init", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 38, "col_offset": 46, "nodeName": "d", "type": "Any"}, {"lineNumber": 40, "col_offset": 16, "nodeName": "setattr", "type": "Callable[[Any, Union[bytearray, str, unicode], Any], None]"}, {"lineNumber": 40, "col_offset": 24, "nodeName": "param", "type": "Any"}, {"lineNumber": 40, "col_offset": 31, "nodeName": "k", "type": "Any"}, {"lineNumber": 40, "col_offset": 34, "nodeName": "d", "type": "Any"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "param", "type": "Any"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 74, "col_offset": 51, "nodeName": "shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 75, "col_offset": 24, "nodeName": "chainer", "type": "module"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "uniform", "type": "Any"}, {"lineNumber": 92, "col_offset": 47, "nodeName": "shape", "type": "Tuple[int, int, int]"}, {"lineNumber": 93, "col_offset": 26, "nodeName": "chainer", "type": "module"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 126, "col_offset": 29, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 129, "col_offset": 13, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 129, "col_offset": 29, "nodeName": "self", "type": "TestConcat"}, {"lineNumber": 168, "col_offset": 29, "nodeName": "self", "type": "TestConvolution"}, {"lineNumber": 172, "col_offset": 37, "nodeName": "i", "type": "int"}, {"lineNumber": 173, "col_offset": 38, "nodeName": "i", "type": "int"}, {"lineNumber": 174, "col_offset": 16, "nodeName": "f", "type": "Any"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "out_slice", "type": "slice"}, {"lineNumber": 174, "col_offset": 36, "nodeName": "in_slice", "type": "slice"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 176, "col_offset": 16, "nodeName": "w", "type": "Any"}, {"lineNumber": 176, "col_offset": 35, "nodeName": "i", "type": "int"}, {"lineNumber": 221, "col_offset": 29, "nodeName": "self", "type": "TestDeconvolution"}, {"lineNumber": 225, "col_offset": 37, "nodeName": "i", "type": "int"}, {"lineNumber": 226, "col_offset": 38, "nodeName": "i", "type": "int"}, {"lineNumber": 227, "col_offset": 16, "nodeName": "f", "type": "Any"}, {"lineNumber": 227, "col_offset": 25, "nodeName": "out_slice", "type": "slice"}, {"lineNumber": 227, "col_offset": 36, "nodeName": "in_slice", "type": "slice"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "numpy", "type": "module"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "w", "type": "Any"}, {"lineNumber": 229, "col_offset": 35, "nodeName": "i", "type": "int"}, {"lineNumber": 251, "col_offset": 29, "nodeName": "self", "type": "TestData"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "self", "type": "TestDropout"}, {"lineNumber": 324, "col_offset": 64, "nodeName": "numpy", "type": "module"}, {"lineNumber": 326, "col_offset": 48, "nodeName": "numpy", "type": "module"}, {"lineNumber": 369, "col_offset": 64, "nodeName": "numpy", "type": "module"}, {"lineNumber": 444, "col_offset": 29, "nodeName": "self", "type": "TestLRN"}, {"lineNumber": 497, "col_offset": 29, "nodeName": "self", "type": "TestMaxPooling"}, {"lineNumber": 528, "col_offset": 29, "nodeName": "self", "type": "TestAveragePooling"}, {"lineNumber": 557, "col_offset": 29, "nodeName": "self", "type": "TestGlobalPooling"}, {"lineNumber": 604, "col_offset": 29, "nodeName": "self", "type": "TestReLU"}, {"lineNumber": 631, "col_offset": 29, "nodeName": "self", "type": "TestLeakyReLU"}, {"lineNumber": 660, "col_offset": 29, "nodeName": "self", "type": "TestReshape"}, {"lineNumber": 703, "col_offset": 29, "nodeName": "self", "type": "TestBatchNorm"}, {"lineNumber": 746, "col_offset": 29, "nodeName": "self", "type": "TestBatchNormUsingGlobalStats"}, {"lineNumber": 773, "col_offset": 29, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 775, "col_offset": 36, "nodeName": "mock", "type": "module"}, {"lineNumber": 775, "col_offset": 46, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 776, "col_offset": 36, "nodeName": "mock", "type": "module"}, {"lineNumber": 776, "col_offset": 46, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 801, "col_offset": 29, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 803, "col_offset": 36, "nodeName": "mock", "type": "module"}, {"lineNumber": 803, "col_offset": 46, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 804, "col_offset": 36, "nodeName": "mock", "type": "module"}, {"lineNumber": 804, "col_offset": 46, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 822, "col_offset": 29, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 830, "col_offset": 29, "nodeName": "self", "type": "TestEltwiseSumCoeff"}, {"lineNumber": 851, "col_offset": 29, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 885, "col_offset": 29, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 888, "col_offset": 13, "nodeName": "mock", "type": "module"}, {"lineNumber": 888, "col_offset": 23, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 888, "col_offset": 39, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 889, "col_offset": 13, "nodeName": "mock", "type": "module"}, {"lineNumber": 889, "col_offset": 23, "nodeName": "outputs", "type": "Tuple[Any, ...]"}, {"lineNumber": 889, "col_offset": 40, "nodeName": "inputs", "type": "List[Any]"}, {"lineNumber": 914, "col_offset": 29, "nodeName": "self", "type": "TestScale"}, {"lineNumber": 949, "col_offset": 29, "nodeName": "self", "type": "TestScaleOneBottom"}, {"lineNumber": 985, "col_offset": 29, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 986, "col_offset": 32, "nodeName": "self", "type": "TestScaleWithBias"}, {"lineNumber": 1030, "col_offset": 29, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1031, "col_offset": 32, "nodeName": "self", "type": "TestScaleOneBottomWithBias"}, {"lineNumber": 1058, "col_offset": 29, "nodeName": "self", "type": "TestSlice"}, {"lineNumber": 1089, "col_offset": 29, "nodeName": "self", "type": "TestSliceNoAxis"}, {"lineNumber": 1117, "col_offset": 29, "nodeName": "self", "type": "TestSliceNoAxisNoSliceDim"}, {"lineNumber": 1149, "col_offset": 29, "nodeName": "self", "type": "TestSliceSlicePoint"}, {"lineNumber": 1177, "col_offset": 29, "nodeName": "self", "type": "TestSigmoid"}, {"lineNumber": 1201, "col_offset": 29, "nodeName": "self", "type": "TestSoftmax"}, {"lineNumber": 1300, "col_offset": 29, "nodeName": "self", "type": "TestSoftmaxWithLoss"}, {"lineNumber": 31, "col_offset": 31, "nodeName": "param", "type": "Any"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "getattr", "type": "Callable[..., Any]"}, {"lineNumber": 38, "col_offset": 35, "nodeName": "param", "type": "Any"}, {"lineNumber": 38, "col_offset": 42, "nodeName": "k", "type": "Any"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "random", "type": "Any"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "random", "type": "Any"}, {"lineNumber": 97, "col_offset": 40, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 97, "col_offset": 44, "nodeName": "inputs", "type": "List[str]"}, {"lineNumber": 97, "col_offset": 52, "nodeName": "invars", "type": "List[Any]"}, {"lineNumber": 156, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 159, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 176, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 209, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 212, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 229, "col_offset": 44, "nodeName": "i", "type": "int"}, {"lineNumber": 305, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 312, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 357, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 684, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 691, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 727, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 734, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 775, "col_offset": 46, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 776, "col_offset": 46, "nodeName": "self", "type": "TestEltwiseProd"}, {"lineNumber": 803, "col_offset": 46, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 804, "col_offset": 46, "nodeName": "self", "type": "TestEltwiseSum"}, {"lineNumber": 822, "col_offset": 34, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 851, "col_offset": 34, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 888, "col_offset": 23, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 888, "col_offset": 39, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 889, "col_offset": 23, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 889, "col_offset": 40, "nodeName": "self", "type": "TestEltwiseMax"}, {"lineNumber": 937, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 972, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 1010, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 1017, "col_offset": 32, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 74, "col_offset": 23, "nodeName": "numpy", "type": "module"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "numpy", "type": "module"}, {"lineNumber": 156, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 159, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 209, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 212, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 305, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 312, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 357, "col_offset": 37, "nodeName": "range", "type": "Callable[..., List[int]]"}, {"lineNumber": 684, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 691, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 727, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 734, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 822, "col_offset": 34, "nodeName": "moves", "type": "module"}, {"lineNumber": 851, "col_offset": 34, "nodeName": "moves", "type": "module"}, {"lineNumber": 937, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 972, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 1010, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 1017, "col_offset": 37, "nodeName": "range", "type": "Type[xrange]"}, {"lineNumber": 684, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 691, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 727, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 734, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 822, "col_offset": 34, "nodeName": "six", "type": "module"}, {"lineNumber": 851, "col_offset": 34, "nodeName": "six", "type": "module"}, {"lineNumber": 937, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 972, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 1010, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 1017, "col_offset": 37, "nodeName": "moves", "type": "module"}, {"lineNumber": 684, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 691, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 727, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 734, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 937, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 972, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 1010, "col_offset": 37, "nodeName": "six", "type": "module"}, {"lineNumber": 1017, "col_offset": 37, "nodeName": "six", "type": "module"}]