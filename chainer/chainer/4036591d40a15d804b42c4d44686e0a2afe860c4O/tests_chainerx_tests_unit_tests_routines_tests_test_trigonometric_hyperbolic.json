[{"lineNumber": 83, "col_offset": 0, "nodeName": "_make_inverse_trig_params", "type": "Callable[[Any], Any]"}, {"lineNumber": 131, "col_offset": 14, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 131, "col_offset": 44, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 133, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 141, "col_offset": 14, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 141, "col_offset": 44, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 143, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 151, "col_offset": 14, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 151, "col_offset": 44, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 164, "col_offset": 47, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 174, "col_offset": 17, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 174, "col_offset": 47, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 176, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 184, "col_offset": 17, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 184, "col_offset": 47, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 186, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 235, "col_offset": 18, "nodeName": "BinaryMathTestBase", "type": "Any"}, {"lineNumber": 235, "col_offset": 49, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any, Any], Any]"}, {"lineNumber": 245, "col_offset": 15, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 245, "col_offset": 45, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 247, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 255, "col_offset": 15, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 255, "col_offset": 45, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 257, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 265, "col_offset": 18, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 265, "col_offset": 48, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 267, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 275, "col_offset": 18, "nodeName": "UnaryMathTestBase", "type": "Any"}, {"lineNumber": 275, "col_offset": 48, "nodeName": "NumpyOpTest", "type": "Any"}, {"lineNumber": 277, "col_offset": 4, "nodeName": "func", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 19, "col_offset": 32, "nodeName": "_in_out_float_dtypes_math_functions", "type": "List[Tuple[Tuple[str], str]]"}, {"lineNumber": 32, "col_offset": 39, "nodeName": "_permutate_dtype_mapping", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "nonfinite_numbers", "type": "List[float]"}, {"lineNumber": 131, "col_offset": 14, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 131, "col_offset": 44, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 141, "col_offset": 14, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 141, "col_offset": 44, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 151, "col_offset": 14, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 151, "col_offset": 44, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 153, "col_offset": 4, "nodeName": "dodge_nondifferentiable", "type": "bool"}, {"lineNumber": 154, "col_offset": 4, "nodeName": "check_backward_options", "type": "Dict[str, float]"}, {"lineNumber": 164, "col_offset": 17, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 164, "col_offset": 47, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 174, "col_offset": 17, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 174, "col_offset": 47, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 184, "col_offset": 17, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 184, "col_offset": 47, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 235, "col_offset": 18, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 235, "col_offset": 49, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 245, "col_offset": 15, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 245, "col_offset": 45, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 255, "col_offset": 15, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 255, "col_offset": 45, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 265, "col_offset": 18, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 265, "col_offset": 48, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 275, "col_offset": 18, "nodeName": "math_utils", "type": "Any"}, {"lineNumber": 275, "col_offset": 48, "nodeName": "op_utils", "type": "Any"}, {"lineNumber": 32, "col_offset": 39, "nodeName": "dtype_utils", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "product", "type": "Any"}, {"lineNumber": 73, "col_offset": 9, "nodeName": "product", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 70, "col_offset": 31, "nodeName": "_in_out_dtypes_math_functions", "type": "List[Tuple[Tuple[str], str]]"}, {"lineNumber": 73, "col_offset": 9, "nodeName": "testing", "type": "Any"}, {"lineNumber": 75, "col_offset": 31, "nodeName": "_in_out_float_dtypes_math_functions", "type": "List[Tuple[Tuple[str], str]]"}, {"lineNumber": 104, "col_offset": 25, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 104, "col_offset": 54, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "product", "type": "Any"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "product", "type": "Any"}, {"lineNumber": 134, "col_offset": 15, "nodeName": "sin", "type": "Any"}, {"lineNumber": 134, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 144, "col_offset": 15, "nodeName": "cos", "type": "Any"}, {"lineNumber": 144, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 157, "col_offset": 15, "nodeName": "tan", "type": "Any"}, {"lineNumber": 157, "col_offset": 22, "nodeName": "a", "type": "Any"}, {"lineNumber": 167, "col_offset": 15, "nodeName": "arcsin", "type": "Any"}, {"lineNumber": 167, "col_offset": 25, "nodeName": "a", "type": "Any"}, {"lineNumber": 177, "col_offset": 15, "nodeName": "arccos", "type": "Any"}, {"lineNumber": 177, "col_offset": 25, "nodeName": "a", "type": "Any"}, {"lineNumber": 187, "col_offset": 15, "nodeName": "arctan", "type": "Any"}, {"lineNumber": 187, "col_offset": 25, "nodeName": "a", "type": "Any"}, {"lineNumber": 238, "col_offset": 15, "nodeName": "arctan2", "type": "Any"}, {"lineNumber": 238, "col_offset": 26, "nodeName": "a", "type": "Any"}, {"lineNumber": 238, "col_offset": 29, "nodeName": "b", "type": "Any"}, {"lineNumber": 248, "col_offset": 15, "nodeName": "sinh", "type": "Any"}, {"lineNumber": 248, "col_offset": 23, "nodeName": "a", "type": "Any"}, {"lineNumber": 258, "col_offset": 15, "nodeName": "cosh", "type": "Any"}, {"lineNumber": 258, "col_offset": 23, "nodeName": "a", "type": "Any"}, {"lineNumber": 268, "col_offset": 15, "nodeName": "arcsinh", "type": "Any"}, {"lineNumber": 268, "col_offset": 26, "nodeName": "a", "type": "Any"}, {"lineNumber": 278, "col_offset": 15, "nodeName": "arccosh", "type": "Any"}, {"lineNumber": 278, "col_offset": 26, "nodeName": "a", "type": "Any"}, {"lineNumber": 68, "col_offset": 4, "nodeName": "chainer", "type": "module"}, {"lineNumber": 73, "col_offset": 9, "nodeName": "chainer", "type": "module"}, {"lineNumber": 104, "col_offset": 40, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 110, "col_offset": 35, "nodeName": "_in_out_dtypes_math_functions", "type": "List[Tuple[Tuple[str], str]]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 118, "col_offset": 35, "nodeName": "_in_out_float_dtypes_math_functions", "type": "List[Tuple[Tuple[str], str]]"}, {"lineNumber": 134, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 144, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 157, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 167, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 177, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 187, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 238, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 248, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 258, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 268, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 278, "col_offset": 15, "nodeName": "xp", "type": "Any"}, {"lineNumber": 76, "col_offset": 33, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 76, "col_offset": 62, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "chainer", "type": "module"}, {"lineNumber": 111, "col_offset": 21, "nodeName": "inverse_trig_differentiable_inputs", "type": "Dict[str, List[Union[float, int]]]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "chainer", "type": "module"}, {"lineNumber": 121, "col_offset": 18, "nodeName": "nonfinite_numbers", "type": "List[float]"}, {"lineNumber": 76, "col_offset": 48, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 111, "col_offset": 56, "nodeName": "name", "type": "str"}, {"lineNumber": 120, "col_offset": 16, "nodeName": "inverse_trig_nondifferentiable_inputs", "type": "Dict[str, Union[List[int], List[nothing], List[Union[int, float]]]]"}, {"lineNumber": 120, "col_offset": 54, "nodeName": "name", "type": "str"}]