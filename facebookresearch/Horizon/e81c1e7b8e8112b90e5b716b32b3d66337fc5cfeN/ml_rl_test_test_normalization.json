[{"lineNumber": 22, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 23, "col_offset": 4, "nodeName": "test_prepare_normalization_and_normalize", "type": "Callable[[Any], Any]"}, {"lineNumber": 86, "col_offset": 4, "nodeName": "test_persistency", "type": "Callable[[Any], Any]"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "preprocess_feature", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "preprocess", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 131, "col_offset": 4, "nodeName": "test_preprocessing_network", "type": "Callable[[Any], Any]"}, {"lineNumber": 22, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "types", "type": "Dict[Any, unicode]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "types_dict", "type": "Any"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "features", "type": "List[unicode]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "blobname_template", "type": "unicode"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "types", "type": "Any"}, {"lineNumber": 102, "col_offset": 8, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "feature", "type": "Any"}, {"lineNumber": 120, "col_offset": 19, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 121, "col_offset": 15, "nodeName": "feature", "type": "Any"}, {"lineNumber": 124, "col_offset": 8, "nodeName": "result", "type": "Dict[Any, Any]"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 125, "col_offset": 28, "nodeName": "features", "type": "Any"}, {"lineNumber": 129, "col_offset": 15, "nodeName": "result", "type": "Dict[Any, Any]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "types", "type": "Any"}, {"lineNumber": 142, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "preprocessor", "type": "Any"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 144, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 152, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 165, "col_offset": 12, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 165, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 175, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 188, "col_offset": 12, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 188, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 24, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[unicode, Union[numpy.ndarray, List[float]]]]"}, {"lineNumber": 26, "col_offset": 16, "nodeName": "identify_types", "type": "Callable[[Any], Dict[Any, unicode]]"}, {"lineNumber": 26, "col_offset": 46, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 27, "col_offset": 21, "nodeName": "identify_types_dict", "type": "Callable[[Any], Any]"}, {"lineNumber": 27, "col_offset": 56, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 28, "col_offset": 35, "nodeName": "identify_parameters", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 29, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 29, "col_offset": 31, "nodeName": "types_dict", "type": "Any"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "Net", "type": "Any"}, {"lineNumber": 35, "col_offset": 19, "nodeName": "prepare_normalization", "type": "Any"}, {"lineNumber": 36, "col_offset": 12, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 36, "col_offset": 22, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 36, "col_offset": 48, "nodeName": "features", "type": "List[unicode]"}, {"lineNumber": 36, "col_offset": 58, "nodeName": "blobname_template", "type": "unicode"}, {"lineNumber": 40, "col_offset": 30, "nodeName": "normalize_feature_map", "type": "Any"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 41, "col_offset": 31, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 41, "col_offset": 41, "nodeName": "features", "type": "List[unicode]"}, {"lineNumber": 41, "col_offset": 51, "nodeName": "blob_map", "type": "Any"}, {"lineNumber": 41, "col_offset": 61, "nodeName": "blobname_template", "type": "unicode"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "k", "type": "Any"}, {"lineNumber": 53, "col_offset": 15, "nodeName": "v", "type": "Any"}, {"lineNumber": 53, "col_offset": 20, "nodeName": "iteritems", "type": "Callable"}, {"lineNumber": 53, "col_offset": 34, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 87, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[unicode, Union[numpy.ndarray, List[float]]]]"}, {"lineNumber": 89, "col_offset": 16, "nodeName": "identify_types_dict", "type": "Callable[[Any], Any]"}, {"lineNumber": 89, "col_offset": 51, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 90, "col_offset": 35, "nodeName": "identify_parameters", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 91, "col_offset": 31, "nodeName": "types", "type": "Any"}, {"lineNumber": 94, "col_offset": 30, "nodeName": "f", "type": "_io.StringIO"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "read_parameters", "type": "Dict[Any, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev`]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 99, "col_offset": 25, "nodeName": "read_parameters", "type": "Dict[Any, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev`]"}, {"lineNumber": 99, "col_offset": 42, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 103, "col_offset": 11, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 103, "col_offset": 38, "nodeName": "BINARY", "type": "unicode"}, {"lineNumber": 106, "col_offset": 11, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 114, "col_offset": 38, "nodeName": "PROBABILITY", "type": "unicode"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 116, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 118, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 119, "col_offset": 23, "nodeName": "stddev", "type": "Any"}, {"lineNumber": 132, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[unicode, Union[numpy.ndarray, List[float]]]]"}, {"lineNumber": 133, "col_offset": 16, "nodeName": "identify_types_dict", "type": "Callable[[Any], Any]"}, {"lineNumber": 133, "col_offset": 51, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 134, "col_offset": 35, "nodeName": "identify_parameters", "type": "Callable[[Any, Any], Dict[Any, Any]]"}, {"lineNumber": 135, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 135, "col_offset": 31, "nodeName": "types", "type": "Any"}, {"lineNumber": 137, "col_offset": 24, "nodeName": "preprocess", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 138, "col_offset": 31, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "test_features", "type": "Dict[unicode, Any]"}, {"lineNumber": 142, "col_offset": 14, "nodeName": "Net", "type": "Any"}, {"lineNumber": 143, "col_offset": 23, "nodeName": "PreprocessorNet", "type": "Any"}, {"lineNumber": 143, "col_offset": 39, "nodeName": "net", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "CreateNet", "type": "Any"}, {"lineNumber": 150, "col_offset": 28, "nodeName": "net", "type": "Any"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "RunNetOnce", "type": "Any"}, {"lineNumber": 163, "col_offset": 29, "nodeName": "net", "type": "Any"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "RunNetOnce", "type": "Any"}, {"lineNumber": 186, "col_offset": 29, "nodeName": "net", "type": "Any"}, {"lineNumber": 24, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 26, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 27, "col_offset": 21, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 28, "col_offset": 35, "nodeName": "normalization", "type": "module"}, {"lineNumber": 32, "col_offset": 24, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 33, "col_offset": 19, "nodeName": "core", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 53, "col_offset": 20, "nodeName": "six", "type": "module"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 30, "nodeName": "PROBABILITY", "type": "unicode"}, {"lineNumber": 58, "col_offset": 16, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "one_stddev", "type": "Any"}, {"lineNumber": 68, "col_offset": 16, "nodeName": "zero_stddev", "type": "Any"}, {"lineNumber": 69, "col_offset": 16, "nodeName": "zero_mean", "type": "Any"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "is_binary", "type": "bool"}, {"lineNumber": 82, "col_offset": 16, "nodeName": "is_ctd", "type": "bool"}, {"lineNumber": 87, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 89, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 90, "col_offset": 35, "nodeName": "normalization", "type": "module"}, {"lineNumber": 94, "col_offset": 13, "nodeName": "StringIO", "type": "Type[_io.StringIO]"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "write_parameters", "type": "Callable[[Any, Any], None]"}, {"lineNumber": 95, "col_offset": 43, "nodeName": "f", "type": "_io.StringIO"}, {"lineNumber": 95, "col_offset": 46, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "seek", "type": "Callable[..., int]"}, {"lineNumber": 97, "col_offset": 30, "nodeName": "load_parameters", "type": "Callable[[Any], Dict[Any, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev`]]"}, {"lineNumber": 97, "col_offset": 60, "nodeName": "f", "type": "_io.StringIO"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 102, "col_offset": 27, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 102, "col_offset": 38, "nodeName": "feature", "type": "Any"}, {"lineNumber": 102, "col_offset": 47, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 103, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 103, "col_offset": 38, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 105, "col_offset": 20, "nodeName": "astype", "type": "Any"}, {"lineNumber": 105, "col_offset": 58, "nodeName": "float32", "type": "Any"}, {"lineNumber": 106, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "boxcox", "type": "Any"}, {"lineNumber": 111, "col_offset": 19, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 114, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 114, "col_offset": 38, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 115, "col_offset": 22, "nodeName": "clip", "type": "Any"}, {"lineNumber": 115, "col_offset": 30, "nodeName": "feature", "type": "Any"}, {"lineNumber": 116, "col_offset": 22, "nodeName": "logit", "type": "Any"}, {"lineNumber": 116, "col_offset": 36, "nodeName": "feature", "type": "Any"}, {"lineNumber": 118, "col_offset": 22, "nodeName": "feature", "type": "Any"}, {"lineNumber": 118, "col_offset": 32, "nodeName": "mean", "type": "Any"}, {"lineNumber": 119, "col_offset": 23, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 126, "col_offset": 35, "nodeName": "preprocess_feature", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 132, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 133, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 134, "col_offset": 35, "nodeName": "normalization", "type": "module"}, {"lineNumber": 137, "col_offset": 24, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 142, "col_offset": 14, "nodeName": "core", "type": "Any"}, {"lineNumber": 145, "col_offset": 12, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 145, "col_offset": 31, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 146, "col_offset": 12, "nodeName": "preprocess_blob", "type": "Any"}, {"lineNumber": 147, "col_offset": 16, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 153, "col_offset": 15, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 166, "col_offset": 34, "nodeName": "FetchBlob", "type": "Any"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 176, "col_offset": 15, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 186, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 189, "col_offset": 34, "nodeName": "FetchBlob", "type": "Any"}, {"lineNumber": 193, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 32, "col_offset": 24, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 54, "col_offset": 28, "nodeName": "all", "type": "Any"}, {"lineNumber": 57, "col_offset": 30, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 58, "col_offset": 27, "nodeName": "expit", "type": "Any"}, {"lineNumber": 58, "col_offset": 41, "nodeName": "v", "type": "Any"}, {"lineNumber": 59, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 29, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 68, "col_offset": 30, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 70, "col_offset": 40, "nodeName": "BINARY", "type": "unicode"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 80, "col_offset": 29, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 82, "col_offset": 37, "nodeName": "CONTINUOUS", "type": "unicode"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 94, "col_offset": 13, "nodeName": "io", "type": "module"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "normalization", "type": "module"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "f", "type": "_io.StringIO"}, {"lineNumber": 97, "col_offset": 30, "nodeName": "normalization", "type": "module"}, {"lineNumber": 102, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 102, "col_offset": 47, "nodeName": "normalization", "type": "module"}, {"lineNumber": 105, "col_offset": 58, "nodeName": "np", "type": "module"}, {"lineNumber": 107, "col_offset": 22, "nodeName": "stats", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "maximum", "type": "Any"}, {"lineNumber": 110, "col_offset": 20, "nodeName": "BOX_COX_MIN_VALUE", "type": "float"}, {"lineNumber": 111, "col_offset": 19, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 115, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 116, "col_offset": 22, "nodeName": "special", "type": "Any"}, {"lineNumber": 118, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 126, "col_offset": 35, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 127, "col_offset": 16, "nodeName": "features", "type": "Any"}, {"lineNumber": 127, "col_offset": 40, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 145, "col_offset": 12, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 145, "col_offset": 45, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 146, "col_offset": 12, "nodeName": "preprocessor", "type": "Any"}, {"lineNumber": 147, "col_offset": 30, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 154, "col_offset": 16, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 155, "col_offset": 20, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 160, "col_offset": 20, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 166, "col_offset": 34, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 167, "col_offset": 16, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 170, "col_offset": 16, "nodeName": "all", "type": "Any"}, {"lineNumber": 177, "col_offset": 16, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 178, "col_offset": 20, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 182, "col_offset": 16, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 183, "col_offset": 20, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 189, "col_offset": 34, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 190, "col_offset": 16, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 193, "col_offset": 12, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "all", "type": "Any"}, {"lineNumber": 49, "col_offset": 24, "nodeName": "parameter", "type": "Any"}, {"lineNumber": 54, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 54, "col_offset": 35, "nodeName": "isfinite", "type": "Any"}, {"lineNumber": 54, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 58, "col_offset": 27, "nodeName": "special", "type": "Any"}, {"lineNumber": 59, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "all", "type": "Any"}, {"lineNumber": 67, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 67, "col_offset": 40, "nodeName": "std", "type": "Any"}, {"lineNumber": 67, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 68, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 68, "col_offset": 41, "nodeName": "std", "type": "Any"}, {"lineNumber": 68, "col_offset": 48, "nodeName": "v", "type": "Any"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 69, "col_offset": 39, "nodeName": "mean", "type": "Any"}, {"lineNumber": 69, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 70, "col_offset": 28, "nodeName": "types", "type": "Dict[Any, unicode]"}, {"lineNumber": 70, "col_offset": 40, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 71, "col_offset": 32, "nodeName": "all", "type": "Any"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 73, "col_offset": 20, "nodeName": "all", "type": "Any"}, {"lineNumber": 82, "col_offset": 25, "nodeName": "types", "type": "Dict[Any, unicode]"}, {"lineNumber": 82, "col_offset": 37, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 84, "col_offset": 32, "nodeName": "is_ctd", "type": "bool"}, {"lineNumber": 84, "col_offset": 42, "nodeName": "has_boxcox", "type": "bool"}, {"lineNumber": 105, "col_offset": 37, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 109, "col_offset": 20, "nodeName": "feature", "type": "Any"}, {"lineNumber": 109, "col_offset": 30, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 110, "col_offset": 20, "nodeName": "normalization", "type": "module"}, {"lineNumber": 127, "col_offset": 25, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 127, "col_offset": 51, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 145, "col_offset": 45, "nodeName": "np", "type": "module"}, {"lineNumber": 145, "col_offset": 65, "nodeName": "int32", "type": "Any"}, {"lineNumber": 147, "col_offset": 55, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 154, "col_offset": 16, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 156, "col_offset": 20, "nodeName": "astype", "type": "Any"}, {"lineNumber": 156, "col_offset": 59, "nodeName": "float32", "type": "Any"}, {"lineNumber": 159, "col_offset": 16, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 161, "col_offset": 20, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 170, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 171, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 172, "col_offset": 28, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 177, "col_offset": 16, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 179, "col_offset": 20, "nodeName": "astype", "type": "Any"}, {"lineNumber": 179, "col_offset": 59, "nodeName": "float32", "type": "Any"}, {"lineNumber": 182, "col_offset": 16, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 184, "col_offset": 20, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 195, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 196, "col_offset": 28, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 49, "col_offset": 37, "nodeName": "values", "type": "Callable"}, {"lineNumber": 54, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "k", "type": "Any"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "logical_and", "type": "Any"}, {"lineNumber": 67, "col_offset": 40, "nodeName": "np", "type": "module"}, {"lineNumber": 68, "col_offset": 41, "nodeName": "np", "type": "module"}, {"lineNumber": 69, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 70, "col_offset": 34, "nodeName": "k", "type": "Any"}, {"lineNumber": 71, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 39, "nodeName": "logical_or", "type": "Any"}, {"lineNumber": 71, "col_offset": 53, "nodeName": "zero_mean", "type": "Any"}, {"lineNumber": 71, "col_offset": 64, "nodeName": "is_binary", "type": "bool"}, {"lineNumber": 73, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 74, "col_offset": 24, "nodeName": "logical_or", "type": "Any"}, {"lineNumber": 75, "col_offset": 68, "nodeName": "is_binary", "type": "bool"}, {"lineNumber": 80, "col_offset": 29, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "k", "type": "Any"}, {"lineNumber": 105, "col_offset": 21, "nodeName": "feature", "type": "Any"}, {"lineNumber": 109, "col_offset": 30, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 145, "col_offset": 65, "nodeName": "np", "type": "module"}, {"lineNumber": 156, "col_offset": 59, "nodeName": "np", "type": "module"}, {"lineNumber": 161, "col_offset": 20, "nodeName": "normalization", "type": "module"}, {"lineNumber": 161, "col_offset": 50, "nodeName": "ones", "type": "Any"}, {"lineNumber": 171, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 172, "col_offset": 49, "nodeName": "test_features", "type": "Dict[unicode, Any]"}, {"lineNumber": 179, "col_offset": 59, "nodeName": "np", "type": "module"}, {"lineNumber": 184, "col_offset": 20, "nodeName": "normalization", "type": "module"}, {"lineNumber": 184, "col_offset": 50, "nodeName": "ones", "type": "Any"}, {"lineNumber": 195, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 196, "col_offset": 49, "nodeName": "test_features", "type": "Dict[unicode, Any]"}, {"lineNumber": 49, "col_offset": 37, "nodeName": "normalization_parameters", "type": "Dict[Any, Any]"}, {"lineNumber": 61, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "greater", "type": "Any"}, {"lineNumber": 62, "col_offset": 39, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 62, "col_offset": 53, "nodeName": "less", "type": "Any"}, {"lineNumber": 62, "col_offset": 61, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 71, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 74, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "logical_or", "type": "Any"}, {"lineNumber": 75, "col_offset": 42, "nodeName": "one_stddev", "type": "Any"}, {"lineNumber": 75, "col_offset": 54, "nodeName": "zero_stddev", "type": "Any"}, {"lineNumber": 80, "col_offset": 54, "nodeName": "k", "type": "Any"}, {"lineNumber": 156, "col_offset": 20, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 161, "col_offset": 50, "nodeName": "np", "type": "module"}, {"lineNumber": 161, "col_offset": 67, "nodeName": "float32", "type": "Any"}, {"lineNumber": 172, "col_offset": 63, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 179, "col_offset": 20, "nodeName": "feature_value_map", "type": "Dict[unicode, Union[numpy.ndarray, List[float]]]"}, {"lineNumber": 184, "col_offset": 50, "nodeName": "np", "type": "module"}, {"lineNumber": 184, "col_offset": 67, "nodeName": "float32", "type": "Any"}, {"lineNumber": 196, "col_offset": 63, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 62, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 62, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 75, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 156, "col_offset": 38, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 161, "col_offset": 67, "nodeName": "np", "type": "module"}, {"lineNumber": 179, "col_offset": 38, "nodeName": "feature_name", "type": "unicode"}, {"lineNumber": 184, "col_offset": 67, "nodeName": "np", "type": "module"}]