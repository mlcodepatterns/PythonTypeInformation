[{"lineNumber": 22, "col_offset": 0, "nodeName": "generate_data_discrete", "type": "Callable[[Any, bool, str], Any]"}, {"lineNumber": 104, "col_offset": 0, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 109, "col_offset": 0, "nodeName": "assertAllClose", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 114, "col_offset": 0, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 121, "col_offset": 0, "nodeName": "verify_single_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 185, "col_offset": 0, "nodeName": "verify_multi_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 249, "col_offset": 0, "nodeName": "rand_string", "type": "Callable[..., Any]"}, {"lineNumber": 19, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 258, "col_offset": 20, "nodeName": "ReagentSQLTestBase", "type": "Type[reagent.test.workflow.reagent_sql_test_base.ReagentSQLTestBase]"}, {"lineNumber": 19, "col_offset": 9, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 19, "col_offset": 27, "nodeName": "__name__", "type": "str"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "actions", "type": "List[str]"}, {"lineNumber": 30, "col_offset": 4, "nodeName": "possible_actions", "type": "List[List[str]]"}, {"lineNumber": 33, "col_offset": 7, "nodeName": "multi_step", "type": "bool"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "next_state_features", "type": "Any"}, {"lineNumber": 77, "col_offset": 26, "nodeName": "next_states", "type": "Any"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "possible_next_actions", "type": "Any"}, {"lineNumber": 78, "col_offset": 28, "nodeName": "possible_next_actions", "type": "Any"}, {"lineNumber": 79, "col_offset": 4, "nodeName": "next_actions", "type": "Any"}, {"lineNumber": 79, "col_offset": 19, "nodeName": "next_actions", "type": "Any"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 105, "col_offset": 4, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "present_a", "type": "Any"}, {"lineNumber": 117, "col_offset": 4, "nodeName": "present_b", "type": "Any"}, {"lineNumber": 254, "col_offset": 4, "nodeName": "letters", "type": "str"}, {"lineNumber": 254, "col_offset": 14, "nodeName": "ascii_lowercase", "type": "str"}, {"lineNumber": 328, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 19, "col_offset": 9, "nodeName": "logging", "type": "module"}, {"lineNumber": 22, "col_offset": 47, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 22, "col_offset": 65, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "rewards", "type": "List[List[int]]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "next_states", "type": "List[List[Dict[int, int]]]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "next_actions", "type": "List[List[str]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "terminals", "type": "List[List[int]]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "time_diffs", "type": "List[List[int]]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "rewards", "type": "List[List[int]]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "metrics", "type": "List[Dict[str, int]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "next_states", "type": "List[List[Dict[int, int]]]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "next_actions", "type": "List[List[str]]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "possible_next_actions", "type": "List[List[List[str]]]"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "terminals", "type": "List[List[int]]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "time_diffs", "type": "List[int]"}, {"lineNumber": 60, "col_offset": 14, "nodeName": "MultiStepSamples", "type": "Type[reagent.test.environment.environment.MultiStepSamples]"}, {"lineNumber": 74, "col_offset": 11, "nodeName": "multi_step", "type": "bool"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "samples", "type": "Any"}, {"lineNumber": 77, "col_offset": 26, "nodeName": "samples", "type": "Any"}, {"lineNumber": 78, "col_offset": 28, "nodeName": "samples", "type": "Any"}, {"lineNumber": 79, "col_offset": 19, "nodeName": "samples", "type": "Any"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 98, "col_offset": 9, "nodeName": "createDataFrame", "type": "Any"}, {"lineNumber": 98, "col_offset": 32, "nodeName": "df", "type": "Any"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "show", "type": "Any"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "createOrReplaceTempView", "type": "Any"}, {"lineNumber": 101, "col_offset": 31, "nodeName": "table_name", "type": "str"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 106, "col_offset": 28, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 106, "col_offset": 35, "nodeName": "arr_b", "type": "Any"}, {"lineNumber": 110, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 111, "col_offset": 31, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 111, "col_offset": 38, "nodeName": "arr_b", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 116, "col_offset": 16, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 117, "col_offset": 16, "nodeName": "arr_b", "type": "Any"}, {"lineNumber": 118, "col_offset": 4, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 118, "col_offset": 28, "nodeName": "present_a", "type": "Any"}, {"lineNumber": 118, "col_offset": 39, "nodeName": "present_b", "type": "Any"}, {"lineNumber": 123, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 125, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 134, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 134, "col_offset": 44, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 135, "col_offset": 21, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 144, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 144, "col_offset": 47, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 144, "col_offset": 72, "nodeName": "state_features", "type": "numpy.ndarray"}, {"lineNumber": 146, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 147, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 148, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 149, "col_offset": 35, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 158, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 158, "col_offset": 49, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 159, "col_offset": 26, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 168, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 169, "col_offset": 35, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 169, "col_offset": 65, "nodeName": "next_state_features", "type": "numpy.ndarray"}, {"lineNumber": 172, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 173, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 174, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 175, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 179, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 186, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 188, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 197, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 197, "col_offset": 44, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 207, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 207, "col_offset": 47, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 207, "col_offset": 72, "nodeName": "state_features", "type": "numpy.ndarray"}, {"lineNumber": 209, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 210, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 211, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 213, "col_offset": 35, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 222, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 222, "col_offset": 49, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 223, "col_offset": 26, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 232, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 233, "col_offset": 35, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 233, "col_offset": 65, "nodeName": "next_state_features", "type": "numpy.ndarray"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 238, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 239, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 243, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 254, "col_offset": 14, "nodeName": "string", "type": "module"}, {"lineNumber": 255, "col_offset": 11, "nodeName": "join", "type": "Callable"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "table_name", "type": "str"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "temp_parquet", "type": "tempfile.TemporaryDirectory[nothing]"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "parquet_url", "type": "str"}, {"lineNumber": 287, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 291, "col_offset": 15, "nodeName": "df", "type": "Any"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 297, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 305, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 306, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 313, "col_offset": 8, "nodeName": "gamma", "type": "float"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 316, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 329, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "actions", "type": "List[str]"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "rewards", "type": "List[List[int]]"}, {"lineNumber": 68, "col_offset": 25, "nodeName": "possible_actions", "type": "List[List[str]]"}, {"lineNumber": 69, "col_offset": 20, "nodeName": "next_states", "type": "List[List[Dict[int, int]]]"}, {"lineNumber": 70, "col_offset": 21, "nodeName": "next_actions", "type": "List[List[str]]"}, {"lineNumber": 71, "col_offset": 18, "nodeName": "terminals", "type": "List[List[int]]"}, {"lineNumber": 72, "col_offset": 30, "nodeName": "possible_next_actions", "type": "List[List[List[str]]]"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "to_single_step", "type": "Any"}, {"lineNumber": 81, "col_offset": 9, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 83, "col_offset": 22, "nodeName": "mdp_ids", "type": "Any"}, {"lineNumber": 84, "col_offset": 31, "nodeName": "sequence_numbers", "type": "Any"}, {"lineNumber": 85, "col_offset": 39, "nodeName": "sequence_number_ordinals", "type": "Any"}, {"lineNumber": 86, "col_offset": 30, "nodeName": "states", "type": "Any"}, {"lineNumber": 87, "col_offset": 22, "nodeName": "actions", "type": "Any"}, {"lineNumber": 88, "col_offset": 34, "nodeName": "action_probabilities", "type": "Any"}, {"lineNumber": 89, "col_offset": 22, "nodeName": "rewards", "type": "Any"}, {"lineNumber": 90, "col_offset": 35, "nodeName": "next_state_features", "type": "Any"}, {"lineNumber": 91, "col_offset": 27, "nodeName": "next_actions", "type": "Any"}, {"lineNumber": 92, "col_offset": 25, "nodeName": "time_diffs", "type": "Union[List[int], List[List[int]]]"}, {"lineNumber": 93, "col_offset": 32, "nodeName": "possible_actions", "type": "Any"}, {"lineNumber": 94, "col_offset": 37, "nodeName": "possible_next_actions", "type": "Any"}, {"lineNumber": 95, "col_offset": 23, "nodeName": "metrics", "type": "Union[List[Dict[str, int]], List[List[Dict[str, int]]]]"}, {"lineNumber": 98, "col_offset": 9, "nodeName": "sqlCtx", "type": "Any"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 100, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 101, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 105, "col_offset": 21, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 110, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 110, "col_offset": 21, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 115, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 115, "col_offset": 21, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 116, "col_offset": 22, "nodeName": "presence", "type": "Any"}, {"lineNumber": 117, "col_offset": 22, "nodeName": "presence", "type": "Any"}, {"lineNumber": 118, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 123, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 123, "col_offset": 36, "nodeName": "Series", "type": "Any"}, {"lineNumber": 125, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 134, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 135, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 144, "col_offset": 25, "nodeName": "df", "type": "Any"}, {"lineNumber": 146, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 146, "col_offset": 27, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 147, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 147, "col_offset": 39, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 148, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 149, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 158, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 159, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 172, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 172, "col_offset": 32, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 173, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 173, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 174, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 180, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 186, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 186, "col_offset": 36, "nodeName": "Series", "type": "Any"}, {"lineNumber": 188, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 197, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 198, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 207, "col_offset": 25, "nodeName": "df", "type": "Any"}, {"lineNumber": 209, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 209, "col_offset": 27, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 210, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 210, "col_offset": 39, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 211, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 211, "col_offset": 33, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 213, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 222, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 223, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 233, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 236, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 236, "col_offset": 32, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 237, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 237, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 238, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 238, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 240, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 244, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "setLevel", "type": "Callable[[Union[int, str]], None]"}, {"lineNumber": 261, "col_offset": 45, "nodeName": "INFO", "type": "int"}, {"lineNumber": 262, "col_offset": 8, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 262, "col_offset": 26, "nodeName": "rand_string", "type": "Callable[..., Any]"}, {"lineNumber": 263, "col_offset": 8, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 263, "col_offset": 28, "nodeName": "TemporaryDirectory", "type": "Type[tempfile.TemporaryDirectory[Any]]"}, {"lineNumber": 264, "col_offset": 8, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "cleanup", "type": "Callable[[], None]"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "tearDown", "type": "Callable[[], None]"}, {"lineNumber": 272, "col_offset": 8, "nodeName": "generate_data_discrete", "type": "Callable[[Any, bool, str], Any]"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "sqlCtx", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "query_data", "type": "Callable[..., None]"}, {"lineNumber": 287, "col_offset": 13, "nodeName": "parquet", "type": "Any"}, {"lineNumber": 287, "col_offset": 38, "nodeName": "parquet_url", "type": "Any"}, {"lineNumber": 288, "col_offset": 13, "nodeName": "orderBy", "type": "Any"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 290, "col_offset": 8, "nodeName": "show", "type": "Any"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "generate_data", "type": "Any"}, {"lineNumber": 296, "col_offset": 13, "nodeName": "_read_data", "type": "Any"}, {"lineNumber": 297, "col_offset": 13, "nodeName": "toPandas", "type": "Any"}, {"lineNumber": 298, "col_offset": 8, "nodeName": "verify_single_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 298, "col_offset": 42, "nodeName": "df", "type": "Any"}, {"lineNumber": 299, "col_offset": 8, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 300, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 304, "col_offset": 8, "nodeName": "generate_data", "type": "Any"}, {"lineNumber": 305, "col_offset": 13, "nodeName": "_read_data", "type": "Any"}, {"lineNumber": 306, "col_offset": 13, "nodeName": "toPandas", "type": "Any"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "verify_single_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 307, "col_offset": 42, "nodeName": "df", "type": "Any"}, {"lineNumber": 308, "col_offset": 8, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "generate_data", "type": "Any"}, {"lineNumber": 315, "col_offset": 13, "nodeName": "_read_data", "type": "Any"}, {"lineNumber": 316, "col_offset": 13, "nodeName": "toPandas", "type": "Any"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "verify_multi_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 317, "col_offset": 41, "nodeName": "df", "type": "Any"}, {"lineNumber": 318, "col_offset": 8, "nodeName": "assertAllClose", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 329, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "samples", "type": "Any"}, {"lineNumber": 83, "col_offset": 22, "nodeName": "samples", "type": "Any"}, {"lineNumber": 84, "col_offset": 31, "nodeName": "samples", "type": "Any"}, {"lineNumber": 85, "col_offset": 39, "nodeName": "samples", "type": "Any"}, {"lineNumber": 86, "col_offset": 30, "nodeName": "samples", "type": "Any"}, {"lineNumber": 87, "col_offset": 22, "nodeName": "samples", "type": "Any"}, {"lineNumber": 88, "col_offset": 34, "nodeName": "samples", "type": "Any"}, {"lineNumber": 89, "col_offset": 22, "nodeName": "samples", "type": "Any"}, {"lineNumber": 93, "col_offset": 32, "nodeName": "samples", "type": "Any"}, {"lineNumber": 105, "col_offset": 21, "nodeName": "series_a", "type": "Any"}, {"lineNumber": 106, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 110, "col_offset": 21, "nodeName": "series_a", "type": "Any"}, {"lineNumber": 111, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 115, "col_offset": 21, "nodeName": "series_a", "type": "Any"}, {"lineNumber": 118, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 123, "col_offset": 36, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 146, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 147, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "np", "type": "module"}, {"lineNumber": 172, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 173, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 174, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 181, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 186, "col_offset": 36, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 209, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 210, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 211, "col_offset": 33, "nodeName": "np", "type": "module"}, {"lineNumber": 236, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 237, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 238, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 255, "col_offset": 19, "nodeName": "choice", "type": "Callable"}, {"lineNumber": 255, "col_offset": 33, "nodeName": "letters", "type": "str"}, {"lineNumber": 255, "col_offset": 46, "nodeName": "_", "type": "int"}, {"lineNumber": 261, "col_offset": 45, "nodeName": "logging", "type": "module"}, {"lineNumber": 263, "col_offset": 28, "nodeName": "tempfile", "type": "module"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "temp_parquet", "type": "tempfile.TemporaryDirectory[nothing]"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 273, "col_offset": 36, "nodeName": "multi_step", "type": "Any"}, {"lineNumber": 273, "col_offset": 59, "nodeName": "table_name", "type": "Any"}, {"lineNumber": 283, "col_offset": 31, "nodeName": "custom_reward_expr", "type": "Any"}, {"lineNumber": 284, "col_offset": 23, "nodeName": "multi_step", "type": "Any"}, {"lineNumber": 285, "col_offset": 18, "nodeName": "gamma", "type": "Any"}, {"lineNumber": 287, "col_offset": 13, "nodeName": "read", "type": "Any"}, {"lineNumber": 287, "col_offset": 38, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 288, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 288, "col_offset": 24, "nodeName": "asc", "type": "Any"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 290, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 296, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 297, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 299, "col_offset": 17, "nodeName": "df", "type": "Any"}, {"lineNumber": 299, "col_offset": 31, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 300, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 304, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 305, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 306, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 308, "col_offset": 17, "nodeName": "df", "type": "Any"}, {"lineNumber": 308, "col_offset": 31, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 309, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 315, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 315, "col_offset": 49, "nodeName": "gamma", "type": "float"}, {"lineNumber": 316, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 319, "col_offset": 12, "nodeName": "df", "type": "Any"}, {"lineNumber": 320, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 255, "col_offset": 19, "nodeName": "random", "type": "module"}, {"lineNumber": 255, "col_offset": 51, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 255, "col_offset": 57, "nodeName": "length", "type": "int"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 261, "col_offset": 26, "nodeName": "__name__", "type": "str"}, {"lineNumber": 264, "col_offset": 37, "nodeName": "abspath", "type": "Callable"}, {"lineNumber": 264, "col_offset": 45, "nodeName": "name", "type": "str"}, {"lineNumber": 265, "col_offset": 37, "nodeName": "table_name", "type": "str"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 273, "col_offset": 59, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 278, "col_offset": 23, "nodeName": "TableSpec", "type": "Type[reagent.workflow.types.TableSpec]"}, {"lineNumber": 279, "col_offset": 24, "nodeName": "Dataset", "type": "Type[reagent.workflow.types.Dataset]"}, {"lineNumber": 287, "col_offset": 13, "nodeName": "sqlCtx", "type": "Any"}, {"lineNumber": 299, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 308, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 320, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 261, "col_offset": 8, "nodeName": "logging", "type": "module"}, {"lineNumber": 264, "col_offset": 45, "nodeName": "temp_parquet", "type": "tempfile.TemporaryDirectory[nothing]"}, {"lineNumber": 265, "col_offset": 37, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 278, "col_offset": 44, "nodeName": "table_name", "type": "Any"}, {"lineNumber": 279, "col_offset": 44, "nodeName": "parquet_url", "type": "Any"}, {"lineNumber": 287, "col_offset": 13, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 321, "col_offset": 17, "nodeName": "gamma", "type": "float"}, {"lineNumber": 264, "col_offset": 45, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 278, "col_offset": 44, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 279, "col_offset": 44, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 321, "col_offset": 38, "nodeName": "gamma", "type": "float"}, {"lineNumber": 321, "col_offset": 59, "nodeName": "gamma", "type": "float"}]