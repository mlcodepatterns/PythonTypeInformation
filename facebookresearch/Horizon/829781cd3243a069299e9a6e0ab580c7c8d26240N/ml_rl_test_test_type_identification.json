[{"lineNumber": 12, "col_offset": 29, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 12, "col_offset": 29, "nodeName": "unittest", "type": "module"}, {"lineNumber": 14, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 14, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 16, "col_offset": 16, "nodeName": "identify_types", "type": "Callable[..., Dict[Any, str]]"}, {"lineNumber": 16, "col_offset": 46, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 19, "col_offset": 55, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 20, "col_offset": 42, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 21, "col_offset": 42, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 25, "col_offset": 44, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 27, "col_offset": 53, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 29, "col_offset": 47, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 14, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 16, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "TestTypeIdentification"}, {"lineNumber": 19, "col_offset": 25, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 19, "col_offset": 55, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "self", "type": "TestTypeIdentification"}, {"lineNumber": 20, "col_offset": 25, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 20, "col_offset": 42, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "self", "type": "TestTypeIdentification"}, {"lineNumber": 21, "col_offset": 25, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 21, "col_offset": 42, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "self", "type": "TestTypeIdentification"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 25, "col_offset": 44, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "TestTypeIdentification"}, {"lineNumber": 27, "col_offset": 25, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 27, "col_offset": 53, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "TestTypeIdentification"}, {"lineNumber": 29, "col_offset": 12, "nodeName": "types", "type": "Dict[Any, str]"}, {"lineNumber": 29, "col_offset": 47, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 19, "col_offset": 31, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "QUANTILE", "type": "str"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 29, "col_offset": 18, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 19, "col_offset": 31, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 25, "col_offset": 18, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 29, "col_offset": 18, "nodeName": "identify_types", "type": "module"}]