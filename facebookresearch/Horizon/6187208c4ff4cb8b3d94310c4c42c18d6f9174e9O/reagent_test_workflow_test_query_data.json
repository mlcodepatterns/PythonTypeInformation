[{"lineNumber": 20, "col_offset": 0, "nodeName": "generate_data_discrete", "type": "Callable[[Any, bool, str], Any]"}, {"lineNumber": 102, "col_offset": 0, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 107, "col_offset": 0, "nodeName": "assertAllClose", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 112, "col_offset": 0, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 119, "col_offset": 0, "nodeName": "verify_single_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 183, "col_offset": 0, "nodeName": "verify_multi_steps_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 17, "col_offset": 0, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 247, "col_offset": 20, "nodeName": "ReagentSQLTestBase", "type": "Type[reagent.test.workflow.reagent_sql_test_base.ReagentSQLTestBase]"}, {"lineNumber": 17, "col_offset": 9, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 17, "col_offset": 27, "nodeName": "__name__", "type": "str"}, {"lineNumber": 27, "col_offset": 4, "nodeName": "actions", "type": "List[str]"}, {"lineNumber": 28, "col_offset": 4, "nodeName": "possible_actions", "type": "List[List[str]]"}, {"lineNumber": 31, "col_offset": 7, "nodeName": "multi_steps", "type": "bool"}, {"lineNumber": 75, "col_offset": 4, "nodeName": "next_state_features", "type": "Any"}, {"lineNumber": 75, "col_offset": 26, "nodeName": "next_states", "type": "Any"}, {"lineNumber": 76, "col_offset": 4, "nodeName": "possible_next_actions", "type": "Any"}, {"lineNumber": 76, "col_offset": 28, "nodeName": "possible_next_actions", "type": "Any"}, {"lineNumber": 77, "col_offset": 4, "nodeName": "next_actions", "type": "Any"}, {"lineNumber": 77, "col_offset": 19, "nodeName": "next_actions", "type": "Any"}, {"lineNumber": 96, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 108, "col_offset": 4, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 114, "col_offset": 4, "nodeName": "present_a", "type": "Any"}, {"lineNumber": 115, "col_offset": 4, "nodeName": "present_b", "type": "Any"}, {"lineNumber": 307, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 17, "col_offset": 9, "nodeName": "logging", "type": "module"}, {"lineNumber": 20, "col_offset": 48, "nodeName": "bool", "type": "Type[bool]"}, {"lineNumber": 20, "col_offset": 66, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "rewards", "type": "List[List[int]]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "next_states", "type": "List[List[Dict[int, int]]]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "next_actions", "type": "List[List[str]]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "terminals", "type": "List[List[int]]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "time_diffs", "type": "List[List[int]]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "rewards", "type": "List[List[int]]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "metrics", "type": "List[Dict[str, int]]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "next_states", "type": "List[List[Dict[int, int]]]"}, {"lineNumber": 53, "col_offset": 8, "nodeName": "next_actions", "type": "List[List[str]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "possible_next_actions", "type": "List[List[List[str]]]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "terminals", "type": "List[List[int]]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "time_diffs", "type": "List[int]"}, {"lineNumber": 58, "col_offset": 14, "nodeName": "MultiStepSamples", "type": "Type[reagent.test.environment.environment.MultiStepSamples]"}, {"lineNumber": 72, "col_offset": 11, "nodeName": "multi_steps", "type": "bool"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "samples", "type": "Any"}, {"lineNumber": 75, "col_offset": 26, "nodeName": "samples", "type": "Any"}, {"lineNumber": 76, "col_offset": 28, "nodeName": "samples", "type": "Any"}, {"lineNumber": 77, "col_offset": 19, "nodeName": "samples", "type": "Any"}, {"lineNumber": 79, "col_offset": 9, "nodeName": "DataFrame", "type": "Any"}, {"lineNumber": 96, "col_offset": 9, "nodeName": "createDataFrame", "type": "Any"}, {"lineNumber": 96, "col_offset": 32, "nodeName": "df", "type": "Any"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "show", "type": "Any"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "createOrReplaceTempView", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "table_name", "type": "str"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 104, "col_offset": 28, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 104, "col_offset": 35, "nodeName": "arr_b", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 109, "col_offset": 31, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 109, "col_offset": 38, "nodeName": "arr_b", "type": "Any"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 114, "col_offset": 16, "nodeName": "arr_a", "type": "numpy.ndarray"}, {"lineNumber": 115, "col_offset": 16, "nodeName": "arr_b", "type": "Any"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "assert_equal", "type": "Any"}, {"lineNumber": 116, "col_offset": 28, "nodeName": "present_a", "type": "Any"}, {"lineNumber": 116, "col_offset": 39, "nodeName": "present_b", "type": "Any"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 123, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 132, "col_offset": 44, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 133, "col_offset": 21, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 142, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 142, "col_offset": 47, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 142, "col_offset": 72, "nodeName": "state_features", "type": "numpy.ndarray"}, {"lineNumber": 144, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 145, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 146, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 147, "col_offset": 35, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 156, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 156, "col_offset": 49, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 157, "col_offset": 26, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 166, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 167, "col_offset": 35, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 167, "col_offset": 65, "nodeName": "next_state_features", "type": "numpy.ndarray"}, {"lineNumber": 170, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 171, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 172, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 173, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 177, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 184, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 186, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 195, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 195, "col_offset": 44, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 196, "col_offset": 21, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 205, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 205, "col_offset": 47, "nodeName": "state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 205, "col_offset": 72, "nodeName": "state_features", "type": "numpy.ndarray"}, {"lineNumber": 207, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 208, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 209, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 211, "col_offset": 35, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 220, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 220, "col_offset": 49, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 221, "col_offset": 26, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 230, "col_offset": 4, "nodeName": "assertEqWithPresence", "type": "Callable[[Any, Any, Any], Any]"}, {"lineNumber": 231, "col_offset": 35, "nodeName": "next_state_features_presence", "type": "numpy.ndarray"}, {"lineNumber": 231, "col_offset": 65, "nodeName": "next_state_features", "type": "numpy.ndarray"}, {"lineNumber": 234, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 235, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 236, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 237, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 241, "col_offset": 4, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "table_name", "type": "str"}, {"lineNumber": 260, "col_offset": 8, "nodeName": "ts", "type": "reagent.workflow.types.TableSpec"}, {"lineNumber": 268, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 272, "col_offset": 15, "nodeName": "df", "type": "Any"}, {"lineNumber": 278, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 279, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 285, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 286, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 292, "col_offset": 8, "nodeName": "gamma", "type": "float"}, {"lineNumber": 294, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 295, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 308, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 63, "col_offset": 16, "nodeName": "actions", "type": "List[str]"}, {"lineNumber": 65, "col_offset": 16, "nodeName": "rewards", "type": "List[List[int]]"}, {"lineNumber": 66, "col_offset": 25, "nodeName": "possible_actions", "type": "List[List[str]]"}, {"lineNumber": 67, "col_offset": 20, "nodeName": "next_states", "type": "List[List[Dict[int, int]]]"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "next_actions", "type": "List[List[str]]"}, {"lineNumber": 69, "col_offset": 18, "nodeName": "terminals", "type": "List[List[int]]"}, {"lineNumber": 70, "col_offset": 30, "nodeName": "possible_next_actions", "type": "List[List[List[str]]]"}, {"lineNumber": 73, "col_offset": 18, "nodeName": "to_single_step", "type": "Any"}, {"lineNumber": 79, "col_offset": 9, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 81, "col_offset": 22, "nodeName": "mdp_ids", "type": "Any"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "sequence_numbers", "type": "Any"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "sequence_number_ordinals", "type": "Any"}, {"lineNumber": 84, "col_offset": 30, "nodeName": "states", "type": "Any"}, {"lineNumber": 85, "col_offset": 22, "nodeName": "actions", "type": "Any"}, {"lineNumber": 86, "col_offset": 34, "nodeName": "action_probabilities", "type": "Any"}, {"lineNumber": 87, "col_offset": 22, "nodeName": "rewards", "type": "Any"}, {"lineNumber": 88, "col_offset": 35, "nodeName": "next_state_features", "type": "Any"}, {"lineNumber": 89, "col_offset": 27, "nodeName": "next_actions", "type": "Any"}, {"lineNumber": 90, "col_offset": 25, "nodeName": "time_diffs", "type": "Union[List[List[int]], List[int]]"}, {"lineNumber": 91, "col_offset": 32, "nodeName": "possible_actions", "type": "Any"}, {"lineNumber": 92, "col_offset": 37, "nodeName": "possible_next_actions", "type": "Any"}, {"lineNumber": 93, "col_offset": 23, "nodeName": "metrics", "type": "Union[List[Dict[str, int]], List[List[Dict[str, int]]]]"}, {"lineNumber": 96, "col_offset": 9, "nodeName": "sqlCtx", "type": "Any"}, {"lineNumber": 97, "col_offset": 4, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 98, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "df", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 21, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 108, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 113, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 113, "col_offset": 21, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 114, "col_offset": 22, "nodeName": "presence", "type": "Any"}, {"lineNumber": 115, "col_offset": 22, "nodeName": "presence", "type": "Any"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "testing", "type": "Any"}, {"lineNumber": 121, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 121, "col_offset": 36, "nodeName": "Series", "type": "Any"}, {"lineNumber": 123, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 132, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 133, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 142, "col_offset": 25, "nodeName": "df", "type": "Any"}, {"lineNumber": 144, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 145, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 145, "col_offset": 39, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 146, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 146, "col_offset": 33, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 147, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 156, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 157, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 167, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 170, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 170, "col_offset": 32, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 171, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 171, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 172, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 184, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 184, "col_offset": 36, "nodeName": "Series", "type": "Any"}, {"lineNumber": 186, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 195, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 196, "col_offset": 21, "nodeName": "np", "type": "module"}, {"lineNumber": 205, "col_offset": 25, "nodeName": "df", "type": "Any"}, {"lineNumber": 207, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 207, "col_offset": 27, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 208, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 208, "col_offset": 39, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 209, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 209, "col_offset": 33, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 211, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 220, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 221, "col_offset": 26, "nodeName": "np", "type": "module"}, {"lineNumber": 231, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 234, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 234, "col_offset": 32, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 235, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 235, "col_offset": 30, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 236, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 236, "col_offset": 25, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 242, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "setUp", "type": "Callable[[], None]"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "setLevel", "type": "Callable[[Union[int, str]], None]"}, {"lineNumber": 250, "col_offset": 45, "nodeName": "INFO", "type": "int"}, {"lineNumber": 251, "col_offset": 8, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 255, "col_offset": 8, "nodeName": "generate_data_discrete", "type": "Callable[[Any, bool, str], Any]"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "sqlCtx", "type": "Any"}, {"lineNumber": 260, "col_offset": 13, "nodeName": "TableSpec", "type": "Type[reagent.workflow.types.TableSpec]"}, {"lineNumber": 261, "col_offset": 27, "nodeName": "query_data", "type": "Callable[..., reagent.workflow.types.Dataset]"}, {"lineNumber": 268, "col_offset": 13, "nodeName": "parquet", "type": "Any"}, {"lineNumber": 268, "col_offset": 38, "nodeName": "parquet_url", "type": "str"}, {"lineNumber": 269, "col_offset": 13, "nodeName": "orderBy", "type": "Any"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "show", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "generate_data", "type": "Any"}, {"lineNumber": 278, "col_offset": 13, "nodeName": "_read_data", "type": "Any"}, {"lineNumber": 279, "col_offset": 13, "nodeName": "toPandas", "type": "Any"}, {"lineNumber": 280, "col_offset": 8, "nodeName": "verify_single_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 280, "col_offset": 42, "nodeName": "df", "type": "Any"}, {"lineNumber": 281, "col_offset": 8, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 282, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 285, "col_offset": 13, "nodeName": "_read_data", "type": "Any"}, {"lineNumber": 286, "col_offset": 13, "nodeName": "toPandas", "type": "Any"}, {"lineNumber": 287, "col_offset": 8, "nodeName": "verify_single_step_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 287, "col_offset": 42, "nodeName": "df", "type": "Any"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "assertEq", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 293, "col_offset": 8, "nodeName": "generate_data", "type": "Any"}, {"lineNumber": 294, "col_offset": 13, "nodeName": "_read_data", "type": "Any"}, {"lineNumber": 295, "col_offset": 13, "nodeName": "toPandas", "type": "Any"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "verify_multi_steps_except_rewards", "type": "Callable[[Any], Any]"}, {"lineNumber": 296, "col_offset": 42, "nodeName": "df", "type": "Any"}, {"lineNumber": 297, "col_offset": 8, "nodeName": "assertAllClose", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 304, "col_offset": 8, "nodeName": "info", "type": "Callable[..., None]"}, {"lineNumber": 308, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 73, "col_offset": 18, "nodeName": "samples", "type": "Any"}, {"lineNumber": 81, "col_offset": 22, "nodeName": "samples", "type": "Any"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "samples", "type": "Any"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "samples", "type": "Any"}, {"lineNumber": 84, "col_offset": 30, "nodeName": "samples", "type": "Any"}, {"lineNumber": 85, "col_offset": 22, "nodeName": "samples", "type": "Any"}, {"lineNumber": 86, "col_offset": 34, "nodeName": "samples", "type": "Any"}, {"lineNumber": 87, "col_offset": 22, "nodeName": "samples", "type": "Any"}, {"lineNumber": 91, "col_offset": 32, "nodeName": "samples", "type": "Any"}, {"lineNumber": 103, "col_offset": 21, "nodeName": "series_a", "type": "Any"}, {"lineNumber": 104, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 108, "col_offset": 21, "nodeName": "series_a", "type": "Any"}, {"lineNumber": 109, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 113, "col_offset": 21, "nodeName": "series_a", "type": "Any"}, {"lineNumber": 116, "col_offset": 4, "nodeName": "np", "type": "module"}, {"lineNumber": 121, "col_offset": 36, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 144, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 145, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 146, "col_offset": 33, "nodeName": "np", "type": "module"}, {"lineNumber": 170, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 171, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 172, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 179, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 184, "col_offset": 36, "nodeName": "pandas", "type": "Any"}, {"lineNumber": 207, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 208, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 209, "col_offset": 33, "nodeName": "np", "type": "module"}, {"lineNumber": 234, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 235, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 236, "col_offset": 25, "nodeName": "np", "type": "module"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 243, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 250, "col_offset": 45, "nodeName": "logging", "type": "module"}, {"lineNumber": 252, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 256, "col_offset": 37, "nodeName": "multi_steps", "type": "Any"}, {"lineNumber": 256, "col_offset": 61, "nodeName": "table_name", "type": "Any"}, {"lineNumber": 260, "col_offset": 34, "nodeName": "table_name", "type": "Any"}, {"lineNumber": 262, "col_offset": 29, "nodeName": "ts", "type": "reagent.workflow.types.TableSpec"}, {"lineNumber": 264, "col_offset": 37, "nodeName": "custom_reward_expression", "type": "Any"}, {"lineNumber": 265, "col_offset": 24, "nodeName": "multi_steps", "type": "Any"}, {"lineNumber": 266, "col_offset": 18, "nodeName": "gamma", "type": "Any"}, {"lineNumber": 268, "col_offset": 13, "nodeName": "read", "type": "Any"}, {"lineNumber": 268, "col_offset": 38, "nodeName": "dataset", "type": "reagent.workflow.types.Dataset"}, {"lineNumber": 269, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 269, "col_offset": 24, "nodeName": "asc", "type": "Any"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "df", "type": "Any"}, {"lineNumber": 277, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 278, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 279, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 281, "col_offset": 17, "nodeName": "df", "type": "Any"}, {"lineNumber": 281, "col_offset": 31, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 282, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 285, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 286, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 288, "col_offset": 17, "nodeName": "df", "type": "Any"}, {"lineNumber": 288, "col_offset": 31, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 289, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 293, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 294, "col_offset": 13, "nodeName": "self", "type": "Any"}, {"lineNumber": 294, "col_offset": 50, "nodeName": "gamma", "type": "float"}, {"lineNumber": 295, "col_offset": 13, "nodeName": "df", "type": "Any"}, {"lineNumber": 298, "col_offset": 12, "nodeName": "df", "type": "Any"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 304, "col_offset": 8, "nodeName": "logger", "type": "logging.Logger"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "getLogger", "type": "Callable[..., logging.Logger]"}, {"lineNumber": 250, "col_offset": 26, "nodeName": "__name__", "type": "str"}, {"lineNumber": 252, "col_offset": 37, "nodeName": "table_name", "type": "str"}, {"lineNumber": 256, "col_offset": 61, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 260, "col_offset": 34, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 268, "col_offset": 13, "nodeName": "sqlCtx", "type": "Any"}, {"lineNumber": 281, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 288, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 299, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "logging", "type": "module"}, {"lineNumber": 252, "col_offset": 37, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 268, "col_offset": 13, "nodeName": "self", "type": "TestQueryData"}, {"lineNumber": 300, "col_offset": 17, "nodeName": "gamma", "type": "float"}, {"lineNumber": 300, "col_offset": 38, "nodeName": "gamma", "type": "float"}, {"lineNumber": 300, "col_offset": 59, "nodeName": "gamma", "type": "float"}]