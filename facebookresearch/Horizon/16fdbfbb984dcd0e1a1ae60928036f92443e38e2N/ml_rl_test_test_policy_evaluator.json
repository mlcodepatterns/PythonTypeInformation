[{"lineNumber": 23, "col_offset": 26, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "unittest", "type": "module"}, {"lineNumber": 154, "col_offset": 9, "nodeName": "Slate", "type": "Type[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "all_model_features", "type": "Dict[str, Dict[str, List[Any]]]"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "example", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 164, "col_offset": 23, "nodeName": "model_features_per_example", "type": "List[Dict[str, Dict[str, Any]]]"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "all_model_features_numpy", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 193, "col_offset": 8, "nodeName": "inp", "type": "str"}, {"lineNumber": 194, "col_offset": 8, "nodeName": "output", "type": "str"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "meta", "type": "Any"}, {"lineNumber": 25, "col_offset": 46, "nodeName": "temp_directory_name", "type": "nothing"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "policy_file", "type": "str"}, {"lineNumber": 27, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 28, "col_offset": 12, "nodeName": "propensity_net_path", "type": "str"}, {"lineNumber": 28, "col_offset": 38, "nodeName": "policy_file", "type": "str"}, {"lineNumber": 29, "col_offset": 12, "nodeName": "db_type", "type": "str"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "global_value_inputs", "type": "Dict[nothing, nothing]"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "value_input_models", "type": "List[nothing]"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "pe", "type": "ml.rl.evaluation.policy_evaluator.PolicyEvaluator"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "rewards", "type": "numpy.ndarray"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "action_selection", "type": "numpy.ndarray"}, {"lineNumber": 78, "col_offset": 12, "nodeName": "baseline_probabilities", "type": "numpy.ndarray"}, {"lineNumber": 86, "col_offset": 46, "nodeName": "temp_directory_name", "type": "nothing"}, {"lineNumber": 87, "col_offset": 12, "nodeName": "policy_file", "type": "str"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "model1_file", "type": "str"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "propensity_net_path", "type": "str"}, {"lineNumber": 91, "col_offset": 38, "nodeName": "policy_file", "type": "str"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "db_type", "type": "str"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "global_value_inputs", "type": "Dict[nothing, nothing]"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "value_input_models", "type": "List[nothing]"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "pe", "type": "ml.rl.evaluation.policy_evaluator.PolicyEvaluator"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 139, "col_offset": 12, "nodeName": "rewards", "type": "numpy.ndarray"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "action_selection", "type": "numpy.ndarray"}, {"lineNumber": 143, "col_offset": 12, "nodeName": "baseline_probabilities", "type": "numpy.ndarray"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "model_name", "type": "str"}, {"lineNumber": 176, "col_offset": 24, "nodeName": "model", "type": "Dict[str, List[Any]]"}, {"lineNumber": 176, "col_offset": 33, "nodeName": "items", "type": "Callable"}, {"lineNumber": 178, "col_offset": 16, "nodeName": "feature_id", "type": "str"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 187, "col_offset": 14, "nodeName": "all_model_features_numpy", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 188, "col_offset": 15, "nodeName": "Slate", "type": "Type[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 188, "col_offset": 21, "nodeName": "policy_features", "type": "Dict[str, Any]"}, {"lineNumber": 188, "col_offset": 38, "nodeName": "all_model_features_numpy", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 191, "col_offset": 14, "nodeName": "Net", "type": "Any"}, {"lineNumber": 191, "col_offset": 23, "nodeName": "model_name", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "set_net", "type": "Callable[[Any], None]"}, {"lineNumber": 192, "col_offset": 19, "nodeName": "net", "type": "Any"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 195, "col_offset": 27, "nodeName": "inp", "type": "str"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 196, "col_offset": 27, "nodeName": "output", "type": "str"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "Copy", "type": "Any"}, {"lineNumber": 198, "col_offset": 15, "nodeName": "PredictorExportMeta", "type": "Any"}, {"lineNumber": 198, "col_offset": 35, "nodeName": "net", "type": "Any"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "save_to_db", "type": "Any"}, {"lineNumber": 199, "col_offset": 29, "nodeName": "path", "type": "Any"}, {"lineNumber": 199, "col_offset": 35, "nodeName": "meta", "type": "Any"}, {"lineNumber": 25, "col_offset": 13, "nodeName": "TemporaryDirectory", "type": "Type[tempfile.TemporaryDirectory[Any]]"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "join", "type": "Callable"}, {"lineNumber": 26, "col_offset": 39, "nodeName": "temp_directory_name", "type": "nothing"}, {"lineNumber": 27, "col_offset": 18, "nodeName": "PolicyEvaluatorParameters", "type": "Any"}, {"lineNumber": 28, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 29, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "save_sum_deterministic_policy", "type": "Callable[[Any, Any, Any], None]"}, {"lineNumber": 35, "col_offset": 38, "nodeName": "policy_file", "type": "str"}, {"lineNumber": 35, "col_offset": 51, "nodeName": "db_type", "type": "Any"}, {"lineNumber": 37, "col_offset": 17, "nodeName": "PolicyEvaluator", "type": "Type[ml.rl.evaluation.policy_evaluator.PolicyEvaluator]"}, {"lineNumber": 37, "col_offset": 33, "nodeName": "pep", "type": "Any"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 74, "col_offset": 22, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 77, "col_offset": 31, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 78, "col_offset": 37, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 79, "col_offset": 20, "nodeName": "evaluate_slates", "type": "Callable[[List[ml.rl.evaluation.policy_evaluator.Slate], numpy.ndarray, numpy.ndarray, numpy.ndarray], float]"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 80, "col_offset": 24, "nodeName": "action_selection", "type": "numpy.ndarray"}, {"lineNumber": 80, "col_offset": 42, "nodeName": "rewards", "type": "numpy.ndarray"}, {"lineNumber": 80, "col_offset": 51, "nodeName": "baseline_probabilities", "type": "numpy.ndarray"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 82, "col_offset": 18, "nodeName": "value", "type": "float"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 83, "col_offset": 35, "nodeName": "value", "type": "float"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "TemporaryDirectory", "type": "Type[tempfile.TemporaryDirectory[Any]]"}, {"lineNumber": 87, "col_offset": 26, "nodeName": "join", "type": "Callable"}, {"lineNumber": 87, "col_offset": 39, "nodeName": "temp_directory_name", "type": "nothing"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "join", "type": "Callable"}, {"lineNumber": 88, "col_offset": 39, "nodeName": "temp_directory_name", "type": "nothing"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "_dummy_model_copy", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 89, "col_offset": 45, "nodeName": "model1_file", "type": "str"}, {"lineNumber": 90, "col_offset": 18, "nodeName": "PolicyEvaluatorParameters", "type": "Any"}, {"lineNumber": 91, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 92, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 93, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "append", "type": "Any"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "save_sum_deterministic_policy", "type": "Callable[[Any, Any, Any], None]"}, {"lineNumber": 100, "col_offset": 38, "nodeName": "policy_file", "type": "str"}, {"lineNumber": 100, "col_offset": 51, "nodeName": "db_type", "type": "Any"}, {"lineNumber": 102, "col_offset": 17, "nodeName": "PolicyEvaluator", "type": "Type[ml.rl.evaluation.policy_evaluator.PolicyEvaluator]"}, {"lineNumber": 102, "col_offset": 33, "nodeName": "pep", "type": "Any"}, {"lineNumber": 106, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 139, "col_offset": 22, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 142, "col_offset": 31, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 143, "col_offset": 37, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 144, "col_offset": 20, "nodeName": "evaluate_slates", "type": "Callable[[List[ml.rl.evaluation.policy_evaluator.Slate], numpy.ndarray, numpy.ndarray, numpy.ndarray], float]"}, {"lineNumber": 145, "col_offset": 16, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 145, "col_offset": 24, "nodeName": "action_selection", "type": "numpy.ndarray"}, {"lineNumber": 145, "col_offset": 42, "nodeName": "rewards", "type": "numpy.ndarray"}, {"lineNumber": 145, "col_offset": 51, "nodeName": "baseline_probabilities", "type": "numpy.ndarray"}, {"lineNumber": 147, "col_offset": 12, "nodeName": "print", "type": "Callable[..., None]"}, {"lineNumber": 147, "col_offset": 18, "nodeName": "value", "type": "float"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 148, "col_offset": 35, "nodeName": "value", "type": "float"}, {"lineNumber": 152, "col_offset": 25, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 153, "col_offset": 36, "nodeName": "List", "type": "Any"}, {"lineNumber": 165, "col_offset": 16, "nodeName": "model_name", "type": "str"}, {"lineNumber": 165, "col_offset": 28, "nodeName": "new_model_features", "type": "Dict[str, Any]"}, {"lineNumber": 165, "col_offset": 50, "nodeName": "items", "type": "Callable"}, {"lineNumber": 168, "col_offset": 16, "nodeName": "model_features", "type": "Dict[str, List[Any]]"}, {"lineNumber": 176, "col_offset": 33, "nodeName": "all_model_features", "type": "Dict[str, Dict[str, List[Any]]]"}, {"lineNumber": 177, "col_offset": 12, "nodeName": "all_model_features_numpy", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 178, "col_offset": 30, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 191, "col_offset": 14, "nodeName": "core", "type": "Any"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "C2", "type": "Type[ml.rl.caffe_utils.C2]"}, {"lineNumber": 195, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 195, "col_offset": 32, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 196, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 196, "col_offset": 35, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 197, "col_offset": 18, "nodeName": "inp", "type": "str"}, {"lineNumber": 197, "col_offset": 25, "nodeName": "output", "type": "str"}, {"lineNumber": 198, "col_offset": 45, "nodeName": "inp", "type": "str"}, {"lineNumber": 198, "col_offset": 52, "nodeName": "output", "type": "str"}, {"lineNumber": 25, "col_offset": 13, "nodeName": "tempfile", "type": "module"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "path", "type": "module"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "value_input_models", "type": "Any"}, {"lineNumber": 32, "col_offset": 42, "nodeName": "ValueInputModelParameters", "type": "Any"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "value_input_models", "type": "Any"}, {"lineNumber": 33, "col_offset": 42, "nodeName": "ValueInputModelParameters", "type": "Any"}, {"lineNumber": 35, "col_offset": 51, "nodeName": "pep", "type": "Any"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 42, "col_offset": 16, "nodeName": "flatten_slate", "type": "Callable[[Dict[str, Any], List[Dict[str, Dict[str, Any]]]], ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 59, "col_offset": 16, "nodeName": "flatten_slate", "type": "Callable[[Dict[str, Any], List[Dict[str, Dict[str, Any]]]], ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 74, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 77, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 78, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 79, "col_offset": 20, "nodeName": "pe", "type": "ml.rl.evaluation.policy_evaluator.PolicyEvaluator"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "tempfile", "type": "module"}, {"lineNumber": 87, "col_offset": 26, "nodeName": "path", "type": "module"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "path", "type": "module"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "value_input_models", "type": "Any"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "ValueInputModelParameters", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "value_input_models", "type": "Any"}, {"lineNumber": 98, "col_offset": 42, "nodeName": "ValueInputModelParameters", "type": "Any"}, {"lineNumber": 100, "col_offset": 51, "nodeName": "pep", "type": "Any"}, {"lineNumber": 106, "col_offset": 12, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 107, "col_offset": 16, "nodeName": "flatten_slate", "type": "Callable[[Dict[str, Any], List[Dict[str, Dict[str, Any]]]], ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 123, "col_offset": 12, "nodeName": "slates", "type": "List[ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 124, "col_offset": 16, "nodeName": "flatten_slate", "type": "Callable[[Dict[str, Any], List[Dict[str, Dict[str, Any]]]], ml.rl.evaluation.policy_evaluator.Slate]"}, {"lineNumber": 139, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 142, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 143, "col_offset": 37, "nodeName": "np", "type": "module"}, {"lineNumber": 144, "col_offset": 20, "nodeName": "pe", "type": "ml.rl.evaluation.policy_evaluator.PolicyEvaluator"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 165, "col_offset": 50, "nodeName": "example", "type": "Dict[str, Dict[str, Any]]"}, {"lineNumber": 166, "col_offset": 19, "nodeName": "model_name", "type": "str"}, {"lineNumber": 166, "col_offset": 37, "nodeName": "all_model_features", "type": "Dict[str, Dict[str, List[Any]]]"}, {"lineNumber": 168, "col_offset": 33, "nodeName": "all_model_features", "type": "Dict[str, Dict[str, List[Any]]]"}, {"lineNumber": 169, "col_offset": 20, "nodeName": "feature_id", "type": "str"}, {"lineNumber": 169, "col_offset": 32, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 169, "col_offset": 49, "nodeName": "items", "type": "Callable"}, {"lineNumber": 177, "col_offset": 37, "nodeName": "model_name", "type": "str"}, {"lineNumber": 178, "col_offset": 30, "nodeName": "model", "type": "Dict[str, List[Any]]"}, {"lineNumber": 195, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 196, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "os", "type": "module"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 42, "col_offset": 16, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 59, "col_offset": 16, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 87, "col_offset": 26, "nodeName": "os", "type": "module"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "os", "type": "module"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 96, "col_offset": 62, "nodeName": "model1_file", "type": "str"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "pep", "type": "Any"}, {"lineNumber": 107, "col_offset": 16, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 124, "col_offset": 16, "nodeName": "self", "type": "TestPolicyEvaluator"}, {"lineNumber": 152, "col_offset": 30, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 152, "col_offset": 35, "nodeName": "Any", "type": "Any"}, {"lineNumber": 153, "col_offset": 41, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 167, "col_offset": 20, "nodeName": "all_model_features", "type": "Dict[str, Dict[str, List[Any]]]"}, {"lineNumber": 168, "col_offset": 52, "nodeName": "model_name", "type": "str"}, {"lineNumber": 169, "col_offset": 49, "nodeName": "new_model_features", "type": "Dict[str, Any]"}, {"lineNumber": 170, "col_offset": 23, "nodeName": "feature_id", "type": "str"}, {"lineNumber": 170, "col_offset": 41, "nodeName": "model_features", "type": "Dict[str, List[Any]]"}, {"lineNumber": 167, "col_offset": 39, "nodeName": "model_name", "type": "str"}, {"lineNumber": 171, "col_offset": 24, "nodeName": "model_features", "type": "Dict[str, List[Any]]"}, {"lineNumber": 171, "col_offset": 54, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 173, "col_offset": 24, "nodeName": "append", "type": "Callable"}, {"lineNumber": 173, "col_offset": 58, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 181, "col_offset": 20, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 153, "col_offset": 46, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 171, "col_offset": 39, "nodeName": "feature_id", "type": "str"}, {"lineNumber": 181, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 182, "col_offset": 20, "nodeName": "model", "type": "Dict[str, List[Any]]"}, {"lineNumber": 182, "col_offset": 45, "nodeName": "float32", "type": "Any"}, {"lineNumber": 153, "col_offset": 51, "nodeName": "Dict", "type": "Any"}, {"lineNumber": 173, "col_offset": 24, "nodeName": "model_features", "type": "Dict[str, List[Any]]"}, {"lineNumber": 182, "col_offset": 26, "nodeName": "feature_id", "type": "str"}, {"lineNumber": 182, "col_offset": 45, "nodeName": "np", "type": "module"}, {"lineNumber": 173, "col_offset": 39, "nodeName": "feature_id", "type": "str"}, {"lineNumber": 153, "col_offset": 56, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 153, "col_offset": 61, "nodeName": "Any", "type": "Any"}]