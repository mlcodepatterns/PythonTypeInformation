[{"lineNumber": 21, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 21, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "n_quantiles", "type": "int"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "right", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "interpolated", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "feature_name_1", "type": "str"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "feature_name_2", "type": "str"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "feature_name_3", "type": "str"}, {"lineNumber": 156, "col_offset": 8, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 157, "col_offset": 8, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 167, "col_offset": 12, "nodeName": "v", "type": "Any"}, {"lineNumber": 205, "col_offset": 8, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 206, "col_offset": 8, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 207, "col_offset": 8, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 238, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 245, "col_offset": 8, "nodeName": "s", "type": "Dict[Any, Any]"}, {"lineNumber": 246, "col_offset": 8, "nodeName": "read_parameters", "type": "Dict[Any, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 250, "col_offset": 8, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 284, "col_offset": 8, "nodeName": "feature", "type": "Any"}, {"lineNumber": 284, "col_offset": 19, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 285, "col_offset": 15, "nodeName": "feature", "type": "Any"}, {"lineNumber": 288, "col_offset": 8, "nodeName": "result", "type": "Dict[Any, Any]"}, {"lineNumber": 289, "col_offset": 12, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 289, "col_offset": 28, "nodeName": "features", "type": "Any"}, {"lineNumber": 293, "col_offset": 15, "nodeName": "result", "type": "Dict[Any, Any]"}, {"lineNumber": 296, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 297, "col_offset": 8, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 306, "col_offset": 8, "nodeName": "net", "type": "Any"}, {"lineNumber": 307, "col_offset": 8, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor_net.PreprocessorNet"}, {"lineNumber": 308, "col_offset": 12, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 308, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 321, "col_offset": 12, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 321, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 358, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 359, "col_offset": 8, "nodeName": "probability_values", "type": "Any"}, {"lineNumber": 23, "col_offset": 22, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 23, "col_offset": 26, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "searchsorted", "type": "Any"}, {"lineNumber": 24, "col_offset": 32, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 24, "col_offset": 43, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 25, "col_offset": 11, "nodeName": "right", "type": "Any"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "interpolated", "type": "float"}, {"lineNumber": 40, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "name", "type": "str"}, {"lineNumber": 43, "col_offset": 18, "nodeName": "values", "type": "Any"}, {"lineNumber": 43, "col_offset": 28, "nodeName": "items", "type": "Callable"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "k", "type": "str"}, {"lineNumber": 47, "col_offset": 15, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 47, "col_offset": 20, "nodeName": "items", "type": "Callable"}, {"lineNumber": 59, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 60, "col_offset": 19, "nodeName": "Net", "type": "Any"}, {"lineNumber": 62, "col_offset": 19, "nodeName": "prepare_normalization", "type": "Callable[[Any, Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`], List[str], str, Optional[bool]], Dict[int, str]]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 63, "col_offset": 22, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 63, "col_offset": 48, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 63, "col_offset": 58, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 67, "col_offset": 30, "nodeName": "normalize_feature_map", "type": "Callable[[Dict[str, numpy.ndarray], Any, List[str], Dict[int, str], str], Dict[str, Any]]"}, {"lineNumber": 68, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 68, "col_offset": 31, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 68, "col_offset": 41, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 68, "col_offset": 51, "nodeName": "blob_map", "type": "Dict[int, str]"}, {"lineNumber": 68, "col_offset": 61, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 80, "col_offset": 12, "nodeName": "k", "type": "str"}, {"lineNumber": 80, "col_offset": 15, "nodeName": "v", "type": "Any"}, {"lineNumber": 80, "col_offset": 20, "nodeName": "iteritems", "type": "Callable"}, {"lineNumber": 80, "col_offset": 34, "nodeName": "normalized_features", "type": "Dict[str, Any]"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 82, "col_offset": 27, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 133, "col_offset": 12, "nodeName": "feature_name_1", "type": "str"}, {"lineNumber": 137, "col_offset": 12, "nodeName": "feature_name_2", "type": "str"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "feature_name_3", "type": "str"}, {"lineNumber": 148, "col_offset": 12, "nodeName": "feature_name_1", "type": "str"}, {"lineNumber": 150, "col_offset": 12, "nodeName": "feature_name_2", "type": "str"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "feature_name_3", "type": "str"}, {"lineNumber": 156, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 157, "col_offset": 19, "nodeName": "Net", "type": "Any"}, {"lineNumber": 159, "col_offset": 19, "nodeName": "prepare_normalization", "type": "Callable[[Any, Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`], List[str], str, Optional[bool]], Dict[int, str]]"}, {"lineNumber": 160, "col_offset": 12, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 160, "col_offset": 22, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 160, "col_offset": 48, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 160, "col_offset": 58, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 163, "col_offset": 30, "nodeName": "normalize_feature_map", "type": "Callable[[Dict[str, numpy.ndarray], Any, List[str], Dict[int, str], str], Dict[str, Any]]"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[str, numpy.ndarray]"}, {"lineNumber": 164, "col_offset": 31, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 164, "col_offset": 41, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 164, "col_offset": 51, "nodeName": "blob_map", "type": "Dict[int, str]"}, {"lineNumber": 164, "col_offset": 61, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 167, "col_offset": 17, "nodeName": "values", "type": "Callable"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 205, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 206, "col_offset": 19, "nodeName": "Net", "type": "Any"}, {"lineNumber": 208, "col_offset": 19, "nodeName": "prepare_normalization", "type": "Callable[[Any, Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`], List[str], str, Optional[bool]], Dict[int, str]]"}, {"lineNumber": 209, "col_offset": 12, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 209, "col_offset": 22, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 209, "col_offset": 48, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 209, "col_offset": 58, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 213, "col_offset": 17, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 220, "col_offset": 29, "nodeName": "normalize_dense_matrix", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 221, "col_offset": 12, "nodeName": "inputs", "type": "numpy.ndarray"}, {"lineNumber": 221, "col_offset": 20, "nodeName": "features", "type": "List[str]"}, {"lineNumber": 221, "col_offset": 30, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 221, "col_offset": 56, "nodeName": "blob_map", "type": "Dict[int, str]"}, {"lineNumber": 221, "col_offset": 66, "nodeName": "norm_net", "type": "Any"}, {"lineNumber": 222, "col_offset": 12, "nodeName": "blobname_template", "type": "str"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "assert_array_equal", "type": "Any"}, {"lineNumber": 234, "col_offset": 12, "nodeName": "normalized_outputs", "type": "numpy.ndarray"}, {"lineNumber": 238, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 240, "col_offset": 12, "nodeName": "name", "type": "str"}, {"lineNumber": 240, "col_offset": 18, "nodeName": "values", "type": "Any"}, {"lineNumber": 240, "col_offset": 28, "nodeName": "items", "type": "Callable"}, {"lineNumber": 245, "col_offset": 12, "nodeName": "serialize", "type": "Callable[[Any], Dict[Any, Any]]"}, {"lineNumber": 245, "col_offset": 36, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 246, "col_offset": 26, "nodeName": "deserialize", "type": "Callable[[Any], Dict[Any, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]]"}, {"lineNumber": 246, "col_offset": 52, "nodeName": "s", "type": "Dict[Any, Any]"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 247, "col_offset": 25, "nodeName": "read_parameters", "type": "Dict[Any, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 247, "col_offset": 42, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 251, "col_offset": 11, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 251, "col_offset": 38, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 254, "col_offset": 11, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 262, "col_offset": 11, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 262, "col_offset": 38, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 264, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 296, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 298, "col_offset": 12, "nodeName": "name", "type": "str"}, {"lineNumber": 298, "col_offset": 18, "nodeName": "values", "type": "Any"}, {"lineNumber": 298, "col_offset": 28, "nodeName": "items", "type": "Callable"}, {"lineNumber": 302, "col_offset": 24, "nodeName": "preprocess", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 303, "col_offset": 12, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 303, "col_offset": 31, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 306, "col_offset": 14, "nodeName": "Net", "type": "Any"}, {"lineNumber": 307, "col_offset": 23, "nodeName": "PreprocessorNet", "type": "Type[ml.rl.preprocessing.preprocessor_net.PreprocessorNet]"}, {"lineNumber": 307, "col_offset": 39, "nodeName": "net", "type": "Any"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "CreateNet", "type": "Any"}, {"lineNumber": 314, "col_offset": 28, "nodeName": "net", "type": "Any"}, {"lineNumber": 316, "col_offset": 12, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 316, "col_offset": 26, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 316, "col_offset": 43, "nodeName": "iteritems", "type": "Callable"}, {"lineNumber": 316, "col_offset": 57, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 317, "col_offset": 12, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "RunNetOnce", "type": "Any"}, {"lineNumber": 319, "col_offset": 29, "nodeName": "net", "type": "Any"}, {"lineNumber": 328, "col_offset": 12, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 358, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[str, Any]]"}, {"lineNumber": 359, "col_offset": 29, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 362, "col_offset": 20, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 363, "col_offset": 12, "nodeName": "probability_values", "type": "Any"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 365, "col_offset": 25, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 27, "col_offset": 13, "nodeName": "right", "type": "Any"}, {"lineNumber": 27, "col_offset": 22, "nodeName": "n_quantiles", "type": "int"}, {"lineNumber": 28, "col_offset": 12, "nodeName": "interpolated", "type": "float"}, {"lineNumber": 40, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 43, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 44, "col_offset": 45, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 45, "col_offset": 16, "nodeName": "values", "type": "Any"}, {"lineNumber": 47, "col_offset": 20, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "k", "type": "str"}, {"lineNumber": 59, "col_offset": 24, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 60, "col_offset": 19, "nodeName": "core", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 80, "col_offset": 20, "nodeName": "six", "type": "module"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 83, "col_offset": 15, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 83, "col_offset": 31, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 84, "col_offset": 16, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 134, "col_offset": 12, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 135, "col_offset": 16, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 138, "col_offset": 12, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 139, "col_offset": 16, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 142, "col_offset": 12, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 143, "col_offset": 16, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 156, "col_offset": 24, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 157, "col_offset": 19, "nodeName": "core", "type": "Any"}, {"lineNumber": 167, "col_offset": 17, "nodeName": "normalized_features", "type": "Dict[str, Any]"}, {"lineNumber": 168, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "normalized_features", "type": "Dict[str, Any]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 176, "col_offset": 12, "nodeName": "normalized_features", "type": "Dict[str, Any]"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "normalized_features", "type": "Dict[str, Any]"}, {"lineNumber": 193, "col_offset": 12, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 197, "col_offset": 12, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 198, "col_offset": 16, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 201, "col_offset": 12, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 202, "col_offset": 16, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 205, "col_offset": 24, "nodeName": "keys", "type": "Callable"}, {"lineNumber": 206, "col_offset": 19, "nodeName": "core", "type": "Any"}, {"lineNumber": 213, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 218, "col_offset": 18, "nodeName": "float32", "type": "Any"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 238, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 240, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 241, "col_offset": 45, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 242, "col_offset": 16, "nodeName": "values", "type": "Any"}, {"lineNumber": 245, "col_offset": 12, "nodeName": "normalization", "type": "module"}, {"lineNumber": 246, "col_offset": 26, "nodeName": "normalization", "type": "module"}, {"lineNumber": 247, "col_offset": 8, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 250, "col_offset": 27, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 250, "col_offset": 38, "nodeName": "feature", "type": "Any"}, {"lineNumber": 250, "col_offset": 47, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 251, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 251, "col_offset": 38, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 253, "col_offset": 20, "nodeName": "astype", "type": "Any"}, {"lineNumber": 253, "col_offset": 58, "nodeName": "float32", "type": "Any"}, {"lineNumber": 254, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 255, "col_offset": 22, "nodeName": "boxcox", "type": "Any"}, {"lineNumber": 259, "col_offset": 19, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 262, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 262, "col_offset": 38, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 263, "col_offset": 22, "nodeName": "clip", "type": "Any"}, {"lineNumber": 263, "col_offset": 30, "nodeName": "feature", "type": "Any"}, {"lineNumber": 264, "col_offset": 22, "nodeName": "logit", "type": "Any"}, {"lineNumber": 264, "col_offset": 36, "nodeName": "feature", "type": "Any"}, {"lineNumber": 265, "col_offset": 13, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 265, "col_offset": 40, "nodeName": "QUANTILE", "type": "str"}, {"lineNumber": 266, "col_offset": 12, "nodeName": "transformed_feature", "type": "Any"}, {"lineNumber": 267, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 271, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 271, "col_offset": 22, "nodeName": "transformed_feature", "type": "Any"}, {"lineNumber": 290, "col_offset": 35, "nodeName": "preprocess_feature", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 296, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 298, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 299, "col_offset": 45, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 300, "col_offset": 16, "nodeName": "values", "type": "Any"}, {"lineNumber": 302, "col_offset": 24, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 306, "col_offset": 14, "nodeName": "core", "type": "Any"}, {"lineNumber": 309, "col_offset": 12, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 309, "col_offset": 31, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 310, "col_offset": 12, "nodeName": "preprocess_blob", "type": "Callable[[Any, Any], Tuple[Any, List[Any]]]"}, {"lineNumber": 311, "col_offset": 16, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 316, "col_offset": 43, "nodeName": "six", "type": "module"}, {"lineNumber": 317, "col_offset": 28, "nodeName": "expand_dims", "type": "Any"}, {"lineNumber": 317, "col_offset": 43, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 318, "col_offset": 12, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 318, "col_offset": 31, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 318, "col_offset": 45, "nodeName": "feature_value", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 322, "col_offset": 34, "nodeName": "FetchBlob", "type": "Any"}, {"lineNumber": 325, "col_offset": 15, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 325, "col_offset": 31, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 326, "col_offset": 16, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 329, "col_offset": 15, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 331, "col_offset": 16, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 332, "col_offset": 27, "nodeName": "where", "type": "Any"}, {"lineNumber": 342, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 358, "col_offset": 28, "nodeName": "preprocessing_util", "type": "module"}, {"lineNumber": 359, "col_offset": 47, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 362, "col_offset": 20, "nodeName": "normalization", "type": "module"}, {"lineNumber": 363, "col_offset": 45, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 365, "col_offset": 8, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 365, "col_offset": 25, "nodeName": "parameter", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 29, "col_offset": 33, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 30, "col_offset": 12, "nodeName": "interpolated", "type": "Any"}, {"lineNumber": 32, "col_offset": 12, "nodeName": "left", "type": "Any"}, {"lineNumber": 44, "col_offset": 45, "nodeName": "normalization", "type": "module"}, {"lineNumber": 49, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 49, "col_offset": 33, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 50, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 30, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 51, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 51, "col_offset": 30, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "k", "type": "str"}, {"lineNumber": 59, "col_offset": 24, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 81, "col_offset": 12, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 81, "col_offset": 28, "nodeName": "all", "type": "Any"}, {"lineNumber": 82, "col_offset": 27, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 83, "col_offset": 31, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 84, "col_offset": 27, "nodeName": "expit", "type": "Any"}, {"lineNumber": 84, "col_offset": 41, "nodeName": "v", "type": "Any"}, {"lineNumber": 85, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 92, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 92, "col_offset": 33, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 93, "col_offset": 16, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 93, "col_offset": 34, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 97, "col_offset": 16, "nodeName": "possible_value_map", "type": "Dict[Any, int]"}, {"lineNumber": 135, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 139, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 143, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 149, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 149, "col_offset": 43, "nodeName": "float32", "type": "Any"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 151, "col_offset": 49, "nodeName": "float32", "type": "Any"}, {"lineNumber": 153, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 153, "col_offset": 32, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 153, "col_offset": 68, "nodeName": "float32", "type": "Any"}, {"lineNumber": 156, "col_offset": 24, "nodeName": "feature_value_map", "type": "Dict[str, numpy.ndarray]"}, {"lineNumber": 168, "col_offset": 12, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 168, "col_offset": 28, "nodeName": "all", "type": "Any"}, {"lineNumber": 170, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 171, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 172, "col_offset": 32, "nodeName": "feature_name_1", "type": "str"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 175, "col_offset": 51, "nodeName": "float32", "type": "Any"}, {"lineNumber": 176, "col_offset": 32, "nodeName": "feature_name_2", "type": "str"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 187, "col_offset": 32, "nodeName": "feature_name_3", "type": "str"}, {"lineNumber": 194, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 198, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 202, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 205, "col_offset": 24, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 216, "col_offset": 25, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 218, "col_offset": 18, "nodeName": "np", "type": "module"}, {"lineNumber": 225, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 241, "col_offset": 45, "nodeName": "normalization", "type": "module"}, {"lineNumber": 250, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 250, "col_offset": 47, "nodeName": "normalization", "type": "module"}, {"lineNumber": 253, "col_offset": 58, "nodeName": "np", "type": "module"}, {"lineNumber": 255, "col_offset": 22, "nodeName": "stats", "type": "Any"}, {"lineNumber": 256, "col_offset": 16, "nodeName": "maximum", "type": "Any"}, {"lineNumber": 258, "col_offset": 20, "nodeName": "BOX_COX_MARGIN", "type": "float"}, {"lineNumber": 259, "col_offset": 19, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 263, "col_offset": 22, "nodeName": "np", "type": "module"}, {"lineNumber": 264, "col_offset": 22, "nodeName": "special", "type": "Any"}, {"lineNumber": 265, "col_offset": 13, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 265, "col_offset": 40, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 266, "col_offset": 34, "nodeName": "zeros_like", "type": "Any"}, {"lineNumber": 266, "col_offset": 48, "nodeName": "feature", "type": "Any"}, {"lineNumber": 267, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 272, "col_offset": 13, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 272, "col_offset": 40, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 273, "col_offset": 30, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 274, "col_offset": 12, "nodeName": "mapping", "type": "Dict[Any, int]"}, {"lineNumber": 277, "col_offset": 12, "nodeName": "output_feature", "type": "Any"}, {"lineNumber": 280, "col_offset": 19, "nodeName": "output_feature", "type": "Any"}, {"lineNumber": 282, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 283, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 283, "col_offset": 23, "nodeName": "stddev", "type": "Any"}, {"lineNumber": 290, "col_offset": 35, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 291, "col_offset": 16, "nodeName": "features", "type": "Any"}, {"lineNumber": 291, "col_offset": 40, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 299, "col_offset": 45, "nodeName": "normalization", "type": "module"}, {"lineNumber": 309, "col_offset": 12, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 309, "col_offset": 45, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 310, "col_offset": 12, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor_net.PreprocessorNet"}, {"lineNumber": 311, "col_offset": 30, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 317, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 318, "col_offset": 12, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 322, "col_offset": 34, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 323, "col_offset": 16, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 325, "col_offset": 31, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 326, "col_offset": 38, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 326, "col_offset": 49, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 332, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 333, "col_offset": 16, "nodeName": "logical_not", "type": "Any"}, {"lineNumber": 342, "col_offset": 12, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 343, "col_offset": 16, "nodeName": "all", "type": "Any"}, {"lineNumber": 350, "col_offset": 19, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 351, "col_offset": 20, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 359, "col_offset": 47, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 363, "col_offset": 45, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 29, "col_offset": 13, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 30, "col_offset": 27, "nodeName": "right", "type": "Any"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "right", "type": "Any"}, {"lineNumber": 49, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 49, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 50, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 50, "col_offset": 30, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 51, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 51, "col_offset": 30, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 53, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 53, "col_offset": 33, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 54, "col_offset": 16, "nodeName": "assertIsNot", "type": "Callable[..., None]"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "assertIsNot", "type": "Callable[..., None]"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 33, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 57, "col_offset": 49, "nodeName": "k", "type": "str"}, {"lineNumber": 76, "col_offset": 24, "nodeName": "parameter", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 81, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 81, "col_offset": 35, "nodeName": "isfinite", "type": "Any"}, {"lineNumber": 81, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 82, "col_offset": 52, "nodeName": "k", "type": "str"}, {"lineNumber": 84, "col_offset": 27, "nodeName": "special", "type": "Any"}, {"lineNumber": 85, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "all", "type": "Any"}, {"lineNumber": 92, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 94, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 98, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 98, "col_offset": 23, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 98, "col_offset": 41, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 98, "col_offset": 51, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 99, "col_offset": 57, "nodeName": "i", "type": "int"}, {"lineNumber": 101, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 101, "col_offset": 23, "nodeName": "row", "type": "Any"}, {"lineNumber": 101, "col_offset": 30, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 101, "col_offset": 40, "nodeName": "v", "type": "Any"}, {"lineNumber": 102, "col_offset": 20, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 107, "col_offset": 33, "nodeName": "QUANTILE", "type": "str"}, {"lineNumber": 149, "col_offset": 43, "nodeName": "np", "type": "module"}, {"lineNumber": 151, "col_offset": 49, "nodeName": "np", "type": "module"}, {"lineNumber": 153, "col_offset": 32, "nodeName": "normalization", "type": "module"}, {"lineNumber": 153, "col_offset": 68, "nodeName": "np", "type": "module"}, {"lineNumber": 168, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 168, "col_offset": 35, "nodeName": "isfinite", "type": "Any"}, {"lineNumber": 168, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 175, "col_offset": 51, "nodeName": "np", "type": "module"}, {"lineNumber": 216, "col_offset": 25, "nodeName": "normalization", "type": "module"}, {"lineNumber": 253, "col_offset": 37, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 256, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 257, "col_offset": 20, "nodeName": "feature", "type": "Any"}, {"lineNumber": 257, "col_offset": 30, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 258, "col_offset": 20, "nodeName": "normalization", "type": "module"}, {"lineNumber": 266, "col_offset": 34, "nodeName": "np", "type": "module"}, {"lineNumber": 267, "col_offset": 21, "nodeName": "moves", "type": "module"}, {"lineNumber": 267, "col_offset": 37, "nodeName": "shape", "type": "Any"}, {"lineNumber": 268, "col_offset": 41, "nodeName": "_value_to_quantile", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 269, "col_offset": 32, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 272, "col_offset": 13, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 272, "col_offset": 40, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 273, "col_offset": 30, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 275, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 275, "col_offset": 19, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 275, "col_offset": 37, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 275, "col_offset": 47, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 276, "col_offset": 42, "nodeName": "i", "type": "int"}, {"lineNumber": 277, "col_offset": 29, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 278, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 278, "col_offset": 19, "nodeName": "val", "type": "Any"}, {"lineNumber": 278, "col_offset": 26, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 278, "col_offset": 36, "nodeName": "feature", "type": "Any"}, {"lineNumber": 282, "col_offset": 22, "nodeName": "feature", "type": "Any"}, {"lineNumber": 282, "col_offset": 32, "nodeName": "mean", "type": "Any"}, {"lineNumber": 283, "col_offset": 23, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 291, "col_offset": 25, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 291, "col_offset": 51, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 309, "col_offset": 45, "nodeName": "np", "type": "module"}, {"lineNumber": 309, "col_offset": 65, "nodeName": "int32", "type": "Any"}, {"lineNumber": 311, "col_offset": 55, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 326, "col_offset": 38, "nodeName": "np", "type": "module"}, {"lineNumber": 333, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 334, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 335, "col_offset": 24, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 343, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 344, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 345, "col_offset": 24, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 351, "col_offset": 34, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 352, "col_offset": 20, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 29, "col_offset": 23, "nodeName": "right", "type": "Any"}, {"lineNumber": 30, "col_offset": 35, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 30, "col_offset": 41, "nodeName": "n_quantiles", "type": "int"}, {"lineNumber": 35, "col_offset": 27, "nodeName": "left", "type": "Any"}, {"lineNumber": 36, "col_offset": 16, "nodeName": "step", "type": "Any"}, {"lineNumber": 53, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 53, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 54, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 54, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 55, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 57, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`"}, {"lineNumber": 76, "col_offset": 37, "nodeName": "values", "type": "Callable"}, {"lineNumber": 81, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 86, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "logical_and", "type": "Any"}, {"lineNumber": 93, "col_offset": 34, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 94, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "shape", "type": "Any"}, {"lineNumber": 94, "col_offset": 45, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 95, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 95, "col_offset": 33, "nodeName": "shape", "type": "Any"}, {"lineNumber": 95, "col_offset": 45, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 95, "col_offset": 49, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 99, "col_offset": 20, "nodeName": "possible_value_map", "type": "Dict[Any, int]"}, {"lineNumber": 103, "col_offset": 20, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 107, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 108, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 108, "col_offset": 23, "nodeName": "feature", "type": "Any"}, {"lineNumber": 108, "col_offset": 34, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 109, "col_offset": 20, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 114, "col_offset": 33, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 168, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 253, "col_offset": 21, "nodeName": "feature", "type": "Any"}, {"lineNumber": 257, "col_offset": 30, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 267, "col_offset": 21, "nodeName": "six", "type": "module"}, {"lineNumber": 267, "col_offset": 37, "nodeName": "feature", "type": "Any"}, {"lineNumber": 268, "col_offset": 41, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 269, "col_offset": 20, "nodeName": "feature", "type": "Any"}, {"lineNumber": 269, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 276, "col_offset": 16, "nodeName": "mapping", "type": "Dict[Any, int]"}, {"lineNumber": 277, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 282, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 309, "col_offset": 65, "nodeName": "np", "type": "module"}, {"lineNumber": 334, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 336, "col_offset": 24, "nodeName": "test_features", "type": "Dict[str, Any]"}, {"lineNumber": 337, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 338, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 344, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 346, "col_offset": 24, "nodeName": "test_features", "type": "Dict[str, Any]"}, {"lineNumber": 347, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 348, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 34, "col_offset": 19, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 34, "col_offset": 38, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 35, "col_offset": 34, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 35, "col_offset": 40, "nodeName": "n_quantiles", "type": "int"}, {"lineNumber": 36, "col_offset": 24, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 76, "col_offset": 37, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 87, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "greater", "type": "Any"}, {"lineNumber": 88, "col_offset": 39, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 88, "col_offset": 53, "nodeName": "less", "type": "Any"}, {"lineNumber": 88, "col_offset": 61, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 93, "col_offset": 59, "nodeName": "k", "type": "str"}, {"lineNumber": 94, "col_offset": 33, "nodeName": "v", "type": "Any"}, {"lineNumber": 94, "col_offset": 49, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 95, "col_offset": 33, "nodeName": "v", "type": "Any"}, {"lineNumber": 99, "col_offset": 39, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 102, "col_offset": 39, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 102, "col_offset": 60, "nodeName": "i", "type": "int"}, {"lineNumber": 103, "col_offset": 20, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 104, "col_offset": 24, "nodeName": "possible_value_map", "type": "Dict[Any, int]"}, {"lineNumber": 108, "col_offset": 44, "nodeName": "v", "type": "Any"}, {"lineNumber": 110, "col_offset": 31, "nodeName": "_value_to_quantile", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 111, "col_offset": 24, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 111, "col_offset": 42, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 113, "col_offset": 20, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 113, "col_offset": 43, "nodeName": "feature", "type": "Any"}, {"lineNumber": 113, "col_offset": 52, "nodeName": "expected", "type": "Any"}, {"lineNumber": 114, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 116, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 116, "col_offset": 33, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 117, "col_offset": 16, "nodeName": "one_stddev", "type": "Any"}, {"lineNumber": 118, "col_offset": 16, "nodeName": "zero_stddev", "type": "Any"}, {"lineNumber": 119, "col_offset": 16, "nodeName": "zero_mean", "type": "Any"}, {"lineNumber": 269, "col_offset": 28, "nodeName": "i", "type": "int"}, {"lineNumber": 276, "col_offset": 24, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 277, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 277, "col_offset": 43, "nodeName": "feature", "type": "Any"}, {"lineNumber": 277, "col_offset": 53, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 277, "col_offset": 57, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 279, "col_offset": 16, "nodeName": "output_feature", "type": "Any"}, {"lineNumber": 336, "col_offset": 38, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 346, "col_offset": 38, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 351, "col_offset": 34, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 34, "col_offset": 29, "nodeName": "right", "type": "Any"}, {"lineNumber": 34, "col_offset": 48, "nodeName": "left", "type": "Any"}, {"lineNumber": 36, "col_offset": 41, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 88, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 88, "col_offset": 53, "nodeName": "np", "type": "module"}, {"lineNumber": 94, "col_offset": 67, "nodeName": "k", "type": "str"}, {"lineNumber": 102, "col_offset": 57, "nodeName": "k", "type": "str"}, {"lineNumber": 104, "col_offset": 43, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 109, "col_offset": 39, "nodeName": "feature_value_map", "type": "Dict[str, Any]"}, {"lineNumber": 109, "col_offset": 60, "nodeName": "i", "type": "int"}, {"lineNumber": 110, "col_offset": 31, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 113, "col_offset": 20, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 116, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 117, "col_offset": 29, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 118, "col_offset": 30, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 119, "col_offset": 28, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 120, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 124, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 126, "col_offset": 22, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 279, "col_offset": 31, "nodeName": "i", "type": "int"}, {"lineNumber": 279, "col_offset": 34, "nodeName": "mapping", "type": "Dict[Any, int]"}, {"lineNumber": 351, "col_offset": 54, "nodeName": "non_matching", "type": "Any"}, {"lineNumber": 352, "col_offset": 20, "nodeName": "test_features", "type": "Dict[str, Any]"}, {"lineNumber": 352, "col_offset": 48, "nodeName": "non_matching", "type": "Any"}, {"lineNumber": 36, "col_offset": 51, "nodeName": "left", "type": "Any"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "where", "type": "Any"}, {"lineNumber": 109, "col_offset": 57, "nodeName": "k", "type": "str"}, {"lineNumber": 111, "col_offset": 42, "nodeName": "normalization_parameters", "type": "Dict[str, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles`]"}, {"lineNumber": 117, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 117, "col_offset": 40, "nodeName": "std", "type": "Any"}, {"lineNumber": 117, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 118, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 118, "col_offset": 41, "nodeName": "std", "type": "Any"}, {"lineNumber": 118, "col_offset": 48, "nodeName": "v", "type": "Any"}, {"lineNumber": 119, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 119, "col_offset": 39, "nodeName": "mean", "type": "Any"}, {"lineNumber": 119, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 120, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 121, "col_offset": 20, "nodeName": "all", "type": "Any"}, {"lineNumber": 121, "col_offset": 27, "nodeName": "zero_mean", "type": "Any"}, {"lineNumber": 122, "col_offset": 20, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 122, "col_offset": 61, "nodeName": "k", "type": "str"}, {"lineNumber": 124, "col_offset": 16, "nodeName": "self", "type": "TestNormalization"}, {"lineNumber": 124, "col_offset": 32, "nodeName": "all", "type": "Any"}, {"lineNumber": 279, "col_offset": 42, "nodeName": "val", "type": "Any"}, {"lineNumber": 352, "col_offset": 34, "nodeName": "feature_name", "type": "str"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 105, "col_offset": 33, "nodeName": "row", "type": "Any"}, {"lineNumber": 111, "col_offset": 67, "nodeName": "k", "type": "str"}, {"lineNumber": 117, "col_offset": 40, "nodeName": "np", "type": "module"}, {"lineNumber": 118, "col_offset": 41, "nodeName": "np", "type": "module"}, {"lineNumber": 119, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 121, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 122, "col_offset": 64, "nodeName": "mean", "type": "Any"}, {"lineNumber": 122, "col_offset": 72, "nodeName": "v", "type": "Any"}, {"lineNumber": 124, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 124, "col_offset": 39, "nodeName": "logical_or", "type": "Any"}, {"lineNumber": 124, "col_offset": 53, "nodeName": "one_stddev", "type": "Any"}, {"lineNumber": 124, "col_offset": 65, "nodeName": "zero_stddev", "type": "Any"}, {"lineNumber": 122, "col_offset": 64, "nodeName": "np", "type": "module"}, {"lineNumber": 124, "col_offset": 39, "nodeName": "np", "type": "module"}]