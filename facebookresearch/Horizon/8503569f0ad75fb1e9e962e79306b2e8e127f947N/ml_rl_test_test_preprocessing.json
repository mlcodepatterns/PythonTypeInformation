[{"lineNumber": 28, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "n_quantiles", "type": "float"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "right", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "left", "type": "Any"}, {"lineNumber": 44, "col_offset": 15, "nodeName": "interpolated", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "clamp", "type": "bool"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "input_matrix", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "normalized_feature_matrix", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "normalized_features", "type": "Dict[Any, Any]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "on_column", "type": "int"}, {"lineNumber": 76, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 76, "col_offset": 23, "nodeName": "sorted_features", "type": "List[Any]"}, {"lineNumber": 168, "col_offset": 8, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "clamp", "type": "bool"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 172, "col_offset": 8, "nodeName": "feature_ids", "type": "List[int]"}, {"lineNumber": 176, "col_offset": 8, "nodeName": "normalized_feature_matrix", "type": "Any"}, {"lineNumber": 191, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 192, "col_offset": 8, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 197, "col_offset": 8, "nodeName": "s", "type": "Dict[Any, Any]"}, {"lineNumber": 198, "col_offset": 8, "nodeName": "read_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 202, "col_offset": 8, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 237, "col_offset": 8, "nodeName": "feature", "type": "Any"}, {"lineNumber": 237, "col_offset": 19, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 238, "col_offset": 15, "nodeName": "feature", "type": "Any"}, {"lineNumber": 241, "col_offset": 8, "nodeName": "result", "type": "Dict[Any, Any]"}, {"lineNumber": 242, "col_offset": 12, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 242, "col_offset": 28, "nodeName": "features", "type": "Any"}, {"lineNumber": 246, "col_offset": 15, "nodeName": "result", "type": "Dict[Any, Any]"}, {"lineNumber": 249, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 302, "col_offset": 8, "nodeName": "input", "type": "Any"}, {"lineNumber": 314, "col_offset": 8, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 315, "col_offset": 8, "nodeName": "output", "type": "Any"}, {"lineNumber": 317, "col_offset": 8, "nodeName": "expected_output", "type": "Any"}, {"lineNumber": 322, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 324, "col_offset": 8, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 325, "col_offset": 8, "nodeName": "name_preprocessed_blob_map", "type": "Dict[int, Any]"}, {"lineNumber": 343, "col_offset": 8, "nodeName": "test_features", "type": "Dict[int, Any]"}, {"lineNumber": 345, "col_offset": 12, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 345, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 382, "col_offset": 8, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 383, "col_offset": 8, "nodeName": "probability_values", "type": "Any"}, {"lineNumber": 30, "col_offset": 11, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 32, "col_offset": 11, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 34, "col_offset": 22, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "searchsorted", "type": "Any"}, {"lineNumber": 35, "col_offset": 32, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 35, "col_offset": 43, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 36, "col_offset": 15, "nodeName": "right", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "n_quantiles", "type": "float"}, {"lineNumber": 47, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[int, Any]]"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "name", "type": "int"}, {"lineNumber": 50, "col_offset": 18, "nodeName": "values", "type": "Any"}, {"lineNumber": 50, "col_offset": 28, "nodeName": "items", "type": "Callable"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "k", "type": "int"}, {"lineNumber": 54, "col_offset": 15, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 54, "col_offset": 20, "nodeName": "items", "type": "Callable"}, {"lineNumber": 66, "col_offset": 23, "nodeName": "Preprocessor", "type": "Type[ml.rl.preprocessing.preprocessor.Preprocessor]"}, {"lineNumber": 66, "col_offset": 36, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "sorted_features", "type": "List[Any]"}, {"lineNumber": 67, "col_offset": 25, "nodeName": "_", "type": "List[int]"}, {"lineNumber": 67, "col_offset": 29, "nodeName": "sort_features_by_normalization", "type": "Callable[[Any], Tuple[List[Any], List[int]]]"}, {"lineNumber": 67, "col_offset": 60, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 69, "col_offset": 23, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "i", "type": "int"}, {"lineNumber": 70, "col_offset": 15, "nodeName": "feature", "type": "Any"}, {"lineNumber": 70, "col_offset": 26, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 70, "col_offset": 36, "nodeName": "sorted_features", "type": "List[Any]"}, {"lineNumber": 72, "col_offset": 36, "nodeName": "forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 72, "col_offset": 57, "nodeName": "input_matrix", "type": "Any"}, {"lineNumber": 77, "col_offset": 12, "nodeName": "norm", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "on_column", "type": "int"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "column_size", "type": "int"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "k", "type": "Any"}, {"lineNumber": 95, "col_offset": 15, "nodeName": "v", "type": "Any"}, {"lineNumber": 95, "col_offset": 20, "nodeName": "iteritems", "type": "Callable"}, {"lineNumber": 95, "col_offset": 34, "nodeName": "normalized_features", "type": "Dict[Any, Any]"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "v", "type": "Any"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 98, "col_offset": 27, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 168, "col_offset": 23, "nodeName": "Preprocessor", "type": "Type[ml.rl.preprocessing.preprocessor.Preprocessor]"}, {"lineNumber": 168, "col_offset": 36, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 169, "col_offset": 8, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 171, "col_offset": 17, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 173, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 175, "col_offset": 8, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 175, "col_offset": 54, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 176, "col_offset": 36, "nodeName": "forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 176, "col_offset": 57, "nodeName": "inputs", "type": "Any"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "assert_allclose", "type": "Any"}, {"lineNumber": 187, "col_offset": 12, "nodeName": "normalized_feature_matrix", "type": "Any"}, {"lineNumber": 191, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[int, Any]]"}, {"lineNumber": 193, "col_offset": 12, "nodeName": "name", "type": "int"}, {"lineNumber": 193, "col_offset": 18, "nodeName": "values", "type": "Any"}, {"lineNumber": 193, "col_offset": 28, "nodeName": "items", "type": "Callable"}, {"lineNumber": 195, "col_offset": 24, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 197, "col_offset": 12, "nodeName": "serialize", "type": "Callable[[Any], Dict[Any, Any]]"}, {"lineNumber": 197, "col_offset": 36, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 198, "col_offset": 26, "nodeName": "deserialize", "type": "Callable[[Any], Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]]"}, {"lineNumber": 198, "col_offset": 52, "nodeName": "s", "type": "Dict[Any, Any]"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 199, "col_offset": 25, "nodeName": "read_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 199, "col_offset": 42, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 203, "col_offset": 11, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 203, "col_offset": 38, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 206, "col_offset": 11, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 214, "col_offset": 11, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 214, "col_offset": 38, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 215, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 249, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[int, Any]]"}, {"lineNumber": 251, "col_offset": 12, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 251, "col_offset": 26, "nodeName": "feature_values", "type": "Any"}, {"lineNumber": 251, "col_offset": 44, "nodeName": "items", "type": "Callable"}, {"lineNumber": 252, "col_offset": 12, "nodeName": "normalization_parameters", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 255, "col_offset": 16, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "feature_values_matrix", "type": "Any"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "normalized_feature_values", "type": "Any"}, {"lineNumber": 265, "col_offset": 12, "nodeName": "preproc_workspace", "type": "Any"}, {"lineNumber": 265, "col_offset": 32, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 272, "col_offset": 12, "nodeName": "normalized_feature_values_onnx", "type": "Any"}, {"lineNumber": 273, "col_offset": 12, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 303, "col_offset": 22, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 314, "col_offset": 23, "nodeName": "Preprocessor", "type": "Type[ml.rl.preprocessing.preprocessor.Preprocessor]"}, {"lineNumber": 315, "col_offset": 17, "nodeName": "_preprocess_QUANTILE", "type": "Callable[[int, Any, List[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]], Any]"}, {"lineNumber": 317, "col_offset": 26, "nodeName": "tensor", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 322, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[int, Any]]"}, {"lineNumber": 327, "col_offset": 12, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 327, "col_offset": 26, "nodeName": "feature_values", "type": "Any"}, {"lineNumber": 327, "col_offset": 44, "nodeName": "items", "type": "Callable"}, {"lineNumber": 333, "col_offset": 16, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 338, "col_offset": 12, "nodeName": "clamp", "type": "bool"}, {"lineNumber": 339, "col_offset": 12, "nodeName": "feature_values_matrix", "type": "Any"}, {"lineNumber": 340, "col_offset": 12, "nodeName": "normalized_feature_values", "type": "Any"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "preprocess", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 343, "col_offset": 40, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 343, "col_offset": 59, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 346, "col_offset": 12, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 350, "col_offset": 12, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 382, "col_offset": 28, "nodeName": "read_data", "type": "Callable[[], Dict[int, Any]]"}, {"lineNumber": 383, "col_offset": 29, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 386, "col_offset": 20, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 387, "col_offset": 12, "nodeName": "probability_values", "type": "Any"}, {"lineNumber": 389, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 389, "col_offset": 25, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 30, "col_offset": 29, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 32, "col_offset": 29, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 38, "col_offset": 12, "nodeName": "left", "type": "Any"}, {"lineNumber": 50, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 51, "col_offset": 45, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 52, "col_offset": 16, "nodeName": "values", "type": "Any"}, {"lineNumber": 54, "col_offset": 20, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 55, "col_offset": 32, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 69, "col_offset": 23, "nodeName": "np", "type": "module"}, {"lineNumber": 69, "col_offset": 69, "nodeName": "float32", "type": "Any"}, {"lineNumber": 71, "col_offset": 12, "nodeName": "input_matrix", "type": "Any"}, {"lineNumber": 71, "col_offset": 33, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 72, "col_offset": 36, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 77, "col_offset": 19, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 78, "col_offset": 36, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 79, "col_offset": 16, "nodeName": "column_size", "type": "int"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "column_size", "type": "int"}, {"lineNumber": 82, "col_offset": 43, "nodeName": "normalized_feature_matrix", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 88, "col_offset": 12, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 95, "col_offset": 20, "nodeName": "six", "type": "module"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 99, "col_offset": 15, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "PROBABILITY", "type": "str"}, {"lineNumber": 100, "col_offset": 16, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 150, "col_offset": 15, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 151, "col_offset": 16, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 161, "col_offset": 15, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 162, "col_offset": 16, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 164, "col_offset": 15, "nodeName": "NormalizationParameters", "type": "Type[ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 165, "col_offset": 16, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 171, "col_offset": 17, "nodeName": "np", "type": "module"}, {"lineNumber": 171, "col_offset": 40, "nodeName": "float32", "type": "Any"}, {"lineNumber": 175, "col_offset": 54, "nodeName": "normalization", "type": "module"}, {"lineNumber": 176, "col_offset": 36, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "testing", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "array", "type": "Callable[..., numpy.ndarray]"}, {"lineNumber": 193, "col_offset": 28, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 194, "col_offset": 45, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 194, "col_offset": 78, "nodeName": "values", "type": "Any"}, {"lineNumber": 195, "col_offset": 12, "nodeName": "values", "type": "Any"}, {"lineNumber": 197, "col_offset": 12, "nodeName": "normalization", "type": "module"}, {"lineNumber": 198, "col_offset": 26, "nodeName": "normalization", "type": "module"}, {"lineNumber": 199, "col_offset": 8, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 202, "col_offset": 27, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 202, "col_offset": 38, "nodeName": "feature", "type": "Any"}, {"lineNumber": 202, "col_offset": 47, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 203, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 203, "col_offset": 38, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 205, "col_offset": 20, "nodeName": "astype", "type": "Any"}, {"lineNumber": 205, "col_offset": 58, "nodeName": "float32", "type": "Any"}, {"lineNumber": 206, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 207, "col_offset": 22, "nodeName": "boxcox", "type": "Any"}, {"lineNumber": 211, "col_offset": 16, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 214, "col_offset": 11, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 214, "col_offset": 38, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 215, "col_offset": 22, "nodeName": "logit", "type": "Any"}, {"lineNumber": 216, "col_offset": 13, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 216, "col_offset": 40, "nodeName": "QUANTILE", "type": "str"}, {"lineNumber": 217, "col_offset": 12, "nodeName": "transformed_feature", "type": "Any"}, {"lineNumber": 218, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 222, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 222, "col_offset": 22, "nodeName": "transformed_feature", "type": "Any"}, {"lineNumber": 243, "col_offset": 35, "nodeName": "preprocess_feature", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 251, "col_offset": 44, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 252, "col_offset": 39, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 252, "col_offset": 72, "nodeName": "feature_values", "type": "Any"}, {"lineNumber": 256, "col_offset": 36, "nodeName": "expand_dims", "type": "Any"}, {"lineNumber": 256, "col_offset": 51, "nodeName": "feature_values", "type": "Any"}, {"lineNumber": 258, "col_offset": 27, "nodeName": "Preprocessor", "type": "Type[ml.rl.preprocessing.preprocessor.Preprocessor]"}, {"lineNumber": 259, "col_offset": 40, "nodeName": "forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 259, "col_offset": 61, "nodeName": "feature_values_matrix", "type": "Any"}, {"lineNumber": 261, "col_offset": 46, "nodeName": "pytorch_net_to_caffe2_netdef", "type": "Callable[..., Any]"}, {"lineNumber": 262, "col_offset": 16, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 265, "col_offset": 32, "nodeName": "netdef", "type": "Any"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "FeedBlob", "type": "Any"}, {"lineNumber": 267, "col_offset": 39, "nodeName": "input_blob", "type": "Any"}, {"lineNumber": 267, "col_offset": 51, "nodeName": "feature_values_matrix", "type": "Any"}, {"lineNumber": 269, "col_offset": 12, "nodeName": "RunNetOnce", "type": "Any"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "RunNetOnce", "type": "Any"}, {"lineNumber": 272, "col_offset": 45, "nodeName": "FetchBlob", "type": "Any"}, {"lineNumber": 272, "col_offset": 72, "nodeName": "output_blob", "type": "Any"}, {"lineNumber": 274, "col_offset": 27, "nodeName": "where", "type": "Any"}, {"lineNumber": 284, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 302, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 314, "col_offset": 40, "nodeName": "norm_params", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 315, "col_offset": 17, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 315, "col_offset": 54, "nodeName": "float", "type": "Any"}, {"lineNumber": 315, "col_offset": 70, "nodeName": "norm_params", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 317, "col_offset": 26, "nodeName": "torch", "type": "Any"}, {"lineNumber": 319, "col_offset": 8, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 319, "col_offset": 24, "nodeName": "all", "type": "Any"}, {"lineNumber": 327, "col_offset": 44, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 328, "col_offset": 53, "nodeName": "identify_parameter", "type": "Callable[..., ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 329, "col_offset": 16, "nodeName": "feature_values", "type": "Any"}, {"lineNumber": 335, "col_offset": 27, "nodeName": "Preprocessor", "type": "Type[ml.rl.preprocessing.preprocessor.Preprocessor]"}, {"lineNumber": 338, "col_offset": 12, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 339, "col_offset": 36, "nodeName": "expand_dims", "type": "Any"}, {"lineNumber": 339, "col_offset": 51, "nodeName": "feature_values", "type": "Any"}, {"lineNumber": 340, "col_offset": 40, "nodeName": "forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 340, "col_offset": 61, "nodeName": "feature_values_matrix", "type": "Any"}, {"lineNumber": 341, "col_offset": 12, "nodeName": "name_preprocessed_blob_map", "type": "Dict[int, Any]"}, {"lineNumber": 341, "col_offset": 55, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 343, "col_offset": 24, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 346, "col_offset": 34, "nodeName": "name_preprocessed_blob_map", "type": "Dict[int, Any]"}, {"lineNumber": 347, "col_offset": 15, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 347, "col_offset": 31, "nodeName": "ENUM_FEATURE_ID", "type": "int"}, {"lineNumber": 348, "col_offset": 16, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 351, "col_offset": 15, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 351, "col_offset": 31, "nodeName": "BOXCOX_FEATURE_ID", "type": "int"}, {"lineNumber": 353, "col_offset": 16, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 354, "col_offset": 27, "nodeName": "where", "type": "Any"}, {"lineNumber": 364, "col_offset": 12, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 383, "col_offset": 47, "nodeName": "PROBABILITY_FEATURE_ID", "type": "int"}, {"lineNumber": 386, "col_offset": 20, "nodeName": "normalization", "type": "module"}, {"lineNumber": 387, "col_offset": 45, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 389, "col_offset": 8, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 389, "col_offset": 25, "nodeName": "parameter", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 34, "col_offset": 28, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 34, "col_offset": 32, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 51, "col_offset": 45, "nodeName": "normalization", "type": "module"}, {"lineNumber": 55, "col_offset": 15, "nodeName": "id_to_type", "type": "Callable[[Any], str]"}, {"lineNumber": 55, "col_offset": 26, "nodeName": "k", "type": "int"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 56, "col_offset": 33, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 56, "col_offset": 49, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 57, "col_offset": 30, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 58, "col_offset": 16, "nodeName": "assertIs", "type": "Callable[..., None]"}, {"lineNumber": 58, "col_offset": 30, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 59, "col_offset": 34, "nodeName": "BOXCOX", "type": "str"}, {"lineNumber": 69, "col_offset": 40, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 69, "col_offset": 44, "nodeName": "sorted_features", "type": "List[Any]"}, {"lineNumber": 69, "col_offset": 69, "nodeName": "np", "type": "module"}, {"lineNumber": 71, "col_offset": 51, "nodeName": "feature", "type": "Any"}, {"lineNumber": 77, "col_offset": 44, "nodeName": "feature", "type": "Any"}, {"lineNumber": 78, "col_offset": 15, "nodeName": "norm", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 79, "col_offset": 30, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 79, "col_offset": 34, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "v", "type": "Any"}, {"lineNumber": 97, "col_offset": 12, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 97, "col_offset": 28, "nodeName": "all", "type": "Any"}, {"lineNumber": 98, "col_offset": 27, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 99, "col_offset": 31, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 100, "col_offset": 27, "nodeName": "expit", "type": "Any"}, {"lineNumber": 100, "col_offset": 41, "nodeName": "v", "type": "Any"}, {"lineNumber": 101, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 106, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 106, "col_offset": 33, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 107, "col_offset": 16, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 107, "col_offset": 34, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 111, "col_offset": 16, "nodeName": "possible_value_map", "type": "Dict[Any, int]"}, {"lineNumber": 151, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 162, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 165, "col_offset": 16, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 171, "col_offset": 40, "nodeName": "np", "type": "module"}, {"lineNumber": 178, "col_offset": 8, "nodeName": "np", "type": "module"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "np", "type": "module"}, {"lineNumber": 194, "col_offset": 37, "nodeName": "name", "type": "int"}, {"lineNumber": 194, "col_offset": 45, "nodeName": "normalization", "type": "module"}, {"lineNumber": 202, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 202, "col_offset": 47, "nodeName": "normalization", "type": "module"}, {"lineNumber": 205, "col_offset": 58, "nodeName": "np", "type": "module"}, {"lineNumber": 207, "col_offset": 22, "nodeName": "stats", "type": "Any"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "maximum", "type": "Any"}, {"lineNumber": 209, "col_offset": 55, "nodeName": "BOX_COX_MARGIN", "type": "float"}, {"lineNumber": 211, "col_offset": 16, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 215, "col_offset": 22, "nodeName": "special", "type": "Any"}, {"lineNumber": 215, "col_offset": 36, "nodeName": "clip", "type": "Any"}, {"lineNumber": 215, "col_offset": 44, "nodeName": "feature", "type": "Any"}, {"lineNumber": 216, "col_offset": 13, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 216, "col_offset": 40, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 217, "col_offset": 34, "nodeName": "zeros_like", "type": "Any"}, {"lineNumber": 217, "col_offset": 48, "nodeName": "feature", "type": "Any"}, {"lineNumber": 218, "col_offset": 21, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 223, "col_offset": 13, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 223, "col_offset": 40, "nodeName": "ENUM", "type": "str"}, {"lineNumber": 224, "col_offset": 12, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 224, "col_offset": 30, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 225, "col_offset": 12, "nodeName": "mapping", "type": "Dict[Any, int]"}, {"lineNumber": 228, "col_offset": 12, "nodeName": "output_feature", "type": "Any"}, {"lineNumber": 233, "col_offset": 19, "nodeName": "output_feature", "type": "Any"}, {"lineNumber": 235, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 236, "col_offset": 12, "nodeName": "feature", "type": "Any"}, {"lineNumber": 236, "col_offset": 23, "nodeName": "stddev", "type": "Any"}, {"lineNumber": 243, "col_offset": 35, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 244, "col_offset": 16, "nodeName": "features", "type": "Any"}, {"lineNumber": 244, "col_offset": 40, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 252, "col_offset": 39, "nodeName": "normalization", "type": "module"}, {"lineNumber": 256, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 258, "col_offset": 41, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 258, "col_offset": 55, "nodeName": "normalization_parameters", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 259, "col_offset": 40, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 261, "col_offset": 46, "nodeName": "PytorchCaffe2Converter", "type": "Type[ml.rl.caffe_utils.PytorchCaffe2Converter]"}, {"lineNumber": 267, "col_offset": 12, "nodeName": "preproc_workspace", "type": "Any"}, {"lineNumber": 269, "col_offset": 12, "nodeName": "preproc_workspace", "type": "Any"}, {"lineNumber": 269, "col_offset": 41, "nodeName": "Net", "type": "Any"}, {"lineNumber": 269, "col_offset": 50, "nodeName": "init_net", "type": "Any"}, {"lineNumber": 270, "col_offset": 12, "nodeName": "preproc_workspace", "type": "Any"}, {"lineNumber": 270, "col_offset": 41, "nodeName": "Net", "type": "Any"}, {"lineNumber": 270, "col_offset": 50, "nodeName": "predict_net", "type": "Any"}, {"lineNumber": 272, "col_offset": 45, "nodeName": "workspace", "type": "Any"}, {"lineNumber": 274, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 275, "col_offset": 16, "nodeName": "logical_not", "type": "Any"}, {"lineNumber": 284, "col_offset": 12, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 285, "col_offset": 16, "nodeName": "all", "type": "Any"}, {"lineNumber": 293, "col_offset": 16, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 294, "col_offset": 20, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 315, "col_offset": 54, "nodeName": "input", "type": "Any"}, {"lineNumber": 319, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 319, "col_offset": 31, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 319, "col_offset": 42, "nodeName": "output", "type": "Any"}, {"lineNumber": 319, "col_offset": 50, "nodeName": "expected_output", "type": "Any"}, {"lineNumber": 328, "col_offset": 53, "nodeName": "normalization", "type": "module"}, {"lineNumber": 336, "col_offset": 17, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 339, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 340, "col_offset": 40, "nodeName": "preprocessor", "type": "ml.rl.preprocessing.preprocessor.Preprocessor"}, {"lineNumber": 341, "col_offset": 39, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 341, "col_offset": 55, "nodeName": "normalized_feature_values", "type": "Any"}, {"lineNumber": 346, "col_offset": 61, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 348, "col_offset": 38, "nodeName": "squeeze", "type": "Any"}, {"lineNumber": 348, "col_offset": 49, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 354, "col_offset": 27, "nodeName": "np", "type": "module"}, {"lineNumber": 355, "col_offset": 16, "nodeName": "logical_not", "type": "Any"}, {"lineNumber": 364, "col_offset": 12, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 365, "col_offset": 16, "nodeName": "all", "type": "Any"}, {"lineNumber": 373, "col_offset": 16, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 374, "col_offset": 20, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 387, "col_offset": 45, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 40, "col_offset": 17, "nodeName": "original_value", "type": "Any"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 56, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 57, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 57, "col_offset": 30, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 58, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 58, "col_offset": 30, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "id_to_type", "type": "Callable[[Any], str]"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "k", "type": "int"}, {"lineNumber": 60, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 33, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 60, "col_offset": 49, "nodeName": "BOXCOX", "type": "str"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "assertIsNot", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 33, "nodeName": "boxcox_lambda", "type": "Any"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "assertIsNot", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 33, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 71, "col_offset": 28, "nodeName": "i", "type": "int"}, {"lineNumber": 79, "col_offset": 34, "nodeName": "norm", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 83, "col_offset": 19, "nodeName": "on_column", "type": "int"}, {"lineNumber": 91, "col_offset": 24, "nodeName": "parameter", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 97, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "isfinite", "type": "Any"}, {"lineNumber": 97, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 98, "col_offset": 52, "nodeName": "k", "type": "Any"}, {"lineNumber": 100, "col_offset": 27, "nodeName": "special", "type": "Any"}, {"lineNumber": 101, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 102, "col_offset": 20, "nodeName": "all", "type": "Any"}, {"lineNumber": 106, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 109, "col_offset": 16, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 112, "col_offset": 23, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 112, "col_offset": 41, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 112, "col_offset": 51, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 113, "col_offset": 57, "nodeName": "i", "type": "int"}, {"lineNumber": 115, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 115, "col_offset": 23, "nodeName": "row", "type": "Any"}, {"lineNumber": 115, "col_offset": 30, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 115, "col_offset": 40, "nodeName": "v", "type": "Any"}, {"lineNumber": 116, "col_offset": 20, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 124, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "QUANTILE", "type": "str"}, {"lineNumber": 173, "col_offset": 18, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "index", "type": "Callable[..., int]"}, {"lineNumber": 205, "col_offset": 37, "nodeName": "is_not_empty", "type": "Any"}, {"lineNumber": 208, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 209, "col_offset": 20, "nodeName": "feature", "type": "Any"}, {"lineNumber": 209, "col_offset": 30, "nodeName": "boxcox_shift", "type": "Any"}, {"lineNumber": 209, "col_offset": 55, "nodeName": "normalization", "type": "module"}, {"lineNumber": 215, "col_offset": 36, "nodeName": "np", "type": "module"}, {"lineNumber": 217, "col_offset": 34, "nodeName": "np", "type": "module"}, {"lineNumber": 218, "col_offset": 21, "nodeName": "moves", "type": "module"}, {"lineNumber": 218, "col_offset": 37, "nodeName": "shape", "type": "Any"}, {"lineNumber": 219, "col_offset": 41, "nodeName": "_value_to_quantile", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 220, "col_offset": 32, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 223, "col_offset": 13, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 223, "col_offset": 40, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 224, "col_offset": 30, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 226, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 226, "col_offset": 19, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 226, "col_offset": 37, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 226, "col_offset": 47, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 227, "col_offset": 42, "nodeName": "i", "type": "int"}, {"lineNumber": 228, "col_offset": 29, "nodeName": "zeros", "type": "Any"}, {"lineNumber": 229, "col_offset": 16, "nodeName": "i", "type": "int"}, {"lineNumber": 229, "col_offset": 19, "nodeName": "val", "type": "Any"}, {"lineNumber": 229, "col_offset": 26, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 229, "col_offset": 36, "nodeName": "feature", "type": "Any"}, {"lineNumber": 235, "col_offset": 22, "nodeName": "feature", "type": "Any"}, {"lineNumber": 235, "col_offset": 32, "nodeName": "mean", "type": "Any"}, {"lineNumber": 236, "col_offset": 23, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 244, "col_offset": 25, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 244, "col_offset": 51, "nodeName": "feature_name", "type": "Any"}, {"lineNumber": 269, "col_offset": 41, "nodeName": "core", "type": "Any"}, {"lineNumber": 269, "col_offset": 50, "nodeName": "netdef", "type": "Any"}, {"lineNumber": 270, "col_offset": 41, "nodeName": "core", "type": "Any"}, {"lineNumber": 270, "col_offset": 50, "nodeName": "netdef", "type": "Any"}, {"lineNumber": 272, "col_offset": 45, "nodeName": "netdef", "type": "Any"}, {"lineNumber": 275, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 276, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 277, "col_offset": 24, "nodeName": "normalized_feature_values", "type": "Any"}, {"lineNumber": 278, "col_offset": 24, "nodeName": "normalized_feature_values_onnx", "type": "Any"}, {"lineNumber": 285, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 286, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 287, "col_offset": 24, "nodeName": "normalized_feature_values", "type": "Any"}, {"lineNumber": 288, "col_offset": 24, "nodeName": "normalized_feature_values_onnx", "type": "Any"}, {"lineNumber": 319, "col_offset": 31, "nodeName": "np", "type": "module"}, {"lineNumber": 336, "col_offset": 31, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 348, "col_offset": 38, "nodeName": "np", "type": "module"}, {"lineNumber": 355, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 356, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 365, "col_offset": 16, "nodeName": "np", "type": "module"}, {"lineNumber": 366, "col_offset": 20, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 40, "col_offset": 34, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 41, "col_offset": 47, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 60, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 60, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 61, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 61, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 62, "col_offset": 33, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "v", "type": "ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`"}, {"lineNumber": 64, "col_offset": 41, "nodeName": "id_to_type", "type": "Callable[[Any], str]"}, {"lineNumber": 64, "col_offset": 52, "nodeName": "k", "type": "int"}, {"lineNumber": 83, "col_offset": 32, "nodeName": "on_column", "type": "int"}, {"lineNumber": 83, "col_offset": 44, "nodeName": "column_size", "type": "int"}, {"lineNumber": 91, "col_offset": 37, "nodeName": "values", "type": "Callable"}, {"lineNumber": 97, "col_offset": 35, "nodeName": "np", "type": "module"}, {"lineNumber": 102, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 24, "nodeName": "logical_and", "type": "Any"}, {"lineNumber": 107, "col_offset": 34, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 108, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 108, "col_offset": 33, "nodeName": "shape", "type": "Any"}, {"lineNumber": 108, "col_offset": 45, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 109, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 109, "col_offset": 33, "nodeName": "shape", "type": "Any"}, {"lineNumber": 109, "col_offset": 45, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 109, "col_offset": 49, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 113, "col_offset": 20, "nodeName": "possible_value_map", "type": "Dict[Any, int]"}, {"lineNumber": 124, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 125, "col_offset": 20, "nodeName": "i", "type": "int"}, {"lineNumber": 125, "col_offset": 23, "nodeName": "feature", "type": "Any"}, {"lineNumber": 125, "col_offset": 34, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 126, "col_offset": 20, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 131, "col_offset": 17, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 131, "col_offset": 33, "nodeName": "BINARY", "type": "str"}, {"lineNumber": 173, "col_offset": 18, "nodeName": "feature_ids", "type": "List[int]"}, {"lineNumber": 174, "col_offset": 18, "nodeName": "feature_ids", "type": "List[int]"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "feature_ids", "type": "List[int]"}, {"lineNumber": 205, "col_offset": 21, "nodeName": "feature", "type": "Any"}, {"lineNumber": 209, "col_offset": 30, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 218, "col_offset": 21, "nodeName": "six", "type": "module"}, {"lineNumber": 218, "col_offset": 37, "nodeName": "feature", "type": "Any"}, {"lineNumber": 219, "col_offset": 41, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 220, "col_offset": 20, "nodeName": "feature", "type": "Any"}, {"lineNumber": 220, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 227, "col_offset": 16, "nodeName": "mapping", "type": "Dict[Any, int]"}, {"lineNumber": 228, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 235, "col_offset": 32, "nodeName": "parameters", "type": "Any"}, {"lineNumber": 276, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 279, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 280, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 286, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 289, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 290, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 295, "col_offset": 20, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 296, "col_offset": 20, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 336, "col_offset": 56, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 356, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 357, "col_offset": 24, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 358, "col_offset": 24, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 359, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 360, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 366, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 367, "col_offset": 24, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 368, "col_offset": 24, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 369, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 370, "col_offset": 29, "nodeName": "tolerance", "type": "float"}, {"lineNumber": 375, "col_offset": 20, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 375, "col_offset": 50, "nodeName": "non_matching", "type": "Any"}, {"lineNumber": 376, "col_offset": 20, "nodeName": "flatten", "type": "Any"}, {"lineNumber": 376, "col_offset": 58, "nodeName": "non_matching", "type": "Any"}, {"lineNumber": 40, "col_offset": 44, "nodeName": "left", "type": "Any"}, {"lineNumber": 41, "col_offset": 20, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 41, "col_offset": 57, "nodeName": "left", "type": "Any"}, {"lineNumber": 91, "col_offset": 37, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 103, "col_offset": 24, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 39, "nodeName": "greater", "type": "Any"}, {"lineNumber": 103, "col_offset": 50, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 103, "col_offset": 64, "nodeName": "less", "type": "Any"}, {"lineNumber": 103, "col_offset": 72, "nodeName": "sigmoidv", "type": "Any"}, {"lineNumber": 107, "col_offset": 59, "nodeName": "k", "type": "Any"}, {"lineNumber": 108, "col_offset": 33, "nodeName": "v", "type": "Any"}, {"lineNumber": 108, "col_offset": 49, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 109, "col_offset": 33, "nodeName": "v", "type": "Any"}, {"lineNumber": 113, "col_offset": 39, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 116, "col_offset": 39, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 116, "col_offset": 60, "nodeName": "i", "type": "int"}, {"lineNumber": 117, "col_offset": 23, "nodeName": "abs", "type": "Callable[[Any], Any]"}, {"lineNumber": 118, "col_offset": 24, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 120, "col_offset": 24, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 125, "col_offset": 44, "nodeName": "v", "type": "Any"}, {"lineNumber": 127, "col_offset": 31, "nodeName": "_value_to_quantile", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 128, "col_offset": 24, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 128, "col_offset": 42, "nodeName": "quantiles", "type": "Any"}, {"lineNumber": 130, "col_offset": 20, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 130, "col_offset": 43, "nodeName": "feature", "type": "Any"}, {"lineNumber": 130, "col_offset": 52, "nodeName": "expected", "type": "Any"}, {"lineNumber": 131, "col_offset": 33, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 137, "col_offset": 16, "nodeName": "one_stddev", "type": "Any"}, {"lineNumber": 138, "col_offset": 16, "nodeName": "zero_stddev", "type": "Any"}, {"lineNumber": 139, "col_offset": 16, "nodeName": "zero_mean", "type": "Any"}, {"lineNumber": 220, "col_offset": 28, "nodeName": "i", "type": "int"}, {"lineNumber": 227, "col_offset": 24, "nodeName": "possible_value", "type": "Any"}, {"lineNumber": 228, "col_offset": 39, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 228, "col_offset": 43, "nodeName": "feature", "type": "Any"}, {"lineNumber": 228, "col_offset": 53, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 228, "col_offset": 57, "nodeName": "possible_values", "type": "Any"}, {"lineNumber": 230, "col_offset": 19, "nodeName": "abs", "type": "Callable[[Any], Any]"}, {"lineNumber": 232, "col_offset": 16, "nodeName": "output_feature", "type": "Any"}, {"lineNumber": 357, "col_offset": 24, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 367, "col_offset": 24, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 375, "col_offset": 20, "nodeName": "normalized_features", "type": "Any"}, {"lineNumber": 41, "col_offset": 30, "nodeName": "right", "type": "Any"}, {"lineNumber": 103, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 103, "col_offset": 64, "nodeName": "np", "type": "module"}, {"lineNumber": 108, "col_offset": 67, "nodeName": "k", "type": "Any"}, {"lineNumber": 116, "col_offset": 57, "nodeName": "k", "type": "Any"}, {"lineNumber": 117, "col_offset": 27, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 117, "col_offset": 46, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 118, "col_offset": 24, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 118, "col_offset": 46, "nodeName": "sum", "type": "Any"}, {"lineNumber": 118, "col_offset": 53, "nodeName": "row", "type": "Any"}, {"lineNumber": 120, "col_offset": 24, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 121, "col_offset": 28, "nodeName": "possible_value_map", "type": "Dict[Any, int]"}, {"lineNumber": 126, "col_offset": 39, "nodeName": "feature_value_map", "type": "Dict[int, Any]"}, {"lineNumber": 126, "col_offset": 60, "nodeName": "i", "type": "int"}, {"lineNumber": 127, "col_offset": 31, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 130, "col_offset": 20, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 134, "col_offset": 16, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 134, "col_offset": 32, "nodeName": "CONTINUOUS", "type": "str"}, {"lineNumber": 135, "col_offset": 19, "nodeName": "feature_type", "type": "Any"}, {"lineNumber": 135, "col_offset": 35, "nodeName": "BOXCOX", "type": "str"}, {"lineNumber": 137, "col_offset": 29, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 138, "col_offset": 30, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 139, "col_offset": 28, "nodeName": "isclose", "type": "Any"}, {"lineNumber": 140, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 144, "col_offset": 16, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 146, "col_offset": 22, "nodeName": "NotImplementedError", "type": "Type[NotImplementedError]"}, {"lineNumber": 230, "col_offset": 23, "nodeName": "val", "type": "Any"}, {"lineNumber": 230, "col_offset": 29, "nodeName": "MISSING_VALUE", "type": "float"}, {"lineNumber": 232, "col_offset": 31, "nodeName": "i", "type": "int"}, {"lineNumber": 232, "col_offset": 34, "nodeName": "mapping", "type": "Dict[Any, int]"}, {"lineNumber": 295, "col_offset": 20, "nodeName": "normalized_feature_values", "type": "Any"}, {"lineNumber": 296, "col_offset": 20, "nodeName": "normalized_feature_values_onnx", "type": "Any"}, {"lineNumber": 358, "col_offset": 24, "nodeName": "test_features", "type": "Dict[int, Any]"}, {"lineNumber": 368, "col_offset": 24, "nodeName": "test_features", "type": "Dict[int, Any]"}, {"lineNumber": 376, "col_offset": 20, "nodeName": "test_features", "type": "Dict[int, Any]"}, {"lineNumber": 118, "col_offset": 46, "nodeName": "np", "type": "module"}, {"lineNumber": 121, "col_offset": 47, "nodeName": "original_feature", "type": "Any"}, {"lineNumber": 126, "col_offset": 57, "nodeName": "k", "type": "Any"}, {"lineNumber": 128, "col_offset": 42, "nodeName": "normalization_parameters", "type": "Dict[int, ml.rl.preprocessing.normalization.`namedtuple-NormalizationParameters-feature_type-boxcox_lambda-boxcox_shift-mean-stddev-possible_values-quantiles-min_value-max_value`]"}, {"lineNumber": 134, "col_offset": 32, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 135, "col_offset": 35, "nodeName": "identify_types", "type": "module"}, {"lineNumber": 137, "col_offset": 29, "nodeName": "np", "type": "module"}, {"lineNumber": 137, "col_offset": 40, "nodeName": "std", "type": "Any"}, {"lineNumber": 137, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 138, "col_offset": 30, "nodeName": "np", "type": "module"}, {"lineNumber": 138, "col_offset": 41, "nodeName": "std", "type": "Any"}, {"lineNumber": 138, "col_offset": 48, "nodeName": "v", "type": "Any"}, {"lineNumber": 139, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 139, "col_offset": 39, "nodeName": "mean", "type": "Any"}, {"lineNumber": 139, "col_offset": 47, "nodeName": "v", "type": "Any"}, {"lineNumber": 140, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 141, "col_offset": 20, "nodeName": "all", "type": "Any"}, {"lineNumber": 141, "col_offset": 27, "nodeName": "zero_mean", "type": "Any"}, {"lineNumber": 142, "col_offset": 20, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 142, "col_offset": 61, "nodeName": "k", "type": "Any"}, {"lineNumber": 144, "col_offset": 16, "nodeName": "self", "type": "TestPreprocessing"}, {"lineNumber": 144, "col_offset": 32, "nodeName": "all", "type": "Any"}, {"lineNumber": 232, "col_offset": 42, "nodeName": "val", "type": "Any"}, {"lineNumber": 295, "col_offset": 46, "nodeName": "non_matching", "type": "Any"}, {"lineNumber": 296, "col_offset": 51, "nodeName": "non_matching", "type": "Any"}, {"lineNumber": 358, "col_offset": 38, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 368, "col_offset": 38, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 376, "col_offset": 34, "nodeName": "feature_name", "type": "int"}, {"lineNumber": 122, "col_offset": 28, "nodeName": "where", "type": "Any"}, {"lineNumber": 128, "col_offset": 67, "nodeName": "k", "type": "Any"}, {"lineNumber": 137, "col_offset": 40, "nodeName": "np", "type": "module"}, {"lineNumber": 138, "col_offset": 41, "nodeName": "np", "type": "module"}, {"lineNumber": 139, "col_offset": 39, "nodeName": "np", "type": "module"}, {"lineNumber": 141, "col_offset": 20, "nodeName": "np", "type": "module"}, {"lineNumber": 142, "col_offset": 64, "nodeName": "mean", "type": "Any"}, {"lineNumber": 142, "col_offset": 72, "nodeName": "v", "type": "Any"}, {"lineNumber": 144, "col_offset": 32, "nodeName": "np", "type": "module"}, {"lineNumber": 144, "col_offset": 39, "nodeName": "logical_or", "type": "Any"}, {"lineNumber": 144, "col_offset": 53, "nodeName": "one_stddev", "type": "Any"}, {"lineNumber": 144, "col_offset": 65, "nodeName": "zero_stddev", "type": "Any"}, {"lineNumber": 122, "col_offset": 28, "nodeName": "np", "type": "module"}, {"lineNumber": 122, "col_offset": 37, "nodeName": "row", "type": "Any"}, {"lineNumber": 142, "col_offset": 64, "nodeName": "np", "type": "module"}, {"lineNumber": 144, "col_offset": 39, "nodeName": "np", "type": "module"}]