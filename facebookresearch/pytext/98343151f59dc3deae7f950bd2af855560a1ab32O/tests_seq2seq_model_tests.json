[{"lineNumber": 36, "col_offset": 0, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 30, "col_offset": 0, "nodeName": "tests_module", "type": "module"}, {"lineNumber": 33, "col_offset": 0, "nodeName": "TEST_FILE_NAME", "type": "Any"}, {"lineNumber": 82, "col_offset": 30, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 185, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 30, "col_offset": 15, "nodeName": "import_tests_module", "type": "Callable[..., module]"}, {"lineNumber": 33, "col_offset": 17, "nodeName": "test_file", "type": "Any"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "schema", "type": "Dict[str, Union[Type[str], Type[List[Dict[str, Dict[str, float]]]]]]"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 58, "col_offset": 7, "nodeName": "add_dict_feat", "type": "bool"}, {"lineNumber": 68, "col_offset": 7, "nodeName": "add_contextual_feat", "type": "bool"}, {"lineNumber": 77, "col_offset": 11, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 82, "col_offset": 30, "nodeName": "unittest", "type": "module"}, {"lineNumber": 185, "col_offset": 28, "nodeName": "unittest", "type": "module"}, {"lineNumber": 33, "col_offset": 17, "nodeName": "tests_module", "type": "module"}, {"lineNumber": 37, "col_offset": 33, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 37, "col_offset": 51, "nodeName": "Gazetteer", "type": "Type[List[Dict[str, Dict[str, float]]]]"}, {"lineNumber": 37, "col_offset": 81, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 38, "col_offset": 18, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "schema", "type": "Dict[str, Union[Type[str], Type[List[Dict[str, Dict[str, float]]]]]]"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 50, "col_offset": 21, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 55, "col_offset": 37, "nodeName": "src_tensorizer", "type": "pytext.data.tensorizers.TokenTensorizer"}, {"lineNumber": 55, "col_offset": 71, "nodeName": "tgt_tensorizer", "type": "pytext.data.tensorizers.TokenTensorizer"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "initialize_tensorizers", "type": "Callable[..., None]"}, {"lineNumber": 56, "col_offset": 27, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 56, "col_offset": 40, "nodeName": "train", "type": "pytext.data.sources.data_source.GeneratorIterator"}, {"lineNumber": 187, "col_offset": 8, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "batcher", "type": "pytext.data.data.Batcher"}, {"lineNumber": 215, "col_offset": 8, "nodeName": "inputs", "type": "Tuple[Any, Optional[Tuple[Any, Any, Any]], Any, Any]"}, {"lineNumber": 218, "col_offset": 8, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 219, "col_offset": 8, "nodeName": "pred", "type": "Any"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "force_eval_predictions", "type": "bool"}, {"lineNumber": 236, "col_offset": 8, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "batcher", "type": "pytext.data.data.Batcher"}, {"lineNumber": 267, "col_offset": 8, "nodeName": "inputs", "type": "Tuple[Any, Optional[Tuple[Any, Any, Any]], Any, Any]"}, {"lineNumber": 270, "col_offset": 8, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 274, "col_offset": 8, "nodeName": "decoder", "type": "Any"}, {"lineNumber": 274, "col_offset": 18, "nodeName": "decoder_ens", "type": "Any"}, {"lineNumber": 38, "col_offset": 18, "nodeName": "TSVDataSource", "type": "Type[pytext.data.sources.tsv.TSVDataSource]"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "Config", "type": "Any"}, {"lineNumber": 45, "col_offset": 21, "nodeName": "TokenTensorizer", "type": "Type[pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "Config", "type": "Any"}, {"lineNumber": 50, "col_offset": 21, "nodeName": "TokenTensorizer", "type": "Type[pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "Config", "type": "Any"}, {"lineNumber": 56, "col_offset": 40, "nodeName": "data_source", "type": "pytext.data.sources.tsv.TSVDataSource"}, {"lineNumber": 59, "col_offset": 35, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "initialize_tensorizers", "type": "Callable[..., None]"}, {"lineNumber": 65, "col_offset": 53, "nodeName": "train", "type": "pytext.data.sources.data_source.GeneratorIterator"}, {"lineNumber": 69, "col_offset": 52, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "initialize_tensorizers", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "train", "type": "pytext.data.sources.data_source.GeneratorIterator"}, {"lineNumber": 95, "col_offset": 12, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 96, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 120, "col_offset": 12, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 121, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 145, "col_offset": 12, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 146, "col_offset": 12, "nodeName": "res", "type": "Any"}, {"lineNumber": 174, "col_offset": 12, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 187, "col_offset": 22, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 189, "col_offset": 16, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 194, "col_offset": 12, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 199, "col_offset": 31, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 200, "col_offset": 25, "nodeName": "Gazetteer", "type": "Type[List[Dict[str, Dict[str, float]]]]"}, {"lineNumber": 201, "col_offset": 31, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 203, "col_offset": 15, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 210, "col_offset": 12, "nodeName": "schema", "type": "Dict[str, Union[Type[str], Type[List[Dict[str, Dict[str, float]]]]]]"}, {"lineNumber": 211, "col_offset": 12, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 213, "col_offset": 8, "nodeName": "data", "type": "pytext.data.data.Data"}, {"lineNumber": 213, "col_offset": 23, "nodeName": "Batcher", "type": "Type[pytext.data.data.Batcher]"}, {"lineNumber": 214, "col_offset": 8, "nodeName": "raw_batch", "type": "Any"}, {"lineNumber": 214, "col_offset": 19, "nodeName": "batch", "type": "Any"}, {"lineNumber": 214, "col_offset": 27, "nodeName": "next", "type": "Callable"}, {"lineNumber": 215, "col_offset": 17, "nodeName": "arrange_model_inputs", "type": "Callable[[Any], Tuple[Any, Optional[Tuple[Any, Any, Any]], Any, Any]]"}, {"lineNumber": 215, "col_offset": 44, "nodeName": "batch", "type": "Any"}, {"lineNumber": 218, "col_offset": 18, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 219, "col_offset": 15, "nodeName": "get_pred", "type": "Callable[..., Any]"}, {"lineNumber": 219, "col_offset": 30, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 220, "col_offset": 25, "nodeName": "pred", "type": "Any"}, {"lineNumber": 224, "col_offset": 8, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 226, "col_offset": 12, "nodeName": "_", "type": "Any"}, {"lineNumber": 236, "col_offset": 22, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "manual_seed", "type": "Any"}, {"lineNumber": 241, "col_offset": 16, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 246, "col_offset": 12, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 251, "col_offset": 31, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 252, "col_offset": 25, "nodeName": "Gazetteer", "type": "Type[List[Dict[str, Dict[str, float]]]]"}, {"lineNumber": 253, "col_offset": 31, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 255, "col_offset": 15, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 262, "col_offset": 12, "nodeName": "schema", "type": "Dict[str, Union[Type[str], Type[List[Dict[str, Dict[str, float]]]]]]"}, {"lineNumber": 263, "col_offset": 12, "nodeName": "tensorizers", "type": "Dict[str, pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 265, "col_offset": 8, "nodeName": "data", "type": "pytext.data.data.Data"}, {"lineNumber": 265, "col_offset": 23, "nodeName": "Batcher", "type": "Type[pytext.data.data.Batcher]"}, {"lineNumber": 266, "col_offset": 8, "nodeName": "raw_batch", "type": "Any"}, {"lineNumber": 266, "col_offset": 19, "nodeName": "batch", "type": "Any"}, {"lineNumber": 266, "col_offset": 27, "nodeName": "next", "type": "Callable"}, {"lineNumber": 267, "col_offset": 17, "nodeName": "arrange_model_inputs", "type": "Callable[[Any], Tuple[Any, Optional[Tuple[Any, Any, Any]], Any, Any]]"}, {"lineNumber": 267, "col_offset": 44, "nodeName": "batch", "type": "Any"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "eval", "type": "Callable[..., None]"}, {"lineNumber": 270, "col_offset": 18, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 271, "col_offset": 8, "nodeName": "pred", "type": "Any"}, {"lineNumber": 271, "col_offset": 14, "nodeName": "scores", "type": "Any"}, {"lineNumber": 271, "col_offset": 23, "nodeName": "get_pred", "type": "Callable[..., Any]"}, {"lineNumber": 271, "col_offset": 38, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 274, "col_offset": 18, "nodeName": "beam_search", "type": "Any"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "reset_incremental_states", "type": "Any"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "assertDictEqual", "type": "Callable[..., None]"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "incremental_states", "type": "Any"}, {"lineNumber": 279, "col_offset": 8, "nodeName": "new_pred", "type": "Any"}, {"lineNumber": 279, "col_offset": 18, "nodeName": "new_scores", "type": "Any"}, {"lineNumber": 279, "col_offset": 31, "nodeName": "get_pred", "type": "Callable[..., Any]"}, {"lineNumber": 279, "col_offset": 46, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 280, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 280, "col_offset": 25, "nodeName": "new_scores", "type": "Any"}, {"lineNumber": 280, "col_offset": 37, "nodeName": "scores", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "TSVDataSource", "type": "Type[pytext.data.sources.tsv.TSVDataSource]"}, {"lineNumber": 40, "col_offset": 27, "nodeName": "TEST_FILE_NAME", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "TokenTensorizer", "type": "Type[pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "TokenTensorizer", "type": "Type[pytext.data.tensorizers.TokenTensorizer]"}, {"lineNumber": 59, "col_offset": 35, "nodeName": "GazetteerTensorizer", "type": "Type[pytext.data.tensorizers.GazetteerTensorizer]"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "Config", "type": "Any"}, {"lineNumber": 65, "col_offset": 53, "nodeName": "data_source", "type": "pytext.data.sources.tsv.TSVDataSource"}, {"lineNumber": 69, "col_offset": 52, "nodeName": "ByteTokenTensorizer", "type": "Type[pytext.data.tensorizers.ByteTokenTensorizer]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "Config", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "data_source", "type": "pytext.data.sources.tsv.TSVDataSource"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "no_grad", "type": "Any"}, {"lineNumber": 87, "col_offset": 20, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "eval", "type": "Callable[..., None]"}, {"lineNumber": 95, "col_offset": 23, "nodeName": "torchscriptify", "type": "Callable[[], Any]"}, {"lineNumber": 96, "col_offset": 18, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 102, "col_offset": 13, "nodeName": "no_grad", "type": "Any"}, {"lineNumber": 103, "col_offset": 20, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "eval", "type": "Callable[..., None]"}, {"lineNumber": 120, "col_offset": 23, "nodeName": "torchscriptify", "type": "Callable[[], Any]"}, {"lineNumber": 121, "col_offset": 18, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 122, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 127, "col_offset": 13, "nodeName": "no_grad", "type": "Any"}, {"lineNumber": 128, "col_offset": 20, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "eval", "type": "Callable[..., None]"}, {"lineNumber": 145, "col_offset": 23, "nodeName": "torchscriptify", "type": "Callable[[], Any]"}, {"lineNumber": 146, "col_offset": 18, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 147, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 152, "col_offset": 13, "nodeName": "no_grad", "type": "Any"}, {"lineNumber": 153, "col_offset": 20, "nodeName": "from_config", "type": "Callable"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "eval", "type": "Callable[..., None]"}, {"lineNumber": 174, "col_offset": 23, "nodeName": "torchscriptify", "type": "Callable[[], Any]"}, {"lineNumber": 175, "col_offset": 18, "nodeName": "ts_model", "type": "Any"}, {"lineNumber": 180, "col_offset": 19, "nodeName": "res", "type": "Any"}, {"lineNumber": 189, "col_offset": 16, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 190, "col_offset": 12, "nodeName": "Config", "type": "Any"}, {"lineNumber": 203, "col_offset": 15, "nodeName": "Data", "type": "Type[pytext.data.data.Data]"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "Config", "type": "Any"}, {"lineNumber": 214, "col_offset": 32, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 215, "col_offset": 17, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 218, "col_offset": 25, "nodeName": "inputs", "type": "Tuple[Any, Optional[Tuple[Any, Any, Any]], Any, Any]"}, {"lineNumber": 219, "col_offset": 15, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 219, "col_offset": 49, "nodeName": "EVAL", "type": "Any"}, {"lineNumber": 220, "col_offset": 8, "nodeName": "self", "type": "Seq2SeqModelEvalTests"}, {"lineNumber": 225, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 225, "col_offset": 31, "nodeName": "AssertionError", "type": "Type[AssertionError]"}, {"lineNumber": 226, "col_offset": 16, "nodeName": "get_pred", "type": "Callable[..., Any]"}, {"lineNumber": 226, "col_offset": 31, "nodeName": "outputs", "type": "Any"}, {"lineNumber": 239, "col_offset": 8, "nodeName": "torch", "type": "Any"}, {"lineNumber": 241, "col_offset": 16, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 242, "col_offset": 12, "nodeName": "Config", "type": "Any"}, {"lineNumber": 255, "col_offset": 15, "nodeName": "Data", "type": "Type[pytext.data.data.Data]"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "Config", "type": "Any"}, {"lineNumber": 266, "col_offset": 32, "nodeName": "iter", "type": "Callable"}, {"lineNumber": 267, "col_offset": 17, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 269, "col_offset": 8, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 270, "col_offset": 25, "nodeName": "inputs", "type": "Tuple[Any, Optional[Tuple[Any, Any, Any]], Any, Any]"}, {"lineNumber": 271, "col_offset": 23, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 271, "col_offset": 57, "nodeName": "TEST", "type": "Any"}, {"lineNumber": 274, "col_offset": 18, "nodeName": "sequence_generator", "type": "Any"}, {"lineNumber": 275, "col_offset": 8, "nodeName": "decoder", "type": "Any"}, {"lineNumber": 276, "col_offset": 8, "nodeName": "self", "type": "Seq2SeqModelEvalTests"}, {"lineNumber": 276, "col_offset": 29, "nodeName": "decoder", "type": "Any"}, {"lineNumber": 279, "col_offset": 31, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 279, "col_offset": 65, "nodeName": "TEST", "type": "Any"}, {"lineNumber": 280, "col_offset": 8, "nodeName": "self", "type": "Seq2SeqModelEvalTests"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "GazetteerTensorizer", "type": "Type[pytext.data.tensorizers.GazetteerTensorizer]"}, {"lineNumber": 65, "col_offset": 26, "nodeName": "tensorizers", "type": "Dict[str, Union[pytext.data.tensorizers.TokenTensorizer, pytext.data.tensorizers.GazetteerTensorizer]]"}, {"lineNumber": 70, "col_offset": 12, "nodeName": "ByteTokenTensorizer", "type": "Type[pytext.data.tensorizers.ByteTokenTensorizer]"}, {"lineNumber": 73, "col_offset": 43, "nodeName": "tensorizers", "type": "Dict[str, Union[pytext.data.tensorizers.TokenTensorizer, pytext.data.tensorizers.ByteTokenTensorizer]]"}, {"lineNumber": 86, "col_offset": 13, "nodeName": "torch", "type": "Any"}, {"lineNumber": 87, "col_offset": 20, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 88, "col_offset": 16, "nodeName": "Config", "type": "Any"}, {"lineNumber": 92, "col_offset": 16, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 94, "col_offset": 12, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 95, "col_offset": 23, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 102, "col_offset": 13, "nodeName": "torch", "type": "Any"}, {"lineNumber": 103, "col_offset": 20, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 104, "col_offset": 16, "nodeName": "Config", "type": "Any"}, {"lineNumber": 117, "col_offset": 16, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 119, "col_offset": 12, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 120, "col_offset": 23, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 127, "col_offset": 13, "nodeName": "torch", "type": "Any"}, {"lineNumber": 128, "col_offset": 20, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 129, "col_offset": 16, "nodeName": "Config", "type": "Any"}, {"lineNumber": 142, "col_offset": 16, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 145, "col_offset": 23, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 152, "col_offset": 13, "nodeName": "torch", "type": "Any"}, {"lineNumber": 153, "col_offset": 20, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 154, "col_offset": 16, "nodeName": "Config", "type": "Any"}, {"lineNumber": 171, "col_offset": 16, "nodeName": "get_tensorizers", "type": "Callable[..., Any]"}, {"lineNumber": 173, "col_offset": 12, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 174, "col_offset": 23, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 190, "col_offset": 12, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "Data", "type": "Type[pytext.data.data.Data]"}, {"lineNumber": 214, "col_offset": 37, "nodeName": "batches", "type": "Callable[..., Any]"}, {"lineNumber": 214, "col_offset": 50, "nodeName": "TRAIN", "type": "Any"}, {"lineNumber": 219, "col_offset": 49, "nodeName": "Stage", "type": "Type[pytext.common.constants.Stage]"}, {"lineNumber": 225, "col_offset": 13, "nodeName": "self", "type": "Seq2SeqModelEvalTests"}, {"lineNumber": 226, "col_offset": 16, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 226, "col_offset": 50, "nodeName": "EVAL", "type": "Any"}, {"lineNumber": 242, "col_offset": 12, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "Data", "type": "Type[pytext.data.data.Data]"}, {"lineNumber": 266, "col_offset": 37, "nodeName": "batches", "type": "Callable[..., Any]"}, {"lineNumber": 266, "col_offset": 50, "nodeName": "TRAIN", "type": "Any"}, {"lineNumber": 271, "col_offset": 57, "nodeName": "Stage", "type": "Type[pytext.common.constants.Stage]"}, {"lineNumber": 274, "col_offset": 18, "nodeName": "model", "type": "pytext.models.seq_models.seq2seq_model.Seq2SeqModel"}, {"lineNumber": 279, "col_offset": 65, "nodeName": "Stage", "type": "Type[pytext.common.constants.Stage]"}, {"lineNumber": 88, "col_offset": 16, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 104, "col_offset": 16, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 129, "col_offset": 16, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 154, "col_offset": 16, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 191, "col_offset": 33, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 192, "col_offset": 33, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 205, "col_offset": 23, "nodeName": "Config", "type": "Any"}, {"lineNumber": 214, "col_offset": 37, "nodeName": "data", "type": "pytext.data.data.Data"}, {"lineNumber": 214, "col_offset": 50, "nodeName": "Stage", "type": "Type[pytext.common.constants.Stage]"}, {"lineNumber": 226, "col_offset": 50, "nodeName": "Stage", "type": "Type[pytext.common.constants.Stage]"}, {"lineNumber": 243, "col_offset": 33, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 244, "col_offset": 33, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 257, "col_offset": 23, "nodeName": "Config", "type": "Any"}, {"lineNumber": 266, "col_offset": 37, "nodeName": "data", "type": "pytext.data.data.Data"}, {"lineNumber": 266, "col_offset": 50, "nodeName": "Stage", "type": "Type[pytext.common.constants.Stage]"}, {"lineNumber": 89, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 90, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 105, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 106, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 107, "col_offset": 27, "nodeName": "ModelInput", "type": "Any"}, {"lineNumber": 110, "col_offset": 47, "nodeName": "Config", "type": "Type[pytext.config.field_config.ContextualTokenEmbeddingConfig]"}, {"lineNumber": 113, "col_offset": 36, "nodeName": "Config", "type": "Any"}, {"lineNumber": 130, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 131, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 132, "col_offset": 27, "nodeName": "ModelInput", "type": "Any"}, {"lineNumber": 137, "col_offset": 36, "nodeName": "Config", "type": "Any"}, {"lineNumber": 140, "col_offset": 35, "nodeName": "Config", "type": "Type[pytext.config.field_config.DictFeatConfig]"}, {"lineNumber": 155, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 156, "col_offset": 37, "nodeName": "Config", "type": "Type[pytext.config.field_config.WordFeatConfig]"}, {"lineNumber": 157, "col_offset": 27, "nodeName": "ModelInput", "type": "Any"}, {"lineNumber": 163, "col_offset": 36, "nodeName": "Config", "type": "Any"}, {"lineNumber": 166, "col_offset": 35, "nodeName": "Config", "type": "Type[pytext.config.field_config.DictFeatConfig]"}, {"lineNumber": 167, "col_offset": 47, "nodeName": "Config", "type": "Type[pytext.config.field_config.ContextualTokenEmbeddingConfig]"}, {"lineNumber": 191, "col_offset": 33, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 192, "col_offset": 33, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 205, "col_offset": 23, "nodeName": "TSVDataSource", "type": "Type[pytext.data.sources.tsv.TSVDataSource]"}, {"lineNumber": 206, "col_offset": 35, "nodeName": "TEST_FILE_NAME", "type": "Any"}, {"lineNumber": 243, "col_offset": 33, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 244, "col_offset": 33, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 257, "col_offset": 23, "nodeName": "TSVDataSource", "type": "Type[pytext.data.sources.tsv.TSVDataSource]"}, {"lineNumber": 258, "col_offset": 35, "nodeName": "TEST_FILE_NAME", "type": "Any"}, {"lineNumber": 89, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 90, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 105, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 106, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 107, "col_offset": 27, "nodeName": "Config", "type": "Any"}, {"lineNumber": 110, "col_offset": 47, "nodeName": "ContextualTokenEmbedding", "type": "Type[pytext.models.embeddings.contextual_token_embedding.ContextualTokenEmbedding]"}, {"lineNumber": 113, "col_offset": 36, "nodeName": "RNNModel", "type": "Type[pytext.models.seq_models.rnn_encoder_decoder.RNNModel]"}, {"lineNumber": 130, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 131, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 132, "col_offset": 27, "nodeName": "Config", "type": "Any"}, {"lineNumber": 137, "col_offset": 36, "nodeName": "RNNModel", "type": "Type[pytext.models.seq_models.rnn_encoder_decoder.RNNModel]"}, {"lineNumber": 140, "col_offset": 35, "nodeName": "DictEmbedding", "type": "Type[pytext.models.embeddings.dict_embedding.DictEmbedding]"}, {"lineNumber": 155, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 156, "col_offset": 37, "nodeName": "WordEmbedding", "type": "Type[pytext.models.embeddings.word_embedding.WordEmbedding]"}, {"lineNumber": 157, "col_offset": 27, "nodeName": "Config", "type": "Any"}, {"lineNumber": 163, "col_offset": 36, "nodeName": "RNNModel", "type": "Type[pytext.models.seq_models.rnn_encoder_decoder.RNNModel]"}, {"lineNumber": 166, "col_offset": 35, "nodeName": "DictEmbedding", "type": "Type[pytext.models.embeddings.dict_embedding.DictEmbedding]"}, {"lineNumber": 167, "col_offset": 47, "nodeName": "ContextualTokenEmbedding", "type": "Type[pytext.models.embeddings.contextual_token_embedding.ContextualTokenEmbedding]"}, {"lineNumber": 107, "col_offset": 27, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 108, "col_offset": 51, "nodeName": "Config", "type": "Any"}, {"lineNumber": 114, "col_offset": 32, "nodeName": "Config", "type": "Any"}, {"lineNumber": 132, "col_offset": 27, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 133, "col_offset": 34, "nodeName": "Config", "type": "Any"}, {"lineNumber": 138, "col_offset": 32, "nodeName": "Config", "type": "Any"}, {"lineNumber": 157, "col_offset": 27, "nodeName": "Seq2SeqModel", "type": "Type[pytext.models.seq_models.seq2seq_model.Seq2SeqModel]"}, {"lineNumber": 158, "col_offset": 34, "nodeName": "Config", "type": "Any"}, {"lineNumber": 161, "col_offset": 51, "nodeName": "Config", "type": "Any"}, {"lineNumber": 164, "col_offset": 32, "nodeName": "Config", "type": "Any"}, {"lineNumber": 108, "col_offset": 51, "nodeName": "ByteTokenTensorizer", "type": "Type[pytext.data.tensorizers.ByteTokenTensorizer]"}, {"lineNumber": 114, "col_offset": 32, "nodeName": "LSTMSequenceEncoder", "type": "Type[pytext.models.seq_models.rnn_encoder.LSTMSequenceEncoder]"}, {"lineNumber": 133, "col_offset": 34, "nodeName": "GazetteerTensorizer", "type": "Type[pytext.data.tensorizers.GazetteerTensorizer]"}, {"lineNumber": 138, "col_offset": 32, "nodeName": "LSTMSequenceEncoder", "type": "Type[pytext.models.seq_models.rnn_encoder.LSTMSequenceEncoder]"}, {"lineNumber": 158, "col_offset": 34, "nodeName": "GazetteerTensorizer", "type": "Type[pytext.data.tensorizers.GazetteerTensorizer]"}, {"lineNumber": 161, "col_offset": 51, "nodeName": "ByteTokenTensorizer", "type": "Type[pytext.data.tensorizers.ByteTokenTensorizer]"}, {"lineNumber": 164, "col_offset": 32, "nodeName": "LSTMSequenceEncoder", "type": "Type[pytext.models.seq_models.rnn_encoder.LSTMSequenceEncoder]"}]