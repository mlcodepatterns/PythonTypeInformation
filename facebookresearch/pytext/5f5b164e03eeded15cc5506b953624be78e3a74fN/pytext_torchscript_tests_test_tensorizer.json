[{"lineNumber": 14, "col_offset": 21, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 14, "col_offset": 21, "nodeName": "unittest", "type": "module"}, {"lineNumber": 22, "col_offset": 28, "nodeName": "ScriptModule", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "vocab_lookup", "type": "pytext.torchscript.tensorizer.tensorizer.VocabLookup"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "vocab_lookup", "type": "pytext.torchscript.tensorizer.tensorizer.VocabLookup"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "bert", "type": "pytext.torchscript.tensorizer.bert.ScriptBERTTensorizer"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "roberta", "type": "pytext.torchscript.tensorizer.roberta.ScriptRoBERTaTensorizer"}, {"lineNumber": 17, "col_offset": 15, "nodeName": "ScriptVocabulary", "type": "Type[pytext.torchscript.vocab.ScriptVocabulary]"}, {"lineNumber": 22, "col_offset": 28, "nodeName": "jit", "type": "Any"}, {"lineNumber": 31, "col_offset": 43, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 34, "col_offset": 11, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "_mock_tokenizer", "type": "Callable[[], Any]"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "_mock_vocab", "type": "Callable[[], Any]"}, {"lineNumber": 36, "col_offset": 23, "nodeName": "VocabLookup", "type": "Type[pytext.torchscript.tensorizer.tensorizer.VocabLookup]"}, {"lineNumber": 36, "col_offset": 35, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "start_idxs", "type": "Any"}, {"lineNumber": 37, "col_offset": 31, "nodeName": "end_idxs", "type": "Any"}, {"lineNumber": 37, "col_offset": 42, "nodeName": "vocab_lookup", "type": "pytext.torchscript.tensorizer.tensorizer.VocabLookup"}, {"lineNumber": 37, "col_offset": 55, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 39, "col_offset": 12, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 39, "col_offset": 22, "nodeName": "token", "type": "Any"}, {"lineNumber": 39, "col_offset": 31, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 39, "col_offset": 35, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 39, "col_offset": 46, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "_", "type": "Any"}, {"lineNumber": 43, "col_offset": 11, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "_mock_tokenizer", "type": "Callable[[], Any]"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "_mock_vocab", "type": "Callable[[], Any]"}, {"lineNumber": 45, "col_offset": 23, "nodeName": "VocabLookup", "type": "Type[pytext.torchscript.tensorizer.tensorizer.VocabLookup]"}, {"lineNumber": 45, "col_offset": 35, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 46, "col_offset": 42, "nodeName": "vocab_lookup", "type": "pytext.torchscript.tensorizer.tensorizer.VocabLookup"}, {"lineNumber": 47, "col_offset": 12, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 51, "col_offset": 12, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 51, "col_offset": 22, "nodeName": "token", "type": "Any"}, {"lineNumber": 51, "col_offset": 31, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 51, "col_offset": 52, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "tokenizer", "type": "Any"}, {"lineNumber": 55, "col_offset": 19, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "_mock_tokenizer", "type": "Callable[[], Any]"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "_mock_vocab", "type": "Callable[[], Any]"}, {"lineNumber": 58, "col_offset": 15, "nodeName": "ScriptBERTTensorizer", "type": "Type[pytext.torchscript.tensorizer.bert.ScriptBERTTensorizer]"}, {"lineNumber": 58, "col_offset": 36, "nodeName": "tokenizer", "type": "Any"}, {"lineNumber": 58, "col_offset": 47, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 59, "col_offset": 19, "nodeName": "_", "type": "Any"}, {"lineNumber": 59, "col_offset": 22, "nodeName": "_", "type": "Any"}, {"lineNumber": 59, "col_offset": 25, "nodeName": "_", "type": "Any"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "numberize", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "token", "type": "Any"}, {"lineNumber": 62, "col_offset": 31, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 62, "col_offset": 52, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "tokenizer", "type": "Any"}, {"lineNumber": 66, "col_offset": 19, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 66, "col_offset": 33, "nodeName": "_mock_tokenizer", "type": "Callable[[], Any]"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "_mock_vocab", "type": "Callable[[], Any]"}, {"lineNumber": 69, "col_offset": 18, "nodeName": "ScriptRoBERTaTensorizer", "type": "Type[pytext.torchscript.tensorizer.roberta.ScriptRoBERTaTensorizer]"}, {"lineNumber": 69, "col_offset": 42, "nodeName": "tokenizer", "type": "Any"}, {"lineNumber": 69, "col_offset": 53, "nodeName": "vocab", "type": "pytext.torchscript.vocab.ScriptVocabulary"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 70, "col_offset": 19, "nodeName": "_", "type": "Any"}, {"lineNumber": 70, "col_offset": 22, "nodeName": "_", "type": "Any"}, {"lineNumber": 70, "col_offset": 25, "nodeName": "_", "type": "Any"}, {"lineNumber": 70, "col_offset": 29, "nodeName": "numberize", "type": "Any"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 12, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 73, "col_offset": 22, "nodeName": "token", "type": "Any"}, {"lineNumber": 73, "col_offset": 31, "nodeName": "zip", "type": "Callable"}, {"lineNumber": 73, "col_offset": 52, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 22, "col_offset": 28, "nodeName": "torch", "type": "Any"}, {"lineNumber": 25, "col_offset": 16, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 28, "col_offset": 23, "nodeName": "tokens", "type": "Any"}, {"lineNumber": 27, "col_offset": 45, "nodeName": "List", "type": "Any"}, {"lineNumber": 30, "col_offset": 67, "nodeName": "i", "type": "int"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "MockTokenizer", "type": "Type[Any]"}, {"lineNumber": 31, "col_offset": 29, "nodeName": "rand_tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 34, "col_offset": 25, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 35, "col_offset": 16, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 40, "col_offset": 29, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 44, "col_offset": 16, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 50, "col_offset": 25, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 51, "col_offset": 35, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 29, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 55, "col_offset": 33, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 59, "col_offset": 29, "nodeName": "bert", "type": "pytext.torchscript.tensorizer.bert.ScriptBERTTensorizer"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 60, "col_offset": 25, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 62, "col_offset": 35, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 29, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 66, "col_offset": 33, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 67, "col_offset": 16, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 70, "col_offset": 29, "nodeName": "roberta", "type": "pytext.torchscript.tensorizer.roberta.ScriptRoBERTaTensorizer"}, {"lineNumber": 71, "col_offset": 8, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 71, "col_offset": 25, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 72, "col_offset": 25, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 73, "col_offset": 35, "nodeName": "token_ids", "type": "Any"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 29, "nodeName": "token_id", "type": "Any"}, {"lineNumber": 18, "col_offset": 13, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 18, "col_offset": 17, "nodeName": "i", "type": "int"}, {"lineNumber": 18, "col_offset": 24, "nodeName": "i", "type": "int"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 25, "col_offset": 16, "nodeName": "self", "type": "Any"}, {"lineNumber": 25, "col_offset": 30, "nodeName": "Attribute", "type": "Any"}, {"lineNumber": 25, "col_offset": 50, "nodeName": "tokens", "type": "List[Tuple[str, int, int]]"}, {"lineNumber": 27, "col_offset": 37, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 28, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 30, "col_offset": 24, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 30, "col_offset": 72, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "self", "type": "TensorizerTest"}, {"lineNumber": 18, "col_offset": 29, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 23, "col_offset": 39, "nodeName": "List", "type": "Any"}, {"lineNumber": 25, "col_offset": 30, "nodeName": "jit", "type": "Any"}, {"lineNumber": 25, "col_offset": 58, "nodeName": "List", "type": "Any"}, {"lineNumber": 27, "col_offset": 50, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 30, "col_offset": 28, "nodeName": "randint", "type": "Callable[[int, int], int]"}, {"lineNumber": 40, "col_offset": 39, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 52, "col_offset": 39, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 63, "col_offset": 39, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 74, "col_offset": 39, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 24, "col_offset": 16, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 25, "col_offset": 30, "nodeName": "torch", "type": "Any"}, {"lineNumber": 30, "col_offset": 28, "nodeName": "random", "type": "module"}, {"lineNumber": 40, "col_offset": 43, "nodeName": "token", "type": "Any"}, {"lineNumber": 52, "col_offset": 43, "nodeName": "token", "type": "Any"}, {"lineNumber": 63, "col_offset": 43, "nodeName": "token", "type": "Any"}, {"lineNumber": 74, "col_offset": 43, "nodeName": "token", "type": "Any"}, {"lineNumber": 23, "col_offset": 44, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 25, "col_offset": 63, "nodeName": "Tuple", "type": "Any"}, {"lineNumber": 27, "col_offset": 56, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 27, "col_offset": 61, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 27, "col_offset": 66, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 23, "col_offset": 50, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 23, "col_offset": 55, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 23, "col_offset": 60, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 25, "col_offset": 69, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 25, "col_offset": 74, "nodeName": "int", "type": "Type[int]"}, {"lineNumber": 25, "col_offset": 79, "nodeName": "int", "type": "Type[int]"}]