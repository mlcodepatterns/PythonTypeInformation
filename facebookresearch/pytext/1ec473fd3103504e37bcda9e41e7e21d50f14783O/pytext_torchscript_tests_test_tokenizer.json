[{"lineNumber": 30, "col_offset": 14, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "test_utf8_chars", "type": "Callable[[Any], Any]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "test_simple_bpe", "type": "Callable[[Any], Any]"}, {"lineNumber": 45, "col_offset": 4, "nodeName": "test_pickle_bpe", "type": "Callable[[Any], Any]"}, {"lineNumber": 55, "col_offset": 4, "nodeName": "test_make_bytes_input", "type": "Callable[[Any], Any]"}, {"lineNumber": 13, "col_offset": 17, "nodeName": "StringIO", "type": "Type[_io.StringIO]"}, {"lineNumber": 30, "col_offset": 14, "nodeName": "unittest", "type": "module"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 13, "col_offset": 17, "nodeName": "io", "type": "module"}, {"lineNumber": 32, "col_offset": 8, "nodeName": "words", "type": "List[str]"}, {"lineNumber": 33, "col_offset": 12, "nodeName": "word", "type": "str"}, {"lineNumber": 33, "col_offset": 20, "nodeName": "words", "type": "List[str]"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "bpe", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "tokenized", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "original_bpe", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "bpe", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "tokenized", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "s1", "type": "str"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "s2", "type": "str"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "max_char_length", "type": "int"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "batch", "type": "List[List[str]]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "expected_seq_lens", "type": "List[int]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "seek", "type": "Callable[..., int]"}, {"lineNumber": 38, "col_offset": 14, "nodeName": "from_vocab_file", "type": "Any"}, {"lineNumber": 38, "col_offset": 40, "nodeName": "BPE_VOCAB_FILE", "type": "_io.StringIO"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "tokenize", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "tokenized", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "seek", "type": "Callable[..., int]"}, {"lineNumber": 47, "col_offset": 23, "nodeName": "from_vocab_file", "type": "Any"}, {"lineNumber": 47, "col_offset": 49, "nodeName": "BPE_VOCAB_FILE", "type": "_io.StringIO"}, {"lineNumber": 48, "col_offset": 14, "nodeName": "loads", "type": "Callable[[str], Any]"}, {"lineNumber": 49, "col_offset": 20, "nodeName": "tokenize", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "tokenized", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "bytes", "type": "Any"}, {"lineNumber": 61, "col_offset": 15, "nodeName": "seq_lens", "type": "Any"}, {"lineNumber": 61, "col_offset": 26, "nodeName": "make_byte_inputs", "type": "Any"}, {"lineNumber": 61, "col_offset": 43, "nodeName": "batch", "type": "List[List[str]]"}, {"lineNumber": 61, "col_offset": 50, "nodeName": "max_char_length", "type": "int"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 84, "col_offset": 30, "nodeName": "bytes", "type": "Any"}, {"lineNumber": 84, "col_offset": 37, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "assertIsInstance", "type": "Callable[..., None]"}, {"lineNumber": 85, "col_offset": 30, "nodeName": "seq_lens", "type": "Any"}, {"lineNumber": 85, "col_offset": 40, "nodeName": "LongTensor", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 86, "col_offset": 41, "nodeName": "expected_bytes", "type": "List[List[List[Union[str, int]]]]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 87, "col_offset": 44, "nodeName": "expected_seq_lens", "type": "List[int]"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "BPE_VOCAB_FILE", "type": "_io.StringIO"}, {"lineNumber": 38, "col_offset": 14, "nodeName": "ScriptBPE", "type": "Any"}, {"lineNumber": 39, "col_offset": 20, "nodeName": "bpe", "type": "Any"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "BPE_VOCAB_FILE", "type": "_io.StringIO"}, {"lineNumber": 47, "col_offset": 23, "nodeName": "ScriptBPE", "type": "Any"}, {"lineNumber": 48, "col_offset": 14, "nodeName": "pickle", "type": "module"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "dumps", "type": "Callable[..., str]"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "original_bpe", "type": "Any"}, {"lineNumber": 49, "col_offset": 20, "nodeName": "bpe", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 60, "col_offset": 17, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "split", "type": "Callable[..., List[str]]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 84, "col_offset": 37, "nodeName": "torch", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 85, "col_offset": 40, "nodeName": "torch", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 87, "col_offset": 25, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "self", "type": "BPETest"}, {"lineNumber": 34, "col_offset": 29, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 34, "col_offset": 34, "nodeName": "word", "type": "str"}, {"lineNumber": 34, "col_offset": 41, "nodeName": "utf8_chars", "type": "Any"}, {"lineNumber": 34, "col_offset": 52, "nodeName": "word", "type": "str"}, {"lineNumber": 48, "col_offset": 27, "nodeName": "pickle", "type": "module"}, {"lineNumber": 60, "col_offset": 17, "nodeName": "s1", "type": "str"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "s2", "type": "str"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 68, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 69, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 70, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 72, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 75, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 76, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 77, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 78, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 79, "col_offset": 16, "nodeName": "to_bytes", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 86, "col_offset": 25, "nodeName": "bytes", "type": "Any"}, {"lineNumber": 87, "col_offset": 25, "nodeName": "seq_lens", "type": "Any"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "encode", "type": "Callable[..., str]"}, {"lineNumber": 64, "col_offset": 48, "nodeName": "pad_to", "type": "int"}, {"lineNumber": 64, "col_offset": 24, "nodeName": "word", "type": "str"}, {"lineNumber": 64, "col_offset": 57, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 64, "col_offset": 61, "nodeName": "word", "type": "str"}]