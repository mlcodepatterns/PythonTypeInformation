[{"lineNumber": 92, "col_offset": 0, "nodeName": "launch_and_train", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 118, "col_offset": 0, "nodeName": "setup_args", "type": "Callable[[], Any]"}, {"lineNumber": 125, "col_offset": 0, "nodeName": "main", "type": "Callable[[], Any]"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "opt", "type": "Any"}, {"lineNumber": 51, "col_offset": 4, "nodeName": "rank", "type": "int"}, {"lineNumber": 52, "col_offset": 18, "nodeName": "rank", "type": "int"}, {"lineNumber": 56, "col_offset": 17, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "suppress_output", "type": "bool"}, {"lineNumber": 119, "col_offset": 4, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 122, "col_offset": 11, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 126, "col_offset": 4, "nodeName": "opt", "type": "Any"}, {"lineNumber": 127, "col_offset": 4, "nodeName": "port", "type": "int"}, {"lineNumber": 131, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 48, "col_offset": 10, "nodeName": "deepcopy", "type": "Callable"}, {"lineNumber": 48, "col_offset": 24, "nodeName": "opt", "type": "Any"}, {"lineNumber": 51, "col_offset": 11, "nodeName": "rank", "type": "int"}, {"lineNumber": 51, "col_offset": 18, "nodeName": "rank_offset", "type": "int"}, {"lineNumber": 52, "col_offset": 4, "nodeName": "opt", "type": "Any"}, {"lineNumber": 53, "col_offset": 7, "nodeName": "gpu", "type": "None"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "gpu", "type": "Any"}, {"lineNumber": 56, "col_offset": 4, "nodeName": "opt", "type": "Any"}, {"lineNumber": 58, "col_offset": 25, "nodeName": "opt", "type": "Any"}, {"lineNumber": 64, "col_offset": 8, "nodeName": "print_prefix", "type": "str"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "print_prefix", "type": "None"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "spawn", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "multiprocess_train", "type": "Callable[..., Any]"}, {"lineNumber": 107, "col_offset": 8, "nodeName": "retval", "type": "Tuple[Any, Any]"}, {"lineNumber": 109, "col_offset": 15, "nodeName": "retval", "type": "Tuple[Any, Any]"}, {"lineNumber": 119, "col_offset": 13, "nodeName": "setup_args", "type": "Callable[..., parlai.core.params.ParlaiParser]"}, {"lineNumber": 120, "col_offset": 4, "nodeName": "add_distributed_training_args", "type": "Callable[[], Any]"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "set_defaults", "type": "Callable[..., None]"}, {"lineNumber": 126, "col_offset": 10, "nodeName": "parse_args", "type": "Callable[..., Any]"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "randint", "type": "Callable[[int, int], int]"}, {"lineNumber": 128, "col_offset": 11, "nodeName": "launch_and_train", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 128, "col_offset": 28, "nodeName": "opt", "type": "Any"}, {"lineNumber": 128, "col_offset": 33, "nodeName": "port", "type": "int"}, {"lineNumber": 132, "col_offset": 4, "nodeName": "main", "type": "Callable[[], Any]"}, {"lineNumber": 48, "col_offset": 10, "nodeName": "copy", "type": "module"}, {"lineNumber": 55, "col_offset": 14, "nodeName": "rank", "type": "int"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "opt", "type": "Any"}, {"lineNumber": 60, "col_offset": 4, "nodeName": "opt", "type": "Any"}, {"lineNumber": 63, "col_offset": 7, "nodeName": "get", "type": "Any"}, {"lineNumber": 63, "col_offset": 29, "nodeName": "rank", "type": "int"}, {"lineNumber": 64, "col_offset": 23, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 64, "col_offset": 45, "nodeName": "rank", "type": "int"}, {"lineNumber": 67, "col_offset": 49, "nodeName": "rank", "type": "int"}, {"lineNumber": 69, "col_offset": 9, "nodeName": "override_print", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 69, "col_offset": 42, "nodeName": "suppress_output", "type": "bool"}, {"lineNumber": 69, "col_offset": 59, "nodeName": "print_prefix", "type": "Optional[str]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "init_process_group", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "info", "type": "Callable[[Any], None]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "init", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "manual_seed", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "sync_object", "type": "Callable[..., Any]"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "train", "type": "Callable[[], Tuple[Any, Any]]"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "multiprocessing", "type": "Any"}, {"lineNumber": 101, "col_offset": 9, "nodeName": "opt", "type": "Any"}, {"lineNumber": 101, "col_offset": 14, "nodeName": "port", "type": "int"}, {"lineNumber": 107, "col_offset": 17, "nodeName": "multiprocess_train", "type": "Callable[..., Any]"}, {"lineNumber": 107, "col_offset": 39, "nodeName": "opt", "type": "Any"}, {"lineNumber": 107, "col_offset": 44, "nodeName": "port", "type": "int"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "join", "type": "Any"}, {"lineNumber": 119, "col_offset": 13, "nodeName": "single_train", "type": "module"}, {"lineNumber": 120, "col_offset": 4, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 127, "col_offset": 11, "nodeName": "random", "type": "module"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "device_count", "type": "Any"}, {"lineNumber": 63, "col_offset": 7, "nodeName": "opt", "type": "Any"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "get", "type": "Any"}, {"lineNumber": 69, "col_offset": 9, "nodeName": "distributed_utils", "type": "module"}, {"lineNumber": 71, "col_offset": 11, "nodeName": "opt", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "set_device", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "dist", "type": "Any"}, {"lineNumber": 77, "col_offset": 17, "nodeName": "rank", "type": "int"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "logging", "type": "module"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "torch", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "distributed_utils", "type": "module"}, {"lineNumber": 97, "col_offset": 19, "nodeName": "torch", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "spawncontext", "type": "Any"}, {"lineNumber": 121, "col_offset": 47, "nodeName": "device_count", "type": "Any"}, {"lineNumber": 126, "col_offset": 10, "nodeName": "setup_args", "type": "Callable[[], Any]"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 67, "col_offset": 26, "nodeName": "opt", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 72, "col_offset": 34, "nodeName": "opt", "type": "Any"}, {"lineNumber": 75, "col_offset": 24, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 75, "col_offset": 45, "nodeName": "hostname", "type": "str"}, {"lineNumber": 75, "col_offset": 55, "nodeName": "port", "type": "int"}, {"lineNumber": 76, "col_offset": 23, "nodeName": "opt", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "torch", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "TrainLoop", "type": "Type[parlai.scripts.train_model.TrainLoop]"}, {"lineNumber": 89, "col_offset": 38, "nodeName": "opt", "type": "Any"}, {"lineNumber": 102, "col_offset": 15, "nodeName": "opt", "type": "Any"}, {"lineNumber": 121, "col_offset": 47, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 55, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 72, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "single_train", "type": "module"}, {"lineNumber": 121, "col_offset": 47, "nodeName": "torch", "type": "Any"}]