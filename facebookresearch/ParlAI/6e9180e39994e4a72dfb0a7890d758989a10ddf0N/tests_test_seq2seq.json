[{"lineNumber": 10, "col_offset": 0, "nodeName": "BATCH_SIZE", "type": "int"}, {"lineNumber": 11, "col_offset": 0, "nodeName": "NUM_EPOCHS", "type": "int"}, {"lineNumber": 12, "col_offset": 0, "nodeName": "LR", "type": "int"}, {"lineNumber": 15, "col_offset": 18, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 115, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 15, "col_offset": 18, "nodeName": "unittest", "type": "module"}, {"lineNumber": 115, "col_offset": 25, "nodeName": "unittest", "type": "module"}, {"lineNumber": 148, "col_offset": 33, "nodeName": "unittest", "type": "module"}, {"lineNumber": 187, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 22, "col_offset": 30, "nodeName": "train_model", "type": "Callable[[Any], Tuple[Any, Any, Any]]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 49, "col_offset": 30, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, None, None]]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 30, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, None, None]]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "train_model", "type": "Callable[[Any], Tuple[Any, Any, Any]]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 111, "col_offset": 33, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "assertIn", "type": "Callable[..., None]"}, {"lineNumber": 112, "col_offset": 32, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 121, "col_offset": 30, "nodeName": "train_model", "type": "Callable[[Any], Tuple[Any, Any, Any]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "assertTrue", "type": "Any"}, {"lineNumber": 154, "col_offset": 30, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, None, None]]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "assertLessEqual", "type": "Callable[..., None]"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "assertGreaterEqual", "type": "Callable[..., None]"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "assertGreaterEqual", "type": "Callable[..., None]"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "assertLessEqual", "type": "Callable[..., None]"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "assertGreaterEqual", "type": "Callable[..., None]"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "assertGreaterEqual", "type": "Callable[..., None]"}, {"lineNumber": 188, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 22, "col_offset": 30, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 23, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 42, "col_offset": 12, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 42, "col_offset": 57, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 49, "col_offset": 30, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "TestSeq2Seq"}, {"lineNumber": 63, "col_offset": 32, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 63, "col_offset": 80, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "self", "type": "TestSeq2Seq"}, {"lineNumber": 66, "col_offset": 31, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 66, "col_offset": 77, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 73, "col_offset": 30, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 74, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "self", "type": "TestSeq2Seq"}, {"lineNumber": 86, "col_offset": 12, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 86, "col_offset": 70, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "TestSeq2Seq"}, {"lineNumber": 90, "col_offset": 12, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 90, "col_offset": 68, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 97, "col_offset": 23, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 98, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "self", "type": "TestSeq2Seq"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "self", "type": "TestSeq2Seq"}, {"lineNumber": 121, "col_offset": 30, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 122, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 141, "col_offset": 32, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 141, "col_offset": 80, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 144, "col_offset": 31, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 144, "col_offset": 77, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 154, "col_offset": 30, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "dict", "type": "Type[Dict[Any, Any]]"}, {"lineNumber": 163, "col_offset": 8, "nodeName": "self", "type": "TestBackwardsCompatibility"}, {"lineNumber": 164, "col_offset": 12, "nodeName": "valid", "type": "None"}, {"lineNumber": 164, "col_offset": 32, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 164, "col_offset": 80, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 166, "col_offset": 8, "nodeName": "self", "type": "TestBackwardsCompatibility"}, {"lineNumber": 167, "col_offset": 12, "nodeName": "valid", "type": "None"}, {"lineNumber": 169, "col_offset": 12, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 169, "col_offset": 70, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 171, "col_offset": 8, "nodeName": "self", "type": "TestBackwardsCompatibility"}, {"lineNumber": 172, "col_offset": 12, "nodeName": "valid", "type": "None"}, {"lineNumber": 172, "col_offset": 32, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 172, "col_offset": 78, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 174, "col_offset": 8, "nodeName": "self", "type": "TestBackwardsCompatibility"}, {"lineNumber": 175, "col_offset": 12, "nodeName": "test", "type": "None"}, {"lineNumber": 175, "col_offset": 31, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 175, "col_offset": 77, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 177, "col_offset": 8, "nodeName": "self", "type": "TestBackwardsCompatibility"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "test", "type": "None"}, {"lineNumber": 180, "col_offset": 12, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 180, "col_offset": 68, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 182, "col_offset": 8, "nodeName": "self", "type": "TestBackwardsCompatibility"}, {"lineNumber": 183, "col_offset": 12, "nodeName": "test", "type": "None"}, {"lineNumber": 183, "col_offset": 31, "nodeName": "format", "type": "Callable[..., str]"}, {"lineNumber": 183, "col_offset": 75, "nodeName": "stdout", "type": "Any"}, {"lineNumber": 26, "col_offset": 29, "nodeName": "LR", "type": "int"}, {"lineNumber": 27, "col_offset": 26, "nodeName": "BATCH_SIZE", "type": "int"}, {"lineNumber": 28, "col_offset": 27, "nodeName": "NUM_EPOCHS", "type": "int"}, {"lineNumber": 41, "col_offset": 12, "nodeName": "valid", "type": "Any"}, {"lineNumber": 42, "col_offset": 43, "nodeName": "valid", "type": "Any"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "valid", "type": "None"}, {"lineNumber": 63, "col_offset": 66, "nodeName": "valid", "type": "None"}, {"lineNumber": 66, "col_offset": 12, "nodeName": "test", "type": "None"}, {"lineNumber": 66, "col_offset": 64, "nodeName": "test", "type": "None"}, {"lineNumber": 85, "col_offset": 12, "nodeName": "valid", "type": "None"}, {"lineNumber": 86, "col_offset": 51, "nodeName": "valid", "type": "None"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "test", "type": "None"}, {"lineNumber": 90, "col_offset": 50, "nodeName": "test", "type": "None"}, {"lineNumber": 101, "col_offset": 29, "nodeName": "LR", "type": "int"}, {"lineNumber": 125, "col_offset": 29, "nodeName": "LR", "type": "int"}, {"lineNumber": 126, "col_offset": 26, "nodeName": "BATCH_SIZE", "type": "int"}, {"lineNumber": 141, "col_offset": 12, "nodeName": "valid", "type": "Any"}, {"lineNumber": 141, "col_offset": 66, "nodeName": "valid", "type": "Any"}, {"lineNumber": 144, "col_offset": 12, "nodeName": "test", "type": "Any"}, {"lineNumber": 144, "col_offset": 64, "nodeName": "test", "type": "Any"}, {"lineNumber": 164, "col_offset": 66, "nodeName": "valid", "type": "None"}, {"lineNumber": 169, "col_offset": 51, "nodeName": "valid", "type": "None"}, {"lineNumber": 172, "col_offset": 65, "nodeName": "valid", "type": "None"}, {"lineNumber": 175, "col_offset": 64, "nodeName": "test", "type": "None"}, {"lineNumber": 180, "col_offset": 50, "nodeName": "test", "type": "None"}, {"lineNumber": 183, "col_offset": 63, "nodeName": "test", "type": "None"}, {"lineNumber": 127, "col_offset": 27, "nodeName": "NUM_EPOCHS", "type": "int"}]