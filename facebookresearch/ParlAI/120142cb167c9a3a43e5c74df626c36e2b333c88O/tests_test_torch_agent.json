[{"lineNumber": 14, "col_offset": 15, "nodeName": "object", "type": "Type[object]"}, {"lineNumber": 34, "col_offset": 21, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 15, "col_offset": 4, "nodeName": "null_token", "type": "str"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "NULL_IDX", "type": "int"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "start_token", "type": "str"}, {"lineNumber": 18, "col_offset": 4, "nodeName": "START_IDX", "type": "int"}, {"lineNumber": 19, "col_offset": 4, "nodeName": "end_token", "type": "str"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "END_IDX", "type": "int"}, {"lineNumber": 34, "col_offset": 21, "nodeName": "unittest", "type": "module"}, {"lineNumber": 164, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 29, "col_offset": 15, "nodeName": "key", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "shared", "type": "Dict[str, Union[MockDict, Dict[str, Union[bool, int, str]]]]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 51, "col_offset": 8, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "shared", "type": "Dict[str, Union[MockDict, Dict[str, Union[bool, int, str]]]]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "vec_observations", "type": "List[Union[Dict[nothing, nothing], Dict[str, Union[List[str], str]]]]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "mapped_valid", "type": "Any"}, {"lineNumber": 95, "col_offset": 52, "nodeName": "mapped_valid", "type": "Any"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "vec_observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "mapped_valid", "type": "Any"}, {"lineNumber": 120, "col_offset": 52, "nodeName": "mapped_valid", "type": "Any"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "predictions", "type": "List[str]"}, {"lineNumber": 127, "col_offset": 8, "nodeName": "expected_unmapped", "type": "List[Optional[str]]"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 137, "col_offset": 8, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "shared", "type": "Dict[str, Union[MockDict, Dict[str, Union[bool, int, str]]]]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 165, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 23, "col_offset": 11, "nodeName": "key", "type": "Any"}, {"lineNumber": 23, "col_offset": 18, "nodeName": "null_token", "type": "str"}, {"lineNumber": 24, "col_offset": 19, "nodeName": "NULL_IDX", "type": "int"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 40, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 43, "col_offset": 15, "nodeName": "MockDict", "type": "Type[MockDict]"}, {"lineNumber": 45, "col_offset": 25, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 45, "col_offset": 38, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 46, "col_offset": 16, "nodeName": "TorchAgent", "type": "Type[parlai.core.torch_agent.TorchAgent]"}, {"lineNumber": 46, "col_offset": 27, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 46, "col_offset": 32, "nodeName": "shared", "type": "Dict[str, Union[MockDict, Dict[str, Union[bool, int, str]]]]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 51, "col_offset": 18, "nodeName": "vectorize", "type": "Callable"}, {"lineNumber": 51, "col_offset": 34, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 65, "col_offset": 18, "nodeName": "vectorize", "type": "Callable"}, {"lineNumber": 65, "col_offset": 34, "nodeName": "observation", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 86, "col_offset": 15, "nodeName": "MockDict", "type": "Type[MockDict]"}, {"lineNumber": 88, "col_offset": 25, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 88, "col_offset": 38, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 89, "col_offset": 16, "nodeName": "TorchAgent", "type": "Type[parlai.core.torch_agent.TorchAgent]"}, {"lineNumber": 89, "col_offset": 27, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 89, "col_offset": 32, "nodeName": "shared", "type": "Dict[str, Union[MockDict, Dict[str, Union[bool, int, str]]]]"}, {"lineNumber": 93, "col_offset": 23, "nodeName": "map_valid", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 39, "nodeName": "vec_observations", "type": "List[Union[Dict[nothing, nothing], Dict[str, Union[List[str], str]]]]"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "text_vecs", "type": "Any"}, {"lineNumber": 95, "col_offset": 19, "nodeName": "label_vecs", "type": "Any"}, {"lineNumber": 95, "col_offset": 31, "nodeName": "labels", "type": "Any"}, {"lineNumber": 95, "col_offset": 39, "nodeName": "valid_inds", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "append", "type": "Callable"}, {"lineNumber": 118, "col_offset": 23, "nodeName": "map_valid", "type": "Callable[..., Any]"}, {"lineNumber": 118, "col_offset": 39, "nodeName": "vec_observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "text_vecs", "type": "Any"}, {"lineNumber": 120, "col_offset": 19, "nodeName": "label_vecs", "type": "Any"}, {"lineNumber": 120, "col_offset": 31, "nodeName": "labels", "type": "Any"}, {"lineNumber": 120, "col_offset": 39, "nodeName": "valid_inds", "type": "Any"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 133, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 137, "col_offset": 15, "nodeName": "MockDict", "type": "Type[MockDict]"}, {"lineNumber": 139, "col_offset": 25, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 139, "col_offset": 38, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 140, "col_offset": 16, "nodeName": "TorchAgent", "type": "Type[parlai.core.torch_agent.TorchAgent]"}, {"lineNumber": 140, "col_offset": 27, "nodeName": "opt", "type": "Dict[str, Union[bool, int, str]]"}, {"lineNumber": 140, "col_offset": 32, "nodeName": "shared", "type": "Dict[str, Union[MockDict, Dict[str, Union[bool, int, str]]]]"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "maintain_dialog_history", "type": "Callable[..., collections.deque[Any]]"}, {"lineNumber": 146, "col_offset": 38, "nodeName": "observation", "type": "Dict[str, Union[bool, List[str], str, collections.deque[Any]]]"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 158, "col_offset": 8, "nodeName": "observation", "type": "Dict[str, Union[bool, List[str], str, collections.deque[Any]]]"}, {"lineNumber": 158, "col_offset": 34, "nodeName": "maintain_dialog_history", "type": "Callable[..., collections.deque[Any]]"}, {"lineNumber": 158, "col_offset": 64, "nodeName": "observation", "type": "Dict[str, Union[bool, List[str], str, collections.deque[Any]]]"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 165, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 23, "col_offset": 18, "nodeName": "self", "type": "MockDict"}, {"lineNumber": 24, "col_offset": 19, "nodeName": "self", "type": "MockDict"}, {"lineNumber": 25, "col_offset": 13, "nodeName": "key", "type": "Any"}, {"lineNumber": 25, "col_offset": 20, "nodeName": "start_token", "type": "str"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "START_IDX", "type": "int"}, {"lineNumber": 51, "col_offset": 18, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 52, "col_offset": 38, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 56, "col_offset": 40, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 65, "col_offset": 18, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 67, "col_offset": 45, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 91, "col_offset": 28, "nodeName": "vectorize", "type": "Callable"}, {"lineNumber": 91, "col_offset": 44, "nodeName": "obs", "type": "Union[Dict[nothing, nothing], Dict[str, Union[List[str], str]]]"}, {"lineNumber": 91, "col_offset": 53, "nodeName": "obs", "type": "Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]"}, {"lineNumber": 91, "col_offset": 60, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 93, "col_offset": 23, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 97, "col_offset": 24, "nodeName": "text_vecs", "type": "Any"}, {"lineNumber": 98, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 100, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 100, "col_offset": 24, "nodeName": "label_vecs", "type": "Any"}, {"lineNumber": 101, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 103, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 103, "col_offset": 24, "nodeName": "labels", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 105, "col_offset": 24, "nodeName": "valid_inds", "type": "Any"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 110, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 116, "col_offset": 28, "nodeName": "vectorize", "type": "Callable"}, {"lineNumber": 116, "col_offset": 44, "nodeName": "obs", "type": "Union[Dict[nothing, nothing], Dict[str, Union[List[str], str]]]"}, {"lineNumber": 116, "col_offset": 53, "nodeName": "obs", "type": "Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]"}, {"lineNumber": 116, "col_offset": 60, "nodeName": "observations", "type": "List[Union[Dict[str, Union[List[str], str]], Dict[nothing, nothing]]]"}, {"lineNumber": 118, "col_offset": 23, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 122, "col_offset": 24, "nodeName": "label_vecs", "type": "Any"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 128, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 128, "col_offset": 73, "nodeName": "expected_unmapped", "type": "List[Optional[str]]"}, {"lineNumber": 146, "col_offset": 8, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 148, "col_offset": 36, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 149, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 149, "col_offset": 42, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 150, "col_offset": 36, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 153, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 155, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 158, "col_offset": 34, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 159, "col_offset": 8, "nodeName": "self", "type": "TestTorchAgent"}, {"lineNumber": 25, "col_offset": 20, "nodeName": "self", "type": "MockDict"}, {"lineNumber": 26, "col_offset": 19, "nodeName": "self", "type": "MockDict"}, {"lineNumber": 27, "col_offset": 13, "nodeName": "key", "type": "Any"}, {"lineNumber": 27, "col_offset": 20, "nodeName": "end_token", "type": "str"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "END_IDX", "type": "int"}, {"lineNumber": 54, "col_offset": 24, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 58, "col_offset": 24, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 58, "col_offset": 79, "nodeName": "END_IDX", "type": "int"}, {"lineNumber": 69, "col_offset": 24, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 69, "col_offset": 84, "nodeName": "END_IDX", "type": "int"}, {"lineNumber": 91, "col_offset": 28, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 98, "col_offset": 24, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 101, "col_offset": 24, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 116, "col_offset": 28, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "tolist", "type": "Any"}, {"lineNumber": 128, "col_offset": 24, "nodeName": "unmap_valid", "type": "Callable[[Any, Any, Any], List[Any]]"}, {"lineNumber": 128, "col_offset": 42, "nodeName": "predictions", "type": "List[str]"}, {"lineNumber": 128, "col_offset": 55, "nodeName": "valid_inds", "type": "Any"}, {"lineNumber": 148, "col_offset": 36, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 149, "col_offset": 42, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 150, "col_offset": 36, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 151, "col_offset": 24, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 153, "col_offset": 28, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 155, "col_offset": 24, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 155, "col_offset": 51, "nodeName": "observation", "type": "Dict[str, Union[bool, List[str], str, collections.deque[Any]]]"}, {"lineNumber": 159, "col_offset": 24, "nodeName": "list", "type": "Type[List[Any]]"}, {"lineNumber": 27, "col_offset": 20, "nodeName": "self", "type": "MockDict"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "self", "type": "MockDict"}, {"lineNumber": 58, "col_offset": 79, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 69, "col_offset": 84, "nodeName": "dict", "type": "MockDict"}, {"lineNumber": 128, "col_offset": 24, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 151, "col_offset": 29, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 153, "col_offset": 28, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 155, "col_offset": 24, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 159, "col_offset": 29, "nodeName": "history", "type": "Dict[str, Any]"}, {"lineNumber": 54, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 58, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 69, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 98, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 101, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "numpy", "type": "Any"}, {"lineNumber": 151, "col_offset": 29, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 159, "col_offset": 29, "nodeName": "agent", "type": "parlai.core.torch_agent.TorchAgent"}, {"lineNumber": 98, "col_offset": 24, "nodeName": "text_vecs", "type": "Any"}, {"lineNumber": 101, "col_offset": 24, "nodeName": "label_vecs", "type": "Any"}, {"lineNumber": 123, "col_offset": 24, "nodeName": "label_vecs", "type": "Any"}, {"lineNumber": 54, "col_offset": 24, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 58, "col_offset": 24, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}, {"lineNumber": 69, "col_offset": 24, "nodeName": "obs_vec", "type": "Dict[str, Union[str, List[str]]]"}]