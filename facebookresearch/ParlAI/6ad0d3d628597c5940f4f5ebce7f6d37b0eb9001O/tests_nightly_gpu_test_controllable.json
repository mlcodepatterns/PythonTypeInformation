[{"lineNumber": 17, "col_offset": 0, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 18, "col_offset": 0, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 19, "col_offset": 0, "nodeName": "NO_REPETITION", "type": "str"}, {"lineNumber": 23, "col_offset": 31, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 18, "col_offset": 22, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 23, "col_offset": 31, "nodeName": "unittest", "type": "module"}, {"lineNumber": 262, "col_offset": 3, "nodeName": "__name__", "type": "str"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 98, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 123, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 150, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 177, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 203, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 228, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 254, "col_offset": 11, "nodeName": "FAST_MODE", "type": "bool"}, {"lineNumber": 263, "col_offset": 4, "nodeName": "main", "type": "Callable[..., unittest.TestProgram]"}, {"lineNumber": 28, "col_offset": 40, "nodeName": "display_data", "type": "Callable[[Any], Tuple[Any, Any, Any]]"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 33, "col_offset": 38, "nodeName": "train_output", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 37, "col_offset": 12, "nodeName": "train_output", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 39, "col_offset": 41, "nodeName": "train_output", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 42, "col_offset": 54, "nodeName": "valid_output", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 43, "col_offset": 38, "nodeName": "valid_output", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assertIn", "type": "Any"}, {"lineNumber": 44, "col_offset": 39, "nodeName": "valid_output", "type": "Any"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "setup_args", "type": "Callable[[], parlai.core.params.ParlaiParser]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "set_params", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 12, "nodeName": "opt", "type": "Any"}, {"lineNumber": 69, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 86, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 109, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 134, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 161, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 188, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 214, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 239, "col_offset": 22, "nodeName": "eval_model", "type": "Callable[..., Tuple[Any, Any, Any]]"}, {"lineNumber": 263, "col_offset": 4, "nodeName": "unittest", "type": "module"}, {"lineNumber": 28, "col_offset": 40, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 33, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 52, "col_offset": 17, "nodeName": "tcs2s", "type": "module"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 61, "col_offset": 13, "nodeName": "capture_output", "type": "Callable[..., contextlib._GeneratorContextManager[Any]]"}, {"lineNumber": 62, "col_offset": 18, "nodeName": "parse_args", "type": "Callable[..., Any]"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "train", "type": "Callable[[], Tuple[Any, Any]]"}, {"lineNumber": 69, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 79, "col_offset": 31, "nodeName": "valid", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 80, "col_offset": 31, "nodeName": "valid", "type": "Any"}, {"lineNumber": 86, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 93, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 109, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 117, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 118, "col_offset": 37, "nodeName": "NO_REPETITION", "type": "str"}, {"lineNumber": 124, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 134, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 143, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 144, "col_offset": 37, "nodeName": "NO_REPETITION", "type": "str"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 161, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 169, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 181, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 182, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 188, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 196, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 197, "col_offset": 37, "nodeName": "NO_REPETITION", "type": "str"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 205, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 208, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 214, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 222, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 230, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 239, "col_offset": 22, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 247, "col_offset": 32, "nodeName": "NUM_EXAMPLES", "type": "int"}, {"lineNumber": 255, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "assertAlmostEqual", "type": "Any"}, {"lineNumber": 61, "col_offset": 13, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 62, "col_offset": 18, "nodeName": "parser", "type": "parlai.core.params.ParlaiParser"}, {"lineNumber": 99, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 99, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 100, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 100, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 102, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 102, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 103, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 103, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 124, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 124, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 125, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 127, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 127, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 128, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 128, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 151, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 151, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 152, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 152, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 154, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 154, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 155, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 155, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 178, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 178, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 179, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 179, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 181, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 181, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 182, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 182, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 204, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 204, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 205, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 205, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 207, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 207, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 208, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 208, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 223, "col_offset": 37, "nodeName": "NO_REPETITION", "type": "str"}, {"lineNumber": 229, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 229, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 230, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 230, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 232, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 232, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 233, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 233, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 248, "col_offset": 37, "nodeName": "NO_REPETITION", "type": "str"}, {"lineNumber": 255, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 255, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 256, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 256, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 258, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 258, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 259, "col_offset": 12, "nodeName": "self", "type": "Any"}, {"lineNumber": 259, "col_offset": 35, "nodeName": "valid", "type": "Any"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "TrainLoop", "type": "Type[parlai.scripts.train_model.TrainLoop]"}, {"lineNumber": 63, "col_offset": 28, "nodeName": "opt", "type": "Any"}, {"lineNumber": 63, "col_offset": 12, "nodeName": "tcs2s", "type": "module"}]