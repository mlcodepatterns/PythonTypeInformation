[{"lineNumber": 13, "col_offset": 23, "nodeName": "TestCase", "type": "Type[unittest.case.TestCase]"}, {"lineNumber": 13, "col_offset": 23, "nodeName": "unittest", "type": "module"}, {"lineNumber": 15, "col_offset": 33, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 24, "col_offset": 12, "nodeName": "step", "type": "int"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 40, "col_offset": 15, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 43, "col_offset": 33, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "p", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 52, "col_offset": 12, "nodeName": "step", "type": "int"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "optimizer2", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 16, "col_offset": 33, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 18, "col_offset": 12, "nodeName": "Parameter", "type": "Any"}, {"lineNumber": 19, "col_offset": 20, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 20, "col_offset": 20, "nodeName": "lr_scheduler_factory", "type": "Callable[..., Optional[Union[parlai.nn.lr_scheduler.CosineLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler]]]"}, {"lineNumber": 21, "col_offset": 12, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 21, "col_offset": 18, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 24, "col_offset": 20, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 24, "col_offset": 26, "nodeName": "total_steps", "type": "Any"}, {"lineNumber": 27, "col_offset": 12, "nodeName": "step", "type": "int"}, {"lineNumber": 27, "col_offset": 18, "nodeName": "o", "type": "Any"}, {"lineNumber": 27, "col_offset": 23, "nodeName": "enumerate", "type": "Type[enumerate[Any]]"}, {"lineNumber": 27, "col_offset": 33, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "get", "type": "Callable"}, {"lineNumber": 31, "col_offset": 11, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 36, "col_offset": 16, "nodeName": "step", "type": "int"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 44, "col_offset": 33, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "Parameter", "type": "Any"}, {"lineNumber": 47, "col_offset": 20, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "lr_scheduler_factory", "type": "Callable[..., Optional[Union[parlai.nn.lr_scheduler.CosineLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler]]]"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 49, "col_offset": 18, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 52, "col_offset": 20, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 52, "col_offset": 26, "nodeName": "total_steps", "type": "Any"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "p", "type": "Any"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "optimizer2", "type": "Any"}, {"lineNumber": 64, "col_offset": 72, "nodeName": "step", "type": "int"}, {"lineNumber": 68, "col_offset": 39, "nodeName": "step", "type": "int"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "lr_scheduler_factory", "type": "Callable[..., Optional[Union[parlai.nn.lr_scheduler.CosineLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler]]]"}, {"lineNumber": 75, "col_offset": 12, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 75, "col_offset": 18, "nodeName": "optimizer2", "type": "Any"}, {"lineNumber": 75, "col_offset": 30, "nodeName": "sd", "type": "Dict[str, Any]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "assertAlmostEquals", "type": "Callable[..., None]"}, {"lineNumber": 102, "col_offset": 16, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "all", "type": "Callable[[Any], bool]"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "_run_resume", "type": "Callable[..., Any]"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "_run_resume", "type": "Callable[..., Any]"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "_run_resume", "type": "Callable[..., Any]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "_run_resume", "type": "Callable[..., Any]"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "_run_resume", "type": "Callable[..., Any]"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "_run_resume", "type": "Callable[..., Any]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "train_model", "type": "Callable[[parlai.core.opt.Opt], Tuple[Dict[str, Any], Dict[str, Any]]]"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "_run_end2end", "type": "Callable[..., Any]"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "_run_end2end", "type": "Callable[..., Any]"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "_run_end2end", "type": "Callable[..., Any]"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "_run_end2end", "type": "Callable[..., Any]"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "_run_end2end", "type": "Callable[..., Any]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "_run_end2end", "type": "Callable[..., Any]"}, {"lineNumber": 17, "col_offset": 12, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 17, "col_offset": 35, "nodeName": "total_steps", "type": "Any"}, {"lineNumber": 17, "col_offset": 49, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 18, "col_offset": 12, "nodeName": "nn", "type": "Any"}, {"lineNumber": 18, "col_offset": 31, "nodeName": "randn", "type": "Any"}, {"lineNumber": 19, "col_offset": 20, "nodeName": "optim", "type": "Any"}, {"lineNumber": 19, "col_offset": 37, "nodeName": "p", "type": "Any"}, {"lineNumber": 19, "col_offset": 44, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 20, "col_offset": 20, "nodeName": "ParlAILRScheduler", "type": "Type[parlai.nn.lr_scheduler.ParlAILRScheduler]"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "step", "type": "Callable[[Any], None]"}, {"lineNumber": 25, "col_offset": 27, "nodeName": "step", "type": "int"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "append", "type": "Callable"}, {"lineNumber": 28, "col_offset": 19, "nodeName": "o", "type": "Any"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 32, "col_offset": 49, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 36, "col_offset": 24, "nodeName": "range", "type": "Type[range]"}, {"lineNumber": 45, "col_offset": 12, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 45, "col_offset": 35, "nodeName": "total_steps", "type": "Any"}, {"lineNumber": 45, "col_offset": 49, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "nn", "type": "Any"}, {"lineNumber": 46, "col_offset": 31, "nodeName": "randn", "type": "Any"}, {"lineNumber": 47, "col_offset": 20, "nodeName": "optim", "type": "Any"}, {"lineNumber": 47, "col_offset": 37, "nodeName": "p", "type": "Any"}, {"lineNumber": 47, "col_offset": 44, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "ParlAILRScheduler", "type": "Type[parlai.nn.lr_scheduler.ParlAILRScheduler]"}, {"lineNumber": 53, "col_offset": 16, "nodeName": "Parameter", "type": "Any"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "SGD", "type": "Any"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "lr_scheduler_factory", "type": "Callable[..., Optional[Union[parlai.nn.lr_scheduler.CosineLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler]]]"}, {"lineNumber": 62, "col_offset": 16, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 62, "col_offset": 22, "nodeName": "optimizer2", "type": "Any"}, {"lineNumber": 62, "col_offset": 34, "nodeName": "sd", "type": "Dict[str, Any]"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "step", "type": "Callable[[Any], None]"}, {"lineNumber": 65, "col_offset": 27, "nodeName": "step", "type": "int"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "get_state_dict", "type": "Callable[[], Any]"}, {"lineNumber": 70, "col_offset": 33, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 71, "col_offset": 32, "nodeName": "get_warmup_state_dict", "type": "Callable[[], Any]"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "optim", "type": "Any"}, {"lineNumber": 73, "col_offset": 38, "nodeName": "p", "type": "Any"}, {"lineNumber": 73, "col_offset": 45, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "ParlAILRScheduler", "type": "Type[parlai.nn.lr_scheduler.ParlAILRScheduler]"}, {"lineNumber": 77, "col_offset": 15, "nodeName": "get_last_lr", "type": "Callable[[], Any]"}, {"lineNumber": 77, "col_offset": 42, "nodeName": "get_last_lr", "type": "Callable[[], Any]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 82, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "StopTrainException", "type": "Type[parlai.core.exceptions.StopTrainException]"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 88, "col_offset": 13, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 88, "col_offset": 31, "nodeName": "StopTrainException", "type": "Type[parlai.core.exceptions.StopTrainException]"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "_run_pass", "type": "Callable[..., Any]"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 93, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 96, "col_offset": 16, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 99, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 99, "col_offset": 32, "nodeName": "steps", "type": "List[Any]"}, {"lineNumber": 102, "col_offset": 16, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 108, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 109, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 112, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 116, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 117, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "testing_utils", "type": "module"}, {"lineNumber": 127, "col_offset": 32, "nodeName": "lr_scheduler", "type": "Any"}, {"lineNumber": 128, "col_offset": 32, "nodeName": "total_steps", "type": "Any"}, {"lineNumber": 129, "col_offset": 34, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 130, "col_offset": 32, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 139, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 143, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 18, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 18, "col_offset": 31, "nodeName": "torch", "type": "Any"}, {"lineNumber": 19, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 20, "col_offset": 20, "nodeName": "lr_scheduler", "type": "module"}, {"lineNumber": 25, "col_offset": 12, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 26, "col_offset": 12, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "get_last_lr", "type": "Callable[[], Any]"}, {"lineNumber": 29, "col_offset": 19, "nodeName": "o", "type": "Any"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "step", "type": "int"}, {"lineNumber": 32, "col_offset": 19, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 34, "col_offset": 55, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 36, "col_offset": 30, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 37, "col_offset": 16, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 46, "col_offset": 12, "nodeName": "torch", "type": "Any"}, {"lineNumber": 46, "col_offset": 31, "nodeName": "torch", "type": "Any"}, {"lineNumber": 47, "col_offset": 20, "nodeName": "torch", "type": "Any"}, {"lineNumber": 48, "col_offset": 20, "nodeName": "lr_scheduler", "type": "module"}, {"lineNumber": 53, "col_offset": 16, "nodeName": "nn", "type": "Any"}, {"lineNumber": 53, "col_offset": 35, "nodeName": "randn", "type": "Any"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "optim", "type": "Any"}, {"lineNumber": 54, "col_offset": 42, "nodeName": "p", "type": "Any"}, {"lineNumber": 54, "col_offset": 49, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 56, "col_offset": 43, "nodeName": "step", "type": "int"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "get_state_dict", "type": "Callable[[], Any]"}, {"lineNumber": 58, "col_offset": 37, "nodeName": "args", "type": "Dict[str, Any]"}, {"lineNumber": 59, "col_offset": 36, "nodeName": "get_warmup_state_dict", "type": "Callable[[], Any]"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "ParlAILRScheduler", "type": "Type[parlai.nn.lr_scheduler.ParlAILRScheduler]"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "get_last_lr", "type": "Callable[[], Any]"}, {"lineNumber": 64, "col_offset": 46, "nodeName": "get_last_lr", "type": "Callable[[], Any]"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 69, "col_offset": 28, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 71, "col_offset": 32, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 73, "col_offset": 21, "nodeName": "torch", "type": "Any"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "lr_scheduler", "type": "module"}, {"lineNumber": 77, "col_offset": 15, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 77, "col_offset": 42, "nodeName": "scheduler2", "type": "Optional[Union[parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler, parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler]]"}, {"lineNumber": 82, "col_offset": 13, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 82, "col_offset": 31, "nodeName": "lr_scheduler", "type": "module"}, {"lineNumber": 83, "col_offset": 12, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 88, "col_offset": 13, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 88, "col_offset": 31, "nodeName": "lr_scheduler", "type": "module"}, {"lineNumber": 89, "col_offset": 12, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 105, "col_offset": 19, "nodeName": "x", "type": "Any"}, {"lineNumber": 105, "col_offset": 31, "nodeName": "x", "type": "Any"}, {"lineNumber": 26, "col_offset": 26, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 29, "col_offset": 36, "nodeName": "total_steps", "type": "Any"}, {"lineNumber": 34, "col_offset": 45, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 37, "col_offset": 16, "nodeName": "self", "type": "TestLRSchedulers"}, {"lineNumber": 38, "col_offset": 53, "nodeName": "max_lr", "type": "Any"}, {"lineNumber": 38, "col_offset": 62, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 53, "col_offset": 16, "nodeName": "torch", "type": "Any"}, {"lineNumber": 53, "col_offset": 35, "nodeName": "torch", "type": "Any"}, {"lineNumber": 54, "col_offset": 25, "nodeName": "torch", "type": "Any"}, {"lineNumber": 57, "col_offset": 32, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 59, "col_offset": 36, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 61, "col_offset": 25, "nodeName": "lr_scheduler", "type": "module"}, {"lineNumber": 64, "col_offset": 19, "nodeName": "scheduler", "type": "Optional[Union[parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler, parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler]]"}, {"lineNumber": 64, "col_offset": 46, "nodeName": "scheduler2", "type": "Optional[Union[parlai.nn.lr_scheduler.InvSqrtLRScheduler, parlai.nn.lr_scheduler.LinearLRScheduler, parlai.nn.lr_scheduler.CosineLRScheduler, parlai.nn.lr_scheduler.ReduceOnPlateauLRScheduler, parlai.nn.lr_scheduler.FixedLRScheduler]]"}, {"lineNumber": 105, "col_offset": 36, "nodeName": "steps", "type": "List[Any]"}, {"lineNumber": 32, "col_offset": 26, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 34, "col_offset": 20, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 38, "col_offset": 20, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 38, "col_offset": 39, "nodeName": "output", "type": "List[Any]"}, {"lineNumber": 34, "col_offset": 27, "nodeName": "warmup_updates", "type": "Any"}, {"lineNumber": 38, "col_offset": 46, "nodeName": "step", "type": "int"}, {"lineNumber": 38, "col_offset": 27, "nodeName": "step", "type": "int"}]