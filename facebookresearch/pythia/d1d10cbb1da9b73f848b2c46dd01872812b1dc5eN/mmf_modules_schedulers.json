[{"lineNumber": 15, "col_offset": 22, "nodeName": "LambdaLR", "type": "Any"}, {"lineNumber": 29, "col_offset": 28, "nodeName": "LambdaLR", "type": "Any"}, {"lineNumber": 35, "col_offset": 28, "nodeName": "LambdaLR", "type": "Any"}, {"lineNumber": 41, "col_offset": 25, "nodeName": "PythiaScheduler", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "_lambda_func", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 19, "col_offset": 28, "nodeName": "lr_lambda_update", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "_global_config", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "use_warmup", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "lr_steps", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "lr_ratio", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "warmup_iterations", "type": "Union[Any, int]"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "warmup_factor", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 20, "col_offset": 30, "nodeName": "get", "type": "Callable"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 22, "col_offset": 36, "nodeName": "lr_lambda", "type": "Any"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "_lambda_func", "type": "Any"}, {"lineNumber": 25, "col_offset": 33, "nodeName": "step", "type": "Any"}, {"lineNumber": 25, "col_offset": 39, "nodeName": "_global_config", "type": "Any"}, {"lineNumber": 31, "col_offset": 15, "nodeName": "get_linear_schedule_with_warmup", "type": "Any"}, {"lineNumber": 31, "col_offset": 47, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 37, "col_offset": 15, "nodeName": "get_cosine_schedule_with_warmup", "type": "Any"}, {"lineNumber": 37, "col_offset": 47, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 43, "col_offset": 26, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 44, "col_offset": 24, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 45, "col_offset": 24, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 46, "col_offset": 64, "nodeName": "use_warmup", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "Any"}, {"lineNumber": 47, "col_offset": 29, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "warmup_iterations", "type": "Union[Any, int]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "__init__", "type": "Any"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "optimizer", "type": "Any"}, {"lineNumber": 53, "col_offset": 12, "nodeName": "alpha", "type": "float"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "lr_ratio", "type": "Any"}, {"lineNumber": 20, "col_offset": 30, "nodeName": "registry", "type": "mmf.common.registry.Registry"}, {"lineNumber": 22, "col_offset": 36, "nodeName": "self", "type": "Any"}, {"lineNumber": 22, "col_offset": 53, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 22, "col_offset": 61, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 25, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 25, "col_offset": 39, "nodeName": "self", "type": "Any"}, {"lineNumber": 31, "col_offset": 59, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 31, "col_offset": 67, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 37, "col_offset": 59, "nodeName": "args", "type": "Tuple[Any, ...]"}, {"lineNumber": 37, "col_offset": 67, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 46, "col_offset": 64, "nodeName": "self", "type": "Any"}, {"lineNumber": 46, "col_offset": 33, "nodeName": "kwargs", "type": "Dict[str, Any]"}, {"lineNumber": 48, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "lr_steps", "type": "Any"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "last_epoch", "type": "Any"}, {"lineNumber": 52, "col_offset": 30, "nodeName": "warmup_iterations", "type": "Any"}, {"lineNumber": 52, "col_offset": 57, "nodeName": "use_warmup", "type": "Any"}, {"lineNumber": 54, "col_offset": 60, "nodeName": "alpha", "type": "float"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 48, "col_offset": 40, "nodeName": "self", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "super", "type": "Type[super]"}, {"lineNumber": 52, "col_offset": 11, "nodeName": "self", "type": "Any"}, {"lineNumber": 52, "col_offset": 30, "nodeName": "self", "type": "Any"}, {"lineNumber": 52, "col_offset": 57, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 20, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 53, "col_offset": 26, "nodeName": "last_epoch", "type": "Any"}, {"lineNumber": 53, "col_offset": 45, "nodeName": "float", "type": "Type[float]"}, {"lineNumber": 53, "col_offset": 51, "nodeName": "warmup_iterations", "type": "Any"}, {"lineNumber": 54, "col_offset": 23, "nodeName": "warmup_factor", "type": "Any"}, {"lineNumber": 56, "col_offset": 20, "nodeName": "base_lr", "type": "Any"}, {"lineNumber": 56, "col_offset": 30, "nodeName": "lr_ratio", "type": "Any"}, {"lineNumber": 56, "col_offset": 43, "nodeName": "base_lr", "type": "Any"}, {"lineNumber": 56, "col_offset": 54, "nodeName": "base_lrs", "type": "Any"}, {"lineNumber": 60, "col_offset": 20, "nodeName": "base_lr", "type": "Any"}, {"lineNumber": 60, "col_offset": 31, "nodeName": "base_lrs", "type": "Any"}, {"lineNumber": 53, "col_offset": 26, "nodeName": "self", "type": "Any"}, {"lineNumber": 53, "col_offset": 51, "nodeName": "self", "type": "Any"}, {"lineNumber": 54, "col_offset": 23, "nodeName": "self", "type": "Any"}, {"lineNumber": 54, "col_offset": 51, "nodeName": "alpha", "type": "float"}, {"lineNumber": 56, "col_offset": 54, "nodeName": "self", "type": "Any"}, {"lineNumber": 60, "col_offset": 31, "nodeName": "self", "type": "Any"}]