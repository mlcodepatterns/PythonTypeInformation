[{"lineNumber": 11, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 13, "col_offset": 4, "nodeName": "construct_tree_1", "type": "Callable[[Any], Any]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "test_get_children_depth", "type": "Callable[[Any], Any]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "test_get_tree_depth", "type": "Callable[[Any], Any]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "test_get_children_include_self", "type": "Callable[[Any], Any]"}, {"lineNumber": 70, "col_offset": 4, "nodeName": "test_get_children_sorted", "type": "Callable[[Any], Any]"}, {"lineNumber": 95, "col_offset": 4, "nodeName": "sentence_2_syntax", "type": "Callable[[Any], Any]"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "sentence_2_morphology", "type": "Callable[[Any], Any]"}, {"lineNumber": 112, "col_offset": 4, "nodeName": "test_build_trees_from_sentence", "type": "Callable[[Any], Any]"}, {"lineNumber": 121, "col_offset": 4, "nodeName": "test_get_children_by_label", "type": "Callable[[Any], Any]"}, {"lineNumber": 139, "col_offset": 4, "nodeName": "test_get_children_by_label_regexp", "type": "Callable[[Any], Any]"}, {"lineNumber": 11, "col_offset": 25, "nodeName": "unittest", "type": "module"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "b1", "type": "Any"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "b2", "type": "Any"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "c1", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "c2", "type": "Any"}, {"lineNumber": 20, "col_offset": 8, "nodeName": "d1", "type": "Any"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "e1", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "f1", "type": "Any"}, {"lineNumber": 30, "col_offset": 15, "nodeName": "a", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "b1", "type": "Any"}, {"lineNumber": 57, "col_offset": 8, "nodeName": "b2", "type": "Any"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "b1", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "b2", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "c1", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "c2", "type": "Any"}, {"lineNumber": 77, "col_offset": 8, "nodeName": "d1", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "e1", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "f1", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 113, "col_offset": 8, "nodeName": "syntax", "type": "List[Dict[unicode, Union[int, List[List[Union[unicode, int]]]]]]"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "morhp", "type": "List[Dict[unicode, Union[int, unicode, List[Dict[unicode, Union[unicode, List[unicode]]]]]]]"}, {"lineNumber": 122, "col_offset": 8, "nodeName": "syntax", "type": "List[Dict[unicode, Union[int, List[List[Union[unicode, int]]]]]]"}, {"lineNumber": 123, "col_offset": 8, "nodeName": "morhp", "type": "List[Dict[unicode, Union[int, unicode, List[Dict[unicode, Union[unicode, List[unicode]]]]]]]"}, {"lineNumber": 126, "col_offset": 8, "nodeName": "root", "type": "Any"}, {"lineNumber": 129, "col_offset": 8, "nodeName": "results", "type": "Any"}, {"lineNumber": 131, "col_offset": 8, "nodeName": "subj", "type": "Any"}, {"lineNumber": 134, "col_offset": 8, "nodeName": "obj", "type": "Any"}, {"lineNumber": 140, "col_offset": 8, "nodeName": "syntax", "type": "List[Dict[unicode, Union[int, List[List[Union[unicode, int]]]]]]"}, {"lineNumber": 141, "col_offset": 8, "nodeName": "morhp", "type": "List[Dict[unicode, Union[int, unicode, List[Dict[unicode, Union[unicode, List[unicode]]]]]]]"}, {"lineNumber": 144, "col_offset": 8, "nodeName": "root", "type": "Any"}, {"lineNumber": 147, "col_offset": 8, "nodeName": "results", "type": "Any"}, {"lineNumber": 150, "col_offset": 8, "nodeName": "deprels", "type": "List[Any]"}, {"lineNumber": 15, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 16, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 17, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 18, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 19, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 20, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 21, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 22, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 23, "col_offset": 34, "nodeName": "b1", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 24, "col_offset": 34, "nodeName": "b2", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 25, "col_offset": 34, "nodeName": "c1", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 26, "col_offset": 34, "nodeName": "c2", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 27, "col_offset": 34, "nodeName": "d1", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 28, "col_offset": 34, "nodeName": "e1", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 29, "col_offset": 34, "nodeName": "f1", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "construct_tree_1", "type": "Callable[[], Any]"}, {"lineNumber": 37, "col_offset": 19, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 38, "col_offset": 52, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 41, "col_offset": 19, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 37, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 45, "col_offset": 19, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 43, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 49, "col_offset": 19, "nodeName": "sorted", "type": "Callable"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 50, "col_offset": 49, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "construct_tree_1", "type": "Callable[[], Any]"}, {"lineNumber": 56, "col_offset": 13, "nodeName": "children", "type": "Any"}, {"lineNumber": 57, "col_offset": 13, "nodeName": "children", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "construct_tree_1", "type": "Callable[[], Any]"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 67, "col_offset": 55, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 72, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 73, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 74, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 75, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 76, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 77, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 78, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 79, "col_offset": 13, "nodeName": "Tree", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 80, "col_offset": 34, "nodeName": "b2", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 81, "col_offset": 34, "nodeName": "b1", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 82, "col_offset": 34, "nodeName": "c2", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 83, "col_offset": 34, "nodeName": "c1", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 84, "col_offset": 34, "nodeName": "e1", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 85, "col_offset": 34, "nodeName": "d1", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "add_child_to_subtree", "type": "Any"}, {"lineNumber": 86, "col_offset": 34, "nodeName": "f1", "type": "Any"}, {"lineNumber": 88, "col_offset": 20, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 89, "col_offset": 52, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 91, "col_offset": 20, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 92, "col_offset": 52, "nodeName": "children", "type": "List[Any]"}, {"lineNumber": 113, "col_offset": 17, "nodeName": "sentence_2_syntax", "type": "Callable[[], Any]"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "sentence_2_morphology", "type": "Callable[[], Any]"}, {"lineNumber": 117, "col_offset": 12, "nodeName": "build_trees_from_sentence", "type": "Any"}, {"lineNumber": 117, "col_offset": 39, "nodeName": "morhp", "type": "List[Dict[unicode, Union[int, unicode, List[Dict[unicode, Union[unicode, List[unicode]]]]]]]"}, {"lineNumber": 117, "col_offset": 46, "nodeName": "syntax", "type": "List[Dict[unicode, Union[int, List[List[Union[unicode, int]]]]]]"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 122, "col_offset": 17, "nodeName": "sentence_2_syntax", "type": "Callable[[], Any]"}, {"lineNumber": 123, "col_offset": 17, "nodeName": "sentence_2_morphology", "type": "Callable[[], Any]"}, {"lineNumber": 125, "col_offset": 12, "nodeName": "build_trees_from_sentence", "type": "Any"}, {"lineNumber": 125, "col_offset": 39, "nodeName": "morhp", "type": "List[Dict[unicode, Union[int, unicode, List[Dict[unicode, Union[unicode, List[unicode]]]]]]]"}, {"lineNumber": 125, "col_offset": 46, "nodeName": "syntax", "type": "List[Dict[unicode, Union[int, List[List[Union[unicode, int]]]]]]"}, {"lineNumber": 126, "col_offset": 15, "nodeName": "trees", "type": "Any"}, {"lineNumber": 129, "col_offset": 18, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 131, "col_offset": 18, "nodeName": "results", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 132, "col_offset": 26, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 135, "col_offset": 26, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "assertDictEqual", "type": "Callable[..., None]"}, {"lineNumber": 136, "col_offset": 30, "nodeName": "syntax_token", "type": "Any"}, {"lineNumber": 140, "col_offset": 17, "nodeName": "sentence_2_syntax", "type": "Callable[[], Any]"}, {"lineNumber": 141, "col_offset": 17, "nodeName": "sentence_2_morphology", "type": "Callable[[], Any]"}, {"lineNumber": 143, "col_offset": 12, "nodeName": "build_trees_from_sentence", "type": "Any"}, {"lineNumber": 143, "col_offset": 39, "nodeName": "morhp", "type": "List[Dict[unicode, Union[int, unicode, List[Dict[unicode, Union[unicode, List[unicode]]]]]]]"}, {"lineNumber": 143, "col_offset": 46, "nodeName": "syntax", "type": "List[Dict[unicode, Union[int, List[List[Union[unicode, int]]]]]]"}, {"lineNumber": 144, "col_offset": 15, "nodeName": "trees", "type": "Any"}, {"lineNumber": 147, "col_offset": 18, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 151, "col_offset": 29, "nodeName": "deprels", "type": "List[Any]"}, {"lineNumber": 15, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 16, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 17, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 18, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 19, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 20, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 21, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 22, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 25, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 34, "col_offset": 12, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 37, "col_offset": 27, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 41, "col_offset": 27, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 45, "col_offset": 27, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "word_id", "type": "Any"}, {"lineNumber": 50, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 54, "col_offset": 12, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 56, "col_offset": 13, "nodeName": "a", "type": "Any"}, {"lineNumber": 57, "col_offset": 13, "nodeName": "a", "type": "Any"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 60, "col_offset": 28, "nodeName": "get_tree_depth", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "get_tree_depth", "type": "Any"}, {"lineNumber": 65, "col_offset": 12, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "c", "type": "Any"}, {"lineNumber": 66, "col_offset": 34, "nodeName": "c", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 72, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 73, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 74, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 75, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 76, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 77, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 78, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 79, "col_offset": 20, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 84, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 85, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "a", "type": "Any"}, {"lineNumber": 88, "col_offset": 20, "nodeName": "c", "type": "Any"}, {"lineNumber": 88, "col_offset": 34, "nodeName": "c", "type": "Any"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 91, "col_offset": 20, "nodeName": "c", "type": "Any"}, {"lineNumber": 91, "col_offset": 34, "nodeName": "c", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 113, "col_offset": 17, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 114, "col_offset": 17, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 117, "col_offset": 60, "nodeName": "LAYER_VISLCG3", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 118, "col_offset": 29, "nodeName": "trees", "type": "Any"}, {"lineNumber": 122, "col_offset": 17, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 123, "col_offset": 17, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 125, "col_offset": 60, "nodeName": "LAYER_VISLCG3", "type": "Any"}, {"lineNumber": 129, "col_offset": 18, "nodeName": "root", "type": "Any"}, {"lineNumber": 130, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 130, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 130, "col_offset": 29, "nodeName": "results", "type": "Any"}, {"lineNumber": 132, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 132, "col_offset": 26, "nodeName": "subj", "type": "Any"}, {"lineNumber": 134, "col_offset": 14, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 135, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 135, "col_offset": 26, "nodeName": "obj", "type": "Any"}, {"lineNumber": 136, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 136, "col_offset": 30, "nodeName": "obj", "type": "Any"}, {"lineNumber": 140, "col_offset": 17, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 141, "col_offset": 17, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 143, "col_offset": 60, "nodeName": "LAYER_VISLCG3", "type": "Any"}, {"lineNumber": 147, "col_offset": 18, "nodeName": "root", "type": "Any"}, {"lineNumber": 148, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 148, "col_offset": 25, "nodeName": "len", "type": "Callable[[Sized], int]"}, {"lineNumber": 148, "col_offset": 29, "nodeName": "results", "type": "Any"}, {"lineNumber": 150, "col_offset": 20, "nodeName": "labels", "type": "Any"}, {"lineNumber": 150, "col_offset": 36, "nodeName": "t", "type": "Any"}, {"lineNumber": 150, "col_offset": 41, "nodeName": "results", "type": "Any"}, {"lineNumber": 151, "col_offset": 8, "nodeName": "self", "type": "SyntacticTreesTest"}, {"lineNumber": 37, "col_offset": 27, "nodeName": "c", "type": "Any"}, {"lineNumber": 37, "col_offset": 41, "nodeName": "c", "type": "Any"}, {"lineNumber": 41, "col_offset": 27, "nodeName": "c", "type": "Any"}, {"lineNumber": 41, "col_offset": 41, "nodeName": "c", "type": "Any"}, {"lineNumber": 45, "col_offset": 27, "nodeName": "c", "type": "Any"}, {"lineNumber": 45, "col_offset": 41, "nodeName": "c", "type": "Any"}, {"lineNumber": 49, "col_offset": 27, "nodeName": "c", "type": "Any"}, {"lineNumber": 49, "col_offset": 41, "nodeName": "c", "type": "Any"}, {"lineNumber": 60, "col_offset": 28, "nodeName": "b1", "type": "Any"}, {"lineNumber": 61, "col_offset": 28, "nodeName": "b2", "type": "Any"}, {"lineNumber": 66, "col_offset": 39, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 88, "col_offset": 39, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 91, "col_offset": 39, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 134, "col_offset": 14, "nodeName": "root", "type": "Any"}, {"lineNumber": 150, "col_offset": 20, "nodeName": "t", "type": "Any"}, {"lineNumber": 37, "col_offset": 46, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 41, "col_offset": 46, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 45, "col_offset": 46, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 49, "col_offset": 46, "nodeName": "get_children", "type": "Any"}, {"lineNumber": 66, "col_offset": 39, "nodeName": "a", "type": "Any"}, {"lineNumber": 88, "col_offset": 39, "nodeName": "a", "type": "Any"}, {"lineNumber": 91, "col_offset": 39, "nodeName": "a", "type": "Any"}, {"lineNumber": 37, "col_offset": 46, "nodeName": "a", "type": "Any"}, {"lineNumber": 41, "col_offset": 46, "nodeName": "a", "type": "Any"}, {"lineNumber": 45, "col_offset": 46, "nodeName": "a", "type": "Any"}, {"lineNumber": 49, "col_offset": 46, "nodeName": "a", "type": "Any"}]