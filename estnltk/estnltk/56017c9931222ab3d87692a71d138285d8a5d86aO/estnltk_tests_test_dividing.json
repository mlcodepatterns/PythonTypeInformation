[{"lineNumber": 51, "col_offset": 0, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 8, "col_offset": 19, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 10, "col_offset": 4, "nodeName": "test_span_contains_span", "type": "Callable[[Any], Any]"}, {"lineNumber": 20, "col_offset": 4, "nodeName": "test_list_contains_span", "type": "Callable[[Any], Any]"}, {"lineNumber": 26, "col_offset": 4, "nodeName": "test_span_contains_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 33, "col_offset": 4, "nodeName": "test_list_contains_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 41, "col_offset": 4, "nodeName": "test_filter_containing", "type": "Callable[[Any], Any]"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 57, "col_offset": 4, "nodeName": "test_span_divide_span", "type": "Callable[[Any], Any]"}, {"lineNumber": 64, "col_offset": 4, "nodeName": "test_span_divide_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "test_list_divide_span", "type": "Callable[[Any], Any]"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "test_list_divide_span_translate", "type": "Callable[[Any], Any]"}, {"lineNumber": 85, "col_offset": 4, "nodeName": "test_list_divide_list", "type": "Callable[[Any], Any]"}, {"lineNumber": 8, "col_offset": 19, "nodeName": "unittest", "type": "module"}, {"lineNumber": 39, "col_offset": 17, "nodeName": "unittest", "type": "module"}, {"lineNumber": 55, "col_offset": 17, "nodeName": "unittest", "type": "module"}, {"lineNumber": 11, "col_offset": 8, "nodeName": "A", "type": "Tuple[int, int]"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "B", "type": "Tuple[int, int]"}, {"lineNumber": 13, "col_offset": 8, "nodeName": "C", "type": "Tuple[int, int]"}, {"lineNumber": 52, "col_offset": 21, "nodeName": "start", "type": "List[int]"}, {"lineNumber": 52, "col_offset": 35, "nodeName": "end", "type": "List[int]"}, {"lineNumber": 58, "col_offset": 8, "nodeName": "outer", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 59, "col_offset": 8, "nodeName": "inner", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 60, "col_offset": 8, "nodeName": "divs", "type": "Any"}, {"lineNumber": 61, "col_offset": 8, "nodeName": "expected", "type": "List[Union[List[Dict[unicode, int]], List[nothing]]]"}, {"lineNumber": 65, "col_offset": 8, "nodeName": "outer", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "inner", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "divs", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "expected", "type": "List[List[Dict[unicode, List[int]]]]"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "outer", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "inner", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "expected", "type": "List[List[Dict[unicode, int]]]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "divs", "type": "Any"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "outer", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "inner", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "expected", "type": "List[Union[List[Dict[unicode, int]], List[nothing]]]"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "divs", "type": "Any"}, {"lineNumber": 86, "col_offset": 8, "nodeName": "outer", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 87, "col_offset": 8, "nodeName": "inner", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "expected", "type": "List[List[Dict[unicode, List[int]]]]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "divs", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "assertTrue", "type": "Callable[..., None]"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "assertFalse", "type": "Callable[..., None]"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 60, "col_offset": 15, "nodeName": "divide", "type": "Any"}, {"lineNumber": 60, "col_offset": 22, "nodeName": "inner", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 60, "col_offset": 29, "nodeName": "outer", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 62, "col_offset": 29, "nodeName": "expected", "type": "List[Union[List[Dict[unicode, int]], List[nothing]]]"}, {"lineNumber": 62, "col_offset": 39, "nodeName": "divs", "type": "Any"}, {"lineNumber": 67, "col_offset": 15, "nodeName": "divide", "type": "Any"}, {"lineNumber": 67, "col_offset": 22, "nodeName": "inner", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 67, "col_offset": 29, "nodeName": "outer", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 69, "col_offset": 29, "nodeName": "expected", "type": "List[List[Dict[unicode, List[int]]]]"}, {"lineNumber": 69, "col_offset": 39, "nodeName": "divs", "type": "Any"}, {"lineNumber": 75, "col_offset": 15, "nodeName": "divide", "type": "Any"}, {"lineNumber": 75, "col_offset": 22, "nodeName": "inner", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 75, "col_offset": 29, "nodeName": "outer", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "expected", "type": "List[List[Dict[unicode, int]]]"}, {"lineNumber": 76, "col_offset": 39, "nodeName": "divs", "type": "Any"}, {"lineNumber": 82, "col_offset": 15, "nodeName": "divide", "type": "Any"}, {"lineNumber": 82, "col_offset": 22, "nodeName": "inner", "type": "List[Dict[unicode, int]]"}, {"lineNumber": 82, "col_offset": 29, "nodeName": "outer", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 83, "col_offset": 29, "nodeName": "expected", "type": "List[Union[List[Dict[unicode, int]], List[nothing]]]"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "divs", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "divide", "type": "Any"}, {"lineNumber": 89, "col_offset": 22, "nodeName": "inner", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 89, "col_offset": 29, "nodeName": "outer", "type": "List[Dict[unicode, List[int]]]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 90, "col_offset": 29, "nodeName": "expected", "type": "List[List[Dict[unicode, List[int]]]]"}, {"lineNumber": 90, "col_offset": 39, "nodeName": "divs", "type": "Any"}, {"lineNumber": 15, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 15, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 15, "col_offset": 33, "nodeName": "A", "type": "Tuple[int, int]"}, {"lineNumber": 15, "col_offset": 36, "nodeName": "B", "type": "Tuple[int, int]"}, {"lineNumber": 16, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 16, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 16, "col_offset": 33, "nodeName": "A", "type": "Tuple[int, int]"}, {"lineNumber": 16, "col_offset": 36, "nodeName": "C", "type": "Tuple[int, int]"}, {"lineNumber": 17, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 17, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 17, "col_offset": 34, "nodeName": "B", "type": "Tuple[int, int]"}, {"lineNumber": 17, "col_offset": 37, "nodeName": "A", "type": "Tuple[int, int]"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 18, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 18, "col_offset": 34, "nodeName": "C", "type": "Tuple[int, int]"}, {"lineNumber": 18, "col_offset": 37, "nodeName": "A", "type": "Tuple[int, int]"}, {"lineNumber": 21, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 21, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 22, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 24, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 27, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 28, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 28, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 29, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 30, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 30, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 31, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 31, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 34, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 34, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 35, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "contains", "type": "Any"}, {"lineNumber": 36, "col_offset": 8, "nodeName": "self", "type": "ContainsTest"}, {"lineNumber": 36, "col_offset": 25, "nodeName": "contains", "type": "Any"}, {"lineNumber": 42, "col_offset": 8, "nodeName": "self", "type": "FilterTest"}, {"lineNumber": 42, "col_offset": 25, "nodeName": "filter_containing", "type": "Any"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "self", "type": "FilterTest"}, {"lineNumber": 43, "col_offset": 25, "nodeName": "filter_containing", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "self", "type": "FilterTest"}, {"lineNumber": 44, "col_offset": 25, "nodeName": "filter_containing", "type": "Any"}, {"lineNumber": 45, "col_offset": 8, "nodeName": "self", "type": "FilterTest"}, {"lineNumber": 45, "col_offset": 25, "nodeName": "filter_containing", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "FilterTest"}, {"lineNumber": 46, "col_offset": 25, "nodeName": "filter_containing", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "FilterTest"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "filter_containing", "type": "Any"}, {"lineNumber": 58, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 58, "col_offset": 34, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 59, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 59, "col_offset": 33, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "DivideTest"}, {"lineNumber": 65, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 65, "col_offset": 34, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 66, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "self", "type": "DivideTest"}, {"lineNumber": 72, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 73, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 73, "col_offset": 34, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 73, "col_offset": 53, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "DivideTest"}, {"lineNumber": 79, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 79, "col_offset": 47, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 80, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 80, "col_offset": 33, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "self", "type": "DivideTest"}, {"lineNumber": 86, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 86, "col_offset": 47, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 87, "col_offset": 17, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 87, "col_offset": 48, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "self", "type": "DivideTest"}, {"lineNumber": 61, "col_offset": 21, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 68, "col_offset": 21, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 68, "col_offset": 43, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 74, "col_offset": 21, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 74, "col_offset": 38, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 81, "col_offset": 21, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 81, "col_offset": 37, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 88, "col_offset": 21, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 88, "col_offset": 44, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 88, "col_offset": 67, "nodeName": "element", "type": "Callable[[Any, Any], Any]"}]