[{"lineNumber": 14, "col_offset": 29, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 16, "col_offset": 4, "nodeName": "test_initialization", "type": "Callable[[Any], Any]"}, {"lineNumber": 25, "col_offset": 4, "nodeName": "test_initialization_fails", "type": "Callable[[Any], Any]"}, {"lineNumber": 31, "col_offset": 4, "nodeName": "text", "type": "Callable[[Any], Any]"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 37, "col_offset": 4, "nodeName": "test_split_by_sentences", "type": "Callable[[Any], Any]"}, {"lineNumber": 48, "col_offset": 4, "nodeName": "sentence", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 53, "col_offset": 4, "nodeName": "test_split_by_words", "type": "Callable[[Any], Any]"}, {"lineNumber": 65, "col_offset": 4, "nodeName": "word", "type": "Callable[[Any, Any], Any]"}, {"lineNumber": 71, "col_offset": 4, "nodeName": "test_split_by_regex", "type": "Callable[[Any], Any]"}, {"lineNumber": 78, "col_offset": 4, "nodeName": "test_split_by_regex_notcaps", "type": "Callable[[Any], Any]"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 88, "col_offset": 4, "nodeName": "test_divide", "type": "Callable[[Any], Any]"}, {"lineNumber": 93, "col_offset": 4, "nodeName": "test_modifying_reference", "type": "Callable[[Any], Any]"}, {"lineNumber": 99, "col_offset": 4, "nodeName": "text", "type": "Callable[[Any], Any]"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "divisions", "type": "Callable[[Any], Any]"}, {"lineNumber": 14, "col_offset": 29, "nodeName": "unittest", "type": "module"}, {"lineNumber": 26, "col_offset": 8, "nodeName": "create", "type": "Callable[[], Any]"}, {"lineNumber": 35, "col_offset": 24, "nodeName": "unittest", "type": "module"}, {"lineNumber": 86, "col_offset": 21, "nodeName": "unittest", "type": "module"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 38, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 41, "col_offset": 8, "nodeName": "sentences", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "t", "type": "Any"}, {"lineNumber": 51, "col_offset": 15, "nodeName": "t", "type": "Any"}, {"lineNumber": 54, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 56, "col_offset": 8, "nodeName": "words", "type": "Any"}, {"lineNumber": 66, "col_offset": 8, "nodeName": "word", "type": "Any"}, {"lineNumber": 69, "col_offset": 15, "nodeName": "word", "type": "Any"}, {"lineNumber": 72, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "regex", "type": "unicode"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "texts", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "expected", "type": "List[Any]"}, {"lineNumber": 79, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 80, "col_offset": 8, "nodeName": "regex", "type": "Any"}, {"lineNumber": 81, "col_offset": 8, "nodeName": "texts", "type": "Any"}, {"lineNumber": 82, "col_offset": 8, "nodeName": "expected", "type": "List[Any]"}, {"lineNumber": 89, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "text", "type": "Any"}, {"lineNumber": 90, "col_offset": 8, "nodeName": "divisions", "type": "Any"}, {"lineNumber": 94, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 94, "col_offset": 15, "nodeName": "text", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "divisions", "type": "Any"}, {"lineNumber": 105, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 106, "col_offset": 8, "nodeName": "words", "type": "Any"}, {"lineNumber": 106, "col_offset": 16, "nodeName": "words", "type": "Any"}, {"lineNumber": 18, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "assertDictEqual", "type": "Callable[..., None]"}, {"lineNumber": 19, "col_offset": 29, "nodeName": "text", "type": "Any"}, {"lineNumber": 22, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "assertDictEqual", "type": "Callable[..., None]"}, {"lineNumber": 23, "col_offset": 29, "nodeName": "text", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "assertRaises", "type": "Callable"}, {"lineNumber": 29, "col_offset": 26, "nodeName": "Exception", "type": "Type[Exception]"}, {"lineNumber": 29, "col_offset": 37, "nodeName": "create", "type": "Callable[[], Any]"}, {"lineNumber": 32, "col_offset": 16, "nodeName": "TEXT", "type": "Any"}, {"lineNumber": 38, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "compute_words", "type": "Any"}, {"lineNumber": 40, "col_offset": 12, "nodeName": "text", "type": "Any"}, {"lineNumber": 41, "col_offset": 20, "nodeName": "split_by_sentences", "type": "Any"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 46, "col_offset": 29, "nodeName": "expected", "type": "List[Any]"}, {"lineNumber": 46, "col_offset": 39, "nodeName": "sentences", "type": "Any"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "compute_words", "type": "Any"}, {"lineNumber": 50, "col_offset": 12, "nodeName": "t", "type": "Any"}, {"lineNumber": 54, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "compute_analysis", "type": "Any"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "split_by_words", "type": "Any"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 63, "col_offset": 29, "nodeName": "expected", "type": "List[Any]"}, {"lineNumber": 63, "col_offset": 39, "nodeName": "words", "type": "Any"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "compute_analysis", "type": "Any"}, {"lineNumber": 67, "col_offset": 8, "nodeName": "word", "type": "Any"}, {"lineNumber": 68, "col_offset": 8, "nodeName": "word", "type": "Any"}, {"lineNumber": 72, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "split_by_regex", "type": "Any"}, {"lineNumber": 74, "col_offset": 36, "nodeName": "regex", "type": "unicode"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 76, "col_offset": 29, "nodeName": "expected", "type": "List[Any]"}, {"lineNumber": 76, "col_offset": 39, "nodeName": "texts", "type": "Any"}, {"lineNumber": 79, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "compile", "type": "Any"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "split_by_regex", "type": "Any"}, {"lineNumber": 81, "col_offset": 36, "nodeName": "regex", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 83, "col_offset": 29, "nodeName": "expected", "type": "List[Any]"}, {"lineNumber": 83, "col_offset": 39, "nodeName": "texts", "type": "Any"}, {"lineNumber": 89, "col_offset": 15, "nodeName": "self", "type": "TextDivideTest"}, {"lineNumber": 90, "col_offset": 20, "nodeName": "divide", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "assertListEqual", "type": "Callable[..., None]"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "divisions", "type": "List[List[Any]]"}, {"lineNumber": 91, "col_offset": 45, "nodeName": "divisions", "type": "Any"}, {"lineNumber": 94, "col_offset": 15, "nodeName": "self", "type": "TextDivideTest"}, {"lineNumber": 95, "col_offset": 20, "nodeName": "divide", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 101, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "compute_words", "type": "Any"}, {"lineNumber": 106, "col_offset": 16, "nodeName": "text", "type": "Any"}, {"lineNumber": 18, "col_offset": 20, "nodeName": "text", "type": "Callable[[], Any]"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "self", "type": "TextInitializationTest"}, {"lineNumber": 19, "col_offset": 35, "nodeName": "text", "type": "Callable[[], Any]"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "self", "type": "TextInitializationTest"}, {"lineNumber": 23, "col_offset": 35, "nodeName": "text", "type": "Callable[[], Any]"}, {"lineNumber": 27, "col_offset": 12, "nodeName": "Text", "type": "Any"}, {"lineNumber": 29, "col_offset": 8, "nodeName": "self", "type": "TextInitializationTest"}, {"lineNumber": 39, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 40, "col_offset": 17, "nodeName": "PARAGRAPHS", "type": "Any"}, {"lineNumber": 41, "col_offset": 20, "nodeName": "text", "type": "Any"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "sentence", "type": "Callable[[Any], Any]"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "sentence", "type": "Callable[[Any], Any]"}, {"lineNumber": 46, "col_offset": 8, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 50, "col_offset": 14, "nodeName": "PARAGRAPHS", "type": "Any"}, {"lineNumber": 55, "col_offset": 8, "nodeName": "text", "type": "Any"}, {"lineNumber": 56, "col_offset": 16, "nodeName": "text", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "word", "type": "Callable[[Any], Any]"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "word", "type": "Callable[[Any], Any]"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "word", "type": "Callable[[Any], Any]"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "word", "type": "Callable[[Any], Any]"}, {"lineNumber": 63, "col_offset": 8, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 74, "col_offset": 16, "nodeName": "text", "type": "Any"}, {"lineNumber": 75, "col_offset": 20, "nodeName": "Text", "type": "Any"}, {"lineNumber": 75, "col_offset": 36, "nodeName": "Text", "type": "Any"}, {"lineNumber": 76, "col_offset": 8, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 80, "col_offset": 16, "nodeName": "re", "type": "Any"}, {"lineNumber": 81, "col_offset": 16, "nodeName": "text", "type": "Any"}, {"lineNumber": 82, "col_offset": 20, "nodeName": "Text", "type": "Any"}, {"lineNumber": 82, "col_offset": 34, "nodeName": "Text", "type": "Any"}, {"lineNumber": 83, "col_offset": 8, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 90, "col_offset": 20, "nodeName": "text", "type": "Any"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "self", "type": "TextDivideTest"}, {"lineNumber": 91, "col_offset": 29, "nodeName": "self", "type": "TextDivideTest"}, {"lineNumber": 95, "col_offset": 20, "nodeName": "text", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "self", "type": "TextDivideTest"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "text", "type": "Any"}, {"lineNumber": 18, "col_offset": 20, "nodeName": "self", "type": "TextInitializationTest"}, {"lineNumber": 19, "col_offset": 35, "nodeName": "self", "type": "TextInitializationTest"}, {"lineNumber": 23, "col_offset": 35, "nodeName": "self", "type": "TextInitializationTest"}, {"lineNumber": 43, "col_offset": 12, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 44, "col_offset": 12, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "compute_sentences", "type": "Any"}, {"lineNumber": 58, "col_offset": 12, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 59, "col_offset": 12, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 60, "col_offset": 12, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 61, "col_offset": 12, "nodeName": "self", "type": "TextSplittingTest"}, {"lineNumber": 66, "col_offset": 15, "nodeName": "Text", "type": "Any"}, {"lineNumber": 66, "col_offset": 20, "nodeName": "word", "type": "unicode"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "divisions", "type": "Any"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "words", "type": "Any"}, {"lineNumber": 105, "col_offset": 15, "nodeName": "self", "type": "Any"}, {"lineNumber": 108, "col_offset": 13, "nodeName": "words", "type": "Any"}, {"lineNumber": 108, "col_offset": 23, "nodeName": "words", "type": "Any"}, {"lineNumber": 108, "col_offset": 33, "nodeName": "words", "type": "Any"}, {"lineNumber": 109, "col_offset": 13, "nodeName": "words", "type": "Any"}, {"lineNumber": 109, "col_offset": 23, "nodeName": "words", "type": "Any"}, {"lineNumber": 109, "col_offset": 33, "nodeName": "words", "type": "Any"}, {"lineNumber": 110, "col_offset": 13, "nodeName": "words", "type": "Any"}, {"lineNumber": 110, "col_offset": 23, "nodeName": "words", "type": "Any"}, {"lineNumber": 110, "col_offset": 33, "nodeName": "words", "type": "Any"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "text", "type": "Any"}, {"lineNumber": 49, "col_offset": 12, "nodeName": "Text", "type": "Any"}, {"lineNumber": 49, "col_offset": 17, "nodeName": "text", "type": "Any"}]