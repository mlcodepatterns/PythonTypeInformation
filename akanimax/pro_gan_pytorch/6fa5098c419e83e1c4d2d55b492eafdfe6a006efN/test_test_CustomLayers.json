[{"lineNumber": 6, "col_offset": 0, "nodeName": "device", "type": "Any"}, {"lineNumber": 9, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 11, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 17, "col_offset": 4, "nodeName": "test_forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 29, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 34, "col_offset": 30, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 36, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 42, "col_offset": 4, "nodeName": "test_forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 54, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 59, "col_offset": 28, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 61, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 67, "col_offset": 4, "nodeName": "test_forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 80, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 85, "col_offset": 25, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 87, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 90, "col_offset": 4, "nodeName": "test_forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 103, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 108, "col_offset": 27, "nodeName": "TestCase", "type": "Type[unittest.TestCase]"}, {"lineNumber": 110, "col_offset": 4, "nodeName": "setUp", "type": "Callable[[Any], Any]"}, {"lineNumber": 113, "col_offset": 4, "nodeName": "test_forward", "type": "Callable[[Any], Any]"}, {"lineNumber": 122, "col_offset": 4, "nodeName": "tearDown", "type": "Callable[[Any], Any]"}, {"lineNumber": 6, "col_offset": 9, "nodeName": "device", "type": "Any"}, {"lineNumber": 6, "col_offset": 9, "nodeName": "th", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "conv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_conv2d"}, {"lineNumber": 18, "col_offset": 8, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 19, "col_offset": 8, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "deconv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_deconv2d"}, {"lineNumber": 43, "col_offset": 8, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 44, "col_offset": 8, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "lin_block", "type": "pro_gan_pytorch.CustomLayers._equalized_linear"}, {"lineNumber": 69, "col_offset": 8, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 70, "col_offset": 8, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "normalizer", "type": "pro_gan_pytorch.CustomLayers.PixelwiseNorm"}, {"lineNumber": 91, "col_offset": 8, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 92, "col_offset": 8, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "minStdD", "type": "pro_gan_pytorch.CustomLayers.MinibatchStdDev"}, {"lineNumber": 114, "col_offset": 8, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 115, "col_offset": 8, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 6, "col_offset": 29, "nodeName": "is_available", "type": "Any"}, {"lineNumber": 12, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 12, "col_offset": 26, "nodeName": "_equalized_conv2d", "type": "Type[pro_gan_pytorch.CustomLayers._equalized_conv2d]"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "to", "type": "Any"}, {"lineNumber": 18, "col_offset": 46, "nodeName": "device", "type": "Any"}, {"lineNumber": 19, "col_offset": 19, "nodeName": "conv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_conv2d"}, {"lineNumber": 19, "col_offset": 35, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 31, "col_offset": 12, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 37, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 37, "col_offset": 28, "nodeName": "_equalized_deconv2d", "type": "Type[pro_gan_pytorch.CustomLayers._equalized_deconv2d]"}, {"lineNumber": 43, "col_offset": 18, "nodeName": "to", "type": "Any"}, {"lineNumber": 43, "col_offset": 46, "nodeName": "device", "type": "Any"}, {"lineNumber": 44, "col_offset": 19, "nodeName": "deconv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_deconv2d"}, {"lineNumber": 44, "col_offset": 37, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 56, "col_offset": 12, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 62, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "_equalized_linear", "type": "Type[pro_gan_pytorch.CustomLayers._equalized_linear]"}, {"lineNumber": 69, "col_offset": 18, "nodeName": "to", "type": "Any"}, {"lineNumber": 69, "col_offset": 38, "nodeName": "device", "type": "Any"}, {"lineNumber": 70, "col_offset": 19, "nodeName": "lin_block", "type": "pro_gan_pytorch.CustomLayers._equalized_linear"}, {"lineNumber": 70, "col_offset": 34, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "assertAlmostEqual", "type": "Callable"}, {"lineNumber": 82, "col_offset": 12, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 88, "col_offset": 8, "nodeName": "self", "type": "Test_PixelwiseNorm"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "PixelwiseNorm", "type": "Type[pro_gan_pytorch.CustomLayers.PixelwiseNorm]"}, {"lineNumber": 91, "col_offset": 18, "nodeName": "to", "type": "Any"}, {"lineNumber": 91, "col_offset": 43, "nodeName": "device", "type": "Any"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "normalizer", "type": "pro_gan_pytorch.CustomLayers.PixelwiseNorm"}, {"lineNumber": 92, "col_offset": 35, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 95, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 95, "col_offset": 41, "nodeName": "shape", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 105, "col_offset": 12, "nodeName": "self", "type": "Test_PixelwiseNorm"}, {"lineNumber": 111, "col_offset": 8, "nodeName": "self", "type": "Test_MinibatchStdDev"}, {"lineNumber": 111, "col_offset": 23, "nodeName": "MinibatchStdDev", "type": "Type[pro_gan_pytorch.CustomLayers.MinibatchStdDev]"}, {"lineNumber": 114, "col_offset": 18, "nodeName": "to", "type": "Any"}, {"lineNumber": 114, "col_offset": 45, "nodeName": "device", "type": "Any"}, {"lineNumber": 115, "col_offset": 19, "nodeName": "minStdD", "type": "pro_gan_pytorch.CustomLayers.MinibatchStdDev"}, {"lineNumber": 115, "col_offset": 32, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "assertEqual", "type": "Callable[..., None]"}, {"lineNumber": 124, "col_offset": 12, "nodeName": "self", "type": "Test_MinibatchStdDev"}, {"lineNumber": 6, "col_offset": 29, "nodeName": "cuda", "type": "Any"}, {"lineNumber": 12, "col_offset": 26, "nodeName": "cL", "type": "module"}, {"lineNumber": 19, "col_offset": 19, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 22, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 22, "col_offset": 25, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 23, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 24, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 24, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 27, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "std", "type": "Any"}, {"lineNumber": 37, "col_offset": 28, "nodeName": "cL", "type": "module"}, {"lineNumber": 44, "col_offset": 19, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 47, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 47, "col_offset": 25, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 48, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 49, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 52, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 52, "col_offset": 31, "nodeName": "std", "type": "Any"}, {"lineNumber": 62, "col_offset": 25, "nodeName": "cL", "type": "module"}, {"lineNumber": 70, "col_offset": 19, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 73, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 73, "col_offset": 25, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 74, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 75, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 78, "col_offset": 8, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "std", "type": "Any"}, {"lineNumber": 88, "col_offset": 26, "nodeName": "cL", "type": "module"}, {"lineNumber": 92, "col_offset": 19, "nodeName": "self", "type": "Test_PixelwiseNorm"}, {"lineNumber": 95, "col_offset": 8, "nodeName": "self", "type": "Test_PixelwiseNorm"}, {"lineNumber": 95, "col_offset": 25, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 95, "col_offset": 41, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 96, "col_offset": 8, "nodeName": "self", "type": "Test_PixelwiseNorm"}, {"lineNumber": 96, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 97, "col_offset": 8, "nodeName": "self", "type": "Test_PixelwiseNorm"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 111, "col_offset": 23, "nodeName": "cL", "type": "module"}, {"lineNumber": 115, "col_offset": 19, "nodeName": "self", "type": "Test_MinibatchStdDev"}, {"lineNumber": 118, "col_offset": 8, "nodeName": "self", "type": "Test_MinibatchStdDev"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "shape", "type": "Any"}, {"lineNumber": 119, "col_offset": 8, "nodeName": "self", "type": "Test_MinibatchStdDev"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 120, "col_offset": 8, "nodeName": "self", "type": "Test_MinibatchStdDev"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "item", "type": "Any"}, {"lineNumber": 6, "col_offset": 29, "nodeName": "th", "type": "Any"}, {"lineNumber": 15, "col_offset": 46, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 15, "col_offset": 50, "nodeName": "conv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_conv2d"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "randn", "type": "Any"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "data", "type": "Any"}, {"lineNumber": 40, "col_offset": 46, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 40, "col_offset": 50, "nodeName": "deconv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_deconv2d"}, {"lineNumber": 43, "col_offset": 18, "nodeName": "randn", "type": "Any"}, {"lineNumber": 52, "col_offset": 31, "nodeName": "data", "type": "Any"}, {"lineNumber": 65, "col_offset": 48, "nodeName": "str", "type": "Type[str]"}, {"lineNumber": 65, "col_offset": 52, "nodeName": "lin_block", "type": "pro_gan_pytorch.CustomLayers._equalized_linear"}, {"lineNumber": 69, "col_offset": 18, "nodeName": "randn", "type": "Any"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "data", "type": "Any"}, {"lineNumber": 91, "col_offset": 18, "nodeName": "randn", "type": "Any"}, {"lineNumber": 114, "col_offset": 18, "nodeName": "randn", "type": "Any"}, {"lineNumber": 118, "col_offset": 25, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 118, "col_offset": 44, "nodeName": "shape", "type": "Any"}, {"lineNumber": 15, "col_offset": 50, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 18, "col_offset": 18, "nodeName": "th", "type": "Any"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 24, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "weight", "type": "Any"}, {"lineNumber": 40, "col_offset": 50, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 43, "col_offset": 18, "nodeName": "th", "type": "Any"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 52, "col_offset": 31, "nodeName": "weight", "type": "Any"}, {"lineNumber": 65, "col_offset": 52, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 69, "col_offset": 18, "nodeName": "th", "type": "Any"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "weight", "type": "Any"}, {"lineNumber": 91, "col_offset": 18, "nodeName": "th", "type": "Any"}, {"lineNumber": 96, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 114, "col_offset": 18, "nodeName": "th", "type": "Any"}, {"lineNumber": 118, "col_offset": 44, "nodeName": "mock_in", "type": "Any"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "sum", "type": "Any"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "conv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_conv2d"}, {"lineNumber": 52, "col_offset": 31, "nodeName": "deconv_block", "type": "pro_gan_pytorch.CustomLayers._equalized_deconv2d"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "lin_block", "type": "pro_gan_pytorch.CustomLayers._equalized_linear"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "isnan", "type": "Any"}, {"lineNumber": 23, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 24, "col_offset": 25, "nodeName": "isinf", "type": "Any"}, {"lineNumber": 24, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 27, "col_offset": 31, "nodeName": "self", "type": "Test_equalized_conv2d"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "isnan", "type": "Any"}, {"lineNumber": 48, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "isinf", "type": "Any"}, {"lineNumber": 49, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 52, "col_offset": 31, "nodeName": "self", "type": "Test_equalized_deconv2d"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "isnan", "type": "Any"}, {"lineNumber": 74, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "isinf", "type": "Any"}, {"lineNumber": 75, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 78, "col_offset": 31, "nodeName": "self", "type": "Test_equalized_linear"}, {"lineNumber": 96, "col_offset": 25, "nodeName": "isnan", "type": "Any"}, {"lineNumber": 96, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "isinf", "type": "Any"}, {"lineNumber": 97, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "isnan", "type": "Any"}, {"lineNumber": 119, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "isinf", "type": "Any"}, {"lineNumber": 120, "col_offset": 34, "nodeName": "mock_out", "type": "Any"}, {"lineNumber": 23, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 24, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 48, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 49, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 74, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 75, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 96, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 97, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 119, "col_offset": 25, "nodeName": "th", "type": "Any"}, {"lineNumber": 120, "col_offset": 25, "nodeName": "th", "type": "Any"}]